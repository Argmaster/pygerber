{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#pygerber","title":"PyGerber","text":""},{"location":"index.html#overview","title":"\ud83d\udcd6 Overview","text":"<p>PyGerber is a collection of tools aimed at simplifying the use of the Gerber X3 format. It is based on Ucamco's <code>The Gerber Layer Format Specification. Revision 2024.05</code> (Available on Ucamco's webpage.</p> <p>PyGerber can be used both as a executable with use of its command line interface and as a Python library.</p> <p>PyGerber supports modern solutions available in the latest version of the standard (2024.05). At the same time, it includes the implementation of most outdated and selected removed functionalities. This allows it to be used not only with files compliant with the X3 standard but also with those compliant with X2, RS-274X, and RS-274D. Due to limited access to files in older standards and ambiguities within them, there is a risk that some older functionalities may behave incorrectly.</p> <p>If you have found a bug in the PyGerber library, please report it in the Issues section of our project's repository. We will be glad to examine your report and possibly fix the problem.</p> <p>If you have any questions or suggestions, please open a new discussion thread in the Discussions section of our repository. We will be happy to help you and discuss your ideas.</p>"},{"location":"index.html#installation","title":"\ud83d\udce6 Installation","text":"<p>PyGerber can be installed with <code>pip</code> from PyPI:</p> <pre><code>pip install pygerber\n</code></pre> <p>This way only the core of PyGerber features will be installed. It will not include language server, SVG rendering support and other optional features. If you want to install all available features, include <code>all</code> extras set in installation request, like this:</p> <pre><code>pip install pygerber[all]\n</code></pre> <p>Alternatively, it is also possible to install it directly from repository:</p> <pre><code>pip install git+https://github.com/Argmaster/pygerber\n</code></pre>"},{"location":"index.html#documentation","title":"\ud83d\udcda Documentation","text":"<p>PyGerber has a online documentation hosted on Github Pages. It will be a great starting point for your journey with PyGerber. You can find documentation here here. If you are looking for documentation of older version of PyGerber, please use version selector dropdown available next to the title in top bar menu.</p>"},{"location":"index.html#license","title":"\ud83d\udcdc License","text":"<p>PyGerber is licensed under MIT license. You can find full text of the license in the LICENSE file in the root directory of the repository.</p>"},{"location":"index.html#tools","title":"\ud83d\udee0 Tools","text":"<p>Collection of tool available in PyGerber constantly grows. Most of the tools can be accessed both with command line and as a Python API. Below you can find list of all currently available ones:</p> <ul> <li>Image generator (PNG/JPEG)</li> <li>Code formatter</li> <li>Language server   (Visual Studio Code extension available)</li> </ul>"},{"location":"index.html#pygerber-apis","title":"\ud83d\uddae PyGerber APIs","text":"<p>PyGerber provides APIs for accessing most of its functionalities. There are selected modules designed to be used as libraries, they reexport public parts of implementation in a convenient way. Avoid importing stuff from modules not listed below and not mentioned in documentation, as this may inflict suffering and damnation upon you \ud83d\udc80 (Just joking, but they may get deleted/moved at any time, so you know \ud83d\ude3c).</p> <p>Below you can find list of available APIs:</p> <ul> <li><code>pygerber.gerberx3.api</code></li> <li><code>pygerber.gerberx3.ast</code></li> <li><code>pygerber.gerberx3.ast.nodes</code></li> <li><code>pygerber.gerberx3.compiler</code></li> <li><code>pygerber.gerberx3.parser</code></li> <li><code>pygerber.gerberx3.formatter</code></li> <li><code>pygerber.vm</code></li> <li><code>pygerber.vm.commands</code></li> <li><code>pygerber.vm.pillow</code></li> <li><code>pygerber.vm.types</code></li> </ul> <p>If you need something that is not reexported from those modules, eg. some exception class you need to catch, please open an Issue so we can evaluate that issue and possibly add missing reexport.</p>"},{"location":"index.html#pygerber-cli","title":"\ud83d\udcbb PyGerber CLI","text":"<p>PyGerber provides non-interactive command line interface which provides means to access some of its features. <code>pygerber</code> command is available after installation and can be used to access tools with use of subcommands.</p> <p>To check version of PyGerber available in your environment, you can use:</p> <pre><code>pygerber --version\n</code></pre> <p>To access PyGerbers image rendering feature, you can use <code>render</code> subcommand. Assuming that your Gerber file is named <code>source.gbr</code> and you want to render a PNG image of it, you can use following command:</p> <pre><code>pygerber render raster source.gbr -o output.png\n</code></pre> <p>This will create <code>output.png</code> file in current working directory. Depending on your image size you may need to adjust <code>--dpmm</code> parameter to raise or lower the resolution of image.</p> <p></p> <p>PyGerber has also a lot more options related to rendering available. For extensible guide on how to use PyGerber CLI, please refer to documentation.</p>"},{"location":"index.html#language-server","title":"\u00a7 Language Server","text":"<p>PyGerber provides Gerber X3/X2 Language Server conforming to Language Servere Protocol defined by Microsoft. It can be enabled by installing PyGerber extras set <code>language-server</code> with following command:</p> <pre><code>pip install pygerber[language-server]\n</code></pre> <p>Afterwards you can use following command to check if PyGerber correctly recognized that language server feature should be enabled:</p> <pre><code>pygerber is-language-server-available\n</code></pre> <p>If you have encountered a problem with language server please report it in the Issues section of Github repository of this project.</p> <p>If you have a suggestion for improvement, please open a new discussion thread in the Discussions section of our repository.</p> <p>To fully utilize power of this language server you can use Visual Studio Code extension Gerber X3/X2 Format Support (<code>argmaster.gerber-x3-x2-format-support</code>). Repository of this extension is available here. If you encounter any problems with that extension, please report them in the Issues section of its repository. If you are not sure whether the problem is caused by extension or by language server, please report it in the Issues section of the extension, we will move it to PyGerber repository if necessary.</p>"},{"location":"index.html#development","title":"Development","text":"<p>For development guidelines please visit documentation <code>Development</code> section here.</p>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<p>I would like to thank Professor Janusz M\u0142odzianowski from the University of Gda\u0144sk, who inspired me with the idea to implement the Gerber format at the beginning of my bachelor's degree. I would like to also express my gratitude to Karel Tavernier, the long-time steward of the Gerber format, for his support and expert guidance during my work on this project. Without them, this project would have never come to life. Finally, I would like to thank all the people who have contributed, are contributing and will contribute to PyGerber. Your help is invaluable and I am grateful for it.</p>"},{"location":"Changelog.html","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning 2.0.0.</p>"},{"location":"Changelog.html#release-300a1","title":"Release 3.0.0a1","text":"<ul> <li>Added <code>pygerber.gerberx3.formatter</code> for formatting Gerber files.</li> <li>Added <code>GerberX3Builder</code> class for building Gerber code from scratch.</li> <li>Redesigned PyGerber Parser implementation and AST classes.</li> <li>Added intermediate step between parsing and rendering done by   <code>pygerber.gerberx3.compiler</code>.</li> <li>Redesigned rendering principles, now implemented in <code>pygerber.vm</code>, supports only   rendering raster images with Pillow. SVG rendering is planned to be included in 3.0.0   release.</li> <li>Ported language server to new parser.</li> </ul>"},{"location":"Changelog.html#release-241","title":"Release 2.4.1","text":"<ul> <li>Added support for comment based attributes (#217)</li> <li>Fixed incorrect rotation of rectangle flashes (#243)</li> <li>Removed PyYAML dependency (#221)</li> <li>Added tests for language server (#227)</li> <li>Added tests for console interface (#223)</li> </ul>"},{"location":"Changelog.html#release-240","title":"Release 2.4.0","text":"<ul> <li>Added command line interface utilizing API V2 for rendering Gerber files to images.   This includes interface for rendering PNG, JPEG and SVG images and multi-file projects   to single PNG/JPEG image.</li> <li>Added support for inferring file type from file extension or <code>.FileFunction</code> file   attribute. This mechanism is used by default by API V2 based command line interface.</li> <li>Refactored test suite and dropped testing of code related to <code>Parser</code> class originally   included in <code>PyGerber</code> 2.0.0. Currently only <code>Parser2</code> related code is actively   tested.</li> </ul>"},{"location":"Changelog.html#release-232","title":"Release 2.3.2","text":"<ul> <li>Fixed clockwise arc rendering in raster renderer. Reported by @tgbl-mk (#203). Fixed   by @Argmaster in #205.</li> <li>Fixed empty comment parsing. Reported by @lookme2 (#198). Fixed by @Argmaster in #201.</li> <li>Disabled MacOS test suite due to consistent failures during Python installation on   <code>macos-latest</code> GitHub hosted machines.</li> </ul>"},{"location":"Changelog.html#release-231","title":"Release 2.3.1","text":"<ul> <li>Added support for rotation of code 21 center line macro primitive in SVG and Raster   renderers. Support is not exhaustive, it will be extended whenever extension is   requested by users.</li> <li>Fixed bug causing macro flashes to be partially cut off in images rendered with SVG   renderer.</li> <li>Fixed incorrect version string in <code>pygerber.__version__</code> and reported by   <code>pygerber --version</code>.</li> </ul>"},{"location":"Changelog.html#release-230","title":"Release 2.3.0","text":"<ul> <li>Added full support for transforms (LP, LM, LR, LS commands) in Parser2.</li> <li>Fixed titles in Parser2 and Parser feature support documentation. They were swapped.</li> <li>Fixed bug causing SvgRenderer2 to incorrectly render masks in some cases.</li> <li>Optimized SvgRenderer2 group and mask usage to reduce file size and memory usage of   software displaying output SVGs.</li> <li>Fixed parsing of attributes without value.</li> <li>Updated documentation to mention deprecation of API V1 elements and changed order of   pages to better expose API V2.</li> <li>Added example files shipped with PyGerber for testing and demonstration purposes. They   can be accessed via <code>pygerber.examples</code> module.</li> <li>Added new <code>pygerber.gerberx3.api.v2</code> module with new high level utilizing API V2   capabilities. This module is mend to replace API V1 in future releases.</li> <li>Added new API for rendering multiple Gerber files at once into single image. Available   as part of <code>pygerber.gerberx3.api.v2</code> module with use of <code>Project</code> class.</li> </ul>"},{"location":"Changelog.html#release-221","title":"Release 2.2.1","text":"<ul> <li>Fixed rendering of first macro flash.</li> <li>Added reference page for SvgRenderer2 in docs.</li> <li>Fixed duplicated element prefixes in docs.</li> <li>Fixed supported feature counts in docs.</li> <li>Updated <code>README.md</code> feature support links.</li> </ul>"},{"location":"Changelog.html#release-220","title":"Release 2.2.0","text":"<ul> <li>Added alternative parser implementation, <code>pygerber.gerberx3.parser2.parser2.Parser2</code>   class.</li> <li>Added introspection interface based on new Parser2 class.</li> <li>Added macro support to Parser2 class which was not previously available in Parser   class.</li> <li>Added API for customizing Token classes used by Tokenizer. <code>Tokenizer</code> class now   accepts optional <code>options</code> parameter of class <code>TokenizerOptions</code>.</li> <li>Added documentation for introspection.</li> <li>Added experimental SVG backend for Gerber code with Parser2 generated command buffers.</li> <li>Changed documentation layout to improve readability.</li> <li>Fixed switching to single quadrant mode being ignored.</li> <li>Refactored feature support documentation.</li> </ul>"},{"location":"Changelog.html#release-211","title":"Release 2.1.1","text":"<ul> <li>Fixed incorrect bounding box prediction for displaced drawings (#105).</li> <li>Added 3.12 as supported in package tags.</li> <li>Fixed documentation links in <code>README.md</code> and <code>pyproject.toml</code>.</li> </ul>"},{"location":"Changelog.html#release-210","title":"Release 2.1.0","text":"<ul> <li>Fixed #37</li> <li>Added latest Gerber spec file revision 2023.08 to documentation.</li> <li>Added command line interface for PyGerber 2D rendering.</li> <li>Added Gerber X3/X2 language server which can be acquired with   <code>pip install pygerber[language-server]</code>. Currently server capabilities include hover   messages with Gerber reference cited and minimal amount of suggestions. We are   planning to further extend this server in future releases.</li> <li>Added <code>is-language-server-available</code> CLI command for checking if   <code>pygerber[language-sever]</code> is available.</li> <li>Added support for arc region boundaries (#61).</li> <li>Added warning messages whenever zero surface flash is created.</li> <li>Improved documentation for many of supported Gerber commands. This documentation is   used by language server to provide specification reference.</li> <li>Refactored tokenizer implementation, as a result #67 was fixed and #64 is no longer an   issue in some cases.</li> </ul>"},{"location":"Changelog.html#release-202","title":"Release 2.0.2","text":"<ul> <li>Fixed incorrect bounding box prediction for displaced drawings (#105).</li> <li>Added 3.12 as supported in package tags.</li> <li>Fixed documentation links in <code>README.md</code> and <code>pyproject.toml</code>.</li> </ul>"},{"location":"Changelog.html#release-201","title":"Release 2.0.1","text":"<ul> <li>Fixed names of Gerber specification files (<code>.pdf.pdf</code> extension replaced with <code>.pdf</code>)</li> <li>Added <code>draw_region_outlines</code> option (disabled by default) which controls whether lines   which make up a region boundary should be drawn after region is filled. KiCAD seem to   assume that those boundaries are not drawn and region outline is 1px instead of   thickness of aperture.</li> <li>Changed <code>Decimal</code> precision to 60 decimal places.</li> <li>Changed precision of <code>INCH_TO_MM_MULTIPLIER</code> (now its 25.4) and   <code>MM_TO_INCH_MULTIPLIER</code> (dynamically calculated with <code>Decimal</code>).</li> <li>Changed circle aperture to make result better match expectations and <code>KiCAD</code>   reference.</li> <li>Fixed warning message logged every time a valid region was created to show up only   when region is not valid.</li> <li>Added warnings for zero surface aperture draws.</li> </ul>"},{"location":"Changelog.html#release-200","title":"Release 2.0.0","text":"<ul> <li> <p>Added Gerber X3 format tokenizer with support for selective feature support:</p> </li> <li> <p>Supported Gerber X3 features: <code>G04</code>, <code>MO</code>, <code>FS</code>, <code>AD</code>, <code>AM</code>, <code>Dnn</code> (nn\u226510), <code>D01</code>,     <code>D02</code>, <code>D03</code>, <code>G01</code>, <code>G02</code>, <code>G03</code>, <code>G75</code>, <code>LP</code>, <code>LM</code>, <code>LR</code>, <code>LS</code>, <code>G36</code>, <code>G37</code>,     <code>AB</code>, <code>SR</code>, <code>TF</code>, <code>TA</code>, <code>TO</code>,<code>TD</code>, <code>M02</code>.</p> </li> <li> <p>Supported DEPRECATED Gerber features: <code>G54</code>, <code>G70</code>, <code>G71</code>, <code>G90</code>, <code>G91</code>, <code>G74</code>,     <code>M00</code>, <code>M01</code>, <code>IP</code>, <code>LN</code>,     <code>Combining G01/G02/G03 and D01/D02/D03 in a single command</code>,     <code>Coordinate Data without Operation Code</code>, <code>Style Variations in Command Codes</code>, <code>FS</code>,     <code>Draws and Arcs with Rectangular Apertures</code>.</p> </li> </ul> <p>For more detailed descriptions of supported features please refer to documentation or   README.md.</p> <ul> <li> <p>Added Gerber X3 format parser with support for selective feature support:</p> </li> <li> <p>Supported Gerber X3 features: <code>G04</code>, <code>MO</code>, <code>FS</code>, <code>AD</code>, <code>AM</code>, <code>Dnn</code> (nn\u226510), <code>D01</code>,     <code>D02</code>, <code>D03</code>, <code>G01</code>, <code>G02</code>, <code>G03</code>, <code>G75</code>, <code>LP</code>, <code>LM</code>, <code>LR</code>, <code>LS</code>, <code>G36</code>, <code>G37</code>,     <code>M02</code>.</p> </li> <li> <p>Supported DEPRECATED Gerber features: <code>G54</code>, <code>G70</code>, <code>G71</code>, <code>G90</code>, <code>G91</code>, <code>G74</code>,     <code>M00</code>, <code>M01</code>, <code>IP</code>, <code>LN</code>, <code>Combining G01/G02/G03 and D01 in a single command</code>,     <code>Coordinate Data without Operation Code</code>, <code>Style Variations in Command Codes</code>,     <code>Draws and Arcs with Rectangular Apertures</code>.</p> </li> </ul> <p>For more detailed descriptions of supported features please refer to documentation or   README.md.</p> <ul> <li>Added rendering backend capable of producing 2D rasterized images based on parser   instructions. Supported drawing elements:</li> <li>Aperture definition with circle</li> <li>Aperture definition with rectangle</li> <li>Aperture definition with obround</li> <li>Aperture definition with polygon</li> <li>Draw flash with circle aperture</li> <li>Draw flash with rectangle aperture</li> <li>Draw flash with obround aperture</li> <li>Draw flash with polygon aperture</li> <li>Draw line</li> <li>Draw clockwise arc</li> <li>Draw counterclockwise arc</li> </ul>"},{"location":"LICENSE.html","title":"License","text":"<p>Copyright 2023 Krzysztof Wi\u015bniewski</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"70_gerber/00_api_v2_usage.html","title":"API Usage","text":""},{"location":"70_gerber/00_api_v2_usage.html#hight-level-api","title":"Hight Level API","text":""},{"location":"70_gerber/00_api_v2_usage.html#jpg","title":"JPG","text":"<p>PyGerber can be used programmatically to render Gerber files. Below is an minimalistic example of how to render one of the example files included with PyGerber release to JPEG image:</p> <pre><code>from pygerber.examples import ExamplesEnum, get_example_path\nfrom pygerber.gerberx3.api.v2 import GerberFile\n\nGerberFile.from_file(\n    get_example_path(ExamplesEnum.UCAMCO_ex_2_Shapes),\n).parse().render_raster(\"output.jpg\")\n</code></pre> <p>Running code above will create <code>output.jpg</code> file in current working directory which should look like this:</p> <p> </p>"},{"location":"70_gerber/00_api_v2_usage.html#png","title":"PNG","text":"<p>It is also possible to render Gerber files to PNG with custom resolution and different color schemes:</p> <pre><code>from pygerber.examples import ExamplesEnum, get_example_path\nfrom pygerber.gerberx3.api.v2 import ColorScheme, GerberFile, PixelFormatEnum\n\nGerberFile.from_file(\n    get_example_path(ExamplesEnum.ShapeFlashes),\n).parse().render_raster(\n    \"output.png\",\n    dpmm=100,\n    color_scheme=ColorScheme.COPPER_ALPHA,\n    pixel_format=PixelFormatEnum.RGBA,\n)\n</code></pre> <p>Code above renders following image:</p> <p> </p>"},{"location":"70_gerber/00_api_v2_usage.html#svg","title":"SVG","text":"<p>Finally you can also create SVG files with PyGerber:</p> <pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerberx3.api.v2 import GerberFile\n\nsource_code = load_example(ExamplesEnum.UCAMCO_ex_2_Shapes)\nGerberFile.from_str(source_code).parse().render_svg(\"output.svg\")\n</code></pre>"},{"location":"70_gerber/00_api_v2_usage.html#multiple-layers","title":"Multiple layers","text":"<p>PyGerber can also render multiple layers to single image. Below is an example of how to render four layers to single PNG image with use of <code>Project</code> class:</p> <pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerberx3.api.v2 import FileTypeEnum, GerberFile, Project\n\nProject(\n    [\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Cu),\n            FileTypeEnum.COPPER,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Mask),\n            FileTypeEnum.MASK,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Paste),\n            FileTypeEnum.PASTE,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Silkscreen),\n            FileTypeEnum.SILK,\n        ),\n    ],\n).parse().render_raster(\"output.png\", dpmm=40)\n</code></pre> <p>Here is the result:</p> <p> </p> <p>More detailed descriptions of interfaces can be found in API Reference page.</p>"},{"location":"70_gerber/00_api_v2_usage.html#rendering-with-inferred-color-scheme","title":"Rendering with inferred color scheme","text":"<p>PyGerber can infer file type from file extension or <code>.FileFunction</code> file attribute. Below is an simple example of how to render a file with inferred color scheme:</p> <pre><code>from pygerber.gerberx3.api.v2 import GerberFile, DEFAULT_COLOR_MAP, FileTypeEnum\n\nparsed_file = GerberFile.from_file(\n    \"test/assets/gerberx3/ATMEGA328-Motor-Board/ATMEGA328_Motor_Board-F.SilkS.gto\",\n    file_type=FileTypeEnum.INFER_FROM_EXTENSION\n).parse()\n\ncolor_scheme = DEFAULT_COLOR_MAP[parsed_file.get_file_type()]\nparsed_file.render_raster(\"main.png\", color_scheme=color_scheme)\n</code></pre> <p>Analogically, you can use <code>FileTypeEnum.INFER_FROM_ATTRIBUTES</code> to infer file type from <code>.FileFunction</code> attribute.</p> <p>Important</p> <p><code>FileTypeEnum.INFER_FROM_EXTENSION</code> works only with <code>GerberFile.from_file()</code>. While using <code>GerberFile.from_str()</code> and <code>GerberFile.from_buffer()</code> no inference will be done resulting in <code>FileTypeEnum.UNDEFINED</code> file type.</p> <p>If you want to automatically fall back from file extension inference to attribute based inference, you can use <code>FileTypeEnum.INFER</code> file type. In such case if file extension inference results in <code>FileTypeEnum.UNDEFINED</code>, PyGerber will try to infer file type from <code>.FileFunction</code> attribute.</p>"},{"location":"70_gerber/01_api_v2_reference.html","title":"API Reference","text":""},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2","title":"v2","text":"<p>PyGerber hight level rendering API version 2.</p> <p>This API utilizes Parser2 for parsing and SvgRenderer2, RasterRenderer2 for rendering output files. It is designed to be more limited and easier to use than the previous. For more advanced uses users will have to fall back to the lower level APIs and manual interaction with the parser and renderers.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme","title":"ColorScheme","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Set of colors which should be used for rendering.</p> <p>ColorScheme class contains set of colors which should be used for different parts of rendered image. At the same time it also works as a container for predefined color schemes commonly used for parts of PCB.</p> <p>Predefined colors</p> <p>All predefined colors have two variants - normal one and one with \"*_ALPHA\" suffix. Those without suffix have solid background and are not intended for constructing multi-layer images out of them ie. they are not suitable for rendering a project consisting of separate copper, silk, pase mask and composing them into single image. For cases when rendered images are intended for stacking \"*_ALPHA\" schemes should be used, as background and transparent parts of image will be truly transparent.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>class ColorScheme(FrozenGeneralModel):\n    r\"\"\"Set of colors which should be used for rendering.\n\n    ColorScheme class contains set of colors which should be used for different parts\n    of rendered image. At the same time it also works as a container for predefined\n    color schemes commonly used for parts of PCB.\n\n    !!! info \"Predefined colors\"\n\n        All predefined colors have two variants - normal one and one with \"\\*_ALPHA\"\n        suffix. Those without suffix have solid background and are not intended for\n        constructing multi-layer images out of them ie. they are not suitable for\n        rendering a project consisting of separate copper, silk, pase mask and composing\n        them into single image. For cases when rendered images are intended for stacking\n        \"\\*_ALPHA\" schemes should be used, as background and transparent parts of image\n        will be truly transparent.\n\n    \"\"\"\n\n    SILK: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SILK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    COPPER: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    COPPER_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    PASTE_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    PASTE_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    SOLDER_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SOLDER_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    DEFAULT_GRAYSCALE: ClassVar[ColorScheme]\n    \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n    DEBUG_1: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme.\"\"\"\n\n    DEBUG_1_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme with alpha channel.\"\"\"\n\n    background_color: RGBA\n    \"\"\"Color used as empty image background.\"\"\"\n\n    clear_color: RGBA\n    \"\"\"Color used for clear draws.\"\"\"\n\n    solid_color: RGBA\n    \"\"\"Color used for solid draws.\"\"\"\n\n    clear_region_color: RGBA\n    \"\"\"Color used for clear region draws.\"\"\"\n\n    solid_region_color: RGBA\n    \"\"\"Color used for solid region draws.\"\"\"\n\n    debug_1_color: RGBA = RGBA.from_hex(\"#ababab\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    debug_2_color: RGBA = RGBA.from_hex(\"#7d7d7d\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n        \"\"\"Return grayscale to RGBA color map.\"\"\"\n        return {\n            Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n            Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n            Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n            Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n            Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n        }\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: ColorScheme\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: ColorScheme\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: ColorScheme\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: ColorScheme\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: ColorScheme\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: ColorScheme\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: ColorScheme\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: ColorScheme\n</code></pre> <p>Debug color scheme.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: ColorScheme\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: RGBA\n</code></pre> <p>Color used as empty image background.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.clear_color","title":"clear_color  <code>instance-attribute</code>","text":"<pre><code>clear_color: RGBA\n</code></pre> <p>Color used for clear draws.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.solid_color","title":"solid_color  <code>instance-attribute</code>","text":"<pre><code>solid_color: RGBA\n</code></pre> <p>Color used for solid draws.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.clear_region_color","title":"clear_region_color  <code>instance-attribute</code>","text":"<pre><code>clear_region_color: RGBA\n</code></pre> <p>Color used for clear region draws.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.solid_region_color","title":"solid_region_color  <code>instance-attribute</code>","text":"<pre><code>solid_region_color: RGBA\n</code></pre> <p>Color used for solid region draws.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.debug_1_color","title":"debug_1_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_1_color: RGBA = from_hex('#ababab')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.debug_2_color","title":"debug_2_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_2_color: RGBA = from_hex('#7d7d7d')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ColorScheme.get_grayscale_to_rgba_color_map","title":"get_grayscale_to_rgba_color_map","text":"<pre><code>get_grayscale_to_rgba_color_map() -&gt; (\n    dict[int, tuple[int, int, int, int]]\n)\n</code></pre> <p>Return grayscale to RGBA color map.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n    \"\"\"Return grayscale to RGBA color map.\"\"\"\n    return {\n        Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n        Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n        Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n        Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n        Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n    }\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.FileTypeEnum","title":"FileTypeEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible Gerber file types.</p> <p>If file type is not listed here you can request adding it by creating an issue on https://github.com/Argmaster/pygerber/issues</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass FileTypeEnum(Enum):\n    \"\"\"Enumeration of possible Gerber file types.\n\n    If file type is not listed here you can request adding it by creating an issue on\n    https://github.com/Argmaster/pygerber/issues\n    \"\"\"\n\n    COPPER = \"COPPER\"\n    MASK = \"MASK\"\n    PASTE = \"PASTE\"\n    SILK = \"SILK\"\n    EDGE = \"EDGE\"\n\n    PLATED = \"PLATED\"\n    NON_PLATED = \"NON_PLATED\"\n    PROFILE = \"PROFILE\"\n    SOLDERMASK = \"SOLDERMASK\"\n    LEGEND = \"LEGEND\"\n    COMPONENT = \"COMPONENT\"\n    GLUE = \"GLUE\"\n    CARBONMASK = \"CARBONMASK\"\n    GOLDMASK = \"GOLDMASK\"\n    HEATSINKMASK = \"HEATSINKMASK\"\n    PEELABLEMASK = \"PEELABLEMASK\"\n    SILVERMASK = \"SILVERMASK\"\n    TINMASK = \"TINMASK\"\n    DEPTHROUT = \"DEPTHROUT\"\n    VCUT = \"VCUT\"\n    VIAFILL = \"VIAFILL\"\n    PADS = \"PADS\"\n\n    OTHER = \"OTHER\"\n    UNDEFINED = \"UNDEFINED\"\n\n    INFER_FROM_EXTENSION = \"INFER_FROM_EXTENSION\"\n    INFER_FROM_ATTRIBUTES = \"INFER_FROM_ATTRIBUTES\"\n    INFER = \"INFER\"\n\n    @classmethod\n    def infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n        \"\"\"Infer file type from file extension.\"\"\"\n        if file_function is None:\n            return cls.UNDEFINED\n\n        function, *_ = file_function.split(\",\")\n        function = function.upper()\n\n        try:\n            return FileTypeEnum(function)\n        except (ValueError, TypeError, KeyError):\n            return cls.UNDEFINED\n\n    @classmethod\n    def infer_from_extension(cls, extension: str) -&gt; FileTypeEnum:\n        if re.match(r\"\\.g[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gp[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gm[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        return GERBER_EXTENSION_TO_FILE_TYPE_MAPPING.get(\n            extension.lower(), FileTypeEnum.UNDEFINED\n        )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.FileTypeEnum.infer_from_attributes","title":"infer_from_attributes  <code>classmethod</code>","text":"<pre><code>infer_from_attributes(\n    file_function: Optional[str] = None,\n) -&gt; FileTypeEnum\n</code></pre> <p>Infer file type from file extension.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n    \"\"\"Infer file type from file extension.\"\"\"\n    if file_function is None:\n        return cls.UNDEFINED\n\n    function, *_ = file_function.split(\",\")\n    function = function.upper()\n\n    try:\n        return FileTypeEnum(function)\n    except (ValueError, TypeError, KeyError):\n        return cls.UNDEFINED\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFile","title":"GerberFile  <code>dataclass</code>","text":"<p>Generic representation of Gerber file.</p> <p>This objects provides interface for loading and parsing Gerber files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFile:\n    \"\"\"Generic representation of Gerber file.\n\n    This objects provides interface for loading and parsing Gerber files.\n    \"\"\"\n\n    source_code: str\n    file_type: FileTypeEnum\n\n    @classmethod\n    def from_file(\n        cls,\n        file_path: str | Path,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n        file_path = Path(file_path)\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n        if file_type == FileTypeEnum.INFER:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n            if file_type == FileTypeEnum.UNDEFINED:\n                file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n        return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n\n    @classmethod\n    def from_str(\n        cls,\n        source_code: str,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from string.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(source_code, file_type)\n\n    @classmethod\n    def from_buffer(\n        cls,\n        buffer: TextIO,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(buffer.read(), file_type)\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedFile:\n        \"\"\"Parse Gerber file.\"\"\"\n        tokens = Tokenizer().tokenize(self.source_code)\n        parser = Parser2(\n            Parser2Options(\n                on_update_drawing_state_error=Parser2OnErrorAction(\n                    on_parser_error.value,\n                ),\n            ),\n        )\n        command_buffer = parser.parse(tokens)\n\n        if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n            file_type = FileTypeEnum.infer_from_attributes(\n                parser.context.file_attributes.get(\".FileFunction\", None)\n            )\n        else:\n            file_type = self.file_type\n\n        return ParsedFile(\n            GerberFileInfo.from_readonly_command_buffer(command_buffer),\n            command_buffer,\n            file_type,\n        )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code loaded from file on disk.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_file(\n    cls,\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n    file_path = Path(file_path)\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n    if file_type == FileTypeEnum.INFER:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n        if file_type == FileTypeEnum.UNDEFINED:\n            file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n    return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFile.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from string.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_str(\n    cls,\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from string.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(source_code, file_type)\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFile.from_buffer","title":"from_buffer  <code>classmethod</code>","text":"<pre><code>from_buffer(\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from readable buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_buffer(\n    cls,\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(buffer.read(), file_type)\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFile.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedFile\n</code></pre> <p>Parse Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedFile:\n    \"\"\"Parse Gerber file.\"\"\"\n    tokens = Tokenizer().tokenize(self.source_code)\n    parser = Parser2(\n        Parser2Options(\n            on_update_drawing_state_error=Parser2OnErrorAction(\n                on_parser_error.value,\n            ),\n        ),\n    )\n    command_buffer = parser.parse(tokens)\n\n    if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n        file_type = FileTypeEnum.infer_from_attributes(\n            parser.context.file_attributes.get(\".FileFunction\", None)\n        )\n    else:\n        file_type = self.file_type\n\n    return ParsedFile(\n        GerberFileInfo.from_readonly_command_buffer(command_buffer),\n        command_buffer,\n        file_type,\n    )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo","title":"GerberFileInfo  <code>dataclass</code>","text":"<p>Container for information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFileInfo:\n    \"\"\"Container for information about Gerber file.\"\"\"\n\n    min_x_mm: Decimal\n    \"\"\"Minimum X coordinate in file in millimeters.\"\"\"\n    min_y_mm: Decimal\n    \"\"\"Minimum Y coordinate in file in millimeters.\"\"\"\n    max_x_mm: Decimal\n    \"\"\"Maximum X coordinate in file in millimeters.\"\"\"\n    max_y_mm: Decimal\n    \"\"\"Maximum T coordinate in file in millimeters.\"\"\"\n\n    width_mm: Decimal\n    \"\"\"Width of image in millimeters.\"\"\"\n    height_mm: Decimal\n    \"\"\"Height of image in millimeters.\"\"\"\n\n    @classmethod\n    def from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n        \"\"\"Initialize object with information from command buffer.\"\"\"\n        bbox = buffer.get_bounding_box()\n        return cls(\n            bbox.min_x.as_millimeters(),\n            bbox.min_y.as_millimeters(),\n            bbox.max_x.as_millimeters(),\n            bbox.max_y.as_millimeters(),\n            bbox.width.as_millimeters(),\n            bbox.height.as_millimeters(),\n        )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.min_x_mm","title":"min_x_mm  <code>instance-attribute</code>","text":"<pre><code>min_x_mm: Decimal\n</code></pre> <p>Minimum X coordinate in file in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.min_y_mm","title":"min_y_mm  <code>instance-attribute</code>","text":"<pre><code>min_y_mm: Decimal\n</code></pre> <p>Minimum Y coordinate in file in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.max_x_mm","title":"max_x_mm  <code>instance-attribute</code>","text":"<pre><code>max_x_mm: Decimal\n</code></pre> <p>Maximum X coordinate in file in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.max_y_mm","title":"max_y_mm  <code>instance-attribute</code>","text":"<pre><code>max_y_mm: Decimal\n</code></pre> <p>Maximum T coordinate in file in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.width_mm","title":"width_mm  <code>instance-attribute</code>","text":"<pre><code>width_mm: Decimal\n</code></pre> <p>Width of image in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.height_mm","title":"height_mm  <code>instance-attribute</code>","text":"<pre><code>height_mm: Decimal\n</code></pre> <p>Height of image in millimeters.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.GerberFileInfo.from_readonly_command_buffer","title":"from_readonly_command_buffer  <code>classmethod</code>","text":"<pre><code>from_readonly_command_buffer(\n    buffer: ReadonlyCommandBuffer2,\n) -&gt; Self\n</code></pre> <p>Initialize object with information from command buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n    \"\"\"Initialize object with information from command buffer.\"\"\"\n    bbox = buffer.get_bounding_box()\n    return cls(\n        bbox.min_x.as_millimeters(),\n        bbox.min_y.as_millimeters(),\n        bbox.max_x.as_millimeters(),\n        bbox.max_y.as_millimeters(),\n        bbox.width.as_millimeters(),\n        bbox.height.as_millimeters(),\n    )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ImageFormatEnum","title":"ImageFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported raster image formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ImageFormatEnum(Enum):\n    \"\"\"List of officially supported raster image formats.\"\"\"\n\n    PNG = \"png\"\n    JPEG = \"jpg\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.OnParserErrorEnum","title":"OnParserErrorEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible actions to take on parser error.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass OnParserErrorEnum(Enum):\n    \"\"\"Enumeration of possible actions to take on parser error.\"\"\"\n\n    Ignore = \"ignore\"\n    \"\"\"Ignore parser errors. Errors which occurred will not be signaled. May yield\n    unexpected results for broken files, with missing draw commands or even more\n    significant errors.\"\"\"\n\n    Warn = \"warn\"\n    \"\"\"Warn on parser error. Parser will log warning message about what went wrong.\n    Best for supporting wide range of files without silently ignoring errors in code.\"\"\"\n\n    Raise = \"raise\"\n    \"\"\"Raise exception whenever parser encounters error. Will completely break out of\n    parsing process, making it impossible to render slightly malformed files.\"\"\"\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Ignore","title":"Ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ignore = 'ignore'\n</code></pre> <p>Ignore parser errors. Errors which occurred will not be signaled. May yield unexpected results for broken files, with missing draw commands or even more significant errors.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Warn","title":"Warn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warn = 'warn'\n</code></pre> <p>Warn on parser error. Parser will log warning message about what went wrong. Best for supporting wide range of files without silently ignoring errors in code.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Raise","title":"Raise  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Raise = 'raise'\n</code></pre> <p>Raise exception whenever parser encounters error. Will completely break out of parsing process, making it impossible to render slightly malformed files.</p>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedFile","title":"ParsedFile  <code>dataclass</code>","text":"<p>Wrapper around parsed Gerber file.</p> <p>This objects allow actions like rendering and retrieving information about file contents.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass ParsedFile:\n    \"\"\"Wrapper around parsed Gerber file.\n\n    This objects allow actions like rendering and retrieving information about file\n    contents.\n    \"\"\"\n\n    _info: GerberFileInfo\n    _command_buffer: ReadonlyCommandBuffer2\n    _file_type: FileTypeEnum\n\n    def get_info(self) -&gt; GerberFileInfo:\n        \"\"\"Get information about Gerber file.\"\"\"\n        return self._info\n\n    def get_file_type(self) -&gt; FileTypeEnum:\n        \"\"\"Get type of Gerber file.\"\"\"\n        return self._file_type\n\n    def render_svg(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        scale: float = 1.0,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to SVG format.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        scale : float, optional\n            Scale of image, can be used to scale very large or very small images, by\n            default 1.0\n\n        \"\"\"\n        output = SvgRenderer2(\n            SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n        ).render(self._command_buffer)\n        output.save_to(destination)\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n        quality: int = 85,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to raster image.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n        quality: int, optional\n            Image quality for JPEG format, by default 85.\n\n        \"\"\"\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n        ).render(self._command_buffer)\n        output.save_to(\n            destination,\n            RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n                quality=quality,\n            ),\n        )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedFile.get_info","title":"get_info","text":"<pre><code>get_info() -&gt; GerberFileInfo\n</code></pre> <p>Get information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_info(self) -&gt; GerberFileInfo:\n    \"\"\"Get information about Gerber file.\"\"\"\n    return self._info\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedFile.get_file_type","title":"get_file_type","text":"<pre><code>get_file_type() -&gt; FileTypeEnum\n</code></pre> <p>Get type of Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_file_type(self) -&gt; FileTypeEnum:\n    \"\"\"Get type of Gerber file.\"\"\"\n    return self._file_type\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedFile.render_svg","title":"render_svg","text":"<pre><code>render_svg(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0\n) -&gt; None\n</code></pre> <p>Render Gerber file to SVG format.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>scale</code> <code>float</code> <p>Scale of image, can be used to scale very large or very small images, by default 1.0</p> <code>1.0</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_svg(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0,\n) -&gt; None:\n    \"\"\"Render Gerber file to SVG format.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    scale : float, optional\n        Scale of image, can be used to scale very large or very small images, by\n        default 1.0\n\n    \"\"\"\n    output = SvgRenderer2(\n        SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n    ).render(self._command_buffer)\n    output.save_to(destination)\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedFile.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85\n) -&gt; None\n</code></pre> <p>Render Gerber file to raster image.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> <code>quality</code> <code>int</code> <p>Image quality for JPEG format, by default 85.</p> <code>85</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85,\n) -&gt; None:\n    \"\"\"Render Gerber file to raster image.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n    quality: int, optional\n        Image quality for JPEG format, by default 85.\n\n    \"\"\"\n    output = RasterRenderer2(\n        RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n    ).render(self._command_buffer)\n    output.save_to(\n        destination,\n        RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n            quality=quality,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedProject","title":"ParsedProject","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ParsedProject:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    \"\"\"\n\n    def __init__(self, files: List[ParsedFile]) -&gt; None:\n        self.files = files\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    ) -&gt; None:\n        \"\"\"Render all Gerber file, align them and merge into single file.\n\n        Resulting image will be saved to given `destination`.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_map : COLOR_MAP_T, optional\n            Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n\n        \"\"\"\n        if len(self.files) == 0:\n            msg = \"No files to render\"\n            raise ValueError(msg)\n\n        min_x_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_x_mm,\n            )\n            .get_info()\n            .min_x_mm\n        )\n\n        min_y_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_y_mm,\n            )\n            .get_info()\n            .min_y_mm\n        )\n\n        max_x_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_x_mm,\n            )\n            .get_info()\n            .max_x_mm\n        )\n\n        max_y_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_y_mm,\n            )\n            .get_info()\n            .max_y_mm\n        )\n\n        width_mm = max_x_mm - min_x_mm\n        height_mm = max_y_mm - min_y_mm\n\n        images = [\n            self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n        ]\n        base_image = Image.new(\n            \"RGBA\",\n            (\n                int(width_mm * dpmm),\n                int(height_mm * dpmm),\n            ),\n            (0, 0, 0, 0),\n        )\n\n        for image, file in zip(images, self.files):\n            offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n            offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n            base_image.paste(\n                image.image,\n                (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n                image.image,\n            )\n\n        RasterImageRef(base_image).save_to(\n            destination,\n            options=RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n            ),\n        )\n\n    def _render_raster(\n        self,\n        file: ParsedFile,\n        *,\n        color_map: COLOR_MAP_T,\n        dpmm: int = 20,\n    ) -&gt; RasterImageRef:\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(\n                color_scheme=color_map[file.get_file_type()],\n                dpmm=dpmm,\n            ),\n        ).render(\n            file._command_buffer,  # noqa: SLF001\n        )\n        if not isinstance(output, RasterImageRef):\n            msg = \"Expected RasterImageRef\"\n            raise TypeError(msg)\n\n        return output\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.ParsedProject.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB\n) -&gt; None\n</code></pre> <p>Render all Gerber file, align them and merge into single file.</p> <p>Resulting image will be saved to given <code>destination</code>.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_map</code> <code>COLOR_MAP_T</code> <p>Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP</p> <code>DEFAULT_COLOR_MAP</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n) -&gt; None:\n    \"\"\"Render all Gerber file, align them and merge into single file.\n\n    Resulting image will be saved to given `destination`.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_map : COLOR_MAP_T, optional\n        Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n\n    \"\"\"\n    if len(self.files) == 0:\n        msg = \"No files to render\"\n        raise ValueError(msg)\n\n    min_x_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_x_mm,\n        )\n        .get_info()\n        .min_x_mm\n    )\n\n    min_y_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_y_mm,\n        )\n        .get_info()\n        .min_y_mm\n    )\n\n    max_x_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_x_mm,\n        )\n        .get_info()\n        .max_x_mm\n    )\n\n    max_y_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_y_mm,\n        )\n        .get_info()\n        .max_y_mm\n    )\n\n    width_mm = max_x_mm - min_x_mm\n    height_mm = max_y_mm - min_y_mm\n\n    images = [\n        self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n    ]\n    base_image = Image.new(\n        \"RGBA\",\n        (\n            int(width_mm * dpmm),\n            int(height_mm * dpmm),\n        ),\n        (0, 0, 0, 0),\n    )\n\n    for image, file in zip(images, self.files):\n        offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n        offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n        base_image.paste(\n            image.image,\n            (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n            image.image,\n        )\n\n    RasterImageRef(base_image).save_to(\n        destination,\n        options=RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.PixelFormatEnum","title":"PixelFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported pixel formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class PixelFormatEnum(Enum):\n    \"\"\"List of officially supported pixel formats.\"\"\"\n\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.Project","title":"Project","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files. Files should be ordered bottom up, topmost layer last, like if adding one layer on top of previous.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class Project:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    Files should be ordered bottom up, topmost layer last, like if adding one layer on\n    top of previous.\n    \"\"\"\n\n    def __init__(self, files: List[GerberFile]) -&gt; None:\n        self.files = files\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedProject:\n        \"\"\"Parse all Gerber files one by one.\"\"\"\n        return ParsedProject(\n            [f.parse(on_parser_error=on_parser_error) for f in self.files],\n        )\n</code></pre>"},{"location":"70_gerber/01_api_v2_reference.html#pygerber.gerberx3.api.v2.Project.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedProject\n</code></pre> <p>Parse all Gerber files one by one.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedProject:\n    \"\"\"Parse all Gerber files one by one.\"\"\"\n    return ParsedProject(\n        [f.parse(on_parser_error=on_parser_error) for f in self.files],\n    )\n</code></pre>"},{"location":"70_gerber/02_cli_usage.html","title":"Command line usage","text":"<p>In addition to API, PyGerber also offers simple command line interface (CLI) for rendering Gerber files to raster and vector image formats. Although CLI is not as powerful as API, it is still useful for quick rendering.</p>"},{"location":"70_gerber/02_cli_usage.html#single-file-rendering","title":"Single file rendering","text":"<p>Single Gerber file can be rendered to both vector (SVG) and raster (PNG/JPEG) image formats.</p> <p>Here is a minimalistic example of rendering a single Gerber file to PNG image:</p> <pre><code>pygerber render raster src/pygerber/examples/simple_2layer-F_Cu.gbr -o main.png\n</code></pre> <p>PyGerber allows rendering rendering to PNG and JPEG formats. Additionally quality and size of the image can be controlled using <code>-q/--quality</code> and <code>-d/--dpmm</code> flags. For full list of available flags use <code>--help</code> flag.</p> <pre><code>pygerber render raster --help\n</code></pre> <p>For comparison, here is an example of rendering the same Gerber file to SVG image:</p> <pre><code>pygerber render vector src/pygerber/examples/simple_2layer-F_Cu.gbr -o main.svg\n</code></pre>"},{"location":"70_gerber/02_cli_usage.html#multi-file-project-rendering","title":"Multi-file project rendering","text":"<p>PyGerber also supports rendering multi-file projects. This is useful when you have multiple Gerber files that represent different layers of the same PCB and you want to generate a single image stacking them on top of each other with single command.</p> <p>This can be done by providing list of paths to gerber files to <code>pygerber render project</code> command.</p> <p>Each path can be suffixed with <code>@</code> and layer type name. This will affect color palette used for rendering individual layers. For full list of available layer types check out <code>FileTypeEnum</code> values. Layer names are case-insensitive.</p> <pre><code>pygerber render project src/pygerber/examples/simple_2layer-F_Cu.gbr@copper src/pygerber/examples/simple_2layer-F_Mask.gbr@mask src/pygerber/examples/simple_2layer-F_Paste.gbr@paste src/pygerber/examples/simple_2layer-F_Silkscreen.gbr@silk\n</code></pre> <p>When layer type is not provided, file type will be inferred from extension or file attributes. If neither of those methods succeeds, <code>FileTypeEnum.UNDEFINED</code> will be used resulting in use of debug color palette.</p> <p>Thanks to file type inference, command below should produce the same result as the one above:</p> <pre><code>pygerber render project src/pygerber/examples/simple_2layer-F_Cu.gbr src/pygerber/examples/simple_2layer-F_Mask.gbr src/pygerber/examples/simple_2layer-F_Paste.gbr src/pygerber/examples/simple_2layer-F_Silkscreen.gbr\n</code></pre>"},{"location":"70_gerber/10_internal_api_v2.html","title":"PyGerber internal API V2","text":""},{"location":"70_gerber/10_internal_api_v2.html#introduction","title":"Introduction","text":"<p>Since PyGerber 2.2.0, there is alternative improved internal API to PyGerber. It was created to aid problems with design of API V2 build around <code>Tokenizer</code>, <code>Parser</code> and <code>AbstractBackend</code> classes and way they interact. They were designed to closely interact and made extension of PyGerber complicated due to multiple design flaws. Therefore, implementation of new features was becoming much harder than anticipated. To avoid breaking backward compatibility and forcing major refactoring, we have decided to introduce alternative API alongside existing one. To make it easier to distinguish parts of API V2 modules which contain parts of it contain a suffix or infix <code>2</code>, for example <code>parser2</code>, <code>renderer2</code>, <code>commands2</code>.</p> <p>API V2 contains new parser implementation, in form of <code>Parser2</code> class and new rendering implementation(s) based on <code>Renderer2</code>, eg. <code>SvgRenderer2</code> (experimental). We still rely on original <code>Tokenizer</code> and <code>Token</code> classes, although their interfaces were extended to provide integration with <code>Parser2</code> separate from how <code>Parser</code> (API V1) worked.</p> <p>New parser from the very begging was equipped with Visitor pattern based design and allows for easy substitution of implementation of various tokens. Most of Gerber file state is stored in immutable state which allows for quick jumping back in time. Additionally state is divided into multiple sub-objects each representing related set of state properties (compliant to Gerber standard). This separation simplifies process of sharing information about states with interested parties, eg. draw commands.</p>"},{"location":"70_gerber/10_internal_api_v2.html#limited-renderer-coupling","title":"Limited Renderer Coupling","text":"<p><code>Parser2</code> does not rely directly on <code>Renderer2</code>, differently than how <code>Parser</code> interacted with <code>AbstractBackend</code>. API V2 parser generates command buffer containing draw commands which describe what should appear in the image. Those commands are later interpreted by <code>Renderer2</code>, but latter one knows nothing about the source of commands, making it possible to generate in arbitrary ways. Each command makes use of some aperture in a way described by The Gerber Format Specification. Set of commands is defined and quite small, same goes for apertures, so implementation of rendering of them can be very compact.</p> <p>In API V2 some parts of Gerber images are resolved at parser level into individual draws. This happens for SR blocks and AB apertures. These concepts doesn't exist at <code>Renderer2</code> level, they are resolved by <code>Parser2</code> into correctly transformed series of draw commands. Macros however remain as apertures and are used to create flashes consisting of multiple simple commands.</p>"},{"location":"70_gerber/10_internal_api_v2.html#svg-rendering","title":"SVG Rendering","text":"<p>Since release 2.2.0 PyGerber supports converting Gerber files into SVG images with <code>SvgRenderer2</code> class.</p> <p>To render SVG image from Parser2 output command buffer you need to instantiate <code>SvgRenderer2</code> and feed command buffer object into its <code>render()</code> method. In general <code>SvgRenderer2</code> is expected to be one time use only, so using it twice may result in malformed image.</p> <p>Here's some sample code showing how to manually create objects from API V2 to parse and render Gerber file as SVG image.</p> <pre><code>from __future__ import annotations\n\nfrom decimal import Decimal\n\nfrom pygerber.gerberx3.parser2.parser2 import Parser2\nfrom pygerber.gerberx3.renderer2.svg import SvgRenderer2, SvgRenderer2Hooks\nfrom pygerber.gerberx3.tokenizer.tokenizer import Tokenizer\n\nSOURCE = r\"\"\"\n%FSLAX26Y26*%\n%MOMM*%\n%ADD100R,1.5X1.0X0.5*%\n%ADD200C,1.5X1.0*%\n%ADD300O,1.5X1.0X0.6*%\n%ADD400P,1.5X3X5.0*%\nD100*\nX0Y0D03*\nD200*\nX0Y2000000D03*\nD300*\nX2000000Y0D03*\nD400*\nX2000000Y2000000D03*\nM02*\n\n\"\"\"\n\n\ndef render() -&gt; None:\n    stack = Tokenizer().tokenize(SOURCE)\n    cmd_buf = Parser2().parse(stack)\n    ref = SvgRenderer2(SvgRenderer2Hooks(scale=Decimal(10))).render(cmd_buf)\n    ref.save_to(\"output.svg\")\n\n\nif __name__ == \"__main__\":\n    render()\n</code></pre>"},{"location":"70_gerber/10_internal_api_v2.html#raster-rendering","title":"Raster Rendering","text":"<p>Since release 2.3.0 PyGerber also supports raster (PNG/JPEG) rendering of images <code>RasterRenderer2</code>.</p> <p>To render raster image from Parser2 output command buffer you need to instantiate <code>RasterRenderer2</code> and feed command buffer object into its <code>render()</code> method. In general <code>RasterRenderer2</code> is expected to be one time use only, so using it twice may result in malformed image.</p> <pre><code>from __future__ import annotations\n\nfrom pygerber.gerberx3.parser2.parser2 import Parser2\nfrom pygerber.gerberx3.renderer2.raster import (\n    PixelFormat,\n    RasterFormatOptions,\n    RasterRenderer2,\n    RasterRenderer2Hooks,\n)\nfrom pygerber.gerberx3.tokenizer.tokenizer import Tokenizer\n\nSOURCE = r\"\"\"\n%FSLAX26Y26*%\n%MOMM*%\n%ADD100R,1.5X1.0X0.5*%\n%ADD200C,1.5X1.0*%\n%ADD300O,1.5X1.0X0.6*%\n%ADD400P,1.5X3X5.0*%\nD100*\nX0Y0D03*\nD200*\nX0Y2000000D03*\nD300*\nX2000000Y0D03*\nD400*\nX2000000Y2000000D03*\nM02*\n\n\"\"\"\n\n\ndef render() -&gt; None:\n    stack = Tokenizer().tokenize(SOURCE)\n    cmd_buf = Parser2().parse(stack)\n    ref = RasterRenderer2(RasterRenderer2Hooks(dpmm=100)).render(cmd_buf)\n    ref.save_to(\"output.jpeg\", RasterFormatOptions(pixel_format=PixelFormat.RGB))\n\n\nif __name__ == \"__main__\":\n    render()\n</code></pre> <p><code>dpmm</code> option specifies dots per millimeter value used to calculate how many pixels should single millimeter should contain.</p>"},{"location":"70_gerber/11_reference_svg.html","title":"SVG Renderer API Reference","text":""},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg","title":"svg","text":"<p>Module contains implementation of Gerber rendering backend outputting SVG files.</p>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2","title":"SvgRenderer2","text":"<p>             Bases: <code>Renderer2</code></p> <p>Rendering backend class for rendering SVG images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgRenderer2(Renderer2):\n    \"\"\"Rendering backend class for rendering SVG images.\"\"\"\n\n    def __init__(\n        self,\n        hooks: Optional[SvgRenderer2Hooks] = None,\n    ) -&gt; None:\n        hooks = SvgRenderer2Hooks() if hooks is None else hooks\n        super().__init__(hooks)\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderingFrame","title":"SvgRenderingFrame  <code>dataclass</code>","text":"<p>Rendering variable container.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>@dataclass\nclass SvgRenderingFrame:\n    \"\"\"Rendering variable container.\"\"\"\n\n    bounding_box: BoundingBox\n    normalize_origin_to_0_0: bool\n    mask: drawsvg.Mask = field(default_factory=drawsvg.Mask)\n    group: drawsvg.Group = field(default_factory=drawsvg.Group)\n    polarity: Optional[Polarity] = None\n    is_region: bool = False\n    flip_y: bool = True\n\n    def get_group_or_mask(\n        self,\n        is_group: bool,  # noqa: FBT001\n    ) -&gt; drawsvg.Group | drawsvg.Mask:\n        \"\"\"Get group or mask.\"\"\"\n        if is_group:\n            return self.group\n        return self.mask\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderingFrame.get_group_or_mask","title":"get_group_or_mask","text":"<pre><code>get_group_or_mask(\n    is_group: bool,\n) -&gt; drawsvg.Group | drawsvg.Mask\n</code></pre> <p>Get group or mask.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_group_or_mask(\n    self,\n    is_group: bool,  # noqa: FBT001\n) -&gt; drawsvg.Group | drawsvg.Mask:\n    \"\"\"Get group or mask.\"\"\"\n    if is_group:\n        return self.group\n    return self.mask\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks","title":"SvgRenderer2Hooks","text":"<p>             Bases: <code>Renderer2HooksABC</code></p> <p>Rendering backend hooks used to render SVG images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgRenderer2Hooks(Renderer2HooksABC):\n    \"\"\"Rendering backend hooks used to render SVG images.\"\"\"\n\n    renderer: SvgRenderer2\n\n    def __init__(\n        self,\n        color_scheme: ColorScheme = ColorScheme.DEBUG_1,\n        scale: Decimal = Decimal(\"1\"),\n        *,\n        flip_y: bool = True,\n    ) -&gt; None:\n        if not IS_SVG_BACKEND_AVAILABLE:\n            raise DRAWSVGNotAvailableError\n        self.color_scheme = color_scheme\n        self.scale = scale\n        self.flip_y = flip_y\n\n    def init(\n        self,\n        renderer: Renderer2,\n        command_buffer: ReadonlyCommandBuffer2,\n    ) -&gt; None:\n        \"\"\"Initialize rendering hooks.\"\"\"\n        if not isinstance(renderer, SvgRenderer2):\n            raise NotImplementedError\n\n        self.renderer = renderer\n        self.command_buffer = command_buffer\n        self.rendering_stack: list[SvgRenderingFrame] = [\n            SvgRenderingFrame(\n                bounding_box=self.command_buffer.get_bounding_box(),\n                normalize_origin_to_0_0=True,\n                flip_y=self.flip_y,\n            ),\n        ]\n        self.apertures: dict[str, drawsvg.Group] = {}\n\n    def push_render_frame(\n        self,\n        bbox: BoundingBox,\n        *,\n        normalize_origin_to_0_0: bool,\n        flip_y: bool,\n    ) -&gt; None:\n        \"\"\"Push new segment render frame.\"\"\"\n        self.rendering_stack.append(\n            SvgRenderingFrame(\n                bounding_box=bbox,\n                normalize_origin_to_0_0=normalize_origin_to_0_0,\n                flip_y=flip_y,\n            ),\n        )\n\n    def pop_render_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Pop segment render frame.\"\"\"\n        if len(self.rendering_stack) &lt;= 1:\n            raise RuntimeError\n        return self.rendering_stack.pop()\n\n    @property\n    def base_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Get base rendering stack frame.\"\"\"\n        return self.rendering_stack[0]\n\n    @property\n    def current_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Get current rendering stack frame.\"\"\"\n        return self.rendering_stack[-1]\n\n    def add_element_to_frame(\n        self,\n        polarity: Polarity,\n        element: drawsvg.DrawingBasicElement,\n    ) -&gt; None:\n        \"\"\"Add element to current frame.\"\"\"\n        self.get_layer(polarity).append(element)\n\n    def get_layer(self, polarity: Polarity) -&gt; drawsvg.Group | drawsvg.Mask:\n        \"\"\"Get SVG layer object corresponding to polarity.\"\"\"\n        # In general what we want to do is to have a layer made of group with mask.\n        # First we fill the group with dark command, then after meeting first clear\n        # command we start filling mask with consecutive clear command until\n        # we meed dark command again. Then we create new group-mask layer to repeat the\n        # cycle.\n\n        # If frame is not initialized, initialize it.\n        if self.current_frame.polarity is None:\n            self.current_frame.polarity = polarity\n            self.add_masked_group_to_frame()\n\n            return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n        if polarity.is_solid() != self.current_frame.polarity.is_solid():\n            # If polarity of frame is solid it means that mask for this group is still\n            # empty and can be filled.\n            if self.current_frame.polarity.is_solid():\n                self.current_frame.polarity = polarity\n                return self.current_frame.mask\n            # If polarity of frame is clear, it means that we already filled\n            # both group and mask and we need to create new group-mask layer.\n            self.add_masked_group_to_frame()\n            self.current_frame.polarity = polarity\n            return self.current_frame.group\n\n        # We have the same polarity as layer (and as previous commands) so we can\n        # simply add it to current layer.\n        return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n    def add_masked_group_to_frame(self) -&gt; None:\n        \"\"\"Create new layer including previous layer.\"\"\"\n        self.current_frame.mask = self.create_full_mask()\n        new_layer = drawsvg.Group(mask=self.current_frame.mask)\n        new_layer.append(self.current_frame.group)\n        self.current_frame.group = new_layer\n\n    def create_full_mask(self) -&gt; drawsvg.Mask:\n        \"\"\"Create mask covering whole image.\"\"\"\n        bbox = self.base_frame.bounding_box\n        mask = drawsvg.Mask()\n        mask.append(\n            drawsvg.Rectangle(\n                x=self.convert_size(-bbox.width / 2),\n                y=self.convert_size(-bbox.height / 2),\n                width=self.convert_size(bbox.width * 2),\n                height=self.convert_size(bbox.height * 2),\n                fill=\"white\",\n            ),\n        )\n        return mask\n\n    def create_mask(self, bbox: BoundingBox) -&gt; drawsvg.Mask:\n        \"\"\"Create mask covering specified bounding box.\"\"\"\n        mask = drawsvg.Mask()\n        mask.append(\n            drawsvg.Rectangle(\n                x=self.convert_size(bbox.min_x),\n                y=self.convert_size(bbox.min_y),\n                width=self.convert_size(bbox.width),\n                height=self.convert_size(bbox.height),\n                fill=\"white\",\n            ),\n        )\n        return mask\n\n    def convert_x(self, x: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        if self.current_frame.normalize_origin_to_0_0:\n            origin_offset_x = self.current_frame.bounding_box.min_x.as_millimeters()\n        else:\n            origin_offset_x = Decimal(0)\n\n        corrected_position_x = x.as_millimeters() - origin_offset_x\n\n        return corrected_position_x * self.scale\n\n    def convert_y(self, y: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        return self._convert_y(\n            y,\n            normalize_origin_to_0_0=self.current_frame.normalize_origin_to_0_0,\n            flip_y=self.current_frame.flip_y,\n        )\n\n    def _convert_y(\n        self,\n        y: Offset,\n        *,\n        normalize_origin_to_0_0: bool,\n        flip_y: bool,\n    ) -&gt; Decimal:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        if normalize_origin_to_0_0:\n            origin_offset_y = self.current_frame.bounding_box.min_y.as_millimeters()\n        else:\n            origin_offset_y = Decimal(0)\n\n        corrected_position_y = y.as_millimeters() - origin_offset_y\n\n        if flip_y:\n            flipped_position_y = (\n                self.current_frame.bounding_box.height.as_millimeters()\n                - corrected_position_y\n            )\n            return flipped_position_y * self.scale\n        return corrected_position_y * self.scale\n\n    def convert_size(self, diameter: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        return diameter.as_millimeters() * self.scale\n\n    def get_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if self.current_frame.is_region:\n            if polarity.is_solid():\n                return self.color_scheme.solid_region_color.to_hex()\n            return \"black\"\n\n        if polarity.is_solid():\n            return self.color_scheme.solid_color.to_hex()\n        return \"black\"\n\n    def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n        \"\"\"Get unique ID for aperture.\"\"\"\n        return (\n            f\"{aperture.identifier}%\"\n            f\"{transform.get_transform_key()}%{transform.polarity}\"\n        )\n\n    def get_aperture(self, aperture_id: str) -&gt; Optional[drawsvg.Group]:\n        \"\"\"Get SVG group representing aperture.\"\"\"\n        return self.apertures.get(aperture_id)\n\n    def set_aperture(\n        self,\n        aperture_id: str,\n        aperture: drawsvg.Group,\n    ) -&gt; None:\n        \"\"\"Set SVG group representing aperture.\"\"\"\n        self.apertures[aperture_id] = aperture\n\n    def render_line(self, command: Line2) -&gt; None:\n        \"\"\"Render line to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        parallel_vector = command.start_point - command.end_point\n        perpendicular_vector = parallel_vector.perpendicular()\n        normalized_perpendicular_vector = perpendicular_vector.normalize()\n        point_offset = normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        p0 = command.start_point - point_offset\n        p1 = command.start_point + point_offset\n        p2 = command.end_point + point_offset\n        p3 = command.end_point - point_offset\n\n        rectangle = drawsvg.Lines(\n            f\"{self.convert_x(p0.x):.8f}\",\n            f\"{self.convert_y(p0.y):.8f}\",\n            f\"{self.convert_x(p1.x):.8f}\",\n            f\"{self.convert_y(p1.y):.8f}\",\n            f\"{self.convert_x(p2.x):.8f}\",\n            f\"{self.convert_y(p2.y):.8f}\",\n            f\"{self.convert_x(p3.x):.8f}\",\n            f\"{self.convert_y(p3.y):.8f}\",\n            fill=color,\n            close=True,\n        )\n        self.add_element_to_frame(command.transform.polarity, rectangle)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_arc(self, command: Arc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        # Arcs which start and end point overlaps are completely invisible in SVG.\n        # Therefore we need to replace them with two half-full-arcs.\n        # THB spec recommends doing it when exporting Gerber files, to avoid problems\n        # with floating point numbers, but I guess nobody does that.\n        if command.start_point == command.end_point:\n            # This is a vector from center to start point, so we can invert it and\n            # apply it twice to get the point on the opposite side of the center point.\n            relative = command.get_relative_start_point()\n            # Now we cen recursively invoke self with two modified copies of this\n            # command.\n            self.render_arc(\n                command.model_copy(\n                    update={\n                        \"start_point\": command.start_point,\n                        \"end_point\": command.start_point - (relative * 2),\n                    },\n                ),\n            )\n            self.render_arc(\n                command.model_copy(\n                    update={\n                        \"start_point\": command.start_point - (relative * 2),\n                        \"end_point\": command.start_point,\n                    },\n                ),\n            )\n            return\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n        # First we calculate perpendicular vector. This vector is always pointing\n        # from the center, thus it is perpendicular to arc.\n        # Then we can normalize it and multiply by half of aperture diameter,\n        # effectively giving us vector pointing to inner/outer edge of line.\n        # We can ignore the fact that we don't know which point (inner/outer) we\n        # have, as long as we get the same every time, then we can pair it with\n        # corresponding vector made from end point and create single arc,\n        # Then invert both vectors and draw second arc.\n        start_perpendicular_vector = command.get_relative_start_point()\n        start_normalized_perpendicular_vector = start_perpendicular_vector.normalize()\n        start_point_offset = start_normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        end_perpendicular_vector = command.get_relative_end_point()\n        end_normalized_perpendicular_vector = end_perpendicular_vector.normalize()\n        end_point_offset = end_normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        arc_path = drawsvg.Path(fill=color)\n\n        # Determine start point of inner arc.\n        start_inner = command.start_point + start_point_offset\n        end_inner = command.end_point + end_point_offset\n        # Move path ptr to inner arc start point.\n        arc_path.M(\n            f\"{self.convert_x(start_inner.x):.8f}\",\n            f\"{self.convert_y(start_inner.y):.8f}\",\n        )\n        self.render_arc_to_path(\n            command.model_copy(\n                update={\n                    \"start_point\": start_inner,\n                    \"end_point\": end_inner,\n                },\n            ),\n            arc_path,\n        )\n        # Determine start point of outer arc.\n        # This arc have to be in reverse direction, so we swap start/end points.\n        start_outer = command.end_point - end_point_offset\n        end_outer = command.start_point - start_point_offset\n        # Draw line between end of inner arc and start of outer arc.\n        arc_path.L(\n            f\"{self.convert_x(start_outer.x):.8f}\",\n            f\"{self.convert_y(start_outer.y):.8f}\",\n        )\n        self.render_cc_arc_to_path(\n            CCArc2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                start_point=start_outer,\n                center_point=command.center_point,\n                end_point=end_outer,\n            ),\n            arc_path,\n        )\n        # Close arc box by drawing line between end of outer arc and start of inner\n        arc_path.Z()\n        self.add_element_to_frame(command.transform.polarity, arc_path)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_cc_arc(self, command: CCArc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.end_point,\n                    \"end_point\": command.start_point,\n                },\n            ),\n        )\n\n    def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n        \"\"\"Render flash circle to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            aperture_group.append(\n                drawsvg.Circle(\n                    cx=0,\n                    cy=0,\n                    r=self.convert_size(aperture.diameter) / Decimal(\"2.0\"),\n                    fill=color,\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                x=self.convert_x(command.flash_point.x),\n                y=self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def create_group_for_aperture(\n        self,\n        bbox: BoundingBox,\n        hole_diameter: Optional[Offset],\n    ) -&gt; drawsvg.Group:\n        \"\"\"Create SVG group for aperture.\"\"\"\n        if hole_diameter is None:\n            return drawsvg.Group()\n\n        mask = self.create_mask(bbox)\n        central_circle = drawsvg.Circle(\n            cx=0,\n            cy=0,\n            r=self.convert_size(hole_diameter) / 2,\n            fill=\"black\",\n        )\n        mask.append(central_circle)\n\n        return drawsvg.Group(mask=mask)\n\n    def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n        \"\"\"Render flash no circle aperture to target image.\"\"\"\n\n    def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n        \"\"\"Render flash rectangle to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            aperture_group.append(\n                drawsvg.Rectangle(\n                    -self.convert_size(aperture.x_size) / 2,\n                    -self.convert_size(aperture.y_size) / 2,\n                    self.convert_size(aperture.x_size),\n                    self.convert_size(aperture.y_size),\n                    fill=color,\n                    transform=f\"rotate(-{aperture.rotation})\",\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n        \"\"\"Render flash obround to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            x_size = self.convert_size(aperture.x_size)\n            y_size = self.convert_size(aperture.y_size)\n            radius = x_size.min(y_size) / Decimal(\"2.0\")\n\n            aperture_group.append(\n                drawsvg.Rectangle(\n                    -self.convert_size(aperture.x_size) / 2,\n                    -self.convert_size(aperture.y_size) / 2,\n                    x_size,\n                    y_size,\n                    fill=color,\n                    rx=radius,\n                    ry=radius,\n                    transform=f\"rotate(-{aperture.rotation})\",\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n        \"\"\"Render flash polygon to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n\n            number_of_vertices = aperture.number_vertices\n            initial_angle = aperture.rotation\n            inner_angle = Decimal(\"360\") / Decimal(number_of_vertices)\n\n            radius_vector = Vector2D.UNIT_X * (aperture.outer_diameter / Decimal(\"2.0\"))\n            rotated_radius_vector = radius_vector.rotate_around_origin(initial_angle)\n\n            p = drawsvg.Path(fill=color)\n            p.M(\n                f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n            )\n\n            for i in range(1, number_of_vertices):\n                rotation_angle = inner_angle * i + initial_angle\n                rotated_radius_vector = radius_vector.rotate_around_origin(\n                    rotation_angle,\n                )\n                p.L(\n                    f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                    f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n                )\n\n            p.Z()\n\n            aperture_group.append(p)\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n        \"\"\"Render flash macro aperture to target image.\"\"\"\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            self.push_render_frame(\n                command.get_bounding_box(),\n                normalize_origin_to_0_0=False,\n                flip_y=False,\n            )\n            for cmd in aperture.command_buffer:\n                cmd.render(self.renderer)\n\n            frame = self.pop_render_frame()\n            aperture_group = frame.group\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                x=self.convert_x(command.flash_point.x),\n                y=self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_region(self, command: Region2) -&gt; None:\n        \"\"\"Render region to target image.\"\"\"\n        if len(command.command_buffer) == 0:\n            return\n\n        self.current_frame.is_region = True\n\n        color = self.get_color(command.transform.polarity)\n        region = drawsvg.Path(fill=color)\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, (Line2, Arc2, CCArc2)):\n                region.M(\n                    f\"{self.convert_x(cmd.start_point.x):.8f}\",\n                    f\"{self.convert_y(cmd.start_point.y):.8f}\",\n                )\n                break\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, Line2):\n                self.render_line_to_path(cmd, region)\n            elif isinstance(cmd, Arc2):\n                self.render_arc_to_path(cmd, region)\n            elif isinstance(cmd, CCArc2):\n                self.render_cc_arc_to_path(cmd, region)\n            else:\n                raise NotImplementedError\n\n        region.Z()\n        self.add_element_to_frame(command.transform.polarity, region)\n\n        self.current_frame.is_region = False\n\n    def render_line_to_path(self, command: Line2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        path.L(\n            f\"{self.convert_x(command.end_point.x):.8f}\",\n            f\"{self.convert_y(command.end_point.y):.8f}\",\n        )\n\n    def render_arc_to_path(self, command: Arc2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        relative_start_vector = command.get_relative_start_point()\n        relative_end_vector = command.get_relative_end_point()\n\n        angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n        angle_counter_clockwise = relative_start_vector.angle_between_cc(\n            relative_end_vector,\n        )\n        # We want to render clockwise angle, so if cc angle is bigger, we need to\n        # choose small angle.\n        large_arc = angle_clockwise &gt;= angle_counter_clockwise\n        sweep = 1\n\n        path.A(\n            rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n            ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n            rot=0,\n            large_arc=large_arc,\n            sweep=sweep,\n        )\n\n    def render_cc_arc_to_path(self, command: CCArc2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        relative_start_vector = command.get_relative_start_point()\n        relative_end_vector = command.get_relative_end_point()\n\n        angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n        angle_counter_clockwise = relative_start_vector.angle_between_cc(\n            relative_end_vector,\n        )\n        # We want to render clockwise angle, so if cc angle is bigger, we need to\n        # choose small angle.\n        large_arc = not (angle_clockwise &gt;= angle_counter_clockwise)\n        sweep = 0\n\n        path.A(\n            rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n            ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n            rot=0,\n            large_arc=large_arc,\n            sweep=sweep,\n        )\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        return SvgImageRef(self.drawing)\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize rendering.\"\"\"\n        if len(self.rendering_stack) &gt; 1:\n            self.rendering_stack = [self.rendering_stack[0]]\n        elif len(self.rendering_stack) &lt; 1:\n            raise RuntimeError\n\n        width = self.convert_size(self.current_frame.bounding_box.width)\n        height = self.convert_size(self.current_frame.bounding_box.height)\n        self.drawing = drawsvg.Drawing(\n            width=width,\n            height=height,\n        )\n        self.drawing.append(self.get_layer(Polarity.Dark))\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.base_frame","title":"base_frame  <code>property</code>","text":"<pre><code>base_frame: SvgRenderingFrame\n</code></pre> <p>Get base rendering stack frame.</p>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.current_frame","title":"current_frame  <code>property</code>","text":"<pre><code>current_frame: SvgRenderingFrame\n</code></pre> <p>Get current rendering stack frame.</p>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.init","title":"init","text":"<pre><code>init(\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None\n</code></pre> <p>Initialize rendering hooks.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def init(\n    self,\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None:\n    \"\"\"Initialize rendering hooks.\"\"\"\n    if not isinstance(renderer, SvgRenderer2):\n        raise NotImplementedError\n\n    self.renderer = renderer\n    self.command_buffer = command_buffer\n    self.rendering_stack: list[SvgRenderingFrame] = [\n        SvgRenderingFrame(\n            bounding_box=self.command_buffer.get_bounding_box(),\n            normalize_origin_to_0_0=True,\n            flip_y=self.flip_y,\n        ),\n    ]\n    self.apertures: dict[str, drawsvg.Group] = {}\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.push_render_frame","title":"push_render_frame","text":"<pre><code>push_render_frame(\n    bbox: BoundingBox,\n    *,\n    normalize_origin_to_0_0: bool,\n    flip_y: bool\n) -&gt; None\n</code></pre> <p>Push new segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def push_render_frame(\n    self,\n    bbox: BoundingBox,\n    *,\n    normalize_origin_to_0_0: bool,\n    flip_y: bool,\n) -&gt; None:\n    \"\"\"Push new segment render frame.\"\"\"\n    self.rendering_stack.append(\n        SvgRenderingFrame(\n            bounding_box=bbox,\n            normalize_origin_to_0_0=normalize_origin_to_0_0,\n            flip_y=flip_y,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.pop_render_frame","title":"pop_render_frame","text":"<pre><code>pop_render_frame() -&gt; SvgRenderingFrame\n</code></pre> <p>Pop segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def pop_render_frame(self) -&gt; SvgRenderingFrame:\n    \"\"\"Pop segment render frame.\"\"\"\n    if len(self.rendering_stack) &lt;= 1:\n        raise RuntimeError\n    return self.rendering_stack.pop()\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.add_element_to_frame","title":"add_element_to_frame","text":"<pre><code>add_element_to_frame(\n    polarity: Polarity, element: drawsvg.DrawingBasicElement\n) -&gt; None\n</code></pre> <p>Add element to current frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def add_element_to_frame(\n    self,\n    polarity: Polarity,\n    element: drawsvg.DrawingBasicElement,\n) -&gt; None:\n    \"\"\"Add element to current frame.\"\"\"\n    self.get_layer(polarity).append(element)\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_layer","title":"get_layer","text":"<pre><code>get_layer(\n    polarity: Polarity,\n) -&gt; drawsvg.Group | drawsvg.Mask\n</code></pre> <p>Get SVG layer object corresponding to polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_layer(self, polarity: Polarity) -&gt; drawsvg.Group | drawsvg.Mask:\n    \"\"\"Get SVG layer object corresponding to polarity.\"\"\"\n    # In general what we want to do is to have a layer made of group with mask.\n    # First we fill the group with dark command, then after meeting first clear\n    # command we start filling mask with consecutive clear command until\n    # we meed dark command again. Then we create new group-mask layer to repeat the\n    # cycle.\n\n    # If frame is not initialized, initialize it.\n    if self.current_frame.polarity is None:\n        self.current_frame.polarity = polarity\n        self.add_masked_group_to_frame()\n\n        return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n    if polarity.is_solid() != self.current_frame.polarity.is_solid():\n        # If polarity of frame is solid it means that mask for this group is still\n        # empty and can be filled.\n        if self.current_frame.polarity.is_solid():\n            self.current_frame.polarity = polarity\n            return self.current_frame.mask\n        # If polarity of frame is clear, it means that we already filled\n        # both group and mask and we need to create new group-mask layer.\n        self.add_masked_group_to_frame()\n        self.current_frame.polarity = polarity\n        return self.current_frame.group\n\n    # We have the same polarity as layer (and as previous commands) so we can\n    # simply add it to current layer.\n    return self.current_frame.get_group_or_mask(polarity.is_solid())\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.add_masked_group_to_frame","title":"add_masked_group_to_frame","text":"<pre><code>add_masked_group_to_frame() -&gt; None\n</code></pre> <p>Create new layer including previous layer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def add_masked_group_to_frame(self) -&gt; None:\n    \"\"\"Create new layer including previous layer.\"\"\"\n    self.current_frame.mask = self.create_full_mask()\n    new_layer = drawsvg.Group(mask=self.current_frame.mask)\n    new_layer.append(self.current_frame.group)\n    self.current_frame.group = new_layer\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_full_mask","title":"create_full_mask","text":"<pre><code>create_full_mask() -&gt; drawsvg.Mask\n</code></pre> <p>Create mask covering whole image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_full_mask(self) -&gt; drawsvg.Mask:\n    \"\"\"Create mask covering whole image.\"\"\"\n    bbox = self.base_frame.bounding_box\n    mask = drawsvg.Mask()\n    mask.append(\n        drawsvg.Rectangle(\n            x=self.convert_size(-bbox.width / 2),\n            y=self.convert_size(-bbox.height / 2),\n            width=self.convert_size(bbox.width * 2),\n            height=self.convert_size(bbox.height * 2),\n            fill=\"white\",\n        ),\n    )\n    return mask\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_mask","title":"create_mask","text":"<pre><code>create_mask(bbox: BoundingBox) -&gt; drawsvg.Mask\n</code></pre> <p>Create mask covering specified bounding box.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_mask(self, bbox: BoundingBox) -&gt; drawsvg.Mask:\n    \"\"\"Create mask covering specified bounding box.\"\"\"\n    mask = drawsvg.Mask()\n    mask.append(\n        drawsvg.Rectangle(\n            x=self.convert_size(bbox.min_x),\n            y=self.convert_size(bbox.min_y),\n            width=self.convert_size(bbox.width),\n            height=self.convert_size(bbox.height),\n            fill=\"white\",\n        ),\n    )\n    return mask\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_x","title":"convert_x","text":"<pre><code>convert_x(x: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_x(self, x: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    if self.current_frame.normalize_origin_to_0_0:\n        origin_offset_x = self.current_frame.bounding_box.min_x.as_millimeters()\n    else:\n        origin_offset_x = Decimal(0)\n\n    corrected_position_x = x.as_millimeters() - origin_offset_x\n\n    return corrected_position_x * self.scale\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_y","title":"convert_y","text":"<pre><code>convert_y(y: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_y(self, y: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    return self._convert_y(\n        y,\n        normalize_origin_to_0_0=self.current_frame.normalize_origin_to_0_0,\n        flip_y=self.current_frame.flip_y,\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_size","title":"convert_size","text":"<pre><code>convert_size(diameter: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to pixel y coordinate.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_size(self, diameter: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n    return diameter.as_millimeters() * self.scale\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_color","title":"get_color","text":"<pre><code>get_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if self.current_frame.is_region:\n        if polarity.is_solid():\n            return self.color_scheme.solid_region_color.to_hex()\n        return \"black\"\n\n    if polarity.is_solid():\n        return self.color_scheme.solid_color.to_hex()\n    return \"black\"\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_aperture_id","title":"get_aperture_id","text":"<pre><code>get_aperture_id(\n    aperture: Aperture2, transform: ApertureTransform\n) -&gt; str\n</code></pre> <p>Get unique ID for aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n    \"\"\"Get unique ID for aperture.\"\"\"\n    return (\n        f\"{aperture.identifier}%\"\n        f\"{transform.get_transform_key()}%{transform.polarity}\"\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture(aperture_id: str) -&gt; Optional[drawsvg.Group]\n</code></pre> <p>Get SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_aperture(self, aperture_id: str) -&gt; Optional[drawsvg.Group]:\n    \"\"\"Get SVG group representing aperture.\"\"\"\n    return self.apertures.get(aperture_id)\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.set_aperture","title":"set_aperture","text":"<pre><code>set_aperture(\n    aperture_id: str, aperture: drawsvg.Group\n) -&gt; None\n</code></pre> <p>Set SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def set_aperture(\n    self,\n    aperture_id: str,\n    aperture: drawsvg.Group,\n) -&gt; None:\n    \"\"\"Set SVG group representing aperture.\"\"\"\n    self.apertures[aperture_id] = aperture\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_line","title":"render_line","text":"<pre><code>render_line(command: Line2) -&gt; None\n</code></pre> <p>Render line to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_line(self, command: Line2) -&gt; None:\n    \"\"\"Render line to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    parallel_vector = command.start_point - command.end_point\n    perpendicular_vector = parallel_vector.perpendicular()\n    normalized_perpendicular_vector = perpendicular_vector.normalize()\n    point_offset = normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    p0 = command.start_point - point_offset\n    p1 = command.start_point + point_offset\n    p2 = command.end_point + point_offset\n    p3 = command.end_point - point_offset\n\n    rectangle = drawsvg.Lines(\n        f\"{self.convert_x(p0.x):.8f}\",\n        f\"{self.convert_y(p0.y):.8f}\",\n        f\"{self.convert_x(p1.x):.8f}\",\n        f\"{self.convert_y(p1.y):.8f}\",\n        f\"{self.convert_x(p2.x):.8f}\",\n        f\"{self.convert_y(p2.y):.8f}\",\n        f\"{self.convert_x(p3.x):.8f}\",\n        f\"{self.convert_y(p3.y):.8f}\",\n        fill=color,\n        close=True,\n    )\n    self.add_element_to_frame(command.transform.polarity, rectangle)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_arc","title":"render_arc","text":"<pre><code>render_arc(command: Arc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_arc(self, command: Arc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    # Arcs which start and end point overlaps are completely invisible in SVG.\n    # Therefore we need to replace them with two half-full-arcs.\n    # THB spec recommends doing it when exporting Gerber files, to avoid problems\n    # with floating point numbers, but I guess nobody does that.\n    if command.start_point == command.end_point:\n        # This is a vector from center to start point, so we can invert it and\n        # apply it twice to get the point on the opposite side of the center point.\n        relative = command.get_relative_start_point()\n        # Now we cen recursively invoke self with two modified copies of this\n        # command.\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.start_point,\n                    \"end_point\": command.start_point - (relative * 2),\n                },\n            ),\n        )\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.start_point - (relative * 2),\n                    \"end_point\": command.start_point,\n                },\n            ),\n        )\n        return\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n    # First we calculate perpendicular vector. This vector is always pointing\n    # from the center, thus it is perpendicular to arc.\n    # Then we can normalize it and multiply by half of aperture diameter,\n    # effectively giving us vector pointing to inner/outer edge of line.\n    # We can ignore the fact that we don't know which point (inner/outer) we\n    # have, as long as we get the same every time, then we can pair it with\n    # corresponding vector made from end point and create single arc,\n    # Then invert both vectors and draw second arc.\n    start_perpendicular_vector = command.get_relative_start_point()\n    start_normalized_perpendicular_vector = start_perpendicular_vector.normalize()\n    start_point_offset = start_normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    end_perpendicular_vector = command.get_relative_end_point()\n    end_normalized_perpendicular_vector = end_perpendicular_vector.normalize()\n    end_point_offset = end_normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    arc_path = drawsvg.Path(fill=color)\n\n    # Determine start point of inner arc.\n    start_inner = command.start_point + start_point_offset\n    end_inner = command.end_point + end_point_offset\n    # Move path ptr to inner arc start point.\n    arc_path.M(\n        f\"{self.convert_x(start_inner.x):.8f}\",\n        f\"{self.convert_y(start_inner.y):.8f}\",\n    )\n    self.render_arc_to_path(\n        command.model_copy(\n            update={\n                \"start_point\": start_inner,\n                \"end_point\": end_inner,\n            },\n        ),\n        arc_path,\n    )\n    # Determine start point of outer arc.\n    # This arc have to be in reverse direction, so we swap start/end points.\n    start_outer = command.end_point - end_point_offset\n    end_outer = command.start_point - start_point_offset\n    # Draw line between end of inner arc and start of outer arc.\n    arc_path.L(\n        f\"{self.convert_x(start_outer.x):.8f}\",\n        f\"{self.convert_y(start_outer.y):.8f}\",\n    )\n    self.render_cc_arc_to_path(\n        CCArc2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            start_point=start_outer,\n            center_point=command.center_point,\n            end_point=end_outer,\n        ),\n        arc_path,\n    )\n    # Close arc box by drawing line between end of outer arc and start of inner\n    arc_path.Z()\n    self.add_element_to_frame(command.transform.polarity, arc_path)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_cc_arc","title":"render_cc_arc","text":"<pre><code>render_cc_arc(command: CCArc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_cc_arc(self, command: CCArc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    self.render_arc(\n        command.model_copy(\n            update={\n                \"start_point\": command.end_point,\n                \"end_point\": command.start_point,\n            },\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_circle","title":"render_flash_circle","text":"<pre><code>render_flash_circle(\n    command: Flash2, aperture: Circle2\n) -&gt; None\n</code></pre> <p>Render flash circle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n    \"\"\"Render flash circle to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        aperture_group.append(\n            drawsvg.Circle(\n                cx=0,\n                cy=0,\n                r=self.convert_size(aperture.diameter) / Decimal(\"2.0\"),\n                fill=color,\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            x=self.convert_x(command.flash_point.x),\n            y=self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_group_for_aperture","title":"create_group_for_aperture","text":"<pre><code>create_group_for_aperture(\n    bbox: BoundingBox, hole_diameter: Optional[Offset]\n) -&gt; drawsvg.Group\n</code></pre> <p>Create SVG group for aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_group_for_aperture(\n    self,\n    bbox: BoundingBox,\n    hole_diameter: Optional[Offset],\n) -&gt; drawsvg.Group:\n    \"\"\"Create SVG group for aperture.\"\"\"\n    if hole_diameter is None:\n        return drawsvg.Group()\n\n    mask = self.create_mask(bbox)\n    central_circle = drawsvg.Circle(\n        cx=0,\n        cy=0,\n        r=self.convert_size(hole_diameter) / 2,\n        fill=\"black\",\n    )\n    mask.append(central_circle)\n\n    return drawsvg.Group(mask=mask)\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_no_circle","title":"render_flash_no_circle","text":"<pre><code>render_flash_no_circle(\n    command: Flash2, aperture: NoCircle2\n) -&gt; None\n</code></pre> <p>Render flash no circle aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n    \"\"\"Render flash no circle aperture to target image.\"\"\"\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_rectangle","title":"render_flash_rectangle","text":"<pre><code>render_flash_rectangle(\n    command: Flash2, aperture: Rectangle2\n) -&gt; None\n</code></pre> <p>Render flash rectangle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n    \"\"\"Render flash rectangle to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        aperture_group.append(\n            drawsvg.Rectangle(\n                -self.convert_size(aperture.x_size) / 2,\n                -self.convert_size(aperture.y_size) / 2,\n                self.convert_size(aperture.x_size),\n                self.convert_size(aperture.y_size),\n                fill=color,\n                transform=f\"rotate(-{aperture.rotation})\",\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_obround","title":"render_flash_obround","text":"<pre><code>render_flash_obround(\n    command: Flash2, aperture: Obround2\n) -&gt; None\n</code></pre> <p>Render flash obround to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n    \"\"\"Render flash obround to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        x_size = self.convert_size(aperture.x_size)\n        y_size = self.convert_size(aperture.y_size)\n        radius = x_size.min(y_size) / Decimal(\"2.0\")\n\n        aperture_group.append(\n            drawsvg.Rectangle(\n                -self.convert_size(aperture.x_size) / 2,\n                -self.convert_size(aperture.y_size) / 2,\n                x_size,\n                y_size,\n                fill=color,\n                rx=radius,\n                ry=radius,\n                transform=f\"rotate(-{aperture.rotation})\",\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_polygon","title":"render_flash_polygon","text":"<pre><code>render_flash_polygon(\n    command: Flash2, aperture: Polygon2\n) -&gt; None\n</code></pre> <p>Render flash polygon to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n    \"\"\"Render flash polygon to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n\n        number_of_vertices = aperture.number_vertices\n        initial_angle = aperture.rotation\n        inner_angle = Decimal(\"360\") / Decimal(number_of_vertices)\n\n        radius_vector = Vector2D.UNIT_X * (aperture.outer_diameter / Decimal(\"2.0\"))\n        rotated_radius_vector = radius_vector.rotate_around_origin(initial_angle)\n\n        p = drawsvg.Path(fill=color)\n        p.M(\n            f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n            f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n        )\n\n        for i in range(1, number_of_vertices):\n            rotation_angle = inner_angle * i + initial_angle\n            rotated_radius_vector = radius_vector.rotate_around_origin(\n                rotation_angle,\n            )\n            p.L(\n                f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n            )\n\n        p.Z()\n\n        aperture_group.append(p)\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_macro","title":"render_flash_macro","text":"<pre><code>render_flash_macro(\n    command: Flash2, aperture: Macro2\n) -&gt; None\n</code></pre> <p>Render flash macro aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n    \"\"\"Render flash macro aperture to target image.\"\"\"\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        self.push_render_frame(\n            command.get_bounding_box(),\n            normalize_origin_to_0_0=False,\n            flip_y=False,\n        )\n        for cmd in aperture.command_buffer:\n            cmd.render(self.renderer)\n\n        frame = self.pop_render_frame()\n        aperture_group = frame.group\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            x=self.convert_x(command.flash_point.x),\n            y=self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_region","title":"render_region","text":"<pre><code>render_region(command: Region2) -&gt; None\n</code></pre> <p>Render region to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_region(self, command: Region2) -&gt; None:\n    \"\"\"Render region to target image.\"\"\"\n    if len(command.command_buffer) == 0:\n        return\n\n    self.current_frame.is_region = True\n\n    color = self.get_color(command.transform.polarity)\n    region = drawsvg.Path(fill=color)\n\n    for cmd in command.command_buffer:\n        if isinstance(cmd, (Line2, Arc2, CCArc2)):\n            region.M(\n                f\"{self.convert_x(cmd.start_point.x):.8f}\",\n                f\"{self.convert_y(cmd.start_point.y):.8f}\",\n            )\n            break\n\n    for cmd in command.command_buffer:\n        if isinstance(cmd, Line2):\n            self.render_line_to_path(cmd, region)\n        elif isinstance(cmd, Arc2):\n            self.render_arc_to_path(cmd, region)\n        elif isinstance(cmd, CCArc2):\n            self.render_cc_arc_to_path(cmd, region)\n        else:\n            raise NotImplementedError\n\n    region.Z()\n    self.add_element_to_frame(command.transform.polarity, region)\n\n    self.current_frame.is_region = False\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_line_to_path","title":"render_line_to_path","text":"<pre><code>render_line_to_path(\n    command: Line2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_line_to_path(self, command: Line2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    path.L(\n        f\"{self.convert_x(command.end_point.x):.8f}\",\n        f\"{self.convert_y(command.end_point.y):.8f}\",\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_arc_to_path","title":"render_arc_to_path","text":"<pre><code>render_arc_to_path(\n    command: Arc2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_arc_to_path(self, command: Arc2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    relative_start_vector = command.get_relative_start_point()\n    relative_end_vector = command.get_relative_end_point()\n\n    angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n    angle_counter_clockwise = relative_start_vector.angle_between_cc(\n        relative_end_vector,\n    )\n    # We want to render clockwise angle, so if cc angle is bigger, we need to\n    # choose small angle.\n    large_arc = angle_clockwise &gt;= angle_counter_clockwise\n    sweep = 1\n\n    path.A(\n        rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n        ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n        rot=0,\n        large_arc=large_arc,\n        sweep=sweep,\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_cc_arc_to_path","title":"render_cc_arc_to_path","text":"<pre><code>render_cc_arc_to_path(\n    command: CCArc2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_cc_arc_to_path(self, command: CCArc2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    relative_start_vector = command.get_relative_start_point()\n    relative_end_vector = command.get_relative_end_point()\n\n    angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n    angle_counter_clockwise = relative_start_vector.angle_between_cc(\n        relative_end_vector,\n    )\n    # We want to render clockwise angle, so if cc angle is bigger, we need to\n    # choose small angle.\n    large_arc = not (angle_clockwise &gt;= angle_counter_clockwise)\n    sweep = 0\n\n    path.A(\n        rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n        ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n        rot=0,\n        large_arc=large_arc,\n        sweep=sweep,\n    )\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    return SvgImageRef(self.drawing)\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize rendering.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize rendering.\"\"\"\n    if len(self.rendering_stack) &gt; 1:\n        self.rendering_stack = [self.rendering_stack[0]]\n    elif len(self.rendering_stack) &lt; 1:\n        raise RuntimeError\n\n    width = self.convert_size(self.current_frame.bounding_box.width)\n    height = self.convert_size(self.current_frame.bounding_box.height)\n    self.drawing = drawsvg.Drawing(\n        width=width,\n        height=height,\n    )\n    self.drawing.append(self.get_layer(Polarity.Dark))\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgImageRef","title":"SvgImageRef","text":"<p>             Bases: <code>ImageRef</code></p> <p>Generic container for reference to rendered image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgImageRef(ImageRef):\n    \"\"\"Generic container for reference to rendered image.\"\"\"\n\n    def __init__(self, image: drawsvg.Drawing) -&gt; None:\n        self.image = image\n\n    def _save_to_io(\n        self,\n        output: BinaryIO,\n        options: Optional[FormatOptions] = None,  # noqa: ARG002\n    ) -&gt; None:\n        \"\"\"Save rendered image to bytes stream buffer.\"\"\"\n        svg = self.image.as_svg()\n        if svg is None:\n            return\n        output.write(svg.encode(\"utf-8\"))\n</code></pre>"},{"location":"70_gerber/11_reference_svg.html#pygerber.gerberx3.renderer2.svg.SvgFormatOptions","title":"SvgFormatOptions","text":"<p>Format options for SVG format.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgFormatOptions:\n    \"\"\"Format options for SVG format.\"\"\"\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html","title":"Raster Renderer API Reference","text":""},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster","title":"raster","text":"<p>Module contains implementation of Gerber rendering backend outputting raster images.</p>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2","title":"RasterRenderer2","text":"<p>             Bases: <code>Renderer2</code></p> <p>Rendering backend for creating raster images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderer2(Renderer2):\n    \"\"\"Rendering backend for creating raster images.\"\"\"\n\n    def __init__(\n        self,\n        hooks: Optional[RasterRenderer2Hooks] = None,\n    ) -&gt; None:\n        hooks = RasterRenderer2Hooks() if hooks is None else hooks\n        super().__init__(hooks)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder","title":"RasterRenderingFrameBuilder","text":"<p>Builder for RasterRenderingFrame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderingFrameBuilder:\n    \"\"\"Builder for RasterRenderingFrame.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self.command_buffer: Optional[ReadonlyCommandBuffer2] = None\n        self.bounding_box: Optional[BoundingBox] = None\n        self.image: Optional[Image.Image] = None\n        self.mask: Optional[Image.Image] = None\n        self.color_scheme: Optional[ColorScheme] = None\n        self.is_region: bool = False\n        self.dpmm = 1\n        self.scale = Decimal(\"1\")\n        self.polarity: Optional[Polarity] = None\n        self.x_offset = 0\n        self.y_offset = 0\n\n    def set_command_buffer(self, command_buffer: ReadonlyCommandBuffer2) -&gt; Self:\n        \"\"\"Specify source buffer.\"\"\"\n        self.command_buffer = command_buffer\n        return self\n\n    def set_command_buffer_from_list(self, commands: list[Command2]) -&gt; Self:\n        \"\"\"Specify source buffer.\"\"\"\n        self.command_buffer = ReadonlyCommandBuffer2(commands=commands)\n        return self\n\n    def set_dpmm(self, dpmm: int) -&gt; Self:\n        \"\"\"Specify image dpmm.\"\"\"\n        self.dpmm = dpmm\n        return self\n\n    def set_scale(self, scale: Decimal) -&gt; Self:\n        \"\"\"Specify rendering scale.\"\"\"\n        self.scale = scale\n        return self\n\n    def set_image(self, image: Image.Image) -&gt; Self:\n        \"\"\"Specify image.\"\"\"\n        self.image = image\n        return self\n\n    def set_mask(self, mask: Image.Image) -&gt; Self:\n        \"\"\"Specify mask.\"\"\"\n        self.mask = mask\n        return self\n\n    def set_region(self, *, is_region: bool) -&gt; Self:\n        \"\"\"Specify region.\"\"\"\n        self.is_region = is_region\n        return self\n\n    def set_color_scheme(self, color_scheme: ColorScheme) -&gt; Self:\n        \"\"\"Specify color scheme.\"\"\"\n        self.color_scheme = color_scheme\n        return self\n\n    def set_polarity(self, polarity: Polarity) -&gt; Self:\n        \"\"\"Specify polarity.\"\"\"\n        self.polarity = polarity\n        return self\n\n    def set_pixel_dimension_offsets(self, x: int = 0, y: int = 0) -&gt; Self:\n        \"\"\"Set pixel dimension offsets.\"\"\"\n        self.x_offset = x\n        self.y_offset = y\n        return self\n\n    def build(self, *, with_mask: bool = True) -&gt; RasterRenderingFrame:\n        \"\"\"Build final rendering frame container.\"\"\"\n        command_buffer = (\n            self.command_buffer\n            if self.command_buffer is not None\n            else throw(RuntimeError(\"Command buffer not set.\"))\n        )\n        bbox = (\n            command_buffer.get_bounding_box()\n            if self.bounding_box is None\n            else self.bounding_box\n        )\n        dimensions = (\n            max(custom_round(bbox.width.as_millimeters() * self.dpmm * self.scale), 1)\n            + self.x_offset,\n            max(custom_round(bbox.height.as_millimeters() * self.dpmm * self.scale), 1)\n            + self.y_offset,\n        )\n        image = (\n            Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n            if self.image is None\n            else self.image\n        )\n        mask = (\n            (\n                Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n                if self.mask is None\n                else self.mask\n            )\n            if with_mask\n            else None\n        )\n        color_scheme = self.color_scheme or throw(RuntimeError(\"Missing color schema.\"))\n        polarity = self.polarity or throw(RuntimeError(\"Missing polarity.\"))\n        # Unset command buffer to prevent unintended reuse.\n        self.command_buffer = None\n        self.polarity = None\n\n        return RasterRenderingFrame(\n            command_buffer=command_buffer,\n            bounding_box=bbox,\n            image=image,\n            mask=mask,\n            color_scheme=color_scheme,\n            polarity=polarity,\n            is_region=self.is_region,\n        )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_command_buffer","title":"set_command_buffer","text":"<pre><code>set_command_buffer(\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; Self\n</code></pre> <p>Specify source buffer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_command_buffer(self, command_buffer: ReadonlyCommandBuffer2) -&gt; Self:\n    \"\"\"Specify source buffer.\"\"\"\n    self.command_buffer = command_buffer\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_command_buffer_from_list","title":"set_command_buffer_from_list","text":"<pre><code>set_command_buffer_from_list(\n    commands: list[Command2],\n) -&gt; Self\n</code></pre> <p>Specify source buffer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_command_buffer_from_list(self, commands: list[Command2]) -&gt; Self:\n    \"\"\"Specify source buffer.\"\"\"\n    self.command_buffer = ReadonlyCommandBuffer2(commands=commands)\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_dpmm","title":"set_dpmm","text":"<pre><code>set_dpmm(dpmm: int) -&gt; Self\n</code></pre> <p>Specify image dpmm.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_dpmm(self, dpmm: int) -&gt; Self:\n    \"\"\"Specify image dpmm.\"\"\"\n    self.dpmm = dpmm\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_scale","title":"set_scale","text":"<pre><code>set_scale(scale: Decimal) -&gt; Self\n</code></pre> <p>Specify rendering scale.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_scale(self, scale: Decimal) -&gt; Self:\n    \"\"\"Specify rendering scale.\"\"\"\n    self.scale = scale\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_image","title":"set_image","text":"<pre><code>set_image(image: Image.Image) -&gt; Self\n</code></pre> <p>Specify image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_image(self, image: Image.Image) -&gt; Self:\n    \"\"\"Specify image.\"\"\"\n    self.image = image\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_mask","title":"set_mask","text":"<pre><code>set_mask(mask: Image.Image) -&gt; Self\n</code></pre> <p>Specify mask.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_mask(self, mask: Image.Image) -&gt; Self:\n    \"\"\"Specify mask.\"\"\"\n    self.mask = mask\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_region","title":"set_region","text":"<pre><code>set_region(*, is_region: bool) -&gt; Self\n</code></pre> <p>Specify region.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_region(self, *, is_region: bool) -&gt; Self:\n    \"\"\"Specify region.\"\"\"\n    self.is_region = is_region\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_color_scheme","title":"set_color_scheme","text":"<pre><code>set_color_scheme(color_scheme: ColorScheme) -&gt; Self\n</code></pre> <p>Specify color scheme.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_color_scheme(self, color_scheme: ColorScheme) -&gt; Self:\n    \"\"\"Specify color scheme.\"\"\"\n    self.color_scheme = color_scheme\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_polarity","title":"set_polarity","text":"<pre><code>set_polarity(polarity: Polarity) -&gt; Self\n</code></pre> <p>Specify polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_polarity(self, polarity: Polarity) -&gt; Self:\n    \"\"\"Specify polarity.\"\"\"\n    self.polarity = polarity\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_pixel_dimension_offsets","title":"set_pixel_dimension_offsets","text":"<pre><code>set_pixel_dimension_offsets(x: int = 0, y: int = 0) -&gt; Self\n</code></pre> <p>Set pixel dimension offsets.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_pixel_dimension_offsets(self, x: int = 0, y: int = 0) -&gt; Self:\n    \"\"\"Set pixel dimension offsets.\"\"\"\n    self.x_offset = x\n    self.y_offset = y\n    return self\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.build","title":"build","text":"<pre><code>build(*, with_mask: bool = True) -&gt; RasterRenderingFrame\n</code></pre> <p>Build final rendering frame container.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def build(self, *, with_mask: bool = True) -&gt; RasterRenderingFrame:\n    \"\"\"Build final rendering frame container.\"\"\"\n    command_buffer = (\n        self.command_buffer\n        if self.command_buffer is not None\n        else throw(RuntimeError(\"Command buffer not set.\"))\n    )\n    bbox = (\n        command_buffer.get_bounding_box()\n        if self.bounding_box is None\n        else self.bounding_box\n    )\n    dimensions = (\n        max(custom_round(bbox.width.as_millimeters() * self.dpmm * self.scale), 1)\n        + self.x_offset,\n        max(custom_round(bbox.height.as_millimeters() * self.dpmm * self.scale), 1)\n        + self.y_offset,\n    )\n    image = (\n        Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n        if self.image is None\n        else self.image\n    )\n    mask = (\n        (\n            Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n            if self.mask is None\n            else self.mask\n        )\n        if with_mask\n        else None\n    )\n    color_scheme = self.color_scheme or throw(RuntimeError(\"Missing color schema.\"))\n    polarity = self.polarity or throw(RuntimeError(\"Missing polarity.\"))\n    # Unset command buffer to prevent unintended reuse.\n    self.command_buffer = None\n    self.polarity = None\n\n    return RasterRenderingFrame(\n        command_buffer=command_buffer,\n        bounding_box=bbox,\n        image=image,\n        mask=mask,\n        color_scheme=color_scheme,\n        polarity=polarity,\n        is_region=self.is_region,\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame","title":"RasterRenderingFrame","text":"<p>Container for rendering variables.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderingFrame:\n    \"\"\"Container for rendering variables.\"\"\"\n\n    def __init__(\n        self,\n        command_buffer: ReadonlyCommandBuffer2,\n        bounding_box: BoundingBox,\n        image: Image.Image,\n        mask: Optional[Image.Image],\n        color_scheme: ColorScheme,\n        polarity: Polarity,\n        *,\n        is_region: bool = False,\n    ) -&gt; None:\n        self.command_buffer = command_buffer\n        self.bounding_box = bounding_box\n        self.image = image\n        self.layer = ImageDraw.ImageDraw(image)\n        self.mask = mask\n        self.mask_draw = None if mask is None else ImageDraw.ImageDraw(mask)\n        self.color_scheme = color_scheme\n        self.polarity = polarity\n        self.is_region = is_region\n\n    def get_aperture(self) -&gt; RasterAperture:\n        \"\"\"Return aperture.\"\"\"\n        if self.mask is None:\n            msg = \"Invalid aperture mask.\"\n            raise RuntimeError(msg)\n        return RasterAperture(image=self.image, mask=self.mask)\n\n    def get_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if self.polarity == Polarity.Dark:\n            return self._get_color(polarity)\n        return self._get_color(polarity.invert())\n\n    def _get_color(self, polarity: Polarity) -&gt; str:\n        if self.is_region:\n            if polarity == Polarity.Dark:\n                return self.color_scheme.solid_region_color.to_hex()\n            return self.color_scheme.clear_region_color.to_hex()\n\n        if polarity == Polarity.Dark:\n            return self.color_scheme.solid_color.to_hex()\n        return self.color_scheme.clear_color.to_hex()\n\n    def get_mask_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if polarity == Polarity.Dark:\n            return \"#FFFFFFFF\"\n        return \"#00000000\"\n\n    def line(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw line on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.line(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.line(*args, **kwargs)\n\n    def arc(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw arc on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.arc(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.arc(*args, **kwargs)\n\n    def ellipse(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw ellipse on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.ellipse(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.ellipse(*args, **kwargs)\n\n    def rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw rectangle on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.rectangle(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.rectangle(*args, **kwargs)\n\n    def rounded_rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw rounded rectangle on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.rounded_rectangle(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.rounded_rectangle(*args, **kwargs)\n\n    def regular_polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw regular polygon on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.regular_polygon(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.regular_polygon(*args, **kwargs)\n\n    def polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw polygon on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.polygon(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.polygon(*args, **kwargs)\n\n    def paste(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw polygon on image.\"\"\"\n        self.image.paste(*args, **kwargs)\n        if self.mask is not None:\n            self.mask.paste(*args, **kwargs)\n\n    def region_mode(self) -&gt; ContextManager[None]:\n        \"\"\"Set rendering mode to region.\"\"\"\n\n        @contextmanager\n        def _with() -&gt; Generator[None, None, None]:\n            self.is_region = True\n            yield\n            self.is_region = False\n\n        return _with()\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture() -&gt; RasterAperture\n</code></pre> <p>Return aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture(self) -&gt; RasterAperture:\n    \"\"\"Return aperture.\"\"\"\n    if self.mask is None:\n        msg = \"Invalid aperture mask.\"\n        raise RuntimeError(msg)\n    return RasterAperture(image=self.image, mask=self.mask)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_color","title":"get_color","text":"<pre><code>get_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if self.polarity == Polarity.Dark:\n        return self._get_color(polarity)\n    return self._get_color(polarity.invert())\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_mask_color","title":"get_mask_color","text":"<pre><code>get_mask_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_mask_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if polarity == Polarity.Dark:\n        return \"#FFFFFFFF\"\n    return \"#00000000\"\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.line","title":"line","text":"<pre><code>line(polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw line on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def line(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw line on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.line(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.line(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.arc","title":"arc","text":"<pre><code>arc(polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw arc on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def arc(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw arc on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.arc(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.arc(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.ellipse","title":"ellipse","text":"<pre><code>ellipse(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw ellipse on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def ellipse(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw ellipse on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.ellipse(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.ellipse(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw rectangle on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw rectangle on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.rectangle(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.rectangle(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.rounded_rectangle","title":"rounded_rectangle","text":"<pre><code>rounded_rectangle(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw rounded rectangle on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def rounded_rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw rounded rectangle on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.rounded_rectangle(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.rounded_rectangle(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.regular_polygon","title":"regular_polygon","text":"<pre><code>regular_polygon(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw regular polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def regular_polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw regular polygon on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.regular_polygon(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.regular_polygon(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.polygon","title":"polygon","text":"<pre><code>polygon(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw polygon on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.polygon(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.polygon(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.paste","title":"paste","text":"<pre><code>paste(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def paste(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw polygon on image.\"\"\"\n    self.image.paste(*args, **kwargs)\n    if self.mask is not None:\n        self.mask.paste(*args, **kwargs)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.region_mode","title":"region_mode","text":"<pre><code>region_mode() -&gt; ContextManager[None]\n</code></pre> <p>Set rendering mode to region.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def region_mode(self) -&gt; ContextManager[None]:\n    \"\"\"Set rendering mode to region.\"\"\"\n\n    @contextmanager\n    def _with() -&gt; Generator[None, None, None]:\n        self.is_region = True\n        yield\n        self.is_region = False\n\n    return _with()\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterAperture","title":"RasterAperture","text":"<p>Raster Aperture model.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterAperture:\n    \"\"\"Raster Aperture model.\"\"\"\n\n    def __init__(self, image: Image.Image, mask: Image.Image) -&gt; None:\n        self.image = image\n        self.mask = mask\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks","title":"RasterRenderer2Hooks","text":"<p>             Bases: <code>Renderer2HooksABC</code></p> <p>Class implementing rendering hooks to output raster images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderer2Hooks(Renderer2HooksABC):\n    \"\"\"Class implementing rendering hooks to output raster images.\"\"\"\n\n    def __init__(\n        self,\n        color_scheme: ColorScheme = ColorScheme.DEBUG_1_ALPHA,\n        scale: Decimal = Decimal(\"1\"),\n        dpmm: int = 20,\n        *,\n        flip_y: bool = True,\n    ) -&gt; None:\n        self.color_scheme = color_scheme\n        self.scale = scale\n        self.dpmm = dpmm\n        self.flip_y = flip_y\n        self.frame_builder = (\n            RasterRenderingFrameBuilder()\n            .set_dpmm(self.dpmm)\n            .set_scale(self.scale)\n            .set_color_scheme(self.color_scheme)\n        )\n\n    def init(\n        self,\n        renderer: Renderer2,\n        command_buffer: ReadonlyCommandBuffer2,\n    ) -&gt; None:\n        \"\"\"Initialize renderer.\"\"\"\n        if not isinstance(renderer, RasterRenderer2):\n            raise NotImplementedError\n\n        self.renderer = renderer\n        self.command_buffer = command_buffer\n        self.rendering_stack: list[RasterRenderingFrame] = []\n        self.push_render_frame(\n            self.frame_builder.set_polarity(Polarity.Dark)\n            .set_command_buffer(command_buffer)\n            .build(with_mask=False),\n        )\n        self.apertures: dict[str, RasterAperture] = {}\n\n    def push_render_frame(self, cmd: RasterRenderingFrame) -&gt; None:\n        \"\"\"Push new segment render frame.\"\"\"\n        self.rendering_stack.append(cmd)\n\n    def pop_render_frame(self) -&gt; RasterRenderingFrame:\n        \"\"\"Pop segment render frame.\"\"\"\n        if len(self.rendering_stack) &lt;= 1:\n            raise RuntimeError\n        return self.rendering_stack.pop()\n\n    @property\n    def frame(self) -&gt; RasterRenderingFrame:\n        \"\"\"Get current rendering stack frame.\"\"\"\n        return self.rendering_stack[-1]\n\n    def convert_xy(self, v: Vector2D) -&gt; tuple[int, int]:\n        \"\"\"Convert vector coordinates to coordinates in image space.\"\"\"\n        return (\n            self.convert_x(v.x),\n            self.convert_y(v.y),\n        )\n\n    def convert_x(self, x: Offset) -&gt; int:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        origin_offset_x = self.frame.bounding_box.min_x.as_millimeters()\n        corrected_position_x = x.as_millimeters() - origin_offset_x\n        return custom_round(\n            corrected_position_x * self.scale * self.dpmm - Decimal(0.5),\n        )\n\n    def convert_y(self, y: Offset) -&gt; int:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        origin_offset_y = self.frame.bounding_box.min_y.as_millimeters()\n        corrected_position_y = y.as_millimeters() - origin_offset_y\n        return custom_round(\n            corrected_position_y * self.scale * self.dpmm - Decimal(0.5),\n        )\n\n    def convert_size(self, diameter: Offset) -&gt; int:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        return max(custom_round(diameter.as_millimeters() * self.scale * self.dpmm), 1)\n\n    def convert_bbox(self, bbox: BoundingBox) -&gt; tuple[int, int, int, int]:\n        \"\"\"Convert bounding box region to pixel coordinates bbox.\"\"\"\n        return (\n            self.convert_x(bbox.min_x),\n            self.convert_y(bbox.min_y),\n            self.convert_x(bbox.max_x),\n            self.convert_y(bbox.max_y),\n        )\n\n    def get_aperture(self, aperture_id: str) -&gt; Optional[RasterAperture]:\n        \"\"\"Get SVG group representing aperture.\"\"\"\n        return self.apertures.get(aperture_id)\n\n    def set_aperture(\n        self,\n        aperture_id: str,\n        raster_aperture: RasterAperture,\n    ) -&gt; None:\n        \"\"\"Set SVG group representing aperture.\"\"\"\n        self.apertures[aperture_id] = raster_aperture\n\n    def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n        \"\"\"Return combined ID for listed aperture.\"\"\"\n        return (\n            f\"{aperture.identifier}%{transform.polarity.value}\"\n            f\"%{transform.get_transform_key()}\"\n        )\n\n    def render_line(self, command: Line2) -&gt; None:\n        \"\"\"Render line to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        self.frame.line(\n            command.transform.polarity,\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_arc(self, command: Arc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        bbox = self.convert_bbox(\n            BoundingBox.from_diameter(\n                (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n            )\n            + command.center_point,\n        )\n\n        if end_angle &lt; start_angle:\n            end_angle += 360\n\n        if end_angle == start_angle:\n            start_angle = 360\n            end_angle = 0\n\n        self.frame.arc(\n            command.transform.polarity,\n            bbox,\n            end_angle,\n            start_angle,\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_cc_arc(self, command: CCArc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        bbox = self.convert_bbox(\n            BoundingBox.from_diameter(\n                (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n            )\n            + command.center_point,\n        )\n\n        if end_angle &lt;= start_angle:\n            end_angle += 360\n\n        self.frame.arc(\n            command.transform.polarity,\n            bbox,\n            start_angle,\n            end_angle,\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n        \"\"\"Render flash circle to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        raster_aperture = self.get_aperture(aperture_id)\n\n        if raster_aperture is None:\n            bbox = list(self.convert_bbox(command.get_bounding_box()))\n            # Circles which are drawn with small amount of pixels are offset by 1 pixel\n            # for some reason. This is a first part of workaround for that. 30 pixels is\n            # an empirically determined threshold after which the offset is not needed\n            # anymore. We need to increase size of the bounding box by 1 pixel to\n            # fit a circle which size will also be increased by 1 pixel.\n            if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n                self.frame_builder.set_pixel_dimension_offsets(x=1, y=1)\n\n            # Unfortunately workaround implemented just above forces frame generation\n            # to be deferred to here.\n            frame_builder = self.frame_builder.set_polarity(\n                command.transform.polarity\n            ).set_command_buffer_from_list([command])\n            self.push_render_frame(frame_builder.build())\n            # Additionally we have to clean up frame_builder state we have altered.\n            self.frame_builder.set_pixel_dimension_offsets()\n\n            # We have to recalculate a bounding box after jumping into new frame as\n            # dimensions of the frame likely changed, therefore relative position of\n            # bounding box also changed.\n            bbox = list(self.convert_bbox(command.get_bounding_box()))\n            # This is a second part of workaround for circles which are drawn with small\n            # amount of pixels. We need to increase size of the circle itself. We\n            # couldn't do it earlier because we need to recalculate bbox for new frame.\n            if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n                bbox[2] += 1\n\n            self.frame.ellipse(\n                Polarity.Dark,\n                bbox,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            raster_aperture = frame.get_aperture()\n            self.set_aperture(aperture_id, raster_aperture)\n\n        self._paste_aperture(command, raster_aperture)\n\n    def _make_hole(\n        self,\n        command: Flash2,\n        aperture: Circle2 | Rectangle2 | Obround2 | Polygon2,\n    ) -&gt; None:\n        if aperture.hole_diameter is None:\n            return\n        self.frame.ellipse(\n            Polarity.Clear,\n            self.convert_bbox(\n                BoundingBox(\n                    min_x=-(aperture.hole_diameter / 2),\n                    min_y=-(aperture.hole_diameter / 2),\n                    max_x=aperture.hole_diameter / 2,\n                    max_y=aperture.hole_diameter / 2,\n                )\n                + command.flash_point,\n            ),\n        )\n\n    def _paste_aperture(self, command: Flash2, aperture_image: RasterAperture) -&gt; None:\n        bbox = command.get_bounding_box()\n        origin_x, origin_y = self.convert_bbox(bbox)[0:2]\n        self.frame.paste(\n            aperture_image.image,\n            (origin_x, origin_y),\n            mask=aperture_image.mask,\n        )\n\n    def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n        \"\"\"Render flash no circle aperture to target image.\"\"\"\n\n    def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n        \"\"\"Render flash rectangle to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        raster_aperture = self.get_aperture(aperture_id)\n\n        if raster_aperture is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n            edge_offset_vector = Vector2D(\n                x=aperture.x_size / 2,\n                y=Offset.new(0),\n            ).get_rotated(aperture.rotation)\n\n            max_xy = command.flash_point + edge_offset_vector\n            min_xy = command.flash_point - edge_offset_vector\n\n            start_xy = min_xy\n            end_xy = max_xy\n\n            tangent_vector = Vector2D(\n                x=Offset.new(0),\n                y=aperture.y_size / 2,\n            ).get_rotated(aperture.rotation)\n\n            self.frame.polygon(\n                Polarity.Dark,\n                (\n                    (self.convert_xy(start_xy + tangent_vector)),\n                    (self.convert_xy(start_xy - tangent_vector)),\n                    (self.convert_xy(end_xy - tangent_vector)),\n                    (self.convert_xy(end_xy + tangent_vector)),\n                ),\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            raster_aperture = frame.get_aperture()\n            self.set_aperture(aperture_id, raster_aperture)\n\n        self._paste_aperture(command, raster_aperture)\n\n    def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n        \"\"\"Render flash obround to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n\n            self.frame.rounded_rectangle(\n                Polarity.Dark,\n                self.convert_bbox(\n                    BoundingBox.from_rectangle(aperture.x_size, aperture.y_size)\n                    + command.flash_point,\n                ),\n                radius=min(\n                    self.convert_size(aperture.x_size),\n                    self.convert_size(aperture.y_size),\n                )\n                / 2,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n        \"\"\"Render flash polygon to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n\n            outer_diameter = aperture.outer_diameter\n            radius = self.convert_size(outer_diameter / 2)\n            # In PIL rotation angle goes in opposite direction than in Gerber and\n            # starts from different orientation.\n            rotation = -float(aperture.rotation) - 90.0\n            bbox = command.get_bounding_box()\n\n            self.frame.regular_polygon(\n                Polarity.Dark,\n                (\n                    self.convert_x(bbox.min_x) + radius,\n                    self.convert_y(bbox.min_y) + radius,\n                    radius,\n                ),\n                n_sides=aperture.number_vertices,\n                rotation=rotation,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n        \"\"\"Render flash macro aperture to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer(aperture.command_buffer)\n                .build(),\n            )\n\n            for cmd in aperture.command_buffer:\n                cmd.render(self.renderer)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_region(self, command: Region2) -&gt; None:\n        \"\"\"Render region to target image.\"\"\"\n        if len(command.command_buffer) == 0:\n            return\n\n        with self.frame.region_mode():\n            points: list[tuple[int, int]] = []\n\n            for cmd in command.command_buffer:\n                if isinstance(cmd, Line2):\n                    self.generate_line_points(cmd, points)\n                elif isinstance(cmd, Arc2):\n                    self.generate_arc_points(cmd, points)\n                elif isinstance(cmd, CCArc2):\n                    self.generate_cc_arc_points(cmd, points)\n                else:\n                    raise NotImplementedError\n\n            self.frame.polygon(command.transform.polarity, points)\n\n    def generate_line_points(\n        self,\n        command: Line2,\n        points: list[tuple[int, int]],\n    ) -&gt; None:\n        \"\"\"Generate points of line region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def generate_arc_points(self, command: Arc2, points: list[tuple[int, int]]) -&gt; None:\n        \"\"\"Generate points of arc region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        angle = command.get_relative_start_point().angle_between(\n            command.get_relative_end_point(),\n        )\n        angle_ratio = angle / 360\n        arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n        point_count = self.convert_size(arc_length / 1.618)\n        angle_step = Decimal(angle) / Decimal(point_count)\n\n        current_point = command.get_relative_start_point()\n        for i in range(point_count - 1):\n            rotated_current_point = current_point.rotate_around_origin(\n                -(i * angle_step),\n            )\n            absolute_current_point = command.center_point + rotated_current_point\n            points.append(\n                (\n                    self.convert_x(absolute_current_point.x),\n                    self.convert_y(absolute_current_point.y),\n                ),\n            )\n\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def generate_cc_arc_points(\n        self,\n        command: CCArc2,\n        points: list[tuple[int, int]],\n    ) -&gt; None:\n        \"\"\"Generate points of counter clockwise arc region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        angle = command.get_relative_start_point().angle_between(\n            command.get_relative_end_point(),\n        )\n        angle_ratio = angle / 360\n        arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n        point_count = self.convert_size(arc_length / 2)\n        angle_step = Decimal(angle) / Decimal(point_count)\n\n        current_point = command.get_relative_start_point()\n        for i in range(point_count - 1):\n            rotated_current_point = current_point.rotate_around_origin(i * angle_step)\n            absolute_current_point = command.center_point + rotated_current_point\n            points.append(\n                (\n                    self.convert_x(absolute_current_point.x),\n                    self.convert_y(absolute_current_point.y),\n                ),\n            )\n\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize renderer.\"\"\"\n        self.apertures.clear()\n        gc.collect(0)\n        gc.collect(1)\n        gc.collect(2)\n        self.frame.image = self.frame.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n        gc.collect(0)\n        gc.collect(1)\n        gc.collect(2)\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        return RasterImageRef(self.frame.image)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.frame","title":"frame  <code>property</code>","text":"<pre><code>frame: RasterRenderingFrame\n</code></pre> <p>Get current rendering stack frame.</p>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.init","title":"init","text":"<pre><code>init(\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None\n</code></pre> <p>Initialize renderer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def init(\n    self,\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None:\n    \"\"\"Initialize renderer.\"\"\"\n    if not isinstance(renderer, RasterRenderer2):\n        raise NotImplementedError\n\n    self.renderer = renderer\n    self.command_buffer = command_buffer\n    self.rendering_stack: list[RasterRenderingFrame] = []\n    self.push_render_frame(\n        self.frame_builder.set_polarity(Polarity.Dark)\n        .set_command_buffer(command_buffer)\n        .build(with_mask=False),\n    )\n    self.apertures: dict[str, RasterAperture] = {}\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.push_render_frame","title":"push_render_frame","text":"<pre><code>push_render_frame(cmd: RasterRenderingFrame) -&gt; None\n</code></pre> <p>Push new segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def push_render_frame(self, cmd: RasterRenderingFrame) -&gt; None:\n    \"\"\"Push new segment render frame.\"\"\"\n    self.rendering_stack.append(cmd)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.pop_render_frame","title":"pop_render_frame","text":"<pre><code>pop_render_frame() -&gt; RasterRenderingFrame\n</code></pre> <p>Pop segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def pop_render_frame(self) -&gt; RasterRenderingFrame:\n    \"\"\"Pop segment render frame.\"\"\"\n    if len(self.rendering_stack) &lt;= 1:\n        raise RuntimeError\n    return self.rendering_stack.pop()\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_xy","title":"convert_xy","text":"<pre><code>convert_xy(v: Vector2D) -&gt; tuple[int, int]\n</code></pre> <p>Convert vector coordinates to coordinates in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_xy(self, v: Vector2D) -&gt; tuple[int, int]:\n    \"\"\"Convert vector coordinates to coordinates in image space.\"\"\"\n    return (\n        self.convert_x(v.x),\n        self.convert_y(v.y),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_x","title":"convert_x","text":"<pre><code>convert_x(x: Offset) -&gt; int\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_x(self, x: Offset) -&gt; int:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    origin_offset_x = self.frame.bounding_box.min_x.as_millimeters()\n    corrected_position_x = x.as_millimeters() - origin_offset_x\n    return custom_round(\n        corrected_position_x * self.scale * self.dpmm - Decimal(0.5),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_y","title":"convert_y","text":"<pre><code>convert_y(y: Offset) -&gt; int\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_y(self, y: Offset) -&gt; int:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    origin_offset_y = self.frame.bounding_box.min_y.as_millimeters()\n    corrected_position_y = y.as_millimeters() - origin_offset_y\n    return custom_round(\n        corrected_position_y * self.scale * self.dpmm - Decimal(0.5),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_size","title":"convert_size","text":"<pre><code>convert_size(diameter: Offset) -&gt; int\n</code></pre> <p>Convert y offset to pixel y coordinate.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_size(self, diameter: Offset) -&gt; int:\n    \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n    return max(custom_round(diameter.as_millimeters() * self.scale * self.dpmm), 1)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_bbox","title":"convert_bbox","text":"<pre><code>convert_bbox(\n    bbox: BoundingBox,\n) -&gt; tuple[int, int, int, int]\n</code></pre> <p>Convert bounding box region to pixel coordinates bbox.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_bbox(self, bbox: BoundingBox) -&gt; tuple[int, int, int, int]:\n    \"\"\"Convert bounding box region to pixel coordinates bbox.\"\"\"\n    return (\n        self.convert_x(bbox.min_x),\n        self.convert_y(bbox.min_y),\n        self.convert_x(bbox.max_x),\n        self.convert_y(bbox.max_y),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture(aperture_id: str) -&gt; Optional[RasterAperture]\n</code></pre> <p>Get SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture(self, aperture_id: str) -&gt; Optional[RasterAperture]:\n    \"\"\"Get SVG group representing aperture.\"\"\"\n    return self.apertures.get(aperture_id)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.set_aperture","title":"set_aperture","text":"<pre><code>set_aperture(\n    aperture_id: str, raster_aperture: RasterAperture\n) -&gt; None\n</code></pre> <p>Set SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_aperture(\n    self,\n    aperture_id: str,\n    raster_aperture: RasterAperture,\n) -&gt; None:\n    \"\"\"Set SVG group representing aperture.\"\"\"\n    self.apertures[aperture_id] = raster_aperture\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_aperture_id","title":"get_aperture_id","text":"<pre><code>get_aperture_id(\n    aperture: Aperture2, transform: ApertureTransform\n) -&gt; str\n</code></pre> <p>Return combined ID for listed aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n    \"\"\"Return combined ID for listed aperture.\"\"\"\n    return (\n        f\"{aperture.identifier}%{transform.polarity.value}\"\n        f\"%{transform.get_transform_key()}\"\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_line","title":"render_line","text":"<pre><code>render_line(command: Line2) -&gt; None\n</code></pre> <p>Render line to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_line(self, command: Line2) -&gt; None:\n    \"\"\"Render line to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    self.frame.line(\n        command.transform.polarity,\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_arc","title":"render_arc","text":"<pre><code>render_arc(command: Arc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_arc(self, command: Arc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    start_angle = (\n        command.get_relative_start_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    end_angle = (\n        command.get_relative_end_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    bbox = self.convert_bbox(\n        BoundingBox.from_diameter(\n            (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n        )\n        + command.center_point,\n    )\n\n    if end_angle &lt; start_angle:\n        end_angle += 360\n\n    if end_angle == start_angle:\n        start_angle = 360\n        end_angle = 0\n\n    self.frame.arc(\n        command.transform.polarity,\n        bbox,\n        end_angle,\n        start_angle,\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_cc_arc","title":"render_cc_arc","text":"<pre><code>render_cc_arc(command: CCArc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_cc_arc(self, command: CCArc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    start_angle = (\n        command.get_relative_start_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    end_angle = (\n        command.get_relative_end_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    bbox = self.convert_bbox(\n        BoundingBox.from_diameter(\n            (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n        )\n        + command.center_point,\n    )\n\n    if end_angle &lt;= start_angle:\n        end_angle += 360\n\n    self.frame.arc(\n        command.transform.polarity,\n        bbox,\n        start_angle,\n        end_angle,\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_circle","title":"render_flash_circle","text":"<pre><code>render_flash_circle(\n    command: Flash2, aperture: Circle2\n) -&gt; None\n</code></pre> <p>Render flash circle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n    \"\"\"Render flash circle to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    raster_aperture = self.get_aperture(aperture_id)\n\n    if raster_aperture is None:\n        bbox = list(self.convert_bbox(command.get_bounding_box()))\n        # Circles which are drawn with small amount of pixels are offset by 1 pixel\n        # for some reason. This is a first part of workaround for that. 30 pixels is\n        # an empirically determined threshold after which the offset is not needed\n        # anymore. We need to increase size of the bounding box by 1 pixel to\n        # fit a circle which size will also be increased by 1 pixel.\n        if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n            self.frame_builder.set_pixel_dimension_offsets(x=1, y=1)\n\n        # Unfortunately workaround implemented just above forces frame generation\n        # to be deferred to here.\n        frame_builder = self.frame_builder.set_polarity(\n            command.transform.polarity\n        ).set_command_buffer_from_list([command])\n        self.push_render_frame(frame_builder.build())\n        # Additionally we have to clean up frame_builder state we have altered.\n        self.frame_builder.set_pixel_dimension_offsets()\n\n        # We have to recalculate a bounding box after jumping into new frame as\n        # dimensions of the frame likely changed, therefore relative position of\n        # bounding box also changed.\n        bbox = list(self.convert_bbox(command.get_bounding_box()))\n        # This is a second part of workaround for circles which are drawn with small\n        # amount of pixels. We need to increase size of the circle itself. We\n        # couldn't do it earlier because we need to recalculate bbox for new frame.\n        if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n            bbox[2] += 1\n\n        self.frame.ellipse(\n            Polarity.Dark,\n            bbox,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        raster_aperture = frame.get_aperture()\n        self.set_aperture(aperture_id, raster_aperture)\n\n    self._paste_aperture(command, raster_aperture)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_no_circle","title":"render_flash_no_circle","text":"<pre><code>render_flash_no_circle(\n    command: Flash2, aperture: NoCircle2\n) -&gt; None\n</code></pre> <p>Render flash no circle aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n    \"\"\"Render flash no circle aperture to target image.\"\"\"\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_rectangle","title":"render_flash_rectangle","text":"<pre><code>render_flash_rectangle(\n    command: Flash2, aperture: Rectangle2\n) -&gt; None\n</code></pre> <p>Render flash rectangle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n    \"\"\"Render flash rectangle to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    raster_aperture = self.get_aperture(aperture_id)\n\n    if raster_aperture is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n        edge_offset_vector = Vector2D(\n            x=aperture.x_size / 2,\n            y=Offset.new(0),\n        ).get_rotated(aperture.rotation)\n\n        max_xy = command.flash_point + edge_offset_vector\n        min_xy = command.flash_point - edge_offset_vector\n\n        start_xy = min_xy\n        end_xy = max_xy\n\n        tangent_vector = Vector2D(\n            x=Offset.new(0),\n            y=aperture.y_size / 2,\n        ).get_rotated(aperture.rotation)\n\n        self.frame.polygon(\n            Polarity.Dark,\n            (\n                (self.convert_xy(start_xy + tangent_vector)),\n                (self.convert_xy(start_xy - tangent_vector)),\n                (self.convert_xy(end_xy - tangent_vector)),\n                (self.convert_xy(end_xy + tangent_vector)),\n            ),\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        raster_aperture = frame.get_aperture()\n        self.set_aperture(aperture_id, raster_aperture)\n\n    self._paste_aperture(command, raster_aperture)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_obround","title":"render_flash_obround","text":"<pre><code>render_flash_obround(\n    command: Flash2, aperture: Obround2\n) -&gt; None\n</code></pre> <p>Render flash obround to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n    \"\"\"Render flash obround to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n\n        self.frame.rounded_rectangle(\n            Polarity.Dark,\n            self.convert_bbox(\n                BoundingBox.from_rectangle(aperture.x_size, aperture.y_size)\n                + command.flash_point,\n            ),\n            radius=min(\n                self.convert_size(aperture.x_size),\n                self.convert_size(aperture.y_size),\n            )\n            / 2,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_polygon","title":"render_flash_polygon","text":"<pre><code>render_flash_polygon(\n    command: Flash2, aperture: Polygon2\n) -&gt; None\n</code></pre> <p>Render flash polygon to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n    \"\"\"Render flash polygon to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n\n        outer_diameter = aperture.outer_diameter\n        radius = self.convert_size(outer_diameter / 2)\n        # In PIL rotation angle goes in opposite direction than in Gerber and\n        # starts from different orientation.\n        rotation = -float(aperture.rotation) - 90.0\n        bbox = command.get_bounding_box()\n\n        self.frame.regular_polygon(\n            Polarity.Dark,\n            (\n                self.convert_x(bbox.min_x) + radius,\n                self.convert_y(bbox.min_y) + radius,\n                radius,\n            ),\n            n_sides=aperture.number_vertices,\n            rotation=rotation,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_macro","title":"render_flash_macro","text":"<pre><code>render_flash_macro(\n    command: Flash2, aperture: Macro2\n) -&gt; None\n</code></pre> <p>Render flash macro aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n    \"\"\"Render flash macro aperture to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer(aperture.command_buffer)\n            .build(),\n        )\n\n        for cmd in aperture.command_buffer:\n            cmd.render(self.renderer)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_region","title":"render_region","text":"<pre><code>render_region(command: Region2) -&gt; None\n</code></pre> <p>Render region to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_region(self, command: Region2) -&gt; None:\n    \"\"\"Render region to target image.\"\"\"\n    if len(command.command_buffer) == 0:\n        return\n\n    with self.frame.region_mode():\n        points: list[tuple[int, int]] = []\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, Line2):\n                self.generate_line_points(cmd, points)\n            elif isinstance(cmd, Arc2):\n                self.generate_arc_points(cmd, points)\n            elif isinstance(cmd, CCArc2):\n                self.generate_cc_arc_points(cmd, points)\n            else:\n                raise NotImplementedError\n\n        self.frame.polygon(command.transform.polarity, points)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_line_points","title":"generate_line_points","text":"<pre><code>generate_line_points(\n    command: Line2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_line_points(\n    self,\n    command: Line2,\n    points: list[tuple[int, int]],\n) -&gt; None:\n    \"\"\"Generate points of line region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_arc_points","title":"generate_arc_points","text":"<pre><code>generate_arc_points(\n    command: Arc2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of arc region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_arc_points(self, command: Arc2, points: list[tuple[int, int]]) -&gt; None:\n    \"\"\"Generate points of arc region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    angle = command.get_relative_start_point().angle_between(\n        command.get_relative_end_point(),\n    )\n    angle_ratio = angle / 360\n    arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n    point_count = self.convert_size(arc_length / 1.618)\n    angle_step = Decimal(angle) / Decimal(point_count)\n\n    current_point = command.get_relative_start_point()\n    for i in range(point_count - 1):\n        rotated_current_point = current_point.rotate_around_origin(\n            -(i * angle_step),\n        )\n        absolute_current_point = command.center_point + rotated_current_point\n        points.append(\n            (\n                self.convert_x(absolute_current_point.x),\n                self.convert_y(absolute_current_point.y),\n            ),\n        )\n\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_cc_arc_points","title":"generate_cc_arc_points","text":"<pre><code>generate_cc_arc_points(\n    command: CCArc2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of counter clockwise arc region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_cc_arc_points(\n    self,\n    command: CCArc2,\n    points: list[tuple[int, int]],\n) -&gt; None:\n    \"\"\"Generate points of counter clockwise arc region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    angle = command.get_relative_start_point().angle_between(\n        command.get_relative_end_point(),\n    )\n    angle_ratio = angle / 360\n    arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n    point_count = self.convert_size(arc_length / 2)\n    angle_step = Decimal(angle) / Decimal(point_count)\n\n    current_point = command.get_relative_start_point()\n    for i in range(point_count - 1):\n        rotated_current_point = current_point.rotate_around_origin(i * angle_step)\n        absolute_current_point = command.center_point + rotated_current_point\n        points.append(\n            (\n                self.convert_x(absolute_current_point.x),\n                self.convert_y(absolute_current_point.y),\n            ),\n        )\n\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize renderer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize renderer.\"\"\"\n    self.apertures.clear()\n    gc.collect(0)\n    gc.collect(1)\n    gc.collect(2)\n    self.frame.image = self.frame.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n    gc.collect(0)\n    gc.collect(1)\n    gc.collect(2)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    return RasterImageRef(self.frame.image)\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterImageRef","title":"RasterImageRef","text":"<p>             Bases: <code>ImageRef</code></p> <p>Reference to raster image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterImageRef(ImageRef):\n    \"\"\"Reference to raster image.\"\"\"\n\n    def __init__(self, image: Image.Image) -&gt; None:\n        self.image = image\n\n    def _save_to_io(\n        self,\n        output: BinaryIO,\n        options: FormatOptions | None = None,\n    ) -&gt; None:\n        if isinstance(options, RasterFormatOptions):\n            if self.image.mode.casefold() != options.pixel_format.value.casefold():\n                image = self.image.convert(options.pixel_format.value)\n            else:\n                image = self.image\n\n            kwargs = {}\n\n            if options.image_format != ImageFormat.AUTO:\n                kwargs[\"format\"] = options.image_format.value\n\n            if options.quality is not None:\n                kwargs[\"quality\"] = options.quality\n\n            image.save(output, **kwargs)\n            return\n\n        self.image.save(output)\n\n    def get_image(self) -&gt; Image.Image:\n        \"\"\"Get image reference.\"\"\"\n        return self.image\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterImageRef.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image.Image\n</code></pre> <p>Get image reference.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_image(self) -&gt; Image.Image:\n    \"\"\"Get image reference.\"\"\"\n    return self.image\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.ImageFormat","title":"ImageFormat","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported raster image formats.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class ImageFormat(Enum):\n    \"\"\"List of officially supported raster image formats.\"\"\"\n\n    PNG = \"png\"\n    JPEG = \"jpg\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.PixelFormat","title":"PixelFormat","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported pixel formats.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class PixelFormat(Enum):\n    \"\"\"List of officially supported pixel formats.\"\"\"\n\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.RasterFormatOptions","title":"RasterFormatOptions","text":"<p>             Bases: <code>FormatOptions</code></p> <p>Raster Format specific options.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterFormatOptions(FormatOptions):\n    \"\"\"Raster Format specific options.\"\"\"\n\n    def __init__(\n        self,\n        image_format: ImageFormat = ImageFormat.AUTO,\n        pixel_format: PixelFormat = PixelFormat.RGBA,\n        quality: int = 85,\n    ) -&gt; None:\n        self.image_format = image_format\n        self.pixel_format = pixel_format\n        self.quality = quality\n</code></pre>"},{"location":"70_gerber/12_reference_raster.html#pygerber.gerberx3.renderer2.raster.custom_round","title":"custom_round","text":"<pre><code>custom_round(value: Decimal | float) -&gt; int\n</code></pre> <p>Round value to jason integer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def custom_round(value: Decimal | float) -&gt; int:\n    \"\"\"Round value to jason integer.\"\"\"\n    int_val = int(value)\n    diff = abs(int_val - Decimal(value))\n\n    if diff &gt;= HALF:\n        return int_val\n\n    return int_val\n</code></pre>"},{"location":"70_gerber/30_introspection/0_usage.html","title":"Usage","text":""},{"location":"70_gerber/30_introspection/0_usage.html#introduction","title":"Introduction","text":"<p>Since release 2.2.0 PyGerber offers interface designed for Gerber code introspection based on <code>Parser2</code> class and visitor pattern. API is build around <code>Parser2HooksBase</code> class from <code>pygerber.gerberx3.parser2.parser2hooks_base</code> module and descendant classes passed to <code>Parser2</code> class. <code>Parser2</code> visits all tokens in Gerber AST created by <code>Tokenizer</code> and invokes particular hooks from provided hooks class. <code>Parser2HooksBase</code> itself doesn't implement any Gerber specific behaviors. It is just a collection of classes with empty hook methods which can be used to implement behaviors explained in The Gerber Format Specification. PyGerber provides such implementation in form of <code>Parser2Hooks</code> class, available in <code>pygerber.gerberx3.parser2.parser2</code> module.</p>"},{"location":"70_gerber/30_introspection/0_usage.html#minimal-example","title":"Minimal example","text":"<p>Let's consider very simple example in which we are interested in extracting all comments from Gerber code. Of course for such task it would be just enough to use regular expressions, but thanks to simplicity of this task it will be easier to perceive how hooks work.</p> test/examples/introspect_minimal_example.py<pre><code>\"\"\"Example for introspection with selective inheritance from Parser2HooksBase and Parser2Hooks.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pygerber.gerberx3.parser2.context2 import Parser2Context, Parser2ContextOptions\nfrom pygerber.gerberx3.parser2.parser2 import Parser2, Parser2Options\nfrom pygerber.gerberx3.parser2.parser2hooks import Parser2Hooks\nfrom pygerber.gerberx3.tokenizer.tokenizer import Tokenizer\nfrom pygerber.gerberx3.tokenizer.tokens.g04_comment import Comment\n\n\nclass CustomHooks(Parser2Hooks):\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.comments: list[str] = []\n\n    class CommentTokenHooks(Parser2Hooks.CommentTokenHooks):\n        hooks: CustomHooks\n\n        def on_parser_visit_token(\n            self,\n            token: Comment,\n            context: Parser2Context,\n        ) -&gt; None:\n            self.hooks.comments.append(token.content)\n            return super().on_parser_visit_token(token, context)\n\n\nGERBER_SOURCE = r\"\"\"\nG04 Ucamco ex. 2: Shapes*           G04 A comment                                                            *\nG04 Ucamco ex. 2: Shapes*           G04 Comment                                                              *\n%MOMM*%                             G04 Units are mm                                                         *\n%FSLAX36Y36*%                       G04 Format specification:                                                *\n                                    G04  Leading zeros omitted                                               *\n                                    G04  Absolute coordinates                                                *\n                                    G04  Coordinates in 3 integer and 6 fractional digits.                   *\n%TF.FileFunction,Other,Sample*%     G04 Attribute: the is not a PCB layer, it is just an                     *\n                                    G04 example                                                              *\nG04 Define Apertures*               G04 Comment                                                              *\n%AMTHERMAL80*                       G04 Define the aperture macro 'THERMAL80'                                *\n7,0,0,0.800,0.550,0.125,45*%        G04 Use thermal primitive in the macro                                   *\n%ADD10C,0.1*%                       G04 Define aperture 10 as a circle with diameter 0.1 mm                  *\n%ADD11C,0.6*%                       G04 Define aperture 11 as a circle with diameter 0.6 mm                  *\n%ADD12R,0.6X0.6*%                   G04 Define aperture 12 as a rectangle with size 0.6 x 0.6 mm             *\n%ADD13R,0.4X1.00*%                  G04 Define aperture 13 as a rectangle with size 0.4 x 1 mm               *\n%ADD14R,1.00X0.4*%                  G04 Define aperture 14 as a rectangle with size 1 x 0.4 mm               *\n%ADD15O,0.4X01.00*%                 G04 Define aperture 15 as an obround with size 0.4 x 1 mm                *\n%ADD16P,1.00X3*%                    G04 Define aperture 16 as a polygon with 3 vertices and                  *\n                                    G04 circumscribed circle with diameter 1 mm                              *\n%ADD19THERMAL80*%                   G04 Define aperture 19 as an instance of macro aperture                  *\n                                    G04 'THERMAL80' defined earlier                                          *\nG04 Start image generation*         G04 A comment                                                            *\nD10*                                G04 Select aperture 10 as current aperture                               *\nX0Y2500000D02*                      G04 Set the current point to (0, 2.5) mm                                 *\nG01*                                G04 Set linear plot mode                                                 *\nX0Y0D01*                            G04 Create draw with the current aperture                                *\nX2500000Y0D01*                      G04 Create draw with the current aperture                                *\nX10000000Y10000000D02*              G04 Set the current point                                                *\nX15000000D01*                       G04 Create draw with the current aperture                                *\nX20000000Y15000000D01*              G04 Create draw with the current aperture                                *\nX25000000D02*                       G04 Set the current point.                                               *\nY10000000D01*                       G04 Create draw with the current aperture                                *\nD11*                                G04 Select aperture 11 as current aperture                               *\nX10000000Y10000000D03*              G04 Create flash with the current aperture (11) at (10, 10).             *\nX20000000D03*                       G04 Create a flash with the current aperture at (20, 10).                *\nM02*                                G04 End of file                                                          *\n\"\"\"\n\n\ndef main() -&gt; None:\n    tokenizer = Tokenizer()\n    ast = tokenizer.tokenize(GERBER_SOURCE)\n    hooks = CustomHooks()\n    parser = Parser2(\n        Parser2Options(context_options=Parser2ContextOptions(hooks=hooks)),\n    )\n    parser.parse(ast)\n\n    for comment in hooks.comments:\n        print(comment)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>As you can see in snippet above, to inject custom hooks class one must create nested options structure. Design decision to nest configuration like this, was made to allow maximal customization of all parts of the <code>Parser2</code>. Indeed at each level there are few options useful in specific situations. But as for now, let's focus on hooks themselves.</p> <p>It's important to notice that hook method <code>on_parser_visit_token()</code> is overrode in nested class, <code>CommentTokenHooks</code>, which inherits from <code>Parser2Hooks</code>. There are hooks which are defined directly in hooks class, but they are more general, eg. for handling exceptions. All hooks specific to particular tokens are defined in nested classes named in way indicating what token they are concerned with, eg. <code>DefineApertureObroundTokenHooks</code>, <code>ImagePolarityTokenHooks</code>.</p> <p>Output of this code will look like this:</p> <pre><code> Ucamco ex. 2: Shapes\n A comment\n Ucamco ex. 2: Shapes\n Comment\n Units are mm\n Format specification:\n  Leading zeros omitted\n  Absolute coordinates\n  Coordinates in 3 integer and 6 fractional digits.\n Attribute: the is not a PCB layer, it is just an\n example\n Define Apertures\n Comment\n Define the aperture macro 'THERMAL80'\n Use thermal primitive in the macro\n Define aperture 10 as a circle with diameter 0.1 mm\n Define aperture 11 as a circle with diameter 0.6 mm\n Define aperture 12 as a rectangle with size 0.6 x 0.6 mm\n Define aperture 13 as a rectangle with size 0.4 x 1 mm\n Define aperture 14 as a rectangle with size 1 x 0.4 mm\n Define aperture 15 as an obround with size 0.4 x 1 mm\n Define aperture 16 as a polygon with 3 vertices and\n circumscribed circle with diameter 1 mm\n Define aperture 19 as an instance of macro aperture\n 'THERMAL80' defined earlier\n Start image generation\n A comment\n Select aperture 10 as current aperture\n Set the current point to (0, 2.5) mm\n Set linear plot mode\n Create draw with the current aperture\n Create draw with the current aperture\n Set the current point\n Create draw with the current aperture\n Create draw with the current aperture\n Set the current point.\n Create draw with the current aperture\n Select aperture 11 as current aperture\n Create flash with the current aperture (11) at (10, 10).\n Create a flash with the current aperture at (20, 10).\n</code></pre> <p>Notice that every line starts with one space, as everything directly after G04 statement is considered a comment, including leading spaces.</p>"},{"location":"70_gerber/30_introspection/0_usage.html#mixed-inheritance","title":"Mixed inheritance","text":"<p>By default <code>Parser2</code> is using <code>Parser2Hooks</code>, however, for some use cases it may be more beneficial to use <code>Parser2HooksBase</code> class to reduce time required to traverse single Gerber file. This is the case when one needs only selected Gerber features, eg. attribute support. In such case, you can create new <code>Parser2HooksBase</code> derived class and for some hook classes inherit from <code>Parser2Hooks</code> nested classes.</p> <p>For example let's assume we want to extract attributes of all apertures in Gerber file. To do it we need a working attribute cumulation logic, but at the same time let's try to minimize time required to parse file by using only these parts of Parser2Hooks which are necessary.</p> test/examples/introspect_mixed_inheritance.py<pre><code>\"\"\"Example for introspection with selective inheritance from Parser2HooksBase and Parser2Hooks.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pygerber.gerberx3.parser2.attributes2 import ApertureAttributes\nfrom pygerber.gerberx3.parser2.context2 import Parser2Context, Parser2ContextOptions\nfrom pygerber.gerberx3.parser2.parser2 import (\n    Parser2,\n    Parser2OnErrorAction,\n    Parser2Options,\n)\nfrom pygerber.gerberx3.parser2.parser2hooks import Parser2Hooks\nfrom pygerber.gerberx3.parser2.parser2hooks_base import DefineAnyT, Parser2HooksBase\nfrom pygerber.gerberx3.tokenizer.aperture_id import ApertureID\nfrom pygerber.gerberx3.tokenizer.tokenizer import Tokenizer\n\n\nclass CustomHooks(Parser2HooksBase):\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.aperture_attributes: dict[ApertureID, ApertureAttributes] = {}\n\n    class ApertureAttributeHooks(Parser2Hooks.ApertureAttributeHooks):\n        pass\n\n    class FileAttributeHooks(Parser2Hooks.FileAttributeHooks):\n        pass\n\n    class ObjectAttributeHooks(Parser2Hooks.ObjectAttributeHooks):\n        pass\n\n    class DeleteAttributeHooks(Parser2Hooks.DeleteAttributeHooks):\n        pass\n\n    class DefineApertureTokenHooks(Parser2HooksBase.DefineApertureTokenHooks):\n        hooks: CustomHooks\n\n        def on_parser_visit_token(\n            self,\n            token: DefineAnyT,\n            context: Parser2Context,\n        ) -&gt; None:\n            self.hooks.aperture_attributes[token.aperture_id] = (\n                context.aperture_attributes\n            )\n            return super().on_parser_visit_token(token, context)\n\n\nGERBER_SOURCE = r\"\"\"\n%TF.GenerationSoftware,KiCad,Pcbnew,5.1.5-52549c5~84~ubuntu18.04.1*%\n%TF.CreationDate,2020-02-11T15:54:30+02:00*%\n%TF.ProjectId,A64-OlinuXino_Rev_G,4136342d-4f6c-4696-9e75-58696e6f5f52,G*%\n%TF.SameCoordinates,Original*%\n%TF.FileFunction,Copper,L6,Bot*%\n%TF.FilePolarity,Positive*%\n%FSLAX46Y46*%\nG04 Gerber Fmt 4.6, Leading zero omitted, Abs format (unit mm)*\nG04 Created by KiCad (PCBNEW 5.1.5-52549c5~84~ubuntu18.04.1) date 2020-02-11 15:54:30*\n%MOMM*%\n%LPD*%\nG04 APERTURE LIST*\n%TA.AperFunction,EtchedComponent*%\n%ADD10C,0.508000*%\n%TD*%\n%TA.AperFunction,EtchedComponent*%\n%ADD11C,0.254000*%\n%TD*%\n%TA.AperFunction,ComponentPad*%\n%ADD12O,2.800000X2.000000*%\n%TD*%\n%TA.AperFunction,ComponentPad*%\n%ADD13C,1.650000*%\nM02*\n\"\"\"\n\n\ndef main() -&gt; None:\n    tokenizer = Tokenizer()\n    ast = tokenizer.tokenize(GERBER_SOURCE)\n    hooks = CustomHooks()\n    parser = Parser2(\n        Parser2Options(\n            context_options=Parser2ContextOptions(hooks=hooks),\n            on_update_drawing_state_error=Parser2OnErrorAction.UseHook,\n        ),\n    )\n    parser.parse(ast)\n\n    for aperture, attributes in hooks.aperture_attributes.items():\n        print(aperture)\n        print(attributes)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Output of this code will look like this:</p> <pre><code>D10\nApertureAttributes({'.AperFunction': 'EtchedComponent'})\nD11\nApertureAttributes({'.AperFunction': 'EtchedComponent'})\nD12\nApertureAttributes({'.AperFunction': 'ComponentPad'})\nD13\nApertureAttributes({'.AperFunction': 'ComponentPad'})\n</code></pre> <p>Beware that there are some potential risks when using such approach. Tokens often rely on other tokens defined before them (eg. <code>CoordinateFormat</code> relies on <code>UnitMode</code>). For example in this case we can't inherit from <code>Parser2Hooks.DefineApertureCircleTokenHooks</code>, as we are not including implementation of <code>UnitModeTokenHooks</code>, so define would complain about draw units not being set, by throwing <code>pygerber.gerberx3.parser2.errors2.UnitNotSet2Error</code>.</p>"},{"location":"70_gerber/30_introspection/0_usage.html#error-handling","title":"Error handling","text":"<p>Parser2 hooks provide a way to handle errors before they are propagated to Parser2 and cause parse interruption. However, to enable this behavior one must explicitly enable it by setting <code>on_update_drawing_state_error</code> parameter to <code>Parser2OnErrorAction.UseHook</code>.</p> <pre><code>Parser2(\n    Parser2Options(\n        context_options=Parser2ContextOptions(hooks=hooks),\n        on_update_drawing_state_error=Parser2OnErrorAction.UseHook,\n    ),\n)\n</code></pre> <p>This option gives parser a chance to recover from error by passing it to one of two hooks: <code>on_parser_error()</code> on <code>on_other_error()</code>. First one is used to handle exceptions are not descendants of <code>pygerber.gerberx3.parser2.errors2.Parser2Error</code>, which are expected to be thrown by parser related code, mostly when encountering unrecoverable Gerber standard violations. They are \"unrecoverable\" in a sense that we can't make a good general assumption what should we do with it. <code>pygerber.gerberx3.parser2.errors2.UnitNotSet2Error</code> is an example of such an error, raised when attempting to interpret Gerber coordinates before unit of distance was set (inch/millimeter), which leaves units as undefined and neither inch nor millimeter is a good default in general case, but one of them can be a good default in some specific environments.</p> test/examples/introspect_handle_no_unit.py<pre><code>\"\"\"Example for introspection with selective inheritance from Parser2HooksBase and Parser2Hooks.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pygerber.gerberx3.parser2.context2 import Parser2Context, Parser2ContextOptions\nfrom pygerber.gerberx3.parser2.errors2 import Parser2Error, UnitNotSet2Error\nfrom pygerber.gerberx3.parser2.parser2 import (\n    Parser2,\n    Parser2OnErrorAction,\n    Parser2Options,\n)\nfrom pygerber.gerberx3.parser2.parser2hooks import Parser2Hooks\nfrom pygerber.gerberx3.state_enums import Unit\nfrom pygerber.gerberx3.tokenizer.tokenizer import Tokenizer\n\n\nclass CustomHooks(Parser2Hooks):\n    def on_parser_error(self, context: Parser2Context, error: Parser2Error) -&gt; None:\n        if isinstance(error, UnitNotSet2Error):\n            context.set_draw_units(Unit.Inches)\n        return super().on_parser_error(context, error)\n\n\nGERBER_SOURCE = r\"\"\"\n%FSLAX46Y46*%\nG04 Let's not include MO command. *\n%LPD*%\nG04 APERTURE LIST*\n%TA.AperFunction,EtchedComponent*%\n%ADD10C,0.508000*%\n%TD*%\n%TA.AperFunction,EtchedComponent*%\n%ADD11C,0.254000*%\n%TD*%\n%TA.AperFunction,ComponentPad*%\n%ADD12O,2.800000X2.000000*%\n%TD*%\n%TA.AperFunction,ComponentPad*%\n%ADD13C,1.650000*%\nM02*\n\"\"\"\n\n\ndef main() -&gt; None:\n    tokenizer = Tokenizer()\n    ast = tokenizer.tokenize(GERBER_SOURCE)\n    hooks = CustomHooks()\n    parser = Parser2(\n        Parser2Options(\n            context_options=Parser2ContextOptions(hooks=hooks),\n            on_update_drawing_state_error=Parser2OnErrorAction.UseHook,\n        ),\n    )\n    parser.parse(ast)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html","title":"Parser2HooksBase Reference","text":""},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base","title":"parser2hooks_base","text":"<p>Parser hooks interface class, for Gerber AST parser, version 2.</p>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase","title":"TokenHooksBase","text":"<p>             Bases: <code>Generic[TokenT]</code></p> <p>Class for creating token visit hooks.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class TokenHooksBase(Generic[TokenT]):\n    \"\"\"Class for creating token visit hooks.\"\"\"\n\n    def __init__(self, hooks: Parser2HooksBase) -&gt; None:\n        self.hooks = hooks\n\n    def post_hooks_init(self) -&gt; None:\n        \"\"\"Called after all hooks are assigned.\"\"\"\n\n    def pre_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called before parser visits a token.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that will be visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n\n    def post_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called after parser visits a token.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that was visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.post_hooks_init","title":"post_hooks_init","text":"<pre><code>post_hooks_init() -&gt; None\n</code></pre> <p>Called after all hooks are assigned.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_hooks_init(self) -&gt; None:\n    \"\"\"Called after all hooks are assigned.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.pre_parser_visit_token","title":"pre_parser_visit_token","text":"<pre><code>pre_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called before parser visits a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that will be visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called before parser visits a token.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that will be visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.post_parser_visit_token","title":"post_parser_visit_token","text":"<pre><code>post_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called after parser visits a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that was visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called after parser visits a token.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that was visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase","title":"Parser2HooksBase","text":"<p>Collection of overridable hooks for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class Parser2HooksBase:\n    \"\"\"Collection of overridable hooks for Gerber AST parser, version 2.\"\"\"\n\n    def __init__(self) -&gt; None:  # noqa: PLR0915\n        super().__init__()\n        self.macro_begin = self.MacroBeginTokenHooks(self)\n        self.macro_code_1_circle = self.MacroCode1CircleTokenHooks(self)\n        self.macro_code_2_vector_line = self.MacroCode2VectorLineTokenHooks(self)\n        self.macro_code_4_outline = self.MacroCode4OutlineTokenHooks(self)\n        self.macro_code_5_polygon = self.MacroCode5PolygonTokenHooks(self)\n        self.macro_code_6_moire = self.MacroCode6MoireTokenHooks(self)\n        self.macro_code_7_thermal = self.MacroCode7ThermalTokenHooks(self)\n        self.macro_code_20_vector_line = self.MacroCode20VectorLineTokenHooks(self)\n        self.macro_code_21_center_line = self.MacroCode21CenterLineTokenHooks(self)\n        self.macro_code_22_lower_left_line = self.MacroCode22LowerLeftLineTokenHooks(\n            self,\n        )\n        self.macro_variable_assignment = self.MacroVariableAssignment(self)\n        self.macro_definition = self.MacroDefinitionTokenHooks(self)\n        self.macro_eval = self.MacroEvalHooks()\n\n        self.end_block_aperture = self.EndBlockApertureTokenHooks(self)\n        self.begin_block_aperture = self.BeginBlockApertureTokenHooks(self)\n\n        self.define_circle_aperture = self.DefineApertureCircleTokenHooks(self)\n        self.define_rectangle_aperture = self.DefineApertureRectangleTokenHooks(self)\n        self.define_obround_aperture = self.DefineApertureObroundTokenHooks(self)\n        self.define_polygon_aperture = self.DefineAperturePolygonTokenHooks(self)\n        self.define_macro_aperture = self.DefineApertureMacroTokenHooks(self)\n        self.define_aperture = self.DefineApertureTokenHooks(self)\n\n        self.axis_select = self.AxisSelectTokenHooksTokenHooks(self)\n\n        self.command_draw = self.CommandDrawTokenHooks(self)\n        self.command_move = self.CommandMoveTokenHooks(self)\n        self.command_flash = self.CommandFlashTokenHooks(self)\n\n        self.select_aperture = self.SelectApertureTokenHooks(self)\n        self.coordinate_format = self.CoordinateFormatTokenHooks(self)\n\n        self.set_linear = self.SetLinearTokenHooks(self)\n        self.set_clockwise_circular = self.SetClockwiseCircularTokenHooks(self)\n        self.set_counter_clockwise_circular = (\n            self.SetCounterClockwiseCircularTokenHooks(self)\n        )\n\n        self.comment = self.CommentTokenHooks(self)\n        self.begin_region = self.BeginRegionTokenHooks(self)\n        self.end_region = self.EndRegionTokenHooks(self)\n        self.prepare_select_aperture = self.PrepareSelectApertureTokenHooks(self)\n        self.set_unit_inch = self.SetUnitInchTokenHooks(self)\n        self.set_unit_millimeters = self.SetUnitMillimetersTokenHooks(self)\n\n        self.set_single_quadrant_mode = self.SetSingleQuadrantModeTokenHooks(self)\n        self.set_multi_quadrant_mode = self.SetMultiQuadrantModeTokenHooks(self)\n\n        self.set_coordinate_absolute = self.SetCoordinateAbsoluteTokenHooks(self)\n        self.set_coordinate_incremental = self.SetCoordinateIncrementalTokenHooks(self)\n\n        self.image_name = self.ImageNameTokenHooks(self)\n        self.invalid_token = self.InvalidTokenHooks(self)\n        self.image_polarity = self.ImagePolarityTokenHooks(self)\n        self.load_name = self.LoadNameTokenHooks(self)\n\n        self.load_mirroring = self.LoadMirroringTokenHooks(self)\n        self.load_polarity = self.LoadPolarityTokenHooks(self)\n        self.load_rotation = self.LoadRotationTokenHooks(self)\n        self.load_scaling = self.LoadScalingTokenHooks(self)\n\n        self.program_stop = self.ProgramStopTokenHooks(self)\n        self.optional_stop = self.OptionalStopTokenHooks(self)\n        self.end_of_file = self.EndOfFileTokenHooks(self)\n        self.unit_mode = self.UnitModeTokenHooks(self)\n        self.image_offset = self.ImageOffsetTokenHooks(self)\n\n        self.step_repeat_begin = self.StepRepeatBeginTokenHooks(self)\n        self.step_repeat_end = self.StepRepeatEndTokenHooks(self)\n\n        self.aperture_attribute = self.ApertureAttributeHooks(self)\n        self.delete_attribute = self.DeleteAttributeHooks(self)\n        self.file_attribute = self.FileAttributeHooks(self)\n        self.object_attribute = self.ObjectAttributeHooks(self)\n\n        self._call_post_hooks_init()\n\n    def _call_post_hooks_init(self) -&gt; None:  # noqa: PLR0915\n        self.macro_begin.post_hooks_init()\n        self.macro_code_1_circle.post_hooks_init()\n        self.macro_code_2_vector_line.post_hooks_init()\n        self.macro_code_4_outline.post_hooks_init()\n        self.macro_code_5_polygon.post_hooks_init()\n        self.macro_code_6_moire.post_hooks_init()\n        self.macro_code_7_thermal.post_hooks_init()\n        self.macro_code_20_vector_line.post_hooks_init()\n        self.macro_code_21_center_line.post_hooks_init()\n        self.macro_code_22_lower_left_line.post_hooks_init()\n        self.macro_variable_assignment.post_hooks_init()\n        self.macro_definition.post_hooks_init()\n\n        self.end_block_aperture.post_hooks_init()\n        self.begin_block_aperture.post_hooks_init()\n\n        self.define_circle_aperture.post_hooks_init()\n        self.define_rectangle_aperture.post_hooks_init()\n        self.define_obround_aperture.post_hooks_init()\n        self.define_polygon_aperture.post_hooks_init()\n        self.define_macro_aperture.post_hooks_init()\n        self.define_aperture.post_hooks_init()\n\n        self.axis_select.post_hooks_init()\n\n        self.command_draw.post_hooks_init()\n        self.command_move.post_hooks_init()\n        self.command_flash.post_hooks_init()\n\n        self.select_aperture.post_hooks_init()\n        self.coordinate_format.post_hooks_init()\n\n        self.set_linear.post_hooks_init()\n        self.set_clockwise_circular.post_hooks_init()\n        self.set_counter_clockwise_circular.post_hooks_init()\n\n        self.comment.post_hooks_init()\n        self.begin_region.post_hooks_init()\n        self.end_region.post_hooks_init()\n        self.prepare_select_aperture.post_hooks_init()\n\n        self.set_unit_inch.post_hooks_init()\n        self.set_unit_millimeters.post_hooks_init()\n\n        self.set_single_quadrant_mode.post_hooks_init()\n        self.set_multi_quadrant_mode.post_hooks_init()\n\n        self.set_coordinate_absolute.post_hooks_init()\n        self.set_coordinate_incremental.post_hooks_init()\n\n        self.image_name.post_hooks_init()\n        self.invalid_token.post_hooks_init()\n        self.image_polarity.post_hooks_init()\n        self.load_name.post_hooks_init()\n\n        self.load_mirroring.post_hooks_init()\n        self.load_polarity.post_hooks_init()\n        self.load_rotation.post_hooks_init()\n        self.load_scaling.post_hooks_init()\n\n        self.program_stop.post_hooks_init()\n        self.optional_stop.post_hooks_init()\n        self.end_of_file.post_hooks_init()\n        self.unit_mode.post_hooks_init()\n        self.image_offset.post_hooks_init()\n\n        self.step_repeat_begin.post_hooks_init()\n        self.step_repeat_end.post_hooks_init()\n\n        self.aperture_attribute.post_hooks_init()\n        self.delete_attribute.post_hooks_init()\n        self.file_attribute.post_hooks_init()\n        self.object_attribute.post_hooks_init()\n\n    def on_parser_init(self, parser: Parser2) -&gt; None:\n        \"\"\"Called after parser initialization.\"\"\"\n\n    def pre_parse(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called before parsing starts.\"\"\"\n\n    def post_parse(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called after parsing finishes.\"\"\"\n\n    def on_parser_error(self, context: Parser2Context, error: Parser2Error) -&gt; None:\n        \"\"\"Called when parsing error is thrown.\"\"\"\n\n    def on_other_error(self, context: Parser2Context, error: Exception) -&gt; None:\n        \"\"\"Called when other error is thrown.\"\"\"\n\n    def pre_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called before parser visits any token.\"\"\"\n\n    def post_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called after parser visits any token.\"\"\"\n\n    class MacroBeginTokenHooks(TokenHooksBase[MacroBeginT]):\n        \"\"\"Hooks for visiting macro definition begin token (AM).\"\"\"\n\n    class MacroCode1CircleTokenHooks(TokenHooksBase[Code1CircleTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n\n    class MacroCode2VectorLineTokenHooks(TokenHooksBase[Code2VectorLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n\n    class MacroCode4OutlineTokenHooks(TokenHooksBase[Code4OutlineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n\n    class MacroCode5PolygonTokenHooks(TokenHooksBase[Code5PolygonTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n\n    class MacroCode6MoireTokenHooks(TokenHooksBase[Code6MoireTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n\n    class MacroCode7ThermalTokenHooks(TokenHooksBase[Code7ThermalTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n\n    class MacroCode20VectorLineTokenHooks(TokenHooksBase[Code20VectorLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n\n    class MacroCode21CenterLineTokenHooks(TokenHooksBase[Code21CenterLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n\n    class MacroCode22LowerLeftLineTokenHooks(TokenHooksBase[Code22LowerLeftLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n\n    class MacroVariableAssignment(TokenHooksBase[MacroVariableAssignmentT]):\n        \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n\n    class MacroDefinitionTokenHooks(TokenHooksBase[MacroDefinitionT]):\n        \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n\n    class MacroEvalHooks:\n        \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n        def on_code_1_circle(\n            self,\n            context: Parser2Context,\n            primitive: Code1Circle2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 1 circle primitive.\"\"\"\n\n        def on_code_2_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code2VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n        def on_code_4_outline(\n            self,\n            context: Parser2Context,\n            primitive: Code4Outline2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 4 outline primitive.\"\"\"\n\n        def on_code_5_polygon(\n            self,\n            context: Parser2Context,\n            primitive: Code5Polygon2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n\n        def on_code_6_moire(\n            self,\n            context: Parser2Context,\n            primitive: Code6Moire2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n        def on_code_7_thermal(\n            self,\n            context: Parser2Context,\n            primitive: Code7Thermal2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n        def on_code_20_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code20VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n\n        def on_code_21_center_line(\n            self,\n            context: Parser2Context,\n            primitive: Code21CenterLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 21 center line primitive.\"\"\"\n\n        def on_code_22_lower_left_line(\n            self,\n            context: Parser2Context,\n            primitive: Code22LowerLeftLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n        def on_assignment(\n            self,\n            context: Parser2Context,\n            assignment: Assignment2,\n        ) -&gt; None:\n            \"\"\"Evaluate macro variable assignment statement.\"\"\"\n\n    class BeginBlockApertureTokenHooks(TokenHooksBase[BlockApertureBeginT]):\n        \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n\n    class EndBlockApertureTokenHooks(TokenHooksBase[BlockApertureEndT]):\n        \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n\n    class DefineApertureCircleTokenHooks(TokenHooksBase[DefineCircleT]):\n        \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n\n    class DefineApertureRectangleTokenHooks(TokenHooksBase[DefineRectangleT]):\n        \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n\n    class DefineApertureObroundTokenHooks(TokenHooksBase[DefineObroundT]):\n        \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n\n    class DefineAperturePolygonTokenHooks(TokenHooksBase[DefinePolygonT]):\n        \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n\n    class DefineApertureMacroTokenHooks(TokenHooksBase[DefineMacroT]):\n        \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n\n    class DefineApertureTokenHooks(TokenHooksBase[DefineAnyT]):\n        \"\"\"Hooks for visiting any aperture definition token (ADD).\"\"\"\n\n    class AxisSelectTokenHooksTokenHooks(TokenHooksBase[AxisSelectT]):\n        \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n\n    class CommandDrawTokenHooks(TokenHooksBase[D01DrawT]):\n        \"\"\"Hooks for visiting draw token (D01).\"\"\"\n\n    class CommandMoveTokenHooks(TokenHooksBase[D02MoveT]):\n        \"\"\"Hooks for visiting move token (D02).\"\"\"\n\n    class CommandFlashTokenHooks(TokenHooksBase[D03FlashT]):\n        \"\"\"Hooks for visiting flash token (D03).\"\"\"\n\n    class SelectApertureTokenHooks(TokenHooksBase[DNNSelectApertureT]):\n        \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n\n    class CoordinateFormatTokenHooks(TokenHooksBase[CoordinateFormatT]):\n        \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n\n    class SetLinearTokenHooks(TokenHooksBase[SetLinearT]):\n        \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n\n    class SetClockwiseCircularTokenHooks(TokenHooksBase[SetClockwiseCircularT]):\n        \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n\n    class SetCounterClockwiseCircularTokenHooks(\n        TokenHooksBase[SetCounterclockwiseCircularT],\n    ):\n        \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n\n    class CommentTokenHooks(TokenHooksBase[CommentT]):\n        \"\"\"Hooks for visiting comment token (G04).\"\"\"\n\n    class BeginRegionTokenHooks(TokenHooksBase[BeginRegionT]):\n        \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n\n    class EndRegionTokenHooks(TokenHooksBase[EndRegionT]):\n        \"\"\"Hooks for visiting end region token (G37).\"\"\"\n\n    class PrepareSelectApertureTokenHooks(TokenHooksBase[G54SelectApertureT]):\n        \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n\n    class SetUnitInchTokenHooks(TokenHooksBase[SetUnitInchT]):\n        \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n\n    class SetUnitMillimetersTokenHooks(TokenHooksBase[SetUnitMillimetersT]):\n        \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n\n    class SetSingleQuadrantModeTokenHooks(TokenHooksBase[SetSingleQuadrantModeT]):\n        \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n\n    class SetMultiQuadrantModeTokenHooks(TokenHooksBase[SetMultiQuadrantModeT]):\n        \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n\n    class SetCoordinateAbsoluteTokenHooks(TokenHooksBase[SetAbsoluteNotationT]):\n        \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n\n    class SetCoordinateIncrementalTokenHooks(TokenHooksBase[SetIncrementalNotationT]):\n        \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n\n    class ImageNameTokenHooks(TokenHooksBase[ImageNameT]):\n        \"\"\"Hooks for visiting image name token (IN).\"\"\"\n\n    class InvalidTokenHooks(TokenHooksBase[InvalidTokenT]):\n        \"\"\"Hooks for visiting invalid token.\"\"\"\n\n    class ImagePolarityTokenHooks(TokenHooksBase[ImagePolarityT]):\n        \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n\n    class LoadMirroringTokenHooks(TokenHooksBase[LoadMirroringT]):\n        \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n\n    class LoadNameTokenHooks(TokenHooksBase[LoadNameT]):\n        \"\"\"Hooks for visiting load name token (LN).\"\"\"\n\n    class LoadPolarityTokenHooks(TokenHooksBase[LoadPolarityT]):\n        \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n\n    class LoadRotationTokenHooks(TokenHooksBase[LoadRotationT]):\n        \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n\n    class LoadScalingTokenHooks(TokenHooksBase[LoadScalingT]):\n        \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n\n    class ProgramStopTokenHooks(TokenHooksBase[M00ProgramStopT]):\n        \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n\n    class OptionalStopTokenHooks(TokenHooksBase[M01OptionalStopT]):\n        \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n\n    class EndOfFileTokenHooks(TokenHooksBase[M02EndOfFileT]):\n        \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n\n    class UnitModeTokenHooks(TokenHooksBase[UnitModeT]):\n        \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n\n    class ImageOffsetTokenHooks(TokenHooksBase[ImageOffsetT]):\n        \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n\n    class StepRepeatBeginTokenHooks(TokenHooksBase[StepRepeatBeginT]):\n        \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n\n    class StepRepeatEndTokenHooks(TokenHooksBase[StepRepeatEndT]):\n        \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n\n    class ApertureAttributeHooks(TokenHooksBase[ApertureAttributeT]):\n        \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n\n    class DeleteAttributeHooks(TokenHooksBase[DeleteAttributeT]):\n        \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n\n    class FileAttributeHooks(TokenHooksBase[FileAttributeT]):\n        \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n\n    class ObjectAttributeHooks(TokenHooksBase[ObjectAttributeT]):\n        \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroBeginTokenHooks","title":"MacroBeginTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[MacroBeginT]</code></p> <p>Hooks for visiting macro definition begin token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroBeginTokenHooks(TokenHooksBase[MacroBeginT]):\n    \"\"\"Hooks for visiting macro definition begin token (AM).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode1CircleTokenHooks","title":"MacroCode1CircleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code1CircleTokenT]</code></p> <p>Hooks for visiting macro primitive code 0 circle.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode1CircleTokenHooks(TokenHooksBase[Code1CircleTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode2VectorLineTokenHooks","title":"MacroCode2VectorLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code2VectorLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 2 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode2VectorLineTokenHooks(TokenHooksBase[Code2VectorLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode4OutlineTokenHooks","title":"MacroCode4OutlineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code4OutlineTokenT]</code></p> <p>Hooks for visiting macro primitive code 4 outline.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode4OutlineTokenHooks(TokenHooksBase[Code4OutlineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode5PolygonTokenHooks","title":"MacroCode5PolygonTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code5PolygonTokenT]</code></p> <p>Hooks for visiting macro primitive code 5 polygon.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode5PolygonTokenHooks(TokenHooksBase[Code5PolygonTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode6MoireTokenHooks","title":"MacroCode6MoireTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code6MoireTokenT]</code></p> <p>Hooks for visiting macro primitive code 6 moire.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode6MoireTokenHooks(TokenHooksBase[Code6MoireTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode7ThermalTokenHooks","title":"MacroCode7ThermalTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code7ThermalTokenT]</code></p> <p>Hooks for visiting macro primitive code 7 thermal.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode7ThermalTokenHooks(TokenHooksBase[Code7ThermalTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode20VectorLineTokenHooks","title":"MacroCode20VectorLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code20VectorLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 20 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode20VectorLineTokenHooks(TokenHooksBase[Code20VectorLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode21CenterLineTokenHooks","title":"MacroCode21CenterLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code21CenterLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 21 center line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode21CenterLineTokenHooks(TokenHooksBase[Code21CenterLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode22LowerLeftLineTokenHooks","title":"MacroCode22LowerLeftLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code22LowerLeftLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 22 lower left line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode22LowerLeftLineTokenHooks(TokenHooksBase[Code22LowerLeftLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroVariableAssignment","title":"MacroVariableAssignment","text":"<p>             Bases: <code>TokenHooksBase[MacroVariableAssignmentT]</code></p> <p>Hooks for visiting macro variable assignment token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroVariableAssignment(TokenHooksBase[MacroVariableAssignmentT]):\n    \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroDefinitionTokenHooks","title":"MacroDefinitionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[MacroDefinitionT]</code></p> <p>Hooks for visiting macro definition token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroDefinitionTokenHooks(TokenHooksBase[MacroDefinitionT]):\n    \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks","title":"MacroEvalHooks","text":"<p>Hooks called when evaluating macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroEvalHooks:\n    \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n    def on_code_1_circle(\n        self,\n        context: Parser2Context,\n        primitive: Code1Circle2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 1 circle primitive.\"\"\"\n\n    def on_code_2_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code2VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n    def on_code_4_outline(\n        self,\n        context: Parser2Context,\n        primitive: Code4Outline2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 4 outline primitive.\"\"\"\n\n    def on_code_5_polygon(\n        self,\n        context: Parser2Context,\n        primitive: Code5Polygon2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n\n    def on_code_6_moire(\n        self,\n        context: Parser2Context,\n        primitive: Code6Moire2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n    def on_code_7_thermal(\n        self,\n        context: Parser2Context,\n        primitive: Code7Thermal2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n    def on_code_20_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code20VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n\n    def on_code_21_center_line(\n        self,\n        context: Parser2Context,\n        primitive: Code21CenterLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 21 center line primitive.\"\"\"\n\n    def on_code_22_lower_left_line(\n        self,\n        context: Parser2Context,\n        primitive: Code22LowerLeftLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n    def on_assignment(\n        self,\n        context: Parser2Context,\n        assignment: Assignment2,\n    ) -&gt; None:\n        \"\"\"Evaluate macro variable assignment statement.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_1_circle","title":"on_code_1_circle","text":"<pre><code>on_code_1_circle(\n    context: Parser2Context, primitive: Code1Circle2\n) -&gt; None\n</code></pre> <p>Evaluate code 1 circle primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_1_circle(\n    self,\n    context: Parser2Context,\n    primitive: Code1Circle2,\n) -&gt; None:\n    \"\"\"Evaluate code 1 circle primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_2_vector_line","title":"on_code_2_vector_line","text":"<pre><code>on_code_2_vector_line(\n    context: Parser2Context, primitive: Code2VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 2 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_2_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code2VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_4_outline","title":"on_code_4_outline","text":"<pre><code>on_code_4_outline(\n    context: Parser2Context, primitive: Code4Outline2\n) -&gt; None\n</code></pre> <p>Evaluate code 4 outline primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_4_outline(\n    self,\n    context: Parser2Context,\n    primitive: Code4Outline2,\n) -&gt; None:\n    \"\"\"Evaluate code 4 outline primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_5_polygon","title":"on_code_5_polygon","text":"<pre><code>on_code_5_polygon(\n    context: Parser2Context, primitive: Code5Polygon2\n) -&gt; None\n</code></pre> <p>Evaluate code 5 polygon primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_5_polygon(\n    self,\n    context: Parser2Context,\n    primitive: Code5Polygon2,\n) -&gt; None:\n    \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_6_moire","title":"on_code_6_moire","text":"<pre><code>on_code_6_moire(\n    context: Parser2Context, primitive: Code6Moire2\n) -&gt; None\n</code></pre> <p>Evaluate code 6 moire primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_6_moire(\n    self,\n    context: Parser2Context,\n    primitive: Code6Moire2,\n) -&gt; None:\n    \"\"\"Evaluate code 6 moire primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_7_thermal","title":"on_code_7_thermal","text":"<pre><code>on_code_7_thermal(\n    context: Parser2Context, primitive: Code7Thermal2\n) -&gt; None\n</code></pre> <p>Evaluate code 7 thermal primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_7_thermal(\n    self,\n    context: Parser2Context,\n    primitive: Code7Thermal2,\n) -&gt; None:\n    \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_20_vector_line","title":"on_code_20_vector_line","text":"<pre><code>on_code_20_vector_line(\n    context: Parser2Context, primitive: Code20VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 20 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_20_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code20VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_21_center_line","title":"on_code_21_center_line","text":"<pre><code>on_code_21_center_line(\n    context: Parser2Context, primitive: Code21CenterLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 21 center line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_21_center_line(\n    self,\n    context: Parser2Context,\n    primitive: Code21CenterLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 21 center line primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_22_lower_left_line","title":"on_code_22_lower_left_line","text":"<pre><code>on_code_22_lower_left_line(\n    context: Parser2Context, primitive: Code22LowerLeftLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 22 lower left line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_22_lower_left_line(\n    self,\n    context: Parser2Context,\n    primitive: Code22LowerLeftLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(\n    context: Parser2Context, assignment: Assignment2\n) -&gt; None\n</code></pre> <p>Evaluate macro variable assignment statement.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_assignment(\n    self,\n    context: Parser2Context,\n    assignment: Assignment2,\n) -&gt; None:\n    \"\"\"Evaluate macro variable assignment statement.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.BeginBlockApertureTokenHooks","title":"BeginBlockApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BlockApertureBeginT]</code></p> <p>Hooks for visiting begin block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class BeginBlockApertureTokenHooks(TokenHooksBase[BlockApertureBeginT]):\n    \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndBlockApertureTokenHooks","title":"EndBlockApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BlockApertureEndT]</code></p> <p>Hooks for visiting end block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndBlockApertureTokenHooks(TokenHooksBase[BlockApertureEndT]):\n    \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureCircleTokenHooks","title":"DefineApertureCircleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineCircleT]</code></p> <p>Hooks for visiting circle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureCircleTokenHooks(TokenHooksBase[DefineCircleT]):\n    \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureRectangleTokenHooks","title":"DefineApertureRectangleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineRectangleT]</code></p> <p>Hooks for visiting rectangle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureRectangleTokenHooks(TokenHooksBase[DefineRectangleT]):\n    \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureObroundTokenHooks","title":"DefineApertureObroundTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineObroundT]</code></p> <p>Hooks for visiting obround aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureObroundTokenHooks(TokenHooksBase[DefineObroundT]):\n    \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineAperturePolygonTokenHooks","title":"DefineAperturePolygonTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefinePolygonT]</code></p> <p>Hooks for visiting polygon aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineAperturePolygonTokenHooks(TokenHooksBase[DefinePolygonT]):\n    \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureMacroTokenHooks","title":"DefineApertureMacroTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineMacroT]</code></p> <p>Hooks for visiting macro aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureMacroTokenHooks(TokenHooksBase[DefineMacroT]):\n    \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureTokenHooks","title":"DefineApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineAnyT]</code></p> <p>Hooks for visiting any aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureTokenHooks(TokenHooksBase[DefineAnyT]):\n    \"\"\"Hooks for visiting any aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.AxisSelectTokenHooksTokenHooks","title":"AxisSelectTokenHooksTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[AxisSelectT]</code></p> <p>Hooks for visiting axis select token (AS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class AxisSelectTokenHooksTokenHooks(TokenHooksBase[AxisSelectT]):\n    \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandDrawTokenHooks","title":"CommandDrawTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D01DrawT]</code></p> <p>Hooks for visiting draw token (D01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandDrawTokenHooks(TokenHooksBase[D01DrawT]):\n    \"\"\"Hooks for visiting draw token (D01).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandMoveTokenHooks","title":"CommandMoveTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D02MoveT]</code></p> <p>Hooks for visiting move token (D02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandMoveTokenHooks(TokenHooksBase[D02MoveT]):\n    \"\"\"Hooks for visiting move token (D02).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandFlashTokenHooks","title":"CommandFlashTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D03FlashT]</code></p> <p>Hooks for visiting flash token (D03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandFlashTokenHooks(TokenHooksBase[D03FlashT]):\n    \"\"\"Hooks for visiting flash token (D03).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SelectApertureTokenHooks","title":"SelectApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DNNSelectApertureT]</code></p> <p>Hooks for visiting select aperture token (DNN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SelectApertureTokenHooks(TokenHooksBase[DNNSelectApertureT]):\n    \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CoordinateFormatTokenHooks","title":"CoordinateFormatTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[CoordinateFormatT]</code></p> <p>Hooks for visiting coordinate format token (FS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CoordinateFormatTokenHooks(TokenHooksBase[CoordinateFormatT]):\n    \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetLinearTokenHooks","title":"SetLinearTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetLinearT]</code></p> <p>Hooks for visiting set linear token (G01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetLinearTokenHooks(TokenHooksBase[SetLinearT]):\n    \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetClockwiseCircularTokenHooks","title":"SetClockwiseCircularTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetClockwiseCircularT]</code></p> <p>Hooks for visiting set clockwise circular token (G02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetClockwiseCircularTokenHooks(TokenHooksBase[SetClockwiseCircularT]):\n    \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCounterClockwiseCircularTokenHooks","title":"SetCounterClockwiseCircularTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetCounterclockwiseCircularT]</code></p> <p>Hooks for visiting set counter clockwise circular token (G03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCounterClockwiseCircularTokenHooks(\n    TokenHooksBase[SetCounterclockwiseCircularT],\n):\n    \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommentTokenHooks","title":"CommentTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[CommentT]</code></p> <p>Hooks for visiting comment token (G04).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommentTokenHooks(TokenHooksBase[CommentT]):\n    \"\"\"Hooks for visiting comment token (G04).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.BeginRegionTokenHooks","title":"BeginRegionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BeginRegionT]</code></p> <p>Hooks for visiting begin region token (G36).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class BeginRegionTokenHooks(TokenHooksBase[BeginRegionT]):\n    \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndRegionTokenHooks","title":"EndRegionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[EndRegionT]</code></p> <p>Hooks for visiting end region token (G37).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndRegionTokenHooks(TokenHooksBase[EndRegionT]):\n    \"\"\"Hooks for visiting end region token (G37).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.PrepareSelectApertureTokenHooks","title":"PrepareSelectApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[G54SelectApertureT]</code></p> <p>Hooks for visiting prepare select aperture token (G54).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class PrepareSelectApertureTokenHooks(TokenHooksBase[G54SelectApertureT]):\n    \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetUnitInchTokenHooks","title":"SetUnitInchTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetUnitInchT]</code></p> <p>Hooks for visiting set unit inch token (G70).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetUnitInchTokenHooks(TokenHooksBase[SetUnitInchT]):\n    \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetUnitMillimetersTokenHooks","title":"SetUnitMillimetersTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetUnitMillimetersT]</code></p> <p>Hooks for visiting set unit millimeters token (G71).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetUnitMillimetersTokenHooks(TokenHooksBase[SetUnitMillimetersT]):\n    \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetSingleQuadrantModeTokenHooks","title":"SetSingleQuadrantModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetSingleQuadrantModeT]</code></p> <p>Hooks for visiting set single-quadrant mode token (G74).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetSingleQuadrantModeTokenHooks(TokenHooksBase[SetSingleQuadrantModeT]):\n    \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetMultiQuadrantModeTokenHooks","title":"SetMultiQuadrantModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetMultiQuadrantModeT]</code></p> <p>Hooks for visiting set multi-quadrant mode token (G75).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetMultiQuadrantModeTokenHooks(TokenHooksBase[SetMultiQuadrantModeT]):\n    \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCoordinateAbsoluteTokenHooks","title":"SetCoordinateAbsoluteTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetAbsoluteNotationT]</code></p> <p>Hooks for visiting set coordinate absolute token (G90).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCoordinateAbsoluteTokenHooks(TokenHooksBase[SetAbsoluteNotationT]):\n    \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCoordinateIncrementalTokenHooks","title":"SetCoordinateIncrementalTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetIncrementalNotationT]</code></p> <p>Hooks for visiting set coordinate incremental token (G91).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCoordinateIncrementalTokenHooks(TokenHooksBase[SetIncrementalNotationT]):\n    \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImageNameTokenHooks","title":"ImageNameTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImageNameT]</code></p> <p>Hooks for visiting image name token (IN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImageNameTokenHooks(TokenHooksBase[ImageNameT]):\n    \"\"\"Hooks for visiting image name token (IN).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.InvalidTokenHooks","title":"InvalidTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[InvalidTokenT]</code></p> <p>Hooks for visiting invalid token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class InvalidTokenHooks(TokenHooksBase[InvalidTokenT]):\n    \"\"\"Hooks for visiting invalid token.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImagePolarityTokenHooks","title":"ImagePolarityTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImagePolarityT]</code></p> <p>Hooks for visiting image polarity token (IP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImagePolarityTokenHooks(TokenHooksBase[ImagePolarityT]):\n    \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadMirroringTokenHooks","title":"LoadMirroringTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadMirroringT]</code></p> <p>Hooks for visiting load mirroring token (LM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadMirroringTokenHooks(TokenHooksBase[LoadMirroringT]):\n    \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadNameTokenHooks","title":"LoadNameTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadNameT]</code></p> <p>Hooks for visiting load name token (LN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadNameTokenHooks(TokenHooksBase[LoadNameT]):\n    \"\"\"Hooks for visiting load name token (LN).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadPolarityTokenHooks","title":"LoadPolarityTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadPolarityT]</code></p> <p>Hooks for visiting load polarity token (LP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadPolarityTokenHooks(TokenHooksBase[LoadPolarityT]):\n    \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadRotationTokenHooks","title":"LoadRotationTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadRotationT]</code></p> <p>Hooks for visiting load rotation token (LR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadRotationTokenHooks(TokenHooksBase[LoadRotationT]):\n    \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadScalingTokenHooks","title":"LoadScalingTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadScalingT]</code></p> <p>Hooks for visiting load scaling token (LS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadScalingTokenHooks(TokenHooksBase[LoadScalingT]):\n    \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ProgramStopTokenHooks","title":"ProgramStopTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M00ProgramStopT]</code></p> <p>Hooks for visiting program stop token (M00).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ProgramStopTokenHooks(TokenHooksBase[M00ProgramStopT]):\n    \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.OptionalStopTokenHooks","title":"OptionalStopTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M01OptionalStopT]</code></p> <p>Hooks for visiting optional stop token (M01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class OptionalStopTokenHooks(TokenHooksBase[M01OptionalStopT]):\n    \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndOfFileTokenHooks","title":"EndOfFileTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M02EndOfFileT]</code></p> <p>Hooks for visiting end of file token (M02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndOfFileTokenHooks(TokenHooksBase[M02EndOfFileT]):\n    \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.UnitModeTokenHooks","title":"UnitModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[UnitModeT]</code></p> <p>Hooks for visiting unit mode token (MO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class UnitModeTokenHooks(TokenHooksBase[UnitModeT]):\n    \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImageOffsetTokenHooks","title":"ImageOffsetTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImageOffsetT]</code></p> <p>Hooks for visiting image offset token (OF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImageOffsetTokenHooks(TokenHooksBase[ImageOffsetT]):\n    \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.StepRepeatBeginTokenHooks","title":"StepRepeatBeginTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[StepRepeatBeginT]</code></p> <p>Hooks for visiting step and repeat begin token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class StepRepeatBeginTokenHooks(TokenHooksBase[StepRepeatBeginT]):\n    \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.StepRepeatEndTokenHooks","title":"StepRepeatEndTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[StepRepeatEndT]</code></p> <p>Hooks for visiting step and repeat end token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class StepRepeatEndTokenHooks(TokenHooksBase[StepRepeatEndT]):\n    \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ApertureAttributeHooks","title":"ApertureAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[ApertureAttributeT]</code></p> <p>Hooks for visiting aperture attribute token (TA).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ApertureAttributeHooks(TokenHooksBase[ApertureAttributeT]):\n    \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DeleteAttributeHooks","title":"DeleteAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[DeleteAttributeT]</code></p> <p>Hooks for visiting delete attribute token (TD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DeleteAttributeHooks(TokenHooksBase[DeleteAttributeT]):\n    \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.FileAttributeHooks","title":"FileAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[FileAttributeT]</code></p> <p>Hooks for visiting file attribute token (TF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class FileAttributeHooks(TokenHooksBase[FileAttributeT]):\n    \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ObjectAttributeHooks","title":"ObjectAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[ObjectAttributeT]</code></p> <p>Hooks for visiting object attribute token (TO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ObjectAttributeHooks(TokenHooksBase[ObjectAttributeT]):\n    \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_parser_init","title":"on_parser_init","text":"<pre><code>on_parser_init(parser: Parser2) -&gt; None\n</code></pre> <p>Called after parser initialization.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_init(self, parser: Parser2) -&gt; None:\n    \"\"\"Called after parser initialization.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.pre_parse","title":"pre_parse","text":"<pre><code>pre_parse(context: Parser2Context) -&gt; None\n</code></pre> <p>Called before parsing starts.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parse(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called before parsing starts.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.post_parse","title":"post_parse","text":"<pre><code>post_parse(context: Parser2Context) -&gt; None\n</code></pre> <p>Called after parsing finishes.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parse(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called after parsing finishes.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_parser_error","title":"on_parser_error","text":"<pre><code>on_parser_error(\n    context: Parser2Context, error: Parser2Error\n) -&gt; None\n</code></pre> <p>Called when parsing error is thrown.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_error(self, context: Parser2Context, error: Parser2Error) -&gt; None:\n    \"\"\"Called when parsing error is thrown.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_other_error","title":"on_other_error","text":"<pre><code>on_other_error(\n    context: Parser2Context, error: Exception\n) -&gt; None\n</code></pre> <p>Called when other error is thrown.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_other_error(self, context: Parser2Context, error: Exception) -&gt; None:\n    \"\"\"Called when other error is thrown.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.pre_parser_visit_any_token","title":"pre_parser_visit_any_token","text":"<pre><code>pre_parser_visit_any_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Called before parser visits any token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called before parser visits any token.\"\"\"\n</code></pre>"},{"location":"70_gerber/30_introspection/1_ihooks_reference.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.post_parser_visit_any_token","title":"post_parser_visit_any_token","text":"<pre><code>post_parser_visit_any_token(\n    context: Parser2Context,\n) -&gt; None\n</code></pre> <p>Called after parser visits any token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called after parser visits any token.\"\"\"\n</code></pre>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html","title":"Tokenizer feature support","text":""},{"location":"70_gerber/40_feature_support/0_tokenizer.html#introduction","title":"Introduction","text":"<p>Tokenizer class is responsible for converting input Gerber string into sequence of tokens suitable for consumption by <code>Parser</code> class. Tokenizer class is compatible with both <code>Parser</code> and <code>Parser2</code> classes.</p> <p>Contributing</p> <p>Community contributions are always welcome.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged. - - Symbol Count \u2705 170 \ud83d\udea7 0 \ud83d\udeab 2 \u274c 7 \ud83d\udc7d 1 \ud83d\udc7e 0 total 186"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/0_tokenizer.html#general","title":"General","text":"<ul> <li>\u2705 MO - Mode - Sets the unit to mm or inch.</li> <li>\u2705 FS - Format specification:<ul> <li>\u2705 absolute coordinates.</li> <li>\u2705 incremental coordinates</li> <li>\u2705 trailing zeros omission.</li> <li>\u2705 leading zeros omission.</li> </ul> </li> <li>\u2705 AD - Aperture define - Defines a template-based aperture, assigns a D code to it.<ul> <li>\u2705 circle.</li> <li>\u2705 rectangle.</li> <li>\u2705 obround.</li> <li>\u2705 polygon.</li> <li>\u2705 Define macro.</li> </ul> </li> <li>\u2705 AM - Aperture macro - Defines a macro aperture template.</li> <li>\u2705 Dnn (nn\u226510) - Sets the current aperture to D code nn.</li> <li>\u2705 G01 - Sets draw mode to linear.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G02 - Sets draw mode to clockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G03 - Sets draw mode to counterclockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 LP - Load polarity (changes flag, not fully implemented).</li> <li>\u2705 LM - Load mirroring (changes flag, not fully implemented).</li> <li>\u2705 LR - Load rotation (changes flag, not fully implemented).</li> <li>\u2705 LS - Load scaling (changes flag, not fully implemented).</li> <li>\u2705 TF - Attribute on file.</li> <li>\u2705 TA - Attribute on aperture.</li> <li>\u2705 TO - Attribute on object.</li> <li>\u2705 TD - Attribute delete.</li> <li>\u2705 M02 - End of file.</li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\u2705 D01 - Plot operation, mode<ul> <li>\u2705 Line, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Counter clockwise arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 D02 - Move operation<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#regions","title":"Regions","text":"<ul> <li>\u2705 G36 - Starts a region statement.</li> <li>\u2705 G37 - Ends the region statement.</li> <li>\u2705 Regions, with:<ul> <li>\u2705 Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#macros","title":"Macros","text":"<ul> <li>\u2705 Parameters.</li> <li>\u2705 Primitives:<ul> <li>\u2705 Code 0, Comment</li> <li>\u2705 Code 1, Circle</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u2705 Code 7, Thermal</li> </ul> </li> <li>\u2705 Rotation around macro origin:<ul> <li>\u2705 Code 0, Comment</li> <li>\u2705 Code 1, Circle</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u2705 Code 7, Thermal</li> </ul> </li> <li>\u2705 Constants.</li> <li>\u2705 Variables.</li> <li>\u2705 Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions (missing macro support).</li> <li>\u2705 Nested blocks (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/0_tokenizer.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\u2705 G54 - Select aperture. (Spec. 8.1.1)</li> <li>\u2705 G55 - Prepare for flash. (Spec. 8.1.1)</li> <li>\u2705 G70 - Set the 'Unit' to inch. (Spec. 8.1.1)</li> <li>\u2705 G71 - Set the 'Unit' to mm. (Spec. 8.1.1)</li> <li>\u2705 G90 - Set the 'Coordinate format' to 'Absolute notation'. (Spec. 8.1.1)</li> <li> <p>\u2705 G91 - Set the 'Coordinate format' to 'Incremental notation'. (Spec. 8.1.1)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> <li> <p>\u2705 M00 - Program stop. (Spec. 8.1.1)</p> </li> <li>\u2705 M01 - Optional stop. (Spec. 8.1.1)</li> <li>\u2705 AS - Sets the 'Axes correspondence'. (Spec. 8.1.2)</li> <li>\u2705 IN - Sets the name of the file image. (Spec. 8.1.3)</li> <li>\u2705 IP - Sets the 'Image polarity'. (Spec. 8.1.4)</li> <li>\u2705 IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u2705 LN - Loads a name. (Spec. 8.1.6)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\ud83d\udc7d OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\u2705 G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\u2705 Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u2705 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u2705 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"70_gerber/40_feature_support/1_parser2.html","title":"\u2b50 Parser2 feature support","text":""},{"location":"70_gerber/40_feature_support/1_parser2.html#introduction","title":"Introduction","text":"<p>Parser2 is an alternative implementation of Gerber AST parser redesigned to make process of implementation of Gerber features easier and quicker in addition to much better extension interface. Moreover it provides a easy way to introspect Gerber code with use of hook based interface.</p> <p>Contributing</p> <p>Community contributions are always welcome, they can speed up process of migrating from Parser to Parser2.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged."},{"location":"70_gerber/40_feature_support/1_parser2.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/1_parser2.html#general","title":"General","text":"<ul> <li>\u2705 MO - Mode - Sets the unit to mm or inch.</li> <li>\u2705 FS - Format specification:<ul> <li>\u2705 absolute coordinates.</li> <li>\ud83d\udeab incremental coordinates</li> <li>\ud83d\udeab trailing zeros omission.</li> <li>\u2705 leading zeros omission.</li> </ul> </li> <li>\ud83d\udc7d AD - Aperture define - Defines a template-based aperture, assigns a D code to it.<ul> <li>\u2705 circle.</li> <li>\u2705 rectangle.</li> <li>\u2705 obround.</li> <li>\u2705 polygon.</li> <li>\u2705 Define macro.</li> </ul> </li> <li>\u2705 AM - Aperture macro - Defines a macro aperture template.</li> <li>\u2705 Dnn (nn\u226510) - Sets the current aperture to D code nn.</li> <li>\u2705 G01 - Sets draw mode to linear.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G02 - Sets draw mode to clockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G03 - Sets draw mode to counterclockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 LP - Load polarity.</li> <li>\u2705 LM - Load mirroring.</li> <li>\u2705 LR - Load rotation.</li> <li>\u2705 LS - Load scaling.</li> <li>\u2705 TF - Attribute on file.</li> <li>\u2705 TA - Attribute on aperture.</li> <li>\u2705 TO - Attribute on object.</li> <li>\u2705 TD - Attribute delete.</li> <li>\u2705 M02 - End of file.</li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\ud83d\udc7d D01 - Plot operation, mode<ul> <li>\ud83d\udc7d Line, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\ud83d\udc7d macro.</li> </ul> </li> <li>\ud83d\udc7d Arc, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\ud83d\udc7d macro.</li> </ul> </li> <li>\ud83d\udc7d Counter clockwise arc, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\ud83d\udc7d macro.</li> </ul> </li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 D02 - Move operation<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\ud83d\udc7d D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#regions","title":"Regions","text":"<ul> <li>\u2705 G36 - Starts a region statement.</li> <li>\u2705 G37 - Ends the region statement.</li> <li>\u2705 Regions, with:<ul> <li>\u2705 Line.</li> <li>\u2705 Arc.</li> <li>\u2705 Counter clockwise arc.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#macros","title":"Macros","text":"<ul> <li>\u2705 Parameters.</li> <li>\ud83d\udc7d Primitives in definition:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u2705 Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\ud83d\udc7d Primitives in aperture instance:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u274c Rotation around macro origin:<ul> <li>\u274c Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u2705 Expressions.<ul> <li>\u2705 Constants.</li> <li>\u2705 Variables.</li> <li>\u2705 Addition.</li> <li>\u2705 Subtraction.</li> <li>\u2705 Multiplication.</li> <li>\u2705 Division.</li> <li>\u2705 Unary + operator.</li> <li>\u2705 Negation.</li> </ul> </li> <li>\u2705 Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> <li>\u2705 Nested blocks.</li> </ul>"},{"location":"70_gerber/40_feature_support/1_parser2.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\ud83d\udc7d G54 - Select aperture. (Spec. 8.1.1)</li> <li>\u274c G55 - Prepare for flash. (Spec. 8.1.1)</li> <li>\u2705 G70 - Set the 'Unit' to inch. (Spec. 8.1.1)</li> <li>\u2705 G71 - Set the 'Unit' to mm. (Spec. 8.1.1)</li> <li>\u2705 G90 - Set the 'Coordinate format' to 'Absolute notation'. (Spec. 8.1.1)</li> <li> <p>\u2705 G91 - Set the 'Coordinate format' to 'Incremental notation'. (Spec. 8.1.1)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> <li> <p>\u2705 M00 - Program stop. (Spec. 8.1.1)</p> </li> <li>\u2705 M01 - Optional stop. (Spec. 8.1.1)</li> <li>\ud83d\udc7d AS - Sets the 'Axes correspondence'. (Spec. 8.1.2)</li> <li>\u2705 IN - Sets the name of the file image. (Spec. 8.1.3)</li> <li>\u2705 IP - Sets the 'Image polarity'. (Spec. 8.1.4)</li> <li>\u274c IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u2705 LN - Loads a name. (Spec. 8.1.6)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\ud83d\udc7d OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\u2705 G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\u274c Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u2705 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u2705 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html","title":"\u2b50 RasterRenderer2 feature support","text":""},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#introduction","title":"Introduction","text":"<p><code>RasterRenderer2</code> is an introduced in PyGerber 2.2.0 raster backend for rendering of Gerber files. It replaced legacy <code>Rasterized2DBackend</code> which now is deprecated along with <code>Parser</code> class. <code>RasterRenderer2</code> operates on command buffers generated by <code>Parser2</code>. It is capable of outputting PNG and JPEG images with official API, although it is possible to acquire raw Pillow image objects and save them in different formats.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged. \u26d4 Feature doesn't apply."},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#general","title":"General","text":"<ul> <li>\u2705 LP - Load polarity.</li> <li>\u2705 LM - Load mirroring.</li> <li>\u2705 LR - Load rotation.</li> <li>\u2705 LS - Load scaling.</li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\u2705 D01 - Plot operation, mode<ul> <li>\u2705 Line, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Counter clockwise arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> </ul> </li> <li>\u2705 D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#regions","title":"Regions","text":"<ul> <li>\u2705 Regions, with:<ul> <li>\u2705 Line,</li> <li>\u2705 Arc,</li> <li>\u2705 Counter clockwise arc.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#macros","title":"Macros","text":"<ul> <li>\u26d4 Parameters.</li> <li>\ud83d\udc7d Primitives in definition:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u2705 Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\ud83d\udc7d Primitives in aperture instance:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u274c Rotation around macro origin:<ul> <li>\u274c Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u26d4 Expressions.<ul> <li>\u26d4 Constants.</li> <li>\u26d4 Variables.</li> <li>\u26d4 Addition.</li> <li>\u26d4 Subtraction.</li> <li>\u26d4 Multiplication.</li> <li>\u26d4 Division.</li> <li>\u26d4 Unary + operator.</li> <li>\u26d4 Negation.</li> </ul> </li> <li>\u26d4 Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> <li>\u2705 Nested blocks.</li> </ul>"},{"location":"70_gerber/40_feature_support/2_rasterrenderer2.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\u274c IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\u274c OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\u2705 G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\ud83d\udc7d Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u26d4 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u26d4 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html","title":"\u2b50 SvgRenderer2 feature support","text":""},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#introduction","title":"Introduction","text":"<p><code>SvgRenderer2</code> is an introduced in PyGerber 2.2.0 SVG backend for rendering of Gerber files. It replaced legacy <code>Rasterized2DBackend</code> which now is deprecated along with <code>Parser</code> class. <code>SvgRenderer2</code> operates on command buffers generated by <code>Parser2</code>.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged. \u26d4 Feature doesn't apply."},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#general","title":"General","text":"<ul> <li>\u2705 LP - Load polarity.</li> <li>\u2705 LM - Load mirroring.</li> <li>\u2705 LR - Load rotation.</li> <li>\u2705 LS - Load scaling.</li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\u2705 D01 - Plot operation, mode<ul> <li>\u2705 Line, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Counter clockwise arc, with:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> </ul> </li> <li>\u2705 D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#regions","title":"Regions","text":"<ul> <li>\u2705 Regions, with:<ul> <li>\u2705 Line,</li> <li>\u2705 Arc,</li> <li>\u2705 Counter clockwise arc.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#macros","title":"Macros","text":"<ul> <li>\u26d4 Parameters.</li> <li>\ud83d\udc7d Primitives in definition:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u2705 Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\ud83d\udc7d Primitives in aperture instance:<ul> <li>\u2705 Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u2705 Code 4, Outline</li> <li>\u2705 Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u2705 Code 20, Vector line</li> <li>\u2705 Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u274c Rotation around macro origin:<ul> <li>\u274c Code 1, Circle</li> <li>\u274c Code 2, Vector line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 6, Moire</li> <li>\u274c Code 7, Thermal</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 22, Lower Left Line</li> </ul> </li> <li>\u26d4 Expressions.<ul> <li>\u26d4 Constants.</li> <li>\u26d4 Variables.</li> <li>\u26d4 Addition.</li> <li>\u26d4 Subtraction.</li> <li>\u26d4 Multiplication.</li> <li>\u26d4 Division.</li> <li>\u26d4 Unary + operator.</li> <li>\u26d4 Negation.</li> </ul> </li> <li>\u26d4 Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u2705 Nested Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested Flash:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u2705 macro.</li> </ul> </li> <li>\u2705 Nested regions.</li> <li>\u2705 Nested blocks.</li> </ul>"},{"location":"70_gerber/40_feature_support/3_svgrenderer2.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\u274c IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\u274c OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\u2705 G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\ud83d\udc7d Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u26d4 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u26d4 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"70_gerber/40_feature_support/4_parser.html","title":"Parser feature support (legacy)","text":"<p>Deprecation warning</p> <p>This is a legacy Gerber format Parser, it will be removed in PyGerber 3.0.</p>"},{"location":"70_gerber/40_feature_support/4_parser.html#introduction","title":"Introduction","text":"<p>Parser is a implementation of Gerber format AST parser written in Python. It first appeared in PyGerber 2.0.0 and until release of 2.2.0 was only parser in PyGerber. However, since 2.2.0, Parser2 class is available as an alternative. It has a better design, better API and most importantly it has wider Gerber format support. Unfortunately it doesn't provide rendering support yet (however it is planned). Therefore Parser2 is recommended over Parser class for users interested in Gerber code introspection and building other code-centric tools. Until rendering support is added, other users are encouraged to stick with old Parser class.</p> <p>Contributing</p> <p>Community contributions are always welcome, they can speed up process of migrating from Parser to Parser2.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged. Symbol Count \u2705 60 \ud83d\udea7 0 \ud83d\udeab 4 \u274c 90 \ud83d\udc7d 26 \ud83d\udc7e 0 total 180"},{"location":"70_gerber/40_feature_support/4_parser.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/4_parser.html#general","title":"General","text":"<ul> <li>\u2705 MO - Mode - Sets the unit to mm or inch.</li> <li>\u2705 FS - Format specification:<ul> <li>\u2705 absolute coordinates.</li> <li>\ud83d\udeab incremental coordinates</li> <li>\ud83d\udeab trailing zeros omission.</li> <li>\u2705 leading zeros omission.</li> </ul> </li> <li>\ud83d\udc7d AD - Aperture define - Defines a template-based aperture, assigns a D code to it.<ul> <li>\u2705 circle.</li> <li>\u2705 rectangle.</li> <li>\u2705 obround.</li> <li>\u2705 polygon.</li> <li>\u274c Define macro.</li> </ul> </li> <li>\u274c AM - Aperture macro - Defines a macro aperture template.</li> <li>\u2705 Dnn (nn\u226510) - Sets the current aperture to D code nn.</li> <li>\u2705 G01 - Sets draw mode to linear.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G02 - Sets draw mode to clockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 G03 - Sets draw mode to counterclockwise circular.<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\ud83d\udc7d LP - Load polarity (changes flag, not fully implemented).</li> <li>\ud83d\udc7d LM - Load mirroring (changes flag, not fully implemented).</li> <li>\ud83d\udc7d LR - Load rotation (changes flag, not fully implemented).</li> <li>\ud83d\udc7d LS - Load scaling (changes flag, not fully implemented).</li> <li>\u2705 TF - Attribute on file.</li> <li>\u2705 TA - Attribute on aperture.</li> <li>\u2705 TO - Attribute on object.</li> <li>\u2705 TD - Attribute delete.</li> <li>\u2705 M02 - End of file.</li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\ud83d\udc7d D01 - Plot operation, mode<ul> <li>\ud83d\udc7d Line, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Arc, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Counter clockwise arc, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\u2705 D02 - Move operation<ul> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> <li>\ud83d\udc7d D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> <li>\u2705 Variable zero padding variants allowed.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#regions","title":"Regions","text":"<ul> <li>\u2705 G36 - Starts a region statement.</li> <li>\u2705 G37 - Ends the region statement.</li> <li>\ud83d\udc7d Regions, with:<ul> <li>\ud83d\udc7d Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#macros","title":"Macros","text":"<ul> <li>\u274c Parameters.</li> <li>\u274c Primitives:<ul> <li>\u274c Code 0, Comment</li> <li>\u274c Code 1, Circle</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 7, Thermal</li> </ul> </li> <li>\u274c Rotation around macro origin:<ul> <li>\u274c Code 0, Comment</li> <li>\u274c Code 1, Circle</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 7, Thermal</li> </ul> </li> <li>\u274c Constants.</li> <li>\u274c Variables.</li> <li>\u274c Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u274c Nested Line, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Counter clockwise arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Flash:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested regions (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u274c Nested Line, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Counter clockwise arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Flash:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested regions (missing macro support).</li> <li>\u274c Nested blocks (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/4_parser.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\ud83d\udc7d G54 - Select aperture. (Spec. 8.1.1)</li> <li>\u274c G55 - Prepare for flash. (Spec. 8.1.1)</li> <li>\u2705 G70 - Set the 'Unit' to inch. (Spec. 8.1.1)</li> <li>\u2705 G71 - Set the 'Unit' to mm. (Spec. 8.1.1)</li> <li>\u2705 G90 - Set the 'Coordinate format' to 'Absolute notation'. (Spec. 8.1.1)</li> <li> <p>\u2705 G91 - Set the 'Coordinate format' to 'Incremental notation'. (Spec. 8.1.1)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> <li> <p>\u2705 M00 - Program stop. (Spec. 8.1.1)</p> </li> <li>\u2705 M01 - Optional stop. (Spec. 8.1.1)</li> <li>\ud83d\udc7d AS - Sets the 'Axes correspondence'. (Spec. 8.1.2)</li> <li>\u2705 IN - Sets the name of the file image. (Spec. 8.1.3)</li> <li>\u2705 IP - Sets the 'Image polarity'. (Spec. 8.1.4)</li> <li>\u274c IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u2705 LN - Loads a name. (Spec. 8.1.6)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\ud83d\udc7d OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\u2705 G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\u274c Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u2705 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u2705 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html","title":"Rasterized2DBackend feature support (legacy)","text":"<p>Deprecation warning</p> <p>This is a legacy Gerber renderer, it will be removed in PyGerber 3.0.</p>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#introduction","title":"Introduction","text":"<p>Rasterized2DBackend is a rendering engine for rendering 2D rasterized images from Gerber files. It is compatible only with Parser class (incompatible with Parser2 class).</p> <p>Contributing</p> <p>Community contributions are always welcome, they can speed up process of implementing rendering backend for Parser2, as well as vector rendering and 3D model generation backends.</p> Symbol Meaning \u2705 Feature implemented and usable. \ud83d\udea7 Work in progress. Related APIs can change. \ud83d\udeab Not planned, unless contributed or needed. \u274c Not implemented, but planned. \ud83d\udc7d Partially implemented. \ud83d\udc7e Bugged. \u26d4 Feature doesn't apply. Symbol Count \u2705 22 \ud83d\udea7 0 \ud83d\udeab 2 \u274c 87 \ud83d\udc7d 16 \ud83d\udc7e 6 \u26d4 47 total 180"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#supported-gerber-x3-features","title":"Supported Gerber X3 features","text":""},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#general","title":"General","text":"<ul> <li>\u26d4 MO - Mode - Sets the unit to mm or inch.</li> <li>\u26d4 FS - Format specification:<ul> <li>\u26d4 absolute coordinates.</li> <li>\u26d4 incremental coordinates</li> <li>\u26d4 trailing zeros omission.</li> <li>\u26d4 leading zeros omission.</li> </ul> </li> <li>\u26d4 AD - Aperture define - Defines a template-based aperture, assigns a D code to it.<ul> <li>\u26d4 circle.</li> <li>\u26d4 rectangle.</li> <li>\u26d4 obround.</li> <li>\u26d4 polygon.</li> <li>\u26d4 Define macro.</li> </ul> </li> <li>\u26d4 AM - Aperture macro - Defines a macro aperture template.</li> <li>\u26d4 Dnn (nn\u226510) - Sets the current aperture to D code nn.</li> <li>\u26d4 G01 - Sets draw mode to linear.<ul> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> <li>\u26d4 G02 - Sets draw mode to clockwise circular.<ul> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> <li>\u26d4 G03 - Sets draw mode to counterclockwise circular.<ul> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> <li>\u274c LP - Load polarity (changes flag, not fully implemented).</li> <li>\u274c LM - Load mirroring (changes flag, not fully implemented).</li> <li>\u274c LR - Load rotation (changes flag, not fully implemented).</li> <li>\u274c LS - Load scaling (changes flag, not fully implemented).</li> <li>\u26d4 TF - Attribute on file.</li> <li>\u26d4 TA - Attribute on aperture.</li> <li>\u26d4 TO - Attribute on object.</li> <li>\u26d4 TD - Attribute delete.</li> <li>\u26d4 M02 - End of file.</li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#d01-d02-d03","title":"D01, D02, D03","text":"<ul> <li>\ud83d\udc7d D01 - Plot operation, mode<ul> <li>\ud83d\udc7d Line, with:<ul> <li>\u2705 circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7e Arc, with:<ul> <li>\ud83d\udc7e circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7e Counter clockwise arc, with:<ul> <li>\ud83d\udc7e circle,</li> <li>\ud83d\udc7d rectangle,</li> <li>\ud83d\udc7d obround,</li> <li>\ud83d\udc7d polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> <li>\u26d4 D02 - Move operation<ul> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> <li>\ud83d\udc7d D03 - Flash operation, with<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> <li>\u26d4 Variable zero padding variants allowed.</li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#regions","title":"Regions","text":"<ul> <li>\u2705 G36 - Starts a region statement.</li> <li>\u2705 G37 - Ends the region statement.</li> <li>\ud83d\udc7d Regions, with:<ul> <li>\ud83d\udc7d Line, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\ud83d\udc7d Counter clockwise arc, aperture:<ul> <li>\u2705 circle,</li> <li>\u2705 rectangle,</li> <li>\u2705 obround,</li> <li>\u2705 polygon,</li> <li>\u274c macro.</li> </ul> </li> </ul> </li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#macros","title":"Macros","text":"<ul> <li>\u26d4 Parameters.</li> <li>\u274c Primitives:<ul> <li>\u274c Code 0, Comment</li> <li>\u274c Code 1, Circle</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 7, Thermal</li> </ul> </li> <li>\u274c Rotation around macro origin:<ul> <li>\u274c Code 0, Comment</li> <li>\u274c Code 1, Circle</li> <li>\u274c Code 20, Vector line</li> <li>\u274c Code 21, Center Line</li> <li>\u274c Code 4, Outline</li> <li>\u274c Code 5, Polygon</li> <li>\u274c Code 7, Thermal</li> </ul> </li> <li>\u26d4 Constants.</li> <li>\u26d4 Variables.</li> <li>\u26d4 Variable definitions.</li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#aperture-blocks","title":"Aperture blocks","text":"<ul> <li>\u274c Nested Line, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Counter clockwise arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Flash:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested regions (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#step-and-repeat","title":"Step and repeat","text":"<ul> <li>\u274c Nested Line, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Counter clockwise arc, aperture:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested Flash:<ul> <li>\u274c circle,</li> <li>\u274c rectangle,</li> <li>\u274c obround,</li> <li>\u274c polygon,</li> <li>\u274c macro.</li> </ul> </li> <li>\u274c Nested regions (missing macro support).</li> <li>\u274c Nested blocks (missing macro support).</li> </ul>"},{"location":"70_gerber/40_feature_support/5_rasterized_2d.html#supported-deprecated-gerber-features","title":"Supported DEPRECATED Gerber features","text":"<ul> <li>\u26d4 G54 - Select aperture. (Spec. 8.1.1)</li> <li>\u26d4 G55 - Prepare for flash. (Spec. 8.1.1)</li> <li>\u26d4 G70 - Set the 'Unit' to inch. (Spec. 8.1.1)</li> <li>\u26d4 G71 - Set the 'Unit' to mm. (Spec. 8.1.1)</li> <li>\u26d4 G90 - Set the 'Coordinate format' to 'Absolute notation'. (Spec. 8.1.1)</li> <li> <p>\u26d4 G91 - Set the 'Coordinate format' to 'Incremental notation'. (Spec. 8.1.1)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> <li> <p>\u26d4 M00 - Program stop. (Spec. 8.1.1)</p> </li> <li>\u26d4 M01 - Optional stop. (Spec. 8.1.1)</li> <li>\u26d4 AS - Sets the 'Axes correspondence'. (Spec. 8.1.2)</li> <li>\u26d4 IN - Sets the name of the file image. (Spec. 8.1.3)</li> <li>\u26d4 IP - Sets the 'Image polarity'. (Spec. 8.1.4)</li> <li>\u274c IR - Sets 'Image rotation' graphics state parameter. (Spec. 8.1.5)</li> <li>\u26d4 LN - Loads a name. (Spec. 8.1.6)</li> <li>\u274c MI - Sets 'Image mirroring' graphics state parameter (Spec. 8.1.7)</li> <li>\u274c OF - Sets 'Image offset' graphics state parameter (Spec. 8.1.8)</li> <li>\u274c SF - Sets 'Scale factor' graphics state parameter (Spec. 8.1.9)</li> <li>\ud83d\udc7e G74 - Sets single quadrant mode. (Spec. 8.1.10)</li> <li>\ud83d\udeab Format Specification (FS) Options. (Spec. 8.2.1)</li> <li>\ud83d\udeab Rectangular aperture hole in standard apertures. (Spec. 8.2.2)</li> <li>\ud83d\udc7e Draws and arcs wit rectangular apertures. (Spec. 8.2.3)</li> <li>\u274c Macro Primitive Code 2, Vector Line. (Spec 8.2.4)</li> <li>\u274c Macro Primitive Code 22, Lower Left Line. (Spec 8.2.5)</li> <li>\u274c Macro Primitive Code 6, Moir\u00e9. (Spec 8.2.6)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D01 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D02 in a single command. (Spec 8.3.1)</li> <li>\u2705 Combining G01/G02/G03/G70/G71 and D03 in a single command. (Spec 8.3.1)</li> <li>\u26d4 Coordinate Data without Operation Code. (Spec 8.3.2)</li> <li>\u26d4 Style Variations in Command Codes. (Spec 8.3.3)</li> <li>\u274c Deprecated usage of SR. (Spec 8.3.4)</li> <li> <p>\u274c Deprecated Attribute Values. (Spec 8.4)</p> <ul> <li>Important: Incremental notation itself is not supported and is not planned     due to lack of test assets and expected complications during implementation.</li> </ul> </li> </ul> <p>PS. I had great time adding emoji to this table.</p>"},{"location":"80_gerber_specification/RS-274X.html","title":"RS-274X 2001-03","text":""},{"location":"80_gerber_specification/revision_2013_J1.html","title":"Revision 2013-J1","text":""},{"location":"80_gerber_specification/revision_2016_01.html","title":"Revision 2016-01","text":""},{"location":"80_gerber_specification/revision_2017_05.html","title":"Revision 2017-05","text":""},{"location":"80_gerber_specification/revision_2020_09.html","title":"Revision 2020-09","text":""},{"location":"80_gerber_specification/revision_2021_11.html","title":"Revision 2021-11","text":""},{"location":"80_gerber_specification/revision_2023_03.html","title":"Revision 2023-03","text":""},{"location":"80_gerber_specification/revision_2023_08.html","title":"Revision 2023-08","text":""},{"location":"90_development/00_setup.html","title":"Setup","text":"<p>This project uses <code>Python</code> programming language and requires at least python <code>3.8</code> for development and distribution. Development dependencies <code>poetry</code> for managing dependencies and distribution building. It is necessary to perform any operations in development environment.</p> <p>To install poetry globally (preferred way) use <code>pip</code> in terminal:</p> <pre><code>pip install poetry\n</code></pre> <p>Then use</p> <pre><code>poetry shell\n</code></pre> <p>to spawn new shell with virtual environment activated. Virtual environment will be indicated by terminal prompt prefix <code>(pygerber-py3.8)</code>, version indicated in prefix depends on used version of Python interpreter.</p> <p>Within shell with active virtual environment use:</p> <pre><code>poetry install --sync\n</code></pre> <p>To install all dependencies. Every time you perform a <code>git pull</code> or change a branch, you should call this command to make sure you have the correct versions of dependencies.</p> <p>Afterwards you will have to also setup pre-commit hooks to avoid problems with code quality during review. To do so, use:</p> <pre><code>poe install-hooks\n</code></pre> <p>Hooks will run automatically before every commit. If you want to run them manually, use:</p> <pre><code>poe run-code-quality-checks\n</code></pre> <p>To run unit test suite, use:</p> <pre><code>poe run-unit-tests\n</code></pre>"},{"location":"90_development/10_build.html","title":"Build from source","text":"<p>To build PyGerber from source You have to set up Development environment first. Make sure you have <code>poetry</code> environment activated with:</p> <pre><code>poetry shell\n</code></pre> <p>With environment active it should be possible to build wheel and source distribution with:</p> <pre><code>poetry build\n</code></pre> <p>Check <code>dist</code> directory within current working directory, <code>pygerber-x.y.z.tar.gz</code> and <code>pygerber-x.y.z-py3-none-any.whl</code> should be there.</p>"},{"location":"90_development/20_documentation.html","title":"Build documentation","text":"<p>To build the documentation please first basic environment setup from <code>Development &gt; Setup</code> section.</p> <p>To build the documentation You have to run following command:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"90_development/90_release_procedure.html","title":"Release procedure","text":"<p>Prior to release create new release issue. Use it as a scratchpad for release notes. Title should be <code>Release x.y.z</code>. Description should start with short summary explaining agenda for the release. Then list all changes that will be included in the release. Each change should be a separate bullet point starting with one of \"magic\" words: Added, Changed, Deprecated, Removed, Fixed, Updated, Refactored.</p> <p>On branch <code>main</code>:</p> <ol> <li>Update <code>CHANGELOG.md</code> with new release notes and commit</li> </ol> <pre><code> git commit -m \"Update CHANGELOG.md\"\n</code></pre> <ol> <li> <p>Update version number in:</p> </li> <li> <p><code>pygerber/__init__.py</code></p> </li> <li><code>pyproject.toml</code></li> </ol> <p>then commit:</p> <pre><code> git commit -m \"Bump version to x.y.z\"\n</code></pre> <ol> <li>Push changes and wait for CI to finish.</li> </ol> <pre><code> git push\n</code></pre> <ol> <li> <p>If CI failed, fix issues, commit and push changes. Repeat until CI passes. If any of    the changes introduced may have impact of users, update <code>CHANGELOG.md</code>.</p> </li> <li> <p>Create a new tag:</p> </li> </ol> <pre><code> git tag vx.y.z\n</code></pre> <p>And push it to the repository:</p> <pre><code> git push --tags\n</code></pre> <ol> <li> <p>Wait for CI to finish. It should automatically publish PyPI release files and    documentation update.</p> </li> <li> <p>Close release issue.</p> </li> <li> <p>SKIP FOR PATCH RELEASES:</p> </li> </ol> <p>Create <code>maintenance/x.y.x</code>, second <code>x</code> should remain in branch name, eg. for release    <code>2.3.0</code> branch name should be <code>maintenance/2.3.x</code></p> <pre><code> git switch -c maintenance/x.y.x\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pygerber<ul> <li>backend<ul> <li>abstract<ul> <li>aperture_handle</li> <li>backend_cls</li> <li>draw_commands<ul> <li>draw_arc</li> <li>draw_bounding_box</li> <li>draw_circle</li> <li>draw_command</li> <li>draw_paste</li> <li>draw_polygon</li> <li>draw_rectangle</li> <li>draw_region</li> <li>draw_vector_line</li> </ul> </li> <li>draw_commands_handle</li> <li>drawing_target</li> <li>errors</li> <li>result_handle</li> </ul> </li> <li>rasterized_2d<ul> <li>aperture_handle</li> <li>backend_cls</li> <li>color_scheme</li> <li>draw_commands<ul> <li>draw_arc</li> <li>draw_bounding_box</li> <li>draw_circle</li> <li>draw_paste</li> <li>draw_polygon</li> <li>draw_rectangle</li> <li>draw_region</li> <li>draw_vector_line</li> </ul> </li> <li>draw_commands_handle</li> <li>drawing_target</li> <li>errors</li> <li>image_tools</li> <li>result_handle</li> </ul> </li> </ul> </li> <li>common<ul> <li>error</li> <li>frozen_general_model</li> <li>general_model</li> <li>immutable_map_model</li> <li>namespace</li> <li>position</li> <li>rgba</li> </ul> </li> <li>console<ul> <li>commands</li> <li>raster_2d_style</li> </ul> </li> <li>examples</li> <li>gerberx3<ul> <li>api<ul> <li>_errors</li> <li>_v2</li> <li>v2</li> </ul> </li> <li>ast<ul> <li>ast_visitor</li> <li>builder</li> <li>errors</li> <li>expression_eval_visitor</li> <li>node_finder</li> <li>nodes<ul> <li>aperture<ul> <li>AB</li> <li>AB_close</li> <li>AB_open</li> <li>AD</li> <li>ADC</li> <li>ADO</li> <li>ADP</li> <li>ADR</li> <li>ADmacro</li> <li>AM</li> <li>AM_close</li> <li>AM_open</li> <li>SR</li> <li>SR_close</li> <li>SR_open</li> </ul> </li> <li>attribute<ul> <li>TA</li> <li>TD</li> <li>TF</li> <li>TO</li> </ul> </li> <li>base</li> <li>d_codes<ul> <li>D</li> <li>D01</li> <li>D02</li> <li>D03</li> <li>Dnn</li> </ul> </li> <li>enums</li> <li>file</li> <li>g_codes<ul> <li>G</li> <li>G01</li> <li>G02</li> <li>G03</li> <li>G04</li> <li>G36</li> <li>G37</li> <li>G54</li> <li>G55</li> <li>G70</li> <li>G71</li> <li>G74</li> <li>G75</li> <li>G90</li> <li>G91</li> </ul> </li> <li>invalid</li> <li>load<ul> <li>LM</li> <li>LN</li> <li>LP</li> <li>LR</li> <li>LS</li> </ul> </li> <li>m_codes<ul> <li>M00</li> <li>M01</li> <li>M02</li> </ul> </li> <li>math<ul> <li>assignment</li> <li>constant</li> <li>expression</li> <li>operators<ul> <li>binary<ul> <li>add</li> <li>div</li> <li>mul</li> <li>sub</li> </ul> </li> <li>unary<ul> <li>neg</li> <li>pos</li> </ul> </li> </ul> </li> <li>parenthesis</li> <li>point</li> <li>variable</li> </ul> </li> <li>model</li> <li>other<ul> <li>coordinate</li> </ul> </li> <li>primitives<ul> <li>code_0</li> <li>code_1</li> <li>code_2</li> <li>code_20</li> <li>code_21</li> <li>code_22</li> <li>code_4</li> <li>code_5</li> <li>code_6</li> <li>code_7</li> </ul> </li> <li>properties<ul> <li>AS</li> <li>FS</li> <li>IN</li> <li>IP</li> <li>IR</li> <li>MI</li> <li>MO</li> <li>OF</li> <li>SF</li> </ul> </li> <li>types</li> </ul> </li> <li>state_tracking_visitor</li> </ul> </li> <li>compiler<ul> <li>compiler</li> <li>errors</li> </ul> </li> <li>formatter<ul> <li>formatter</li> <li>presets</li> </ul> </li> <li>language_server<ul> <li>_server<ul> <li>document_cache</li> <li>documents<ul> <li>document</li> <li>gerber</li> </ul> </li> <li>hover<ul> <li>gerber</li> </ul> </li> <li>server</li> </ul> </li> <li>errors</li> <li>status</li> </ul> </li> <li>linter<ul> <li>diagnostic</li> </ul> </li> <li>math<ul> <li>bounding_box</li> <li>offset</li> <li>rotate_point</li> <li>vector_2d</li> </ul> </li> <li>optimizer<ul> <li>optimizer_pass</li> </ul> </li> <li>parser<ul> <li>native</li> <li>pyparsing<ul> <li>grammar</li> <li>parser</li> </ul> </li> </ul> </li> <li>parser2<ul> <li>apertures2<ul> <li>aperture2</li> <li>block2</li> <li>circle2</li> <li>macro2</li> <li>obround2</li> <li>polygon2</li> <li>rectangle2</li> </ul> </li> <li>attributes2</li> <li>command_buffer2</li> <li>commands2<ul> <li>aperture_draw_command2</li> <li>arc2</li> <li>buffer_command2</li> <li>command2</li> <li>flash2</li> <li>line2</li> <li>region2</li> </ul> </li> <li>context2</li> <li>errors2</li> <li>macro2<ul> <li>assignment2</li> <li>element2</li> <li>enums</li> <li>expressions2<ul> <li>binary2</li> <li>constant2</li> <li>expression2</li> <li>unary2</li> <li>variable_name</li> </ul> </li> <li>macro2</li> <li>point2</li> <li>primitives2<ul> <li>code_1_circle2</li> <li>code_20_vector_line2</li> <li>code_21_center_line2</li> <li>code_22_lower_left_line2</li> <li>code_2_vector_line2</li> <li>code_4_outline2</li> <li>code_5_polygon2</li> <li>code_6_moire2</li> <li>code_7_thermal2</li> <li>primitive2</li> </ul> </li> <li>statement2</li> <li>statement_buffer2</li> </ul> </li> <li>parser2</li> <li>parser2hooks</li> <li>parser2hooks_base</li> <li>state2</li> </ul> </li> <li>renderer2<ul> <li>abstract</li> <li>errors2</li> <li>raster</li> <li>svg</li> </ul> </li> <li>revisions</li> <li>spec<ul> <li>rev_2024_05</li> </ul> </li> <li>state_enums</li> <li>tokenizer<ul> <li>aperture_id</li> <li>decorators</li> <li>errors</li> <li>grammar</li> <li>helpers<ul> <li>gerber_code_enum</li> </ul> </li> <li>tokenizer</li> <li>tokens<ul> <li>ab_block_aperture</li> <li>ad_define_aperture</li> <li>as_axis_select</li> <li>attribute_token</li> <li>bases<ul> <li>command</li> <li>extended_command</li> <li>gerber_code</li> <li>group</li> <li>token</li> <li>token_accessor</li> </ul> </li> <li>coordinate</li> <li>d01_draw</li> <li>d02_move</li> <li>d03_flash</li> <li>dnn_select_aperture</li> <li>end_of_expression</li> <li>fs_coordinate_format</li> <li>g01_set_linear</li> <li>g02_set_clockwise_circular</li> <li>g03_set_counterclockwise_circular</li> <li>g04_comment</li> <li>g36_begin_region</li> <li>g37_end_region</li> <li>g54_select_aperture</li> <li>g70_set_unit_inch</li> <li>g71_set_unit_mm</li> <li>g74_single_quadrant</li> <li>g75_multi_quadrant</li> <li>g90_set_coordinate_absolute</li> <li>g91_set_coordinate_incremental</li> <li>groups<ul> <li>ast</li> <li>statement</li> </ul> </li> <li>in_image_name</li> <li>invalid_token</li> <li>ip_image_polarity</li> <li>lm_load_mirroring</li> <li>ln_load_name</li> <li>lp_load_polarity</li> <li>lr_load_rotation</li> <li>ls_load_scaling</li> <li>m00_program_stop</li> <li>m01_optional_stop</li> <li>m02_end_of_file</li> <li>macro<ul> <li>am_macro</li> <li>expressions<ul> <li>binary</li> <li>errors</li> <li>macro_expression</li> <li>numeric_constant</li> <li>unary</li> <li>variable_name</li> </ul> </li> <li>macro_begin</li> <li>macro_context</li> <li>point</li> <li>statements<ul> <li>code_1_circle</li> <li>code_20_vector_line</li> <li>code_21_center_line</li> <li>code_22_lower_left_line</li> <li>code_2_vector_line</li> <li>code_4_outline</li> <li>code_5_polygon</li> <li>code_6_moire</li> <li>code_7_thermal</li> <li>comment</li> <li>primitive</li> <li>statement</li> <li>variable_assignment</li> </ul> </li> </ul> </li> <li>mo_unit_mode</li> <li>of_image_offset</li> <li>sr_step_repeat</li> <li>ta_aperture_attribute</li> <li>td_delete_attribute</li> <li>tf_file_attribute</li> <li>to_object_attribute</li> </ul> </li> </ul> </li> </ul> </li> <li>sequence_tools</li> <li>vm<ul> <li>builder</li> <li>command_visitor</li> <li>commands<ul> <li>command</li> <li>layer</li> <li>paste</li> <li>shape</li> <li>shape_segments<ul> <li>arc</li> <li>line</li> <li>shape_segment</li> </ul> </li> </ul> </li> <li>pillow<ul> <li>errors</li> <li>vm</li> </ul> </li> <li>rvmc</li> <li>types<ul> <li>box</li> <li>color</li> <li>errors</li> <li>layer_id</li> <li>matrix</li> <li>model</li> <li>style</li> <li>vector</li> </ul> </li> <li>vm</li> </ul> </li> <li>warnings</li> </ul> </li> </ul>"},{"location":"reference/pygerber/__init__.html","title":"init","text":""},{"location":"reference/pygerber/__init__.html#pygerber","title":"pygerber","text":"<p>Package for PCB formats visualization.</p>"},{"location":"reference/pygerber/sequence_tools.html","title":"sequence_tools","text":""},{"location":"reference/pygerber/sequence_tools.html#pygerber.sequence_tools","title":"sequence_tools","text":"<p>Convenience tools for operating on sequences.</p>"},{"location":"reference/pygerber/sequence_tools.html#pygerber.sequence_tools.flatten_list","title":"flatten_list","text":"<pre><code>flatten_list(sequence: list[T]) -&gt; list[T]\n</code></pre> <p>Flatten a sequence.</p> Source code in <code>src/pygerber/sequence_tools.py</code> <pre><code>def flatten_list(sequence: list[T]) -&gt; list[T]:\n    \"\"\"Flatten a sequence.\"\"\"\n    out = []\n\n    for item in sequence:\n        if isinstance(item, list):\n            out.extend(flatten_list(item))\n        else:\n            out.append(item)\n\n    return out\n</code></pre>"},{"location":"reference/pygerber/sequence_tools.html#pygerber.sequence_tools.flatten","title":"flatten","text":"<pre><code>flatten(sequence: Iterable[T]) -&gt; Iterable[T]\n</code></pre> <p>Flatten a sequence.</p> Source code in <code>src/pygerber/sequence_tools.py</code> <pre><code>def flatten(sequence: Iterable[T]) -&gt; Iterable[T]:\n    \"\"\"Flatten a sequence.\"\"\"\n    for item in sequence:\n        if isinstance(item, (list, tuple)):\n            yield from flatten(item)\n        else:\n            yield item\n</code></pre>"},{"location":"reference/pygerber/sequence_tools.html#pygerber.sequence_tools.unwrap","title":"unwrap","text":"<pre><code>unwrap(item: T) -&gt; T\n</code></pre> <p>Unwrap item wrapped in sequences.</p> Source code in <code>src/pygerber/sequence_tools.py</code> <pre><code>def unwrap(item: T) -&gt; T:\n    \"\"\"Unwrap item wrapped in sequences.\"\"\"\n    try:\n        while isinstance(item, (list, tuple, ParseResults)):\n            item = item[0]  # type: ignore[pylance]\n    except (TypeError, IndexError):\n        pass\n\n    return item\n</code></pre>"},{"location":"reference/pygerber/warnings.html","title":"warnings","text":""},{"location":"reference/pygerber/warnings.html#pygerber.warnings","title":"warnings","text":"<p>Tools for displaying warnings.</p>"},{"location":"reference/pygerber/warnings.html#pygerber.warnings.warn_deprecated_code","title":"warn_deprecated_code","text":"<pre><code>warn_deprecated_code(code: str, spec_section: str) -&gt; None\n</code></pre> <p>Display warning about deprecated code.</p> Source code in <code>src/pygerber/warnings.py</code> <pre><code>def warn_deprecated_code(code: str, spec_section: str) -&gt; None:\n    \"\"\"Display warning about deprecated code.\"\"\"\n    logging.warning(\n        \"Detected deprecated code: %s. \"\n        \"See section %s of The Gerber Layer Format Specification Revision \"\n        \"2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\",\n        code,\n        spec_section,\n    )\n</code></pre>"},{"location":"reference/pygerber/backend/__init__.html","title":"init","text":""},{"location":"reference/pygerber/backend/__init__.html#pygerber.backend","title":"backend","text":"<p>Drawing backends for Gerber files rendering.</p>"},{"location":"reference/pygerber/backend/__init__.html#pygerber.backend.BackendName","title":"BackendName","text":"<p>             Bases: <code>Enum</code></p> <p>Available rendering modes.</p> Source code in <code>src/pygerber/backend/__init__.py</code> <pre><code>class BackendName(Enum):\n    \"\"\"Available rendering modes.\"\"\"\n\n    Rasterized2D = \"rasterized_2d\"\n    Vector2D = \"vector_2d\"\n    Model3D = \"model_3d\"\n\n    @staticmethod\n    def get_backend_class(backend: str | BackendName) -&gt; type[Backend]:\n        \"\"\"Return backend class.\"\"\"\n        if str(backend) == BackendName.Rasterized2D.value:\n            return Rasterized2DBackend\n\n        raise BackendNotSupportedError(str(backend))\n\n    def __str__(self) -&gt; str:\n        return self.value\n</code></pre>"},{"location":"reference/pygerber/backend/__init__.html#pygerber.backend.BackendName.get_backend_class","title":"get_backend_class  <code>staticmethod</code>","text":"<pre><code>get_backend_class(\n    backend: str | BackendName,\n) -&gt; type[Backend]\n</code></pre> <p>Return backend class.</p> Source code in <code>src/pygerber/backend/__init__.py</code> <pre><code>@staticmethod\ndef get_backend_class(backend: str | BackendName) -&gt; type[Backend]:\n    \"\"\"Return backend class.\"\"\"\n    if str(backend) == BackendName.Rasterized2D.value:\n        return Rasterized2DBackend\n\n    raise BackendNotSupportedError(str(backend))\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/__init__.html","title":"init","text":""},{"location":"reference/pygerber/backend/abstract/__init__.html#pygerber.backend.abstract","title":"abstract","text":"<p>Abstract classes for building drawing implementations.</p>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html","title":"aperture_handle","text":""},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle","title":"aperture_handle","text":"<p>Module contains classes-handles to drawing apertures.</p>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle","title":"PrivateApertureHandle","text":"<p>Base class for creating Gerber X3 apertures.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>class PrivateApertureHandle:\n    \"\"\"Base class for creating Gerber X3 apertures.\"\"\"\n\n    drawing_target: DrawingTarget\n    bounding_box: BoundingBox\n\n    def __init__(\n        self,\n        aperture_id: ApertureID,\n        private_id: int,\n        backend: Backend,\n    ) -&gt; None:\n        \"\"\"Initialize aperture handle.\"\"\"\n        self.aperture_id = aperture_id\n        self.private_id = private_id\n        self.backend = backend\n        self.aperture_draws: list[DrawCommand] = []\n        self.is_plain_circle = True\n\n    def add_draw(self, draw: DrawCommand) -&gt; None:\n        \"\"\"Add circle to aperture.\"\"\"\n        if self.is_plain_circle and (\n            not isinstance(draw, DrawCircle) or len(self.aperture_draws) &gt; 1\n        ):\n            self.is_plain_circle = False\n        self.aperture_draws.append(draw)\n\n    def __enter__(self) -&gt; None:\n        pass\n\n    def __exit__(\n        self,\n        exc_type: Optional[type[BaseException]],\n        exc_value: Optional[BaseException],\n        traceback: Optional[TracebackType],\n    ) -&gt; None:\n        if exc_type is None:\n            self.bounding_box = self.get_bounding_box()\n            self.coordinate_origin = self._get_coordinate_origin()\n            self.drawing_target = self._create_drawing_target()\n\n    def finalize_aperture_creation(self) -&gt; None:\n        \"\"\"Draw aperture and store result.\"\"\"\n        with self.drawing_target:\n            for aperture_draw in self.aperture_draws:\n                aperture_draw.draw(self.drawing_target)\n\n        self._post_drawing_hook()\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        bbox: Optional[BoundingBox] = None\n\n        for aperture_draw in self.aperture_draws:\n            if bbox is not None:\n                bbox += aperture_draw.get_bounding_box()\n            else:\n                bbox = aperture_draw.get_bounding_box()\n\n        if bbox is not None:\n            return bbox\n\n        return BoundingBox.NULL\n\n    def _get_coordinate_origin(self) -&gt; Vector2D:\n        return self.bounding_box.get_min_vector()\n\n    @abstractmethod\n    def _create_drawing_target(self) -&gt; DrawingTarget:\n        \"\"\"Create drawing target object.\"\"\"\n\n    def _post_drawing_hook(self) -&gt; None:\n        \"\"\"Perform custom actions after drawing.\"\"\"\n\n    def get_public_handle(self) -&gt; PublicApertureHandle:\n        \"\"\"Return immutable aperture handle.\"\"\"\n        return PublicApertureHandle(\n            aperture_id=self.aperture_id,\n            private_id=self.private_id,\n        )\n\n    def get_line_width(self) -&gt; Offset:\n        \"\"\"Width of line made with this aperture.\"\"\"\n        box = self.get_bounding_box()\n        return (box.height + box.width) / 2\n\n    @abstractmethod\n    def dump_aperture(self, dest: Path) -&gt; None:\n        \"\"\"Save aperture to local file, mainly for debugging purposes.\"\"\"\n\n    def __str__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__qualname__}(aperture_id={self.aperture_id}, \"\n            f\"private_id={self.private_id})\"\n        )\n\n    __repr__ = __str__\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.__init__","title":"__init__","text":"<pre><code>__init__(\n    aperture_id: ApertureID,\n    private_id: int,\n    backend: Backend,\n) -&gt; None\n</code></pre> <p>Initialize aperture handle.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def __init__(\n    self,\n    aperture_id: ApertureID,\n    private_id: int,\n    backend: Backend,\n) -&gt; None:\n    \"\"\"Initialize aperture handle.\"\"\"\n    self.aperture_id = aperture_id\n    self.private_id = private_id\n    self.backend = backend\n    self.aperture_draws: list[DrawCommand] = []\n    self.is_plain_circle = True\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.add_draw","title":"add_draw","text":"<pre><code>add_draw(draw: DrawCommand) -&gt; None\n</code></pre> <p>Add circle to aperture.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def add_draw(self, draw: DrawCommand) -&gt; None:\n    \"\"\"Add circle to aperture.\"\"\"\n    if self.is_plain_circle and (\n        not isinstance(draw, DrawCircle) or len(self.aperture_draws) &gt; 1\n    ):\n        self.is_plain_circle = False\n    self.aperture_draws.append(draw)\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.finalize_aperture_creation","title":"finalize_aperture_creation","text":"<pre><code>finalize_aperture_creation() -&gt; None\n</code></pre> <p>Draw aperture and store result.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def finalize_aperture_creation(self) -&gt; None:\n    \"\"\"Draw aperture and store result.\"\"\"\n    with self.drawing_target:\n        for aperture_draw in self.aperture_draws:\n            aperture_draw.draw(self.drawing_target)\n\n    self._post_drawing_hook()\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.get_public_handle","title":"get_public_handle","text":"<pre><code>get_public_handle() -&gt; PublicApertureHandle\n</code></pre> <p>Return immutable aperture handle.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def get_public_handle(self) -&gt; PublicApertureHandle:\n    \"\"\"Return immutable aperture handle.\"\"\"\n    return PublicApertureHandle(\n        aperture_id=self.aperture_id,\n        private_id=self.private_id,\n    )\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.get_line_width","title":"get_line_width","text":"<pre><code>get_line_width() -&gt; Offset\n</code></pre> <p>Width of line made with this aperture.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>def get_line_width(self) -&gt; Offset:\n    \"\"\"Width of line made with this aperture.\"\"\"\n    box = self.get_bounding_box()\n    return (box.height + box.width) / 2\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PrivateApertureHandle.dump_aperture","title":"dump_aperture  <code>abstractmethod</code>","text":"<pre><code>dump_aperture(dest: Path) -&gt; None\n</code></pre> <p>Save aperture to local file, mainly for debugging purposes.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>@abstractmethod\ndef dump_aperture(self, dest: Path) -&gt; None:\n    \"\"\"Save aperture to local file, mainly for debugging purposes.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/aperture_handle.html#pygerber.backend.abstract.aperture_handle.PublicApertureHandle","title":"PublicApertureHandle","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Immutable handle to drawing aperture.</p> Source code in <code>src/pygerber/backend/abstract/aperture_handle.py</code> <pre><code>class PublicApertureHandle(FrozenGeneralModel):\n    \"\"\"Immutable handle to drawing aperture.\"\"\"\n\n    aperture_id: ApertureID\n    private_id: int\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html","title":"backend_cls","text":""},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls","title":"backend_cls","text":"<p>Class interface for visualizing gerber files.</p>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.BackendOptions","title":"BackendOptions","text":"<p>Additional configuration which can be passed to backend.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>class BackendOptions:\n    \"\"\"Additional configuration which can be passed to backend.\"\"\"\n\n    def __init__(\n        self,\n        dump_apertures: Optional[Path] = None,\n        *,\n        draw_region_outlines: bool = False,\n    ) -&gt; None:\n        \"\"\"Initialize options.\"\"\"\n        self.dump_apertures = dump_apertures\n        self.draw_region_outlines = draw_region_outlines\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.BackendOptions.__init__","title":"__init__","text":"<pre><code>__init__(\n    dump_apertures: Optional[Path] = None,\n    *,\n    draw_region_outlines: bool = False\n) -&gt; None\n</code></pre> <p>Initialize options.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def __init__(\n    self,\n    dump_apertures: Optional[Path] = None,\n    *,\n    draw_region_outlines: bool = False,\n) -&gt; None:\n    \"\"\"Initialize options.\"\"\"\n    self.dump_apertures = dump_apertures\n    self.draw_region_outlines = draw_region_outlines\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend","title":"Backend","text":"<p>             Bases: <code>ABC</code></p> <p>Drawing backend interface.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>class Backend(ABC):\n    \"\"\"Drawing backend interface.\"\"\"\n\n    handles: list[PrivateApertureHandle]\n    drawing_target: DrawingTarget\n    bounding_box: BoundingBox\n    coordinate_origin: Vector2D\n\n    options_class: ClassVar[type[BackendOptions]] = BackendOptions\n\n    def __init__(self, options: Optional[BackendOptions] = None) -&gt; None:\n        \"\"\"Initialize backend.\"\"\"\n        self.options = self.options_class() if options is None else options\n        self.handles = []\n\n    def create_aperture_handle(self, aperture_id: ApertureID) -&gt; PrivateApertureHandle:\n        \"\"\"Create new aperture handle.\"\"\"\n        handle = self.get_aperture_handle_cls()(\n            aperture_id=aperture_id,\n            private_id=len(self.handles),\n            backend=self,\n        )\n        self.handles.append(handle)\n        return handle\n\n    def get_private_aperture_handle(\n        self,\n        public_aperture_handle: PublicApertureHandle,\n    ) -&gt; PrivateApertureHandle:\n        \"\"\"Get private aperture handle.\"\"\"\n        return self.handles[public_aperture_handle.private_id]\n\n    def draw(self, draws: List[DrawCommand]) -&gt; ResultHandle:\n        \"\"\"Execute all draw actions to create visualization.\"\"\"\n        self.draws = draws\n\n        self.finalize_aperture_creation()\n        self.bounding_box = self._get_draws_bounding_box(draws)\n        self.coordinate_origin = self._get_coordinate_origin()\n        self.drawing_target = self._create_drawing_target()\n        self._pre_drawing_hook()\n\n        with self.drawing_target:\n            for draw_action in draws:\n                draw_action.draw(self.drawing_target)\n\n        self._post_drawing_hook()\n\n        return self.get_result_handle()\n\n    def finalize_aperture_creation(self) -&gt; None:\n        \"\"\"Apply draw operations to aperture handles.\"\"\"\n        for handle in self.handles:\n            handle.finalize_aperture_creation()\n\n    def _get_draws_bounding_box(self, draws: List[DrawCommand]) -&gt; BoundingBox:\n        bbox: Optional[BoundingBox] = None\n\n        for draw in draws:\n            if bbox is not None:\n                bbox += draw.get_bounding_box()\n            else:\n                bbox = draw.get_bounding_box()\n\n        if bbox is not None:\n            return bbox\n\n        return BoundingBox.NULL\n\n    def _get_coordinate_origin(self) -&gt; Vector2D:\n        return self.bounding_box.get_min_vector()\n\n    @abstractmethod\n    def _create_drawing_target(self) -&gt; DrawingTarget:\n        \"\"\"Create drawing target object.\"\"\"\n\n    def _pre_drawing_hook(self) -&gt; None:  # noqa: B027\n        \"\"\"Perform custom actions before drawing.\"\"\"\n\n    def _post_drawing_hook(self) -&gt; None:  # noqa: B027\n        \"\"\"Perform custom actions after drawing.\"\"\"\n\n    @abstractmethod\n    def get_result_handle(self) -&gt; ResultHandle:\n        \"\"\"Return result handle to visualization.\"\"\"\n\n    @abstractmethod\n    def get_aperture_handle_cls(self) -&gt; Type[PrivateApertureHandle]:\n        \"\"\"Get backend-specific implementation of aperture handle class.\"\"\"\n\n    @abstractmethod\n    def get_draw_circle_cls(self) -&gt; Type[DrawCircle]:\n        \"\"\"Get backend-specific implementation of aperture circle component class.\"\"\"\n\n    @abstractmethod\n    def get_draw_rectangle_cls(self) -&gt; Type[DrawRectangle]:\n        \"\"\"Get backend-specific implementation of aperture rectangle component class.\"\"\"\n\n    @abstractmethod\n    def get_draw_polygon_cls(self) -&gt; Type[DrawPolygon]:\n        \"\"\"Get backend-specific implementation of aperture polygon component class.\"\"\"\n\n    @abstractmethod\n    def get_draw_commands_handle_cls(self) -&gt; type[DrawCommandsHandle]:\n        \"\"\"Return backend-specific implementation of draw actions handle.\"\"\"\n\n    @abstractmethod\n    def get_draw_paste_cls(self) -&gt; type[DrawPaste]:\n        \"\"\"Return backend-specific implementation of draw paste.\"\"\"\n\n    @abstractmethod\n    def get_draw_region_cls(self) -&gt; type[DrawRegion]:\n        \"\"\"Return backend-specific implementation of draw action region.\"\"\"\n\n    @abstractmethod\n    def get_draw_vector_line_cls(self) -&gt; type[DrawVectorLine]:\n        \"\"\"Return backend-specific implementation of draw action line.\"\"\"\n\n    @abstractmethod\n    def get_draw_arc_cls(self) -&gt; type[DrawArc]:\n        \"\"\"Return backend-specific implementation of draw action arc.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.__init__","title":"__init__","text":"<pre><code>__init__(options: Optional[BackendOptions] = None) -&gt; None\n</code></pre> <p>Initialize backend.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def __init__(self, options: Optional[BackendOptions] = None) -&gt; None:\n    \"\"\"Initialize backend.\"\"\"\n    self.options = self.options_class() if options is None else options\n    self.handles = []\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.create_aperture_handle","title":"create_aperture_handle","text":"<pre><code>create_aperture_handle(\n    aperture_id: ApertureID,\n) -&gt; PrivateApertureHandle\n</code></pre> <p>Create new aperture handle.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def create_aperture_handle(self, aperture_id: ApertureID) -&gt; PrivateApertureHandle:\n    \"\"\"Create new aperture handle.\"\"\"\n    handle = self.get_aperture_handle_cls()(\n        aperture_id=aperture_id,\n        private_id=len(self.handles),\n        backend=self,\n    )\n    self.handles.append(handle)\n    return handle\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_private_aperture_handle","title":"get_private_aperture_handle","text":"<pre><code>get_private_aperture_handle(\n    public_aperture_handle: PublicApertureHandle,\n) -&gt; PrivateApertureHandle\n</code></pre> <p>Get private aperture handle.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def get_private_aperture_handle(\n    self,\n    public_aperture_handle: PublicApertureHandle,\n) -&gt; PrivateApertureHandle:\n    \"\"\"Get private aperture handle.\"\"\"\n    return self.handles[public_aperture_handle.private_id]\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.draw","title":"draw","text":"<pre><code>draw(draws: List[DrawCommand]) -&gt; ResultHandle\n</code></pre> <p>Execute all draw actions to create visualization.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def draw(self, draws: List[DrawCommand]) -&gt; ResultHandle:\n    \"\"\"Execute all draw actions to create visualization.\"\"\"\n    self.draws = draws\n\n    self.finalize_aperture_creation()\n    self.bounding_box = self._get_draws_bounding_box(draws)\n    self.coordinate_origin = self._get_coordinate_origin()\n    self.drawing_target = self._create_drawing_target()\n    self._pre_drawing_hook()\n\n    with self.drawing_target:\n        for draw_action in draws:\n            draw_action.draw(self.drawing_target)\n\n    self._post_drawing_hook()\n\n    return self.get_result_handle()\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.finalize_aperture_creation","title":"finalize_aperture_creation","text":"<pre><code>finalize_aperture_creation() -&gt; None\n</code></pre> <p>Apply draw operations to aperture handles.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>def finalize_aperture_creation(self) -&gt; None:\n    \"\"\"Apply draw operations to aperture handles.\"\"\"\n    for handle in self.handles:\n        handle.finalize_aperture_creation()\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_result_handle","title":"get_result_handle  <code>abstractmethod</code>","text":"<pre><code>get_result_handle() -&gt; ResultHandle\n</code></pre> <p>Return result handle to visualization.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_result_handle(self) -&gt; ResultHandle:\n    \"\"\"Return result handle to visualization.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_aperture_handle_cls","title":"get_aperture_handle_cls  <code>abstractmethod</code>","text":"<pre><code>get_aperture_handle_cls() -&gt; Type[PrivateApertureHandle]\n</code></pre> <p>Get backend-specific implementation of aperture handle class.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_aperture_handle_cls(self) -&gt; Type[PrivateApertureHandle]:\n    \"\"\"Get backend-specific implementation of aperture handle class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_circle_cls","title":"get_draw_circle_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_circle_cls() -&gt; Type[DrawCircle]\n</code></pre> <p>Get backend-specific implementation of aperture circle component class.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_circle_cls(self) -&gt; Type[DrawCircle]:\n    \"\"\"Get backend-specific implementation of aperture circle component class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_rectangle_cls","title":"get_draw_rectangle_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_rectangle_cls() -&gt; Type[DrawRectangle]\n</code></pre> <p>Get backend-specific implementation of aperture rectangle component class.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_rectangle_cls(self) -&gt; Type[DrawRectangle]:\n    \"\"\"Get backend-specific implementation of aperture rectangle component class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_polygon_cls","title":"get_draw_polygon_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_polygon_cls() -&gt; Type[DrawPolygon]\n</code></pre> <p>Get backend-specific implementation of aperture polygon component class.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_polygon_cls(self) -&gt; Type[DrawPolygon]:\n    \"\"\"Get backend-specific implementation of aperture polygon component class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_commands_handle_cls","title":"get_draw_commands_handle_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_commands_handle_cls() -&gt; type[DrawCommandsHandle]\n</code></pre> <p>Return backend-specific implementation of draw actions handle.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_commands_handle_cls(self) -&gt; type[DrawCommandsHandle]:\n    \"\"\"Return backend-specific implementation of draw actions handle.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_paste_cls","title":"get_draw_paste_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_paste_cls() -&gt; type[DrawPaste]\n</code></pre> <p>Return backend-specific implementation of draw paste.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_paste_cls(self) -&gt; type[DrawPaste]:\n    \"\"\"Return backend-specific implementation of draw paste.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_region_cls","title":"get_draw_region_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_region_cls() -&gt; type[DrawRegion]\n</code></pre> <p>Return backend-specific implementation of draw action region.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_region_cls(self) -&gt; type[DrawRegion]:\n    \"\"\"Return backend-specific implementation of draw action region.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_vector_line_cls","title":"get_draw_vector_line_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_vector_line_cls() -&gt; type[DrawVectorLine]\n</code></pre> <p>Return backend-specific implementation of draw action line.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_vector_line_cls(self) -&gt; type[DrawVectorLine]:\n    \"\"\"Return backend-specific implementation of draw action line.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/backend_cls.html#pygerber.backend.abstract.backend_cls.Backend.get_draw_arc_cls","title":"get_draw_arc_cls  <code>abstractmethod</code>","text":"<pre><code>get_draw_arc_cls() -&gt; type[DrawArc]\n</code></pre> <p>Return backend-specific implementation of draw action arc.</p> Source code in <code>src/pygerber/backend/abstract/backend_cls.py</code> <pre><code>@abstractmethod\ndef get_draw_arc_cls(self) -&gt; type[DrawArc]:\n    \"\"\"Return backend-specific implementation of draw action arc.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands_handle.html","title":"draw_commands_handle","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands_handle.html#pygerber.backend.abstract.draw_commands_handle","title":"draw_commands_handle","text":"<p>Contains class wrapping list of draw operations created by Gerber parser.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands_handle.html#pygerber.backend.abstract.draw_commands_handle.DrawCommandsHandle","title":"DrawCommandsHandle","text":"<p>List of drawing operations produced by Gerber parser.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands_handle.py</code> <pre><code>class DrawCommandsHandle:\n    \"\"\"List of drawing operations produced by Gerber parser.\"\"\"\n\n    def __init__(self, draw_actions: List[DrawCommand], backend: Backend) -&gt; None:\n        \"\"\"Initialize drawing instructions.\"\"\"\n        self.draw_commands = draw_actions\n        self.backend = backend\n\n    def draw(self) -&gt; ResultHandle:\n        \"\"\"Create visualization based on drawing instructions.\"\"\"\n        return self.backend.draw(self.draw_commands)\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands_handle.html#pygerber.backend.abstract.draw_commands_handle.DrawCommandsHandle.__init__","title":"__init__","text":"<pre><code>__init__(\n    draw_actions: List[DrawCommand], backend: Backend\n) -&gt; None\n</code></pre> <p>Initialize drawing instructions.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands_handle.py</code> <pre><code>def __init__(self, draw_actions: List[DrawCommand], backend: Backend) -&gt; None:\n    \"\"\"Initialize drawing instructions.\"\"\"\n    self.draw_commands = draw_actions\n    self.backend = backend\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands_handle.html#pygerber.backend.abstract.draw_commands_handle.DrawCommandsHandle.draw","title":"draw","text":"<pre><code>draw() -&gt; ResultHandle\n</code></pre> <p>Create visualization based on drawing instructions.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands_handle.py</code> <pre><code>def draw(self) -&gt; ResultHandle:\n    \"\"\"Create visualization based on drawing instructions.\"\"\"\n    return self.backend.draw(self.draw_commands)\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/drawing_target.html","title":"drawing_target","text":""},{"location":"reference/pygerber/backend/abstract/drawing_target.html#pygerber.backend.abstract.drawing_target","title":"drawing_target","text":"<p>Target for Draw commands to draw into.</p>"},{"location":"reference/pygerber/backend/abstract/drawing_target.html#pygerber.backend.abstract.drawing_target.DrawingTarget","title":"DrawingTarget","text":"<p>Target for Draw commands to draw into.</p> Source code in <code>src/pygerber/backend/abstract/drawing_target.py</code> <pre><code>class DrawingTarget:\n    \"\"\"Target for Draw commands to draw into.\"\"\"\n\n    coordinate_origin: Vector2D\n    bounding_box: BoundingBox\n\n    def __init__(self, coordinate_origin: Vector2D, bounding_box: BoundingBox) -&gt; None:\n        \"\"\"Initialize drawing target.\"\"\"\n        self.coordinate_origin = coordinate_origin\n        self.bounding_box = bounding_box\n\n    def __enter__(self) -&gt; None:\n        pass\n\n    def __exit__(\n        self,\n        exc_type: Optional[type[BaseException]],\n        exc_value: Optional[BaseException],\n        traceback: Optional[TracebackType],\n    ) -&gt; None:\n        if exc_type is None:\n            self._finalize()\n\n    def _finalize(self) -&gt; None:\n        \"\"\"Call at the end of image modification.\n\n        After this call no modifications to image are allowed.\n        \"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/drawing_target.html#pygerber.backend.abstract.drawing_target.DrawingTarget.__init__","title":"__init__","text":"<pre><code>__init__(\n    coordinate_origin: Vector2D, bounding_box: BoundingBox\n) -&gt; None\n</code></pre> <p>Initialize drawing target.</p> Source code in <code>src/pygerber/backend/abstract/drawing_target.py</code> <pre><code>def __init__(self, coordinate_origin: Vector2D, bounding_box: BoundingBox) -&gt; None:\n    \"\"\"Initialize drawing target.\"\"\"\n    self.coordinate_origin = coordinate_origin\n    self.bounding_box = bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/errors.html","title":"errors","text":""},{"location":"reference/pygerber/backend/abstract/errors.html#pygerber.backend.abstract.errors","title":"errors","text":"<p>Base error classes used in this module.</p>"},{"location":"reference/pygerber/backend/abstract/errors.html#pygerber.backend.abstract.errors.BackendError","title":"BackendError","text":"<p>             Bases: <code>ValueError</code></p> <p>Base class for backend errors.</p> Source code in <code>src/pygerber/backend/abstract/errors.py</code> <pre><code>class BackendError(ValueError):\n    \"\"\"Base class for backend errors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/errors.html#pygerber.backend.abstract.errors.BackendNotSupportedError","title":"BackendNotSupportedError","text":"<p>             Bases: <code>BackendError</code></p> <p>Raised when requesting backend which is not officially supported.</p> Source code in <code>src/pygerber/backend/abstract/errors.py</code> <pre><code>class BackendNotSupportedError(BackendError):\n    \"\"\"Raised when requesting backend which is not officially supported.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/result_handle.html","title":"result_handle","text":""},{"location":"reference/pygerber/backend/abstract/result_handle.html#pygerber.backend.abstract.result_handle","title":"result_handle","text":"<p>Module contains handle class to drawing instructions visualization.</p>"},{"location":"reference/pygerber/backend/abstract/result_handle.html#pygerber.backend.abstract.result_handle.ResultHandle","title":"ResultHandle","text":"<p>             Bases: <code>ABC</code></p> <p>Handle to drawing instructions visualization.</p> Source code in <code>src/pygerber/backend/abstract/result_handle.py</code> <pre><code>class ResultHandle(ABC):\n    \"\"\"Handle to drawing instructions visualization.\"\"\"\n\n    @abstractmethod\n    def save(\n        self,\n        dest: Path | str | BytesIO,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Save result to destination.\n\n        All additional parameters are passed to underlying saving system.\n        For more details see documentation of concrete implementations.\n        \"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/result_handle.html#pygerber.backend.abstract.result_handle.ResultHandle.save","title":"save  <code>abstractmethod</code>","text":"<pre><code>save(dest: Path | str | BytesIO, **kwargs: Any) -&gt; None\n</code></pre> <p>Save result to destination.</p> <p>All additional parameters are passed to underlying saving system. For more details see documentation of concrete implementations.</p> Source code in <code>src/pygerber/backend/abstract/result_handle.py</code> <pre><code>@abstractmethod\ndef save(\n    self,\n    dest: Path | str | BytesIO,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Save result to destination.\n\n    All additional parameters are passed to underlying saving system.\n    For more details see documentation of concrete implementations.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/__init__.html","title":"init","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/__init__.html#pygerber.backend.abstract.draw_commands","title":"draw_commands","text":"<p>Draw operations for constructing apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html","title":"draw_arc","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc","title":"draw_arc","text":"<p>Base class for creating components for aperture creation.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc","title":"DrawArc","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_arc.py</code> <pre><code>class DrawArc(DrawCommand):\n    \"\"\"Description of aperture component.\"\"\"\n\n    start_position: Vector2D\n    dx_dy_center: Vector2D\n    end_position: Vector2D\n    width: Offset\n\n    is_clockwise: bool\n    is_multi_quadrant: bool\n\n    def __init__(  # noqa: PLR0913\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        start_position: Vector2D,\n        dx_dy_center: Vector2D,\n        end_position: Vector2D,\n        width: Offset,\n        *,\n        is_clockwise: bool,\n        is_multi_quadrant: bool,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.start_position = start_position\n        self.dx_dy_center = dx_dy_center\n        self.end_position = end_position\n        self.width = width\n        self.is_clockwise = is_clockwise\n        self.is_multi_quadrant = is_multi_quadrant\n\n    @property\n    def arc_center_absolute(self) -&gt; Vector2D:\n        \"\"\"Return absolute coordinates of arc center point.\"\"\"\n        return self.start_position + self.dx_dy_center\n\n    @property\n    def arc_space_arc_center(self) -&gt; Vector2D:\n        \"\"\"Return arc center coordinates relative to arc center.\"\"\"\n        return self.arc_center_absolute - self.arc_center_absolute\n\n    @property\n    def arc_space_start_position(self) -&gt; Vector2D:\n        \"\"\"Return arc start coordinates relative to arc center.\"\"\"\n        return self.start_position - self.arc_center_absolute\n\n    @property\n    def arc_space_end_position(self) -&gt; Vector2D:\n        \"\"\"Return arc end coordinates relative to arc center.\"\"\"\n        return self.end_position - self.arc_center_absolute\n\n    @property\n    def arc_radius(self) -&gt; Offset:\n        \"\"\"Return arc radius.\"\"\"\n        return self.dx_dy_center.length()\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        vertex_box = BoundingBox.from_diameter(self.width)\n        radius = self.arc_radius\n        return (vertex_box + (self.arc_center_absolute + radius)) + (\n            vertex_box + (self.arc_center_absolute - radius)\n        )\n\n    def _calculate_angles(self) -&gt; tuple[float, float]:\n        angle_start = self.arc_space_start_position.angle_between_clockwise(\n            Vector2D.UNIT_Y,\n        )\n        angle_end = self.arc_space_end_position.angle_between_clockwise(Vector2D.UNIT_Y)\n\n        if self.is_multi_quadrant and angle_start == angle_end:\n            angle_start = 0\n            angle_end = 360\n\n        elif self.is_clockwise:\n            angle_start, angle_end = angle_end, angle_start\n\n        return angle_start, angle_end\n\n    def calculate_arc_points(self) -&gt; Generator[Vector2D, None, None]:\n        \"\"\"Calculate points on arc.\"\"\"\n        angle_start, angle_end = self._calculate_angles()\n\n        angle_step = 1\n        angle_min = min(angle_start, angle_end)\n        angle_max = max(angle_start, angle_end)\n\n        angle_current = angle_min\n\n        yield self.arc_center_absolute\n\n        while angle_current &lt; (angle_max + angle_step):\n            yield self.arc_center_absolute + Vector2D(\n                x=self.arc_radius * math.cos(math.radians(angle_current)),\n                y=self.arc_radius * math.sin(math.radians(angle_current)),\n            )\n            angle_current += angle_step\n\n        yield self.arc_center_absolute\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.arc_center_absolute","title":"arc_center_absolute  <code>property</code>","text":"<pre><code>arc_center_absolute: Vector2D\n</code></pre> <p>Return absolute coordinates of arc center point.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.arc_space_arc_center","title":"arc_space_arc_center  <code>property</code>","text":"<pre><code>arc_space_arc_center: Vector2D\n</code></pre> <p>Return arc center coordinates relative to arc center.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.arc_space_start_position","title":"arc_space_start_position  <code>property</code>","text":"<pre><code>arc_space_start_position: Vector2D\n</code></pre> <p>Return arc start coordinates relative to arc center.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.arc_space_end_position","title":"arc_space_end_position  <code>property</code>","text":"<pre><code>arc_space_end_position: Vector2D\n</code></pre> <p>Return arc end coordinates relative to arc center.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.arc_radius","title":"arc_radius  <code>property</code>","text":"<pre><code>arc_radius: Offset\n</code></pre> <p>Return arc radius.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    start_position: Vector2D,\n    dx_dy_center: Vector2D,\n    end_position: Vector2D,\n    width: Offset,\n    *,\n    is_clockwise: bool,\n    is_multi_quadrant: bool\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_arc.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    start_position: Vector2D,\n    dx_dy_center: Vector2D,\n    end_position: Vector2D,\n    width: Offset,\n    *,\n    is_clockwise: bool,\n    is_multi_quadrant: bool,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.start_position = start_position\n    self.dx_dy_center = dx_dy_center\n    self.end_position = end_position\n    self.width = width\n    self.is_clockwise = is_clockwise\n    self.is_multi_quadrant = is_multi_quadrant\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_arc.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_arc.html#pygerber.backend.abstract.draw_commands.draw_arc.DrawArc.calculate_arc_points","title":"calculate_arc_points","text":"<pre><code>calculate_arc_points() -&gt; Generator[Vector2D, None, None]\n</code></pre> <p>Calculate points on arc.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_arc.py</code> <pre><code>def calculate_arc_points(self) -&gt; Generator[Vector2D, None, None]:\n    \"\"\"Calculate points on arc.\"\"\"\n    angle_start, angle_end = self._calculate_angles()\n\n    angle_step = 1\n    angle_min = min(angle_start, angle_end)\n    angle_max = max(angle_start, angle_end)\n\n    angle_current = angle_min\n\n    yield self.arc_center_absolute\n\n    while angle_current &lt; (angle_max + angle_step):\n        yield self.arc_center_absolute + Vector2D(\n            x=self.arc_radius * math.cos(math.radians(angle_current)),\n            y=self.arc_radius * math.sin(math.radians(angle_current)),\n        )\n        angle_current += angle_step\n\n    yield self.arc_center_absolute\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_bounding_box.html","title":"draw_bounding_box","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_bounding_box.html#pygerber.backend.abstract.draw_commands.draw_bounding_box","title":"draw_bounding_box","text":"<p>BoundingBox component for creating apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_bounding_box.html#pygerber.backend.abstract.draw_commands.draw_bounding_box.DrawBoundingBox","title":"DrawBoundingBox","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of BoundingBox component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_bounding_box.py</code> <pre><code>class DrawBoundingBox(DrawCommand):\n    \"\"\"Description of BoundingBox component.\"\"\"\n\n    bounding_box: BoundingBox\n    outline_padding: Offset\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        bounding_box: BoundingBox,\n        outline_padding: Offset,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.bounding_box = bounding_box\n        self.outline_padding = outline_padding\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        return self.bounding_box + self.outline_padding\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_bounding_box.html#pygerber.backend.abstract.draw_commands.draw_bounding_box.DrawBoundingBox.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    bounding_box: BoundingBox,\n    outline_padding: Offset,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_bounding_box.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    bounding_box: BoundingBox,\n    outline_padding: Offset,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.bounding_box = bounding_box\n    self.outline_padding = outline_padding\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_bounding_box.html#pygerber.backend.abstract.draw_commands.draw_bounding_box.DrawBoundingBox.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_bounding_box.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_circle.html","title":"draw_circle","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_circle.html#pygerber.backend.abstract.draw_commands.draw_circle","title":"draw_circle","text":"<p>Circle component for creating apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_circle.html#pygerber.backend.abstract.draw_commands.draw_circle.DrawCircle","title":"DrawCircle","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of circle aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_circle.py</code> <pre><code>class DrawCircle(DrawCommand):\n    \"\"\"Description of circle aperture component.\"\"\"\n\n    center_position: Vector2D\n    diameter: Offset\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        center_position: Vector2D,\n        diameter: Offset,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.center_position = center_position\n        self.diameter = diameter\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        return BoundingBox.from_diameter(self.diameter) + self.center_position\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_circle.html#pygerber.backend.abstract.draw_commands.draw_circle.DrawCircle.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    diameter: Offset,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_circle.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    diameter: Offset,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.center_position = center_position\n    self.diameter = diameter\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_circle.html#pygerber.backend.abstract.draw_commands.draw_circle.DrawCircle.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_circle.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html","title":"draw_command","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html#pygerber.backend.abstract.draw_commands.draw_command","title":"draw_command","text":"<p>Base class for creating components for aperture creation.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html#pygerber.backend.abstract.draw_commands.draw_command.DrawCommand","title":"DrawCommand","text":"<p>             Bases: <code>ABC</code></p> <p>Description of aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_command.py</code> <pre><code>class DrawCommand(ABC):\n    \"\"\"Description of aperture component.\"\"\"\n\n    backend: Backend\n    polarity: Polarity\n\n    def __init__(self, backend: Backend, polarity: Polarity) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        self.backend = backend\n        self.polarity = polarity\n\n    @abstractmethod\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n\n    @abstractmethod\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__qualname__}({self.polarity})\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html#pygerber.backend.abstract.draw_commands.draw_command.DrawCommand.__init__","title":"__init__","text":"<pre><code>__init__(backend: Backend, polarity: Polarity) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_command.py</code> <pre><code>def __init__(self, backend: Backend, polarity: Polarity) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    self.backend = backend\n    self.polarity = polarity\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html#pygerber.backend.abstract.draw_commands.draw_command.DrawCommand.draw","title":"draw  <code>abstractmethod</code>","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_command.py</code> <pre><code>@abstractmethod\ndef draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_command.html#pygerber.backend.abstract.draw_commands.draw_command.DrawCommand.get_bounding_box","title":"get_bounding_box  <code>abstractmethod</code>","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_command.py</code> <pre><code>@abstractmethod\ndef get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_paste.html","title":"draw_paste","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_paste.html#pygerber.backend.abstract.draw_commands.draw_paste","title":"draw_paste","text":"<p>Base class for creating components for aperture creation.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_paste.html#pygerber.backend.abstract.draw_commands.draw_paste.DrawPaste","title":"DrawPaste","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_paste.py</code> <pre><code>class DrawPaste(DrawCommand):\n    \"\"\"Description of aperture component.\"\"\"\n\n    other: DrawingTarget\n    center_position: Vector2D\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        other: DrawingTarget,\n        center_position: Vector2D,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.other = other\n        self.center_position = center_position\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        return self.other.bounding_box + self.center_position\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_paste.html#pygerber.backend.abstract.draw_commands.draw_paste.DrawPaste.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    other: DrawingTarget,\n    center_position: Vector2D,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_paste.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    other: DrawingTarget,\n    center_position: Vector2D,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.other = other\n    self.center_position = center_position\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_paste.html#pygerber.backend.abstract.draw_commands.draw_paste.DrawPaste.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_paste.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_polygon.html","title":"draw_polygon","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_polygon.html#pygerber.backend.abstract.draw_commands.draw_polygon","title":"draw_polygon","text":"<p>Polygon component for creating apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_polygon.html#pygerber.backend.abstract.draw_commands.draw_polygon.DrawPolygon","title":"DrawPolygon","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of polygon aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_polygon.py</code> <pre><code>class DrawPolygon(DrawCommand):\n    \"\"\"Description of polygon aperture component.\"\"\"\n\n    center_position: Vector2D\n    outer_diameter: Offset\n    number_of_vertices: int\n    rotation: Decimal\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        center_position: Vector2D,\n        outer_diameter: Offset,\n        number_of_vertices: int,\n        rotation: Decimal,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.center_position = center_position\n        self.outer_diameter = outer_diameter\n        self.number_of_vertices = number_of_vertices\n        self.rotation = rotation\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        return BoundingBox.from_diameter(self.outer_diameter) + self.center_position\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_polygon.html#pygerber.backend.abstract.draw_commands.draw_polygon.DrawPolygon.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    outer_diameter: Offset,\n    number_of_vertices: int,\n    rotation: Decimal,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_polygon.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    outer_diameter: Offset,\n    number_of_vertices: int,\n    rotation: Decimal,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.center_position = center_position\n    self.outer_diameter = outer_diameter\n    self.number_of_vertices = number_of_vertices\n    self.rotation = rotation\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_polygon.html#pygerber.backend.abstract.draw_commands.draw_polygon.DrawPolygon.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_polygon.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_rectangle.html","title":"draw_rectangle","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_rectangle.html#pygerber.backend.abstract.draw_commands.draw_rectangle","title":"draw_rectangle","text":"<p>Rectangle component for creating apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_rectangle.html#pygerber.backend.abstract.draw_commands.draw_rectangle.DrawRectangle","title":"DrawRectangle","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of rectangle aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_rectangle.py</code> <pre><code>class DrawRectangle(DrawCommand):\n    \"\"\"Description of rectangle aperture component.\"\"\"\n\n    center_position: Vector2D\n    x_size: Offset\n    y_size: Offset\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        center_position: Vector2D,\n        x_size: Offset,\n        y_size: Offset,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.center_position = center_position\n        self.x_size = x_size\n        self.y_size = y_size\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        return (\n            BoundingBox.from_rectangle(self.x_size, self.y_size) + self.center_position\n        )\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_rectangle.html#pygerber.backend.abstract.draw_commands.draw_rectangle.DrawRectangle.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    x_size: Offset,\n    y_size: Offset,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_rectangle.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    center_position: Vector2D,\n    x_size: Offset,\n    y_size: Offset,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.center_position = center_position\n    self.x_size = x_size\n    self.y_size = y_size\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_rectangle.html#pygerber.backend.abstract.draw_commands.draw_rectangle.DrawRectangle.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_rectangle.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_region.html","title":"draw_region","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_region.html#pygerber.backend.abstract.draw_commands.draw_region","title":"draw_region","text":"<p>Region component for creating apertures.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_region.html#pygerber.backend.abstract.draw_commands.draw_region.DrawRegion","title":"DrawRegion","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Description of Region aperture component.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_region.py</code> <pre><code>class DrawRegion(DrawCommand):\n    \"\"\"Description of Region aperture component.\"\"\"\n\n    region_boundary_points: list[Vector2D]\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        region_boundary_points: list[Vector2D],\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.region_boundary_points = region_boundary_points\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        return self._bounding_box\n\n    @cached_property\n    def _bounding_box(self) -&gt; BoundingBox:\n        box: Optional[BoundingBox] = None\n        for point in self.region_boundary_points:\n            if box is not None:\n                box = box.include_point(point)\n            else:\n                box = BoundingBox.NULL + point\n\n        if box is not None:\n            return box\n\n        return BoundingBox.NULL\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_region.html#pygerber.backend.abstract.draw_commands.draw_region.DrawRegion.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    region_boundary_points: list[Vector2D],\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_region.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    region_boundary_points: list[Vector2D],\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.region_boundary_points = region_boundary_points\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_region.html#pygerber.backend.abstract.draw_commands.draw_region.DrawRegion.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_region.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    return self._bounding_box\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html","title":"draw_vector_line","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html#pygerber.backend.abstract.draw_commands.draw_vector_line","title":"draw_vector_line","text":""},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html#pygerber.backend.abstract.draw_commands.draw_vector_line--drawvectorline-module","title":"DrawVectorLine Module.","text":"<p>This module defines the base class for creating vector line components used in drawing creation. The main class, <code>DrawVectorLine</code>, represents a vector line defined by its start and end positions and width.</p>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html#pygerber.backend.abstract.draw_commands.draw_vector_line.DrawVectorLine","title":"DrawVectorLine","text":"<p>             Bases: <code>DrawCommand</code></p> <p>Represents a vector line component used in drawing creation. This class is defined by its start position, end position, and width.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_vector_line.py</code> <pre><code>class DrawVectorLine(DrawCommand):\n    \"\"\"Represents a vector line component used in drawing creation.\n    This class is defined by its start position, end position, and width.\n    \"\"\"\n\n    start_position: Vector2D\n    end_position: Vector2D\n    width: Offset\n\n    def __init__(\n        self,\n        backend: Backend,\n        polarity: Polarity,\n        start_position: Vector2D,\n        end_position: Vector2D,\n        width: Offset,\n    ) -&gt; None:\n        \"\"\"Initialize draw command.\"\"\"\n        super().__init__(backend, polarity)\n        self.start_position = start_position\n        self.end_position = end_position\n        self.width = width\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        vertex_box = BoundingBox.from_diameter(self.width)\n        return (vertex_box + self.start_position) + (vertex_box + self.end_position)\n\n    def __str__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__qualname__}({self.polarity}) start: \"\n            \"{self.start_position} end: {self.end_position}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html#pygerber.backend.abstract.draw_commands.draw_vector_line.DrawVectorLine.__init__","title":"__init__","text":"<pre><code>__init__(\n    backend: Backend,\n    polarity: Polarity,\n    start_position: Vector2D,\n    end_position: Vector2D,\n    width: Offset,\n) -&gt; None\n</code></pre> <p>Initialize draw command.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_vector_line.py</code> <pre><code>def __init__(\n    self,\n    backend: Backend,\n    polarity: Polarity,\n    start_position: Vector2D,\n    end_position: Vector2D,\n    width: Offset,\n) -&gt; None:\n    \"\"\"Initialize draw command.\"\"\"\n    super().__init__(backend, polarity)\n    self.start_position = start_position\n    self.end_position = end_position\n    self.width = width\n</code></pre>"},{"location":"reference/pygerber/backend/abstract/draw_commands/draw_vector_line.html#pygerber.backend.abstract.draw_commands.draw_vector_line.DrawVectorLine.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/backend/abstract/draw_commands/draw_vector_line.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    vertex_box = BoundingBox.from_diameter(self.width)\n    return (vertex_box + self.start_position) + (vertex_box + self.end_position)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/__init__.html","title":"init","text":""},{"location":"reference/pygerber/backend/rasterized_2d/__init__.html#pygerber.backend.rasterized_2d","title":"rasterized_2d","text":"<p>Backend implementation for rendering 2D rasterized images.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/aperture_handle.html","title":"aperture_handle","text":""},{"location":"reference/pygerber/backend/rasterized_2d/aperture_handle.html#pygerber.backend.rasterized_2d.aperture_handle","title":"aperture_handle","text":"<p>Aperture Handle class which represents Gerber X3 aperture.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/aperture_handle.html#pygerber.backend.rasterized_2d.aperture_handle.Rasterized2DPrivateApertureHandle","title":"Rasterized2DPrivateApertureHandle","text":"<p>             Bases: <code>PrivateApertureHandle</code></p> <p>Base class for creating Gerber X3 apertures.</p> Source code in <code>src/pygerber/backend/rasterized_2d/aperture_handle.py</code> <pre><code>class Rasterized2DPrivateApertureHandle(PrivateApertureHandle):\n    \"\"\"Base class for creating Gerber X3 apertures.\"\"\"\n\n    backend: Rasterized2DBackend\n    drawing_target: Rasterized2DDrawingTarget\n\n    def _create_drawing_target(self) -&gt; DrawingTarget:\n        \"\"\"Draw aperture and store result.\"\"\"\n        bbox = self.bounding_box\n        size = bbox.get_size().as_pixels(self.backend.dpi)\n\n        # Image must be at least 1x1, otherwise Pillow crashes while saving.\n        x, y = size\n        size = (max(x, 0) + 1, max(y, 0) + 1)\n\n        return Rasterized2DDrawingTarget(\n            coordinate_origin=self.coordinate_origin,\n            bounding_box=self.bounding_box,\n            target_image=Image.new(\n                mode=\"L\",\n                size=size,\n                color=Polarity.Background.get_2d_rasterized_color(),\n            ),\n        )\n\n    def _post_drawing_hook(self) -&gt; None:\n        dest = self.backend.options.dump_apertures\n        if dest is not None:\n            dest_aperture_subdir = dest / f\"{self.aperture_id}_{self.private_id}\"\n            dest_aperture_subdir.mkdir(0o777, parents=True, exist_ok=True)\n\n            self.drawing_target.target_image.save(\n                dest_aperture_subdir / \"target.png\",\n            )\n            self.drawing_target.mask_image.save(\n                dest_aperture_subdir / \"mask.png\",\n            )\n            self.drawing_target.image_polarity_clear.save(\n                dest_aperture_subdir / \"clear.png\",\n            )\n            self.drawing_target.image_polarity_dark.save(\n                dest_aperture_subdir / \"dark.png\",\n            )\n            self.drawing_target.image_polarity_region_clear.save(\n                dest_aperture_subdir / \"clear_region.png\",\n            )\n            self.drawing_target.image_polarity_region_dark.save(\n                dest_aperture_subdir / \"dark_region.png\",\n            )\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html","title":"backend_cls","text":""},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls","title":"backend_cls","text":"<p>Backend for rasterized rendering of Gerber files.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.ColorMode","title":"ColorMode","text":"<p>             Bases: <code>Enum</code></p> <p>Enum which can be used to specify color mode.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>class ColorMode(Enum):\n    \"\"\"Enum which can be used to specify color mode.\"\"\"\n\n    RGBA = \"RGBA\"\n    RGB = \"RGB\"\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackendOptions","title":"Rasterized2DBackendOptions","text":"<p>             Bases: <code>BackendOptions</code></p> <p>Additional configuration which can be passed to backend.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>class Rasterized2DBackendOptions(BackendOptions):\n    \"\"\"Additional configuration which can be passed to backend.\"\"\"\n\n    def __init__(\n        self,\n        dpi: int = 300,\n        color_scheme: ColorScheme = ColorScheme.DEFAULT_GRAYSCALE,\n        color_mode: ColorMode = ColorMode.RGBA,\n        dump_apertures: Optional[Path] = None,\n        *,\n        include_debug_padding: bool = False,\n        include_bounding_boxes: bool = False,\n        draw_region_outlines: bool = False,\n    ) -&gt; None:\n        \"\"\"Initialize options.\"\"\"\n        self.dpi = dpi\n        self.color_scheme = color_scheme\n        self.color_mode = color_mode\n        self.include_debug_padding = include_debug_padding\n        self.include_bounding_boxes = include_bounding_boxes\n        super().__init__(\n            dump_apertures=dump_apertures,\n            draw_region_outlines=draw_region_outlines,\n        )\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackendOptions.__init__","title":"__init__","text":"<pre><code>__init__(\n    dpi: int = 300,\n    color_scheme: ColorScheme = ColorScheme.DEFAULT_GRAYSCALE,\n    color_mode: ColorMode = ColorMode.RGBA,\n    dump_apertures: Optional[Path] = None,\n    *,\n    include_debug_padding: bool = False,\n    include_bounding_boxes: bool = False,\n    draw_region_outlines: bool = False\n) -&gt; None\n</code></pre> <p>Initialize options.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def __init__(\n    self,\n    dpi: int = 300,\n    color_scheme: ColorScheme = ColorScheme.DEFAULT_GRAYSCALE,\n    color_mode: ColorMode = ColorMode.RGBA,\n    dump_apertures: Optional[Path] = None,\n    *,\n    include_debug_padding: bool = False,\n    include_bounding_boxes: bool = False,\n    draw_region_outlines: bool = False,\n) -&gt; None:\n    \"\"\"Initialize options.\"\"\"\n    self.dpi = dpi\n    self.color_scheme = color_scheme\n    self.color_mode = color_mode\n    self.include_debug_padding = include_debug_padding\n    self.include_bounding_boxes = include_bounding_boxes\n    super().__init__(\n        dump_apertures=dump_apertures,\n        draw_region_outlines=draw_region_outlines,\n    )\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend","title":"Rasterized2DBackend","text":"<p>             Bases: <code>Backend</code></p> <p>Drawing backend interface.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>class Rasterized2DBackend(Backend):\n    \"\"\"Drawing backend interface.\"\"\"\n\n    options: Rasterized2DBackendOptions\n    drawing_target: Rasterized2DDrawingTarget\n\n    options_class: ClassVar[type[BackendOptions]] = Rasterized2DBackendOptions\n\n    def __init__(self, options: Rasterized2DBackendOptions | None = None) -&gt; None:\n        \"\"\"Initialize backend.\"\"\"\n        if options is not None and not isinstance(options, Rasterized2DBackendOptions):\n            msg = (  # type: ignore[unreachable]\n                \"Expected Rasterized2DBackendOptions or None as options, got \"\n                + str(\n                    type(options),\n                )\n            )\n            raise TypeError(msg)\n        super().__init__(options)\n\n    @property\n    def dpi(self) -&gt; int:\n        \"\"\"Return image DPI.\"\"\"\n        return self.options.dpi\n\n    def _create_drawing_target(self) -&gt; DrawingTarget:\n        \"\"\"Execute all draw actions to create visualization.\"\"\"\n        raw_bbox = self.bounding_box\n\n        if self.options.include_debug_padding:\n            bbox = raw_bbox + Decimal(1.0)\n        else:\n            bbox = raw_bbox\n\n        size = bbox.get_size()\n        coordinate_origin = bbox.get_min_vector()\n\n        image_size = size.as_pixels(self.dpi)\n        # Image must be at least 1x1, otherwise Pillow crashes while saving.\n        x, y = image_size\n        image_size = (max(x, 0) + 1, max(y, 0) + 1)\n\n        return Rasterized2DDrawingTarget(\n            coordinate_origin=coordinate_origin,\n            bounding_box=bbox,\n            target_image=Image.new(\n                mode=\"L\",\n                size=image_size,\n                color=Polarity.Background.get_2d_rasterized_color(),\n            ),\n        )\n\n    def _pre_drawing_hook(self) -&gt; None:\n        \"\"\"Perform custom actions after drawing.\"\"\"\n        if self.options.include_bounding_boxes:\n            self.draws.append(\n                Rasterized2DApertureDrawBoundingBox(\n                    backend=self,\n                    polarity=Polarity.DEBUG,\n                    bounding_box=self.bounding_box,\n                    outline_padding=Offset.from_pixels(1, self.dpi),\n                ),\n            )\n\n    def _post_drawing_hook(self) -&gt; None:\n        self._replace_image_colors()\n\n    def _replace_image_colors(self) -&gt; None:\n        img = self.drawing_target.target_image\n        color_map = self.options.color_scheme.get_grayscale_to_rgba_color_map()\n\n        np_img = np.array(img)\n\n        # Create an empty RGBA image with the same size as the original image\n        rgba_img: npt.NDArray[np.uint8] = np.zeros(\n            (img.height, img.width, 4),\n            dtype=np.uint8,\n        )\n\n        # For each grayscale value, set the corresponding RGBA value in the new image\n        for gray_value, rgba in color_map.items():\n            rgba_img[np_img == gray_value] = rgba\n\n        # Convert the resulting NumPy array back to a Pillow image\n        self.drawing_target.target_image = Image.fromarray(rgba_img, \"RGBA\")\n\n    def get_result_handle(self) -&gt; ResultHandle:\n        \"\"\"Return result handle to visualization.\"\"\"\n        return Rasterized2DResultHandle(self.drawing_target.target_image)\n\n    def get_aperture_handle_cls(self) -&gt; type[PrivateApertureHandle]:\n        \"\"\"Get backend-specific implementation of aperture handle class.\"\"\"\n        return Rasterized2DPrivateApertureHandle\n\n    def get_draw_circle_cls(self) -&gt; type[DrawCircle]:\n        \"\"\"Get backend-specific implementation of aperture circle component class.\"\"\"\n        return Rasterized2DApertureDrawCircle\n\n    def get_draw_rectangle_cls(self) -&gt; type[DrawRectangle]:\n        \"\"\"Get backend-specific implementation of aperture rectangle component class.\"\"\"\n        return Rasterized2DApertureDrawRectangle\n\n    def get_draw_polygon_cls(self) -&gt; type[DrawPolygon]:\n        \"\"\"Get backend-specific implementation of aperture polygon component class.\"\"\"\n        return Rasterized2DApertureDrawPolygon\n\n    def get_draw_commands_handle_cls(self) -&gt; type[DrawCommandsHandle]:\n        \"\"\"Return backend-specific implementation of draw actions handle.\"\"\"\n        return Rasterized2DDrawActionsHandle\n\n    def get_draw_paste_cls(self) -&gt; type[DrawPaste]:\n        \"\"\"Return backend-specific implementation of draw action flash.\"\"\"\n        return Rasterized2DDrawPaste\n\n    def get_draw_region_cls(self) -&gt; type[DrawRegion]:\n        \"\"\"Return backend-specific implementation of draw action region.\"\"\"\n        return Rasterized2DDrawRegion\n\n    def get_draw_vector_line_cls(self) -&gt; type[DrawVectorLine]:\n        \"\"\"Return backend-specific implementation of draw action line.\"\"\"\n        return Rasterized2DDrawVectorLine\n\n    def get_draw_arc_cls(self) -&gt; type[DrawArc]:\n        \"\"\"Return backend-specific implementation of draw action arc.\"\"\"\n        return Rasterized2DDrawArc\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.dpi","title":"dpi  <code>property</code>","text":"<pre><code>dpi: int\n</code></pre> <p>Return image DPI.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.__init__","title":"__init__","text":"<pre><code>__init__(\n    options: Rasterized2DBackendOptions | None = None,\n) -&gt; None\n</code></pre> <p>Initialize backend.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def __init__(self, options: Rasterized2DBackendOptions | None = None) -&gt; None:\n    \"\"\"Initialize backend.\"\"\"\n    if options is not None and not isinstance(options, Rasterized2DBackendOptions):\n        msg = (  # type: ignore[unreachable]\n            \"Expected Rasterized2DBackendOptions or None as options, got \"\n            + str(\n                type(options),\n            )\n        )\n        raise TypeError(msg)\n    super().__init__(options)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_result_handle","title":"get_result_handle","text":"<pre><code>get_result_handle() -&gt; ResultHandle\n</code></pre> <p>Return result handle to visualization.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_result_handle(self) -&gt; ResultHandle:\n    \"\"\"Return result handle to visualization.\"\"\"\n    return Rasterized2DResultHandle(self.drawing_target.target_image)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_aperture_handle_cls","title":"get_aperture_handle_cls","text":"<pre><code>get_aperture_handle_cls() -&gt; type[PrivateApertureHandle]\n</code></pre> <p>Get backend-specific implementation of aperture handle class.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_aperture_handle_cls(self) -&gt; type[PrivateApertureHandle]:\n    \"\"\"Get backend-specific implementation of aperture handle class.\"\"\"\n    return Rasterized2DPrivateApertureHandle\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_circle_cls","title":"get_draw_circle_cls","text":"<pre><code>get_draw_circle_cls() -&gt; type[DrawCircle]\n</code></pre> <p>Get backend-specific implementation of aperture circle component class.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_circle_cls(self) -&gt; type[DrawCircle]:\n    \"\"\"Get backend-specific implementation of aperture circle component class.\"\"\"\n    return Rasterized2DApertureDrawCircle\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_rectangle_cls","title":"get_draw_rectangle_cls","text":"<pre><code>get_draw_rectangle_cls() -&gt; type[DrawRectangle]\n</code></pre> <p>Get backend-specific implementation of aperture rectangle component class.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_rectangle_cls(self) -&gt; type[DrawRectangle]:\n    \"\"\"Get backend-specific implementation of aperture rectangle component class.\"\"\"\n    return Rasterized2DApertureDrawRectangle\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_polygon_cls","title":"get_draw_polygon_cls","text":"<pre><code>get_draw_polygon_cls() -&gt; type[DrawPolygon]\n</code></pre> <p>Get backend-specific implementation of aperture polygon component class.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_polygon_cls(self) -&gt; type[DrawPolygon]:\n    \"\"\"Get backend-specific implementation of aperture polygon component class.\"\"\"\n    return Rasterized2DApertureDrawPolygon\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_commands_handle_cls","title":"get_draw_commands_handle_cls","text":"<pre><code>get_draw_commands_handle_cls() -&gt; type[DrawCommandsHandle]\n</code></pre> <p>Return backend-specific implementation of draw actions handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_commands_handle_cls(self) -&gt; type[DrawCommandsHandle]:\n    \"\"\"Return backend-specific implementation of draw actions handle.\"\"\"\n    return Rasterized2DDrawActionsHandle\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_paste_cls","title":"get_draw_paste_cls","text":"<pre><code>get_draw_paste_cls() -&gt; type[DrawPaste]\n</code></pre> <p>Return backend-specific implementation of draw action flash.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_paste_cls(self) -&gt; type[DrawPaste]:\n    \"\"\"Return backend-specific implementation of draw action flash.\"\"\"\n    return Rasterized2DDrawPaste\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_region_cls","title":"get_draw_region_cls","text":"<pre><code>get_draw_region_cls() -&gt; type[DrawRegion]\n</code></pre> <p>Return backend-specific implementation of draw action region.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_region_cls(self) -&gt; type[DrawRegion]:\n    \"\"\"Return backend-specific implementation of draw action region.\"\"\"\n    return Rasterized2DDrawRegion\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_vector_line_cls","title":"get_draw_vector_line_cls","text":"<pre><code>get_draw_vector_line_cls() -&gt; type[DrawVectorLine]\n</code></pre> <p>Return backend-specific implementation of draw action line.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_vector_line_cls(self) -&gt; type[DrawVectorLine]:\n    \"\"\"Return backend-specific implementation of draw action line.\"\"\"\n    return Rasterized2DDrawVectorLine\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/backend_cls.html#pygerber.backend.rasterized_2d.backend_cls.Rasterized2DBackend.get_draw_arc_cls","title":"get_draw_arc_cls","text":"<pre><code>get_draw_arc_cls() -&gt; type[DrawArc]\n</code></pre> <p>Return backend-specific implementation of draw action arc.</p> Source code in <code>src/pygerber/backend/rasterized_2d/backend_cls.py</code> <pre><code>def get_draw_arc_cls(self) -&gt; type[DrawArc]:\n    \"\"\"Return backend-specific implementation of draw action arc.\"\"\"\n    return Rasterized2DDrawArc\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html","title":"color_scheme","text":""},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme","title":"color_scheme","text":"<p>ColorScheme class - utility for describing color schemes.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme","title":"ColorScheme","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Set of colors which should be used for rendering.</p> <p>ColorScheme class contains set of colors which should be used for different parts of rendered image. At the same time it also works as a container for predefined color schemes commonly used for parts of PCB.</p> <p>Predefined colors</p> <p>All predefined colors have two variants - normal one and one with \"*_ALPHA\" suffix. Those without suffix have solid background and are not intended for constructing multi-layer images out of them ie. they are not suitable for rendering a project consisting of separate copper, silk, pase mask and composing them into single image. For cases when rendered images are intended for stacking \"*_ALPHA\" schemes should be used, as background and transparent parts of image will be truly transparent.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>class ColorScheme(FrozenGeneralModel):\n    r\"\"\"Set of colors which should be used for rendering.\n\n    ColorScheme class contains set of colors which should be used for different parts\n    of rendered image. At the same time it also works as a container for predefined\n    color schemes commonly used for parts of PCB.\n\n    !!! info \"Predefined colors\"\n\n        All predefined colors have two variants - normal one and one with \"\\*_ALPHA\"\n        suffix. Those without suffix have solid background and are not intended for\n        constructing multi-layer images out of them ie. they are not suitable for\n        rendering a project consisting of separate copper, silk, pase mask and composing\n        them into single image. For cases when rendered images are intended for stacking\n        \"\\*_ALPHA\" schemes should be used, as background and transparent parts of image\n        will be truly transparent.\n\n    \"\"\"\n\n    SILK: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SILK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    COPPER: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    COPPER_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    PASTE_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    PASTE_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    SOLDER_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SOLDER_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    DEFAULT_GRAYSCALE: ClassVar[ColorScheme]\n    \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n    DEBUG_1: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme.\"\"\"\n\n    DEBUG_1_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme with alpha channel.\"\"\"\n\n    background_color: RGBA\n    \"\"\"Color used as empty image background.\"\"\"\n\n    clear_color: RGBA\n    \"\"\"Color used for clear draws.\"\"\"\n\n    solid_color: RGBA\n    \"\"\"Color used for solid draws.\"\"\"\n\n    clear_region_color: RGBA\n    \"\"\"Color used for clear region draws.\"\"\"\n\n    solid_region_color: RGBA\n    \"\"\"Color used for solid region draws.\"\"\"\n\n    debug_1_color: RGBA = RGBA.from_hex(\"#ababab\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    debug_2_color: RGBA = RGBA.from_hex(\"#7d7d7d\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n        \"\"\"Return grayscale to RGBA color map.\"\"\"\n        return {\n            Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n            Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n            Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n            Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n            Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n        }\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: ColorScheme\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: ColorScheme\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: ColorScheme\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: ColorScheme\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: ColorScheme\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: ColorScheme\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: ColorScheme\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: ColorScheme\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: ColorScheme\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: RGBA\n</code></pre> <p>Color used as empty image background.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.clear_color","title":"clear_color  <code>instance-attribute</code>","text":"<pre><code>clear_color: RGBA\n</code></pre> <p>Color used for clear draws.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.solid_color","title":"solid_color  <code>instance-attribute</code>","text":"<pre><code>solid_color: RGBA\n</code></pre> <p>Color used for solid draws.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.clear_region_color","title":"clear_region_color  <code>instance-attribute</code>","text":"<pre><code>clear_region_color: RGBA\n</code></pre> <p>Color used for clear region draws.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.solid_region_color","title":"solid_region_color  <code>instance-attribute</code>","text":"<pre><code>solid_region_color: RGBA\n</code></pre> <p>Color used for solid region draws.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.debug_1_color","title":"debug_1_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_1_color: RGBA = from_hex('#ababab')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.debug_2_color","title":"debug_2_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_2_color: RGBA = from_hex('#7d7d7d')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/color_scheme.html#pygerber.backend.rasterized_2d.color_scheme.ColorScheme.get_grayscale_to_rgba_color_map","title":"get_grayscale_to_rgba_color_map","text":"<pre><code>get_grayscale_to_rgba_color_map() -&gt; (\n    dict[int, tuple[int, int, int, int]]\n)\n</code></pre> <p>Return grayscale to RGBA color map.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n    \"\"\"Return grayscale to RGBA color map.\"\"\"\n    return {\n        Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n        Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n        Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n        Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n        Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n    }\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands_handle.html","title":"draw_commands_handle","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands_handle.html#pygerber.backend.rasterized_2d.draw_commands_handle","title":"draw_commands_handle","text":"<p>Contains class wrapping list of draw operations created by Gerber parser.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands_handle.html#pygerber.backend.rasterized_2d.draw_commands_handle.Rasterized2DDrawActionsHandle","title":"Rasterized2DDrawActionsHandle","text":"<p>             Bases: <code>DrawCommandsHandle</code></p> <p>List of drawing operations produced by Gerber parser.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands_handle.py</code> <pre><code>class Rasterized2DDrawActionsHandle(DrawCommandsHandle):\n    \"\"\"List of drawing operations produced by Gerber parser.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html","title":"drawing_target","text":""},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target","title":"drawing_target","text":"<p>Target for Draw commands to draw into.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget","title":"Rasterized2DDrawingTarget","text":"<p>             Bases: <code>DrawingTarget</code></p> <p>Target for Draw commands to draw into.</p> Source code in <code>src/pygerber/backend/rasterized_2d/drawing_target.py</code> <pre><code>class Rasterized2DDrawingTarget(DrawingTarget):\n    \"\"\"Target for Draw commands to draw into.\"\"\"\n\n    target_image: Image.Image\n    _target_image_polarity_dark: Optional[Image.Image] = None\n    _target_image_polarity_clear: Optional[Image.Image] = None\n    _target_image_polarity_region_dark: Optional[Image.Image] = None\n    _target_image_polarity_region_clear: Optional[Image.Image] = None\n    _mask_image: Optional[Image.Image] = None\n\n    def __init__(\n        self,\n        coordinate_origin: Vector2D,\n        bounding_box: BoundingBox,\n        target_image: Image.Image,\n    ) -&gt; None:\n        \"\"\"Initialize drawing target.\"\"\"\n        super().__init__(coordinate_origin, bounding_box)\n        self.target_image = target_image\n        self._target_image_polarity_dark = None\n        self._target_image_polarity_clear = None\n        self._target_image_polarity_region_dark = None\n        self._target_image_polarity_region_clear = None\n        self._mask_image = None\n        self._is_finalized = False\n\n    @property\n    def image_draw(self) -&gt; ImageDraw.ImageDraw:\n        \"\"\"Acquire drawing interface.\"\"\"\n        return ImageDraw.Draw(self.target_image)\n\n    def _finalize(self) -&gt; None:\n        self._is_finalized = True\n\n    @property\n    def mask_image(self) -&gt; Image.Image:\n        \"\"\"Inverted aperture image.\"\"\"\n        if not self._is_finalized:\n            raise ApertureImageNotInitializedError\n\n        if self._mask_image is None:\n            self._mask_image = self.target_image.point(\n                lambda p: 255 if p &gt; GRAYSCALE_CENTER_VALUE else 0,\n            )\n\n        return self._mask_image\n\n    @property\n    def image_polarity_dark(self) -&gt; Image.Image:\n        \"\"\"Inverted aperture image.\"\"\"\n        if not self._is_finalized:\n            raise ApertureImageNotInitializedError\n\n        if self._target_image_polarity_dark is None:\n            color = Polarity.Dark.get_2d_rasterized_color()\n            self._target_image_polarity_dark = self.mask_image.point(\n                lambda p: color if p else 0,\n            )\n\n        return self._target_image_polarity_dark\n\n    @property\n    def image_polarity_clear(self) -&gt; Image.Image:\n        \"\"\"Inverted aperture image.\"\"\"\n        if not self._is_finalized:\n            raise ApertureImageNotInitializedError\n\n        if self._target_image_polarity_clear is None:\n            color = Polarity.Clear.get_2d_rasterized_color()\n            self._target_image_polarity_clear = self.mask_image.point(\n                lambda p: color if p else 0,\n            )\n\n        return self._target_image_polarity_clear\n\n    @property\n    def image_polarity_region_dark(self) -&gt; Image.Image:\n        \"\"\"Inverted aperture image.\"\"\"\n        if not self._is_finalized:\n            raise ApertureImageNotInitializedError\n\n        if self._target_image_polarity_region_dark is None:\n            color = Polarity.DarkRegion.get_2d_rasterized_color()\n            self._target_image_polarity_region_dark = self.mask_image.point(\n                lambda p: color if p else 0,\n            )\n\n        return self._target_image_polarity_region_dark\n\n    @property\n    def image_polarity_region_clear(self) -&gt; Image.Image:\n        \"\"\"Inverted aperture image.\"\"\"\n        if not self._is_finalized:\n            raise ApertureImageNotInitializedError\n\n        if self._target_image_polarity_region_clear is None:\n            color = Polarity.ClearRegion.get_2d_rasterized_color()\n            self._target_image_polarity_region_clear = self.mask_image.point(\n                lambda p: color if p else 0,\n            )\n\n        return self._target_image_polarity_region_clear\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.image_draw","title":"image_draw  <code>property</code>","text":"<pre><code>image_draw: ImageDraw\n</code></pre> <p>Acquire drawing interface.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.mask_image","title":"mask_image  <code>property</code>","text":"<pre><code>mask_image: Image\n</code></pre> <p>Inverted aperture image.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.image_polarity_dark","title":"image_polarity_dark  <code>property</code>","text":"<pre><code>image_polarity_dark: Image\n</code></pre> <p>Inverted aperture image.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.image_polarity_clear","title":"image_polarity_clear  <code>property</code>","text":"<pre><code>image_polarity_clear: Image\n</code></pre> <p>Inverted aperture image.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.image_polarity_region_dark","title":"image_polarity_region_dark  <code>property</code>","text":"<pre><code>image_polarity_region_dark: Image\n</code></pre> <p>Inverted aperture image.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.image_polarity_region_clear","title":"image_polarity_region_clear  <code>property</code>","text":"<pre><code>image_polarity_region_clear: Image\n</code></pre> <p>Inverted aperture image.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/drawing_target.html#pygerber.backend.rasterized_2d.drawing_target.Rasterized2DDrawingTarget.__init__","title":"__init__","text":"<pre><code>__init__(\n    coordinate_origin: Vector2D,\n    bounding_box: BoundingBox,\n    target_image: Image.Image,\n) -&gt; None\n</code></pre> <p>Initialize drawing target.</p> Source code in <code>src/pygerber/backend/rasterized_2d/drawing_target.py</code> <pre><code>def __init__(\n    self,\n    coordinate_origin: Vector2D,\n    bounding_box: BoundingBox,\n    target_image: Image.Image,\n) -&gt; None:\n    \"\"\"Initialize drawing target.\"\"\"\n    super().__init__(coordinate_origin, bounding_box)\n    self.target_image = target_image\n    self._target_image_polarity_dark = None\n    self._target_image_polarity_clear = None\n    self._target_image_polarity_region_dark = None\n    self._target_image_polarity_region_clear = None\n    self._mask_image = None\n    self._is_finalized = False\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/errors.html","title":"errors","text":""},{"location":"reference/pygerber/backend/rasterized_2d/errors.html#pygerber.backend.rasterized_2d.errors","title":"errors","text":"<p>Base error classes used in this module.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/errors.html#pygerber.backend.rasterized_2d.errors.Rasterized2DBackendError","title":"Rasterized2DBackendError","text":"<p>             Bases: <code>BackendError</code></p> <p>Base class for backend errors.</p> Source code in <code>src/pygerber/backend/rasterized_2d/errors.py</code> <pre><code>class Rasterized2DBackendError(BackendError):\n    \"\"\"Base class for backend errors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/errors.html#pygerber.backend.rasterized_2d.errors.ApertureImageNotInitializedError","title":"ApertureImageNotInitializedError","text":"<p>             Bases: <code>Rasterized2DBackendError</code></p> <p>Raised when aperture image is requested before it was initialized.</p> Source code in <code>src/pygerber/backend/rasterized_2d/errors.py</code> <pre><code>class ApertureImageNotInitializedError(Rasterized2DBackendError):\n    \"\"\"Raised when aperture image is requested before it was initialized.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/errors.html#pygerber.backend.rasterized_2d.errors.BackendImageNotInitializedError","title":"BackendImageNotInitializedError","text":"<p>             Bases: <code>Rasterized2DBackendError</code></p> <p>Raised when backend canvas image is requested before initialization.</p> Source code in <code>src/pygerber/backend/rasterized_2d/errors.py</code> <pre><code>class BackendImageNotInitializedError(Rasterized2DBackendError):\n    \"\"\"Raised when backend canvas image is requested before initialization.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/image_tools.html","title":"image_tools","text":""},{"location":"reference/pygerber/backend/rasterized_2d/image_tools.html#pygerber.backend.rasterized_2d.image_tools","title":"image_tools","text":"<p>Utils for image operations.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/image_tools.html#pygerber.backend.rasterized_2d.image_tools.replace_color","title":"replace_color","text":"<pre><code>replace_color(\n    input_image: Image.Image,\n    original: tuple[int, ...] | int,\n    replacement: tuple[int, ...] | int,\n    *,\n    output_image_mode: str = \"RGBA\"\n) -&gt; Image.Image\n</code></pre> <p>Replace <code>original</code> color from input image with <code>replacement</code> color.</p> Source code in <code>src/pygerber/backend/rasterized_2d/image_tools.py</code> <pre><code>def replace_color(\n    input_image: Image.Image,\n    original: tuple[int, ...] | int,\n    replacement: tuple[int, ...] | int,\n    *,\n    output_image_mode: str = \"RGBA\",\n) -&gt; Image.Image:\n    \"\"\"Replace `original` color from input image with `replacement` color.\"\"\"\n    if input_image.mode != output_image_mode:\n        output_image = input_image.convert(output_image_mode)\n    else:\n        output_image = input_image.copy()\n\n    for x in range(input_image.width):\n        for y in range(input_image.height):\n            if input_image.getpixel((x, y)) == original:\n                output_image.putpixel((x, y), replacement)\n\n    return output_image\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html","title":"result_handle","text":""},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html#pygerber.backend.rasterized_2d.result_handle","title":"result_handle","text":"<p>Module contains handle class to drawing instructions visualization.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html#pygerber.backend.rasterized_2d.result_handle.Rasterized2DResultHandle","title":"Rasterized2DResultHandle","text":"<p>             Bases: <code>ResultHandle</code></p> <p>Handle to drawing instructions visualization.</p> Source code in <code>src/pygerber/backend/rasterized_2d/result_handle.py</code> <pre><code>class Rasterized2DResultHandle(ResultHandle):\n    \"\"\"Handle to drawing instructions visualization.\"\"\"\n\n    def __init__(self, result: Image.Image) -&gt; None:\n        \"\"\"Initialize result handle.\n\n        Parameters\n        ----------\n        result : Image.Image\n            Image object containing finished Gerber image.\n\n        \"\"\"\n        super().__init__()\n        self.result = result\n\n    def save(\n        self,\n        dest: Path | str | BytesIO,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"Save result to destination.\n\n        Parameters\n        ----------\n        dest : Path | str | BytesIO\n            Write target.\n        **kwargs: Any\n            Extra parameters which will be passed to `Image.save()`.\n            For details see [Pillow documentation](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save).\n\n        \"\"\"\n        image = self.get_image()\n        if (isinstance(dest, Path) and dest.suffix in (\".jpg\", \"jpeg\")) or (\n            isinstance(dest, str) and (dest.endswith((\".jpg\", \".jpeg\")))\n        ):\n            image = image.convert(\"RGB\")\n        image.save(dest, **kwargs)\n\n    def get_image(self) -&gt; Image.Image:\n        \"\"\"Get result image object.\"\"\"\n        return self.result.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html#pygerber.backend.rasterized_2d.result_handle.Rasterized2DResultHandle.__init__","title":"__init__","text":"<pre><code>__init__(result: Image.Image) -&gt; None\n</code></pre> <p>Initialize result handle.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>Image</code> <p>Image object containing finished Gerber image.</p> required Source code in <code>src/pygerber/backend/rasterized_2d/result_handle.py</code> <pre><code>def __init__(self, result: Image.Image) -&gt; None:\n    \"\"\"Initialize result handle.\n\n    Parameters\n    ----------\n    result : Image.Image\n        Image object containing finished Gerber image.\n\n    \"\"\"\n    super().__init__()\n    self.result = result\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html#pygerber.backend.rasterized_2d.result_handle.Rasterized2DResultHandle.save","title":"save","text":"<pre><code>save(dest: Path | str | BytesIO, **kwargs: Any) -&gt; None\n</code></pre> <p>Save result to destination.</p> <p>Parameters:</p> Name Type Description Default <code>dest</code> <code>Path | str | BytesIO</code> <p>Write target.</p> required <code>**kwargs</code> <code>Any</code> <p>Extra parameters which will be passed to <code>Image.save()</code>. For details see Pillow documentation.</p> <code>{}</code> Source code in <code>src/pygerber/backend/rasterized_2d/result_handle.py</code> <pre><code>def save(\n    self,\n    dest: Path | str | BytesIO,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Save result to destination.\n\n    Parameters\n    ----------\n    dest : Path | str | BytesIO\n        Write target.\n    **kwargs: Any\n        Extra parameters which will be passed to `Image.save()`.\n        For details see [Pillow documentation](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save).\n\n    \"\"\"\n    image = self.get_image()\n    if (isinstance(dest, Path) and dest.suffix in (\".jpg\", \"jpeg\")) or (\n        isinstance(dest, str) and (dest.endswith((\".jpg\", \".jpeg\")))\n    ):\n        image = image.convert(\"RGB\")\n    image.save(dest, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/result_handle.html#pygerber.backend.rasterized_2d.result_handle.Rasterized2DResultHandle.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image.Image\n</code></pre> <p>Get result image object.</p> Source code in <code>src/pygerber/backend/rasterized_2d/result_handle.py</code> <pre><code>def get_image(self) -&gt; Image.Image:\n    \"\"\"Get result image object.\"\"\"\n    return self.result.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/__init__.html","title":"init","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/__init__.html#pygerber.backend.rasterized_2d.draw_commands","title":"draw_commands","text":"<p>Specialized implementations of draw operations for constructing apertures.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_arc.html","title":"draw_arc","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_arc.html#pygerber.backend.rasterized_2d.draw_commands.draw_arc","title":"draw_arc","text":"<p>Class for drawing 2D rasterized vector lines.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_arc.html#pygerber.backend.rasterized_2d.draw_commands.draw_arc.Rasterized2DDrawArc","title":"Rasterized2DDrawArc","text":"<p>             Bases: <code>DrawArc</code></p> <p>Draw 2D rasterized vector line.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_arc.py</code> <pre><code>class Rasterized2DDrawArc(DrawArc):\n    \"\"\"Draw 2D rasterized vector line.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        bbox = self.get_bounding_box() - target.coordinate_origin\n        pixel_box = bbox.as_pixel_box(self.backend.dpi)\n\n        angle_start, angle_end = self._calculate_angles()\n\n        width = self.width.as_pixels(self.backend.dpi)\n\n        target.image_draw.arc(\n            xy=pixel_box,\n            start=angle_start,\n            end=angle_end,\n            fill=self.polarity.get_2d_rasterized_color(),\n            width=width,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_arc.html#pygerber.backend.rasterized_2d.draw_commands.draw_arc.Rasterized2DDrawArc.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_arc.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    bbox = self.get_bounding_box() - target.coordinate_origin\n    pixel_box = bbox.as_pixel_box(self.backend.dpi)\n\n    angle_start, angle_end = self._calculate_angles()\n\n    width = self.width.as_pixels(self.backend.dpi)\n\n    target.image_draw.arc(\n        xy=pixel_box,\n        start=angle_start,\n        end=angle_end,\n        fill=self.polarity.get_2d_rasterized_color(),\n        width=width,\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.html","title":"draw_bounding_box","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.html#pygerber.backend.rasterized_2d.draw_commands.draw_bounding_box","title":"draw_bounding_box","text":"<p>BoundingBox component for creating apertures.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.html#pygerber.backend.rasterized_2d.draw_commands.draw_bounding_box.Rasterized2DApertureDrawBoundingBox","title":"Rasterized2DApertureDrawBoundingBox","text":"<p>             Bases: <code>DrawBoundingBox</code></p> <p>Concrete implementation of DrawBoundingBox for rasterized 2D drawing.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.py</code> <pre><code>class Rasterized2DApertureDrawBoundingBox(DrawBoundingBox):\n    \"\"\"Concrete implementation of DrawBoundingBox for rasterized 2D drawing.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply bounding box draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        box = self.get_bounding_box()\n        image_space_box = box - target.coordinate_origin\n        pixel_box = image_space_box.as_pixel_box(self.backend.dpi, dx_max=-1, dy_max=-1)\n\n        (min_x, min_y, max_x, max_y) = pixel_box\n        if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n            logging.warning(\"Drawing zero surface bounding box. DPI may be too low.\")\n            return\n\n        target.image_draw.rectangle(\n            xy=pixel_box,\n            fill=None,\n            outline=self.polarity.get_2d_rasterized_color(),\n            width=1,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.html#pygerber.backend.rasterized_2d.draw_commands.draw_bounding_box.Rasterized2DApertureDrawBoundingBox.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply bounding box draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_bounding_box.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply bounding box draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    box = self.get_bounding_box()\n    image_space_box = box - target.coordinate_origin\n    pixel_box = image_space_box.as_pixel_box(self.backend.dpi, dx_max=-1, dy_max=-1)\n\n    (min_x, min_y, max_x, max_y) = pixel_box\n    if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n        logging.warning(\"Drawing zero surface bounding box. DPI may be too low.\")\n        return\n\n    target.image_draw.rectangle(\n        xy=pixel_box,\n        fill=None,\n        outline=self.polarity.get_2d_rasterized_color(),\n        width=1,\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_circle.html","title":"draw_circle","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_circle.html#pygerber.backend.rasterized_2d.draw_commands.draw_circle","title":"draw_circle","text":"<p>Circle component for creating apertures.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_circle.html#pygerber.backend.rasterized_2d.draw_commands.draw_circle.Rasterized2DApertureDrawCircle","title":"Rasterized2DApertureDrawCircle","text":"<p>             Bases: <code>DrawCircle</code></p> <p>Description of circle aperture component.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_circle.py</code> <pre><code>class Rasterized2DApertureDrawCircle(DrawCircle):\n    \"\"\"Description of circle aperture component.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        box = self.get_bounding_box()\n        image_space_box = box - target.coordinate_origin\n        pixel_box = image_space_box.as_pixel_box(\n            self.backend.dpi,\n            dx_max=-2,\n            dy_max=-2,\n            dx_min=+1,\n            dy_min=+1,\n        )\n        (min_x, min_y, max_x, max_y) = pixel_box\n        if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n            logging.warning(\n                \"Drawing zero surface circle. DPI may be too low. %s\",\n                pixel_box,\n            )\n\n        else:\n            target.image_draw.ellipse(\n                xy=pixel_box,\n                fill=self.polarity.get_2d_rasterized_color(),\n                outline=None,\n                width=0,\n            )\n            logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_circle.html#pygerber.backend.rasterized_2d.draw_commands.draw_circle.Rasterized2DApertureDrawCircle.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_circle.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    box = self.get_bounding_box()\n    image_space_box = box - target.coordinate_origin\n    pixel_box = image_space_box.as_pixel_box(\n        self.backend.dpi,\n        dx_max=-2,\n        dy_max=-2,\n        dx_min=+1,\n        dy_min=+1,\n    )\n    (min_x, min_y, max_x, max_y) = pixel_box\n    if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n        logging.warning(\n            \"Drawing zero surface circle. DPI may be too low. %s\",\n            pixel_box,\n        )\n\n    else:\n        target.image_draw.ellipse(\n            xy=pixel_box,\n            fill=self.polarity.get_2d_rasterized_color(),\n            outline=None,\n            width=0,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_paste.html","title":"draw_paste","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_paste.html#pygerber.backend.rasterized_2d.draw_commands.draw_paste","title":"draw_paste","text":"<p>Base class for creating components for aperture creation.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_paste.html#pygerber.backend.rasterized_2d.draw_commands.draw_paste.Rasterized2DDrawPaste","title":"Rasterized2DDrawPaste","text":"<p>             Bases: <code>DrawPaste</code></p> <p>Description of aperture component.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_paste.py</code> <pre><code>class Rasterized2DDrawPaste(DrawPaste):\n    \"\"\"Description of aperture component.\"\"\"\n\n    other: Rasterized2DDrawingTarget\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        box = self.get_bounding_box()\n        image_space_box = box - target.coordinate_origin\n        pixel_box = image_space_box.get_min_vector().as_pixels(self.backend.dpi)\n\n        if self.polarity == Polarity.Dark:\n            im = self.other.image_polarity_dark\n\n        elif self.polarity == Polarity.Clear:\n            im = self.other.image_polarity_clear\n\n        elif self.polarity == Polarity.DarkRegion:\n            im = self.other.image_polarity_region_dark\n\n        elif self.polarity == Polarity.ClearRegion:\n            im = self.other.image_polarity_region_clear\n\n        else:\n            im = replace_color(\n                self.other.target_image,\n                Polarity.Dark.get_2d_rasterized_color(),\n                self.polarity.get_2d_rasterized_color(),\n                output_image_mode=\"L\",\n            )\n\n        target.target_image.paste(\n            im=im,\n            box=pixel_box,\n            mask=self.other.mask_image,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_paste.html#pygerber.backend.rasterized_2d.draw_commands.draw_paste.Rasterized2DDrawPaste.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_paste.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    box = self.get_bounding_box()\n    image_space_box = box - target.coordinate_origin\n    pixel_box = image_space_box.get_min_vector().as_pixels(self.backend.dpi)\n\n    if self.polarity == Polarity.Dark:\n        im = self.other.image_polarity_dark\n\n    elif self.polarity == Polarity.Clear:\n        im = self.other.image_polarity_clear\n\n    elif self.polarity == Polarity.DarkRegion:\n        im = self.other.image_polarity_region_dark\n\n    elif self.polarity == Polarity.ClearRegion:\n        im = self.other.image_polarity_region_clear\n\n    else:\n        im = replace_color(\n            self.other.target_image,\n            Polarity.Dark.get_2d_rasterized_color(),\n            self.polarity.get_2d_rasterized_color(),\n            output_image_mode=\"L\",\n        )\n\n    target.target_image.paste(\n        im=im,\n        box=pixel_box,\n        mask=self.other.mask_image,\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.html","title":"draw_polygon","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.html#pygerber.backend.rasterized_2d.draw_commands.draw_polygon","title":"draw_polygon","text":"<p>Polygon component for creating apertures.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.html#pygerber.backend.rasterized_2d.draw_commands.draw_polygon.Rasterized2DApertureDrawPolygon","title":"Rasterized2DApertureDrawPolygon","text":"<p>             Bases: <code>DrawPolygon</code></p> <p>Description of polygon aperture component.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.py</code> <pre><code>class Rasterized2DApertureDrawPolygon(DrawPolygon):\n    \"\"\"Description of polygon aperture component.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        box = self.get_bounding_box()\n        image_space_box = box - target.coordinate_origin\n        center = image_space_box.center.as_pixels(self.backend.dpi)\n\n        bounding_circle = (\n            *center,\n            (self.outer_diameter / 2).as_pixels(self.backend.dpi),\n        )\n        rotation = float(-self.rotation + Decimal(\"-90.0\"))\n\n        if self.number_of_vertices &lt; NUMBER_OF_VERTICES_IN_TRIANGLE:\n            logging.warning(\n                \"Drawing invalid polygon, number of vertices &lt; 3 (%s)\",\n                self.number_of_vertices,\n            )\n            return\n\n        (_, __, radius) = bounding_circle\n        if radius == 0:\n            logging.warning(\n                \"Drawing zero surface polygon. DPI may be too low. %s\",\n                bounding_circle,\n            )\n            return\n\n        target.image_draw.regular_polygon(\n            bounding_circle=bounding_circle,\n            n_sides=self.number_of_vertices,\n            rotation=int(rotation),\n            fill=self.polarity.get_2d_rasterized_color(),\n            outline=None,\n            width=0,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.html#pygerber.backend.rasterized_2d.draw_commands.draw_polygon.Rasterized2DApertureDrawPolygon.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_polygon.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    box = self.get_bounding_box()\n    image_space_box = box - target.coordinate_origin\n    center = image_space_box.center.as_pixels(self.backend.dpi)\n\n    bounding_circle = (\n        *center,\n        (self.outer_diameter / 2).as_pixels(self.backend.dpi),\n    )\n    rotation = float(-self.rotation + Decimal(\"-90.0\"))\n\n    if self.number_of_vertices &lt; NUMBER_OF_VERTICES_IN_TRIANGLE:\n        logging.warning(\n            \"Drawing invalid polygon, number of vertices &lt; 3 (%s)\",\n            self.number_of_vertices,\n        )\n        return\n\n    (_, __, radius) = bounding_circle\n    if radius == 0:\n        logging.warning(\n            \"Drawing zero surface polygon. DPI may be too low. %s\",\n            bounding_circle,\n        )\n        return\n\n    target.image_draw.regular_polygon(\n        bounding_circle=bounding_circle,\n        n_sides=self.number_of_vertices,\n        rotation=int(rotation),\n        fill=self.polarity.get_2d_rasterized_color(),\n        outline=None,\n        width=0,\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.html","title":"draw_rectangle","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.html#pygerber.backend.rasterized_2d.draw_commands.draw_rectangle","title":"draw_rectangle","text":"<p>Rectangle component for creating apertures.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.html#pygerber.backend.rasterized_2d.draw_commands.draw_rectangle.Rasterized2DApertureDrawRectangle","title":"Rasterized2DApertureDrawRectangle","text":"<p>             Bases: <code>DrawRectangle</code></p> <p>Description of rectangle aperture component.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.py</code> <pre><code>class Rasterized2DApertureDrawRectangle(DrawRectangle):\n    \"\"\"Description of rectangle aperture component.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        box = self.get_bounding_box()\n        image_space_box = box - target.coordinate_origin\n        pixel_box = image_space_box.as_pixel_box(\n            self.backend.dpi,\n        )\n\n        (min_x, min_y, max_x, max_y) = pixel_box\n        if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n            logging.warning(\n                \"Drawing zero surface rectangle. DPI may be too low. %s\",\n                pixel_box,\n            )\n\n        else:\n            target.image_draw.rectangle(\n                xy=pixel_box,\n                fill=self.polarity.get_2d_rasterized_color(),\n                outline=None,\n                width=0,\n            )\n            logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.html#pygerber.backend.rasterized_2d.draw_commands.draw_rectangle.Rasterized2DApertureDrawRectangle.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_rectangle.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    box = self.get_bounding_box()\n    image_space_box = box - target.coordinate_origin\n    pixel_box = image_space_box.as_pixel_box(\n        self.backend.dpi,\n    )\n\n    (min_x, min_y, max_x, max_y) = pixel_box\n    if (max_x - min_x &lt;= 0) or (max_y - min_y &lt;= 0):\n        logging.warning(\n            \"Drawing zero surface rectangle. DPI may be too low. %s\",\n            pixel_box,\n        )\n\n    else:\n        target.image_draw.rectangle(\n            xy=pixel_box,\n            fill=self.polarity.get_2d_rasterized_color(),\n            outline=None,\n            width=0,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_region.html","title":"draw_region","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_region.html#pygerber.backend.rasterized_2d.draw_commands.draw_region","title":"draw_region","text":"<p>Class for drawing 2D rasterized vector lines.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_region.html#pygerber.backend.rasterized_2d.draw_commands.draw_region.Rasterized2DDrawRegion","title":"Rasterized2DDrawRegion","text":"<p>             Bases: <code>DrawRegion</code></p> <p>Draw 2D rasterized vector line.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_region.py</code> <pre><code>class Rasterized2DDrawRegion(DrawRegion):\n    \"\"\"Draw 2D rasterized vector line.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        boundary_points: list[tuple[int, int]] = []\n\n        for point in self.region_boundary_points:\n            pixel_point = (point - target.coordinate_origin).as_pixels(\n                self.backend.dpi,\n            )\n            boundary_points.append(pixel_point)\n\n        if len(boundary_points) &lt; NUMBER_OF_VERTICES_IN_TRIANGLE:\n            logging.warning(\n                \"Drawing invalid region, number of vertices &lt; 3 (%s)\",\n                len(boundary_points),\n            )\n            return\n\n        target.image_draw.polygon(\n            boundary_points,\n            fill=self.polarity.get_2d_rasterized_color(),\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_region.html#pygerber.backend.rasterized_2d.draw_commands.draw_region.Rasterized2DDrawRegion.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_region.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    boundary_points: list[tuple[int, int]] = []\n\n    for point in self.region_boundary_points:\n        pixel_point = (point - target.coordinate_origin).as_pixels(\n            self.backend.dpi,\n        )\n        boundary_points.append(pixel_point)\n\n    if len(boundary_points) &lt; NUMBER_OF_VERTICES_IN_TRIANGLE:\n        logging.warning(\n            \"Drawing invalid region, number of vertices &lt; 3 (%s)\",\n            len(boundary_points),\n        )\n        return\n\n    target.image_draw.polygon(\n        boundary_points,\n        fill=self.polarity.get_2d_rasterized_color(),\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.html","title":"draw_vector_line","text":""},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.html#pygerber.backend.rasterized_2d.draw_commands.draw_vector_line","title":"draw_vector_line","text":"<p>Class for drawing 2D rasterized vector lines.</p>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.html#pygerber.backend.rasterized_2d.draw_commands.draw_vector_line.Rasterized2DDrawVectorLine","title":"Rasterized2DDrawVectorLine","text":"<p>             Bases: <code>DrawVectorLine</code></p> <p>Draw 2D rasterized vector line.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.py</code> <pre><code>class Rasterized2DDrawVectorLine(DrawVectorLine):\n    \"\"\"Draw 2D rasterized vector line.\"\"\"\n\n    backend: Rasterized2DBackend\n\n    def draw(self, target: DrawingTarget) -&gt; None:\n        \"\"\"Apply aperture draw component to handle.\"\"\"\n        if not isinstance(target, Rasterized2DDrawingTarget):\n            msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n            raise TypeError(msg)\n\n        start = (self.start_position - target.coordinate_origin).as_pixels(\n            self.backend.dpi,\n        )\n        end = (self.end_position - target.coordinate_origin).as_pixels(\n            self.backend.dpi,\n        )\n        width = self.width.as_pixels(self.backend.dpi)\n\n        target.image_draw.line(\n            (start, end),\n            fill=self.polarity.get_2d_rasterized_color(),\n            width=width,\n        )\n        logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.html#pygerber.backend.rasterized_2d.draw_commands.draw_vector_line.Rasterized2DDrawVectorLine.draw","title":"draw","text":"<pre><code>draw(target: DrawingTarget) -&gt; None\n</code></pre> <p>Apply aperture draw component to handle.</p> Source code in <code>src/pygerber/backend/rasterized_2d/draw_commands/draw_vector_line.py</code> <pre><code>def draw(self, target: DrawingTarget) -&gt; None:\n    \"\"\"Apply aperture draw component to handle.\"\"\"\n    if not isinstance(target, Rasterized2DDrawingTarget):\n        msg = f\"Expected Rasterized2DDrawingTarget got {type(target)}\"\n        raise TypeError(msg)\n\n    start = (self.start_position - target.coordinate_origin).as_pixels(\n        self.backend.dpi,\n    )\n    end = (self.end_position - target.coordinate_origin).as_pixels(\n        self.backend.dpi,\n    )\n    width = self.width.as_pixels(self.backend.dpi)\n\n    target.image_draw.line(\n        (start, end),\n        fill=self.polarity.get_2d_rasterized_color(),\n        width=width,\n    )\n    logging.debug(\"Adding %s to %s\", self.__class__.__qualname__, target)\n</code></pre>"},{"location":"reference/pygerber/common/__init__.html","title":"init","text":""},{"location":"reference/pygerber/common/__init__.html#pygerber.common","title":"common","text":"<p>Common internal utilities of PyGerber library.</p>"},{"location":"reference/pygerber/common/error.html","title":"error","text":""},{"location":"reference/pygerber/common/error.html#pygerber.common.error","title":"error","text":"<p>Common exception related tools.</p>"},{"location":"reference/pygerber/common/error.html#pygerber.common.error.throw","title":"throw","text":"<pre><code>throw(exception: Exception) -&gt; NoReturn\n</code></pre> <p>Raise given exception.</p> Source code in <code>src/pygerber/common/error.py</code> <pre><code>def throw(exception: Exception) -&gt; NoReturn:\n    \"\"\"Raise given exception.\"\"\"\n    raise exception\n</code></pre>"},{"location":"reference/pygerber/common/frozen_general_model.html","title":"frozen_general_model","text":""},{"location":"reference/pygerber/common/frozen_general_model.html#pygerber.common.frozen_general_model","title":"frozen_general_model","text":"<p>Class based on pydantic BaseModel with common set of features.</p>"},{"location":"reference/pygerber/common/frozen_general_model.html#pygerber.common.frozen_general_model.FrozenGeneralModel","title":"FrozenGeneralModel","text":"<p>             Bases: <code>BaseModel</code></p> <p>Model with common set of general purpose features.</p> Source code in <code>src/pygerber/common/frozen_general_model.py</code> <pre><code>class FrozenGeneralModel(BaseModel):\n    \"\"\"Model with common set of general purpose features.\"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",\n        frozen=True,\n        arbitrary_types_allowed=True,\n    )\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def __class_qualname__(self) -&gt; str:\n        \"\"\"Name of class.\"\"\"\n        return self.__class__.__qualname__\n</code></pre>"},{"location":"reference/pygerber/common/frozen_general_model.html#pygerber.common.frozen_general_model.FrozenGeneralModel.__class_qualname__","title":"__class_qualname__  <code>property</code>","text":"<pre><code>__class_qualname__: str\n</code></pre> <p>Name of class.</p>"},{"location":"reference/pygerber/common/general_model.html","title":"general_model","text":""},{"location":"reference/pygerber/common/general_model.html#pygerber.common.general_model","title":"general_model","text":"<p>Class based on pydantic BaseModel with common set of features.</p>"},{"location":"reference/pygerber/common/general_model.html#pygerber.common.general_model.GeneralModel","title":"GeneralModel","text":"<p>             Bases: <code>BaseModel</code></p> <p>Model with common set of general purpose features.</p> Source code in <code>src/pygerber/common/general_model.py</code> <pre><code>class GeneralModel(BaseModel):\n    \"\"\"Model with common set of general purpose features.\"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",\n        frozen=False,\n        arbitrary_types_allowed=True,\n    )\n</code></pre>"},{"location":"reference/pygerber/common/immutable_map_model.html","title":"immutable_map_model","text":""},{"location":"reference/pygerber/common/immutable_map_model.html#pygerber.common.immutable_map_model","title":"immutable_map_model","text":"<p>Module contains model class wrapping immutable mapping.</p>"},{"location":"reference/pygerber/common/immutable_map_model.html#pygerber.common.immutable_map_model.ImmutableMapping","title":"ImmutableMapping","text":"<p>             Bases: <code>FrozenGeneralModel</code>, <code>Generic[KeyT, ValueT]</code></p> <p>Model class wrapping immutable dictionary.</p> Source code in <code>src/pygerber/common/immutable_map_model.py</code> <pre><code>class ImmutableMapping(FrozenGeneralModel, Generic[KeyT, ValueT]):\n    \"\"\"Model class wrapping immutable dictionary.\"\"\"\n\n    mapping: Mapping[KeyT, ValueT] = Field(\n        default_factory=lambda: MappingProxyType({}),\n    )\n\n    @field_validator(\"mapping\")\n    @classmethod\n    def _validate_mapping(cls, v: Mapping[str, str]) -&gt; Mapping[str, str]:\n        if isinstance(v, MappingProxyType):\n            return v\n        if isinstance(v, dict):\n            return MappingProxyType(v)\n        raise TypeError(type(v))\n\n    @field_serializer(\"mapping\", return_type=Dict[KeyT, ValueT])\n    def _serialize_mapping(\n        self,\n        mapping: Mapping[KeyT, ValueT],\n        _info: FieldSerializationInfo,\n    ) -&gt; Dict[KeyT, ValueT]:\n        \"\"\"Serialize model instance.\"\"\"\n        return dict(mapping)\n\n    def update(self, __key: KeyT, __value: ValueT) -&gt; Self:\n        \"\"\"Update underlying mapping.\"\"\"\n        return self.model_copy(\n            update={\n                \"mapping\": MappingProxyType(\n                    {\n                        **self.mapping,\n                        __key: __value,\n                    },\n                ),\n            },\n        )\n\n    def get(self, __key: KeyT, __default: Optional[ValueT] = None) -&gt; Optional[ValueT]:\n        \"\"\"Get item if exists or add it to mapping with __default value and return.\"\"\"\n        return self.mapping.get(__key, __default)\n\n    def delete(self, __key: KeyT) -&gt; Self:\n        \"\"\"Remove entry from mapping.\"\"\"\n        return self.model_copy(\n            update={\n                \"mapping\": MappingProxyType(\n                    {k: v for k, v in self.mapping.items() if (k != __key)},\n                ),\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/common/immutable_map_model.html#pygerber.common.immutable_map_model.ImmutableMapping.update","title":"update","text":"<pre><code>update(__key: KeyT, __value: ValueT) -&gt; Self\n</code></pre> <p>Update underlying mapping.</p> Source code in <code>src/pygerber/common/immutable_map_model.py</code> <pre><code>def update(self, __key: KeyT, __value: ValueT) -&gt; Self:\n    \"\"\"Update underlying mapping.\"\"\"\n    return self.model_copy(\n        update={\n            \"mapping\": MappingProxyType(\n                {\n                    **self.mapping,\n                    __key: __value,\n                },\n            ),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/common/immutable_map_model.html#pygerber.common.immutable_map_model.ImmutableMapping.get","title":"get","text":"<pre><code>get(\n    __key: KeyT, __default: Optional[ValueT] = None\n) -&gt; Optional[ValueT]\n</code></pre> <p>Get item if exists or add it to mapping with __default value and return.</p> Source code in <code>src/pygerber/common/immutable_map_model.py</code> <pre><code>def get(self, __key: KeyT, __default: Optional[ValueT] = None) -&gt; Optional[ValueT]:\n    \"\"\"Get item if exists or add it to mapping with __default value and return.\"\"\"\n    return self.mapping.get(__key, __default)\n</code></pre>"},{"location":"reference/pygerber/common/immutable_map_model.html#pygerber.common.immutable_map_model.ImmutableMapping.delete","title":"delete","text":"<pre><code>delete(__key: KeyT) -&gt; Self\n</code></pre> <p>Remove entry from mapping.</p> Source code in <code>src/pygerber/common/immutable_map_model.py</code> <pre><code>def delete(self, __key: KeyT) -&gt; Self:\n    \"\"\"Remove entry from mapping.\"\"\"\n    return self.model_copy(\n        update={\n            \"mapping\": MappingProxyType(\n                {k: v for k, v in self.mapping.items() if (k != __key)},\n            ),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/common/namespace.html","title":"namespace","text":""},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace","title":"namespace","text":"<p><code>namespace</code> module contains definition of <code>Namespace</code> class used to prevent instantiation of derived classes.</p>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.NamespaceMeta","title":"NamespaceMeta","text":"<p>             Bases: <code>type</code></p> <p>Metaclass that prevents instantiation of the class.</p> Source code in <code>src/pygerber/common/namespace.py</code> <pre><code>class NamespaceMeta(type):\n    \"\"\"Metaclass that prevents instantiation of the class.\"\"\"\n\n    def __call__(cls, *_: Any, **__: Any) -&gt; NoReturn:\n        \"\"\"Raise a TypeError when trying to instantiate the class.\"\"\"\n        msg = \"Cannot instantiate class\"\n        raise TypeError(msg)\n</code></pre>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.NamespaceMeta.__call__","title":"__call__","text":"<pre><code>__call__(*_: Any, **__: Any) -&gt; NoReturn\n</code></pre> <p>Raise a TypeError when trying to instantiate the class.</p> Source code in <code>src/pygerber/common/namespace.py</code> <pre><code>def __call__(cls, *_: Any, **__: Any) -&gt; NoReturn:\n    \"\"\"Raise a TypeError when trying to instantiate the class.\"\"\"\n    msg = \"Cannot instantiate class\"\n    raise TypeError(msg)\n</code></pre>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.Namespace","title":"Namespace","text":"<p>Base class that prevents instantiation of derived classes.</p> Source code in <code>src/pygerber/common/namespace.py</code> <pre><code>class Namespace(metaclass=NamespaceMeta):\n    \"\"\"Base class that prevents instantiation of derived classes.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/common/position.html","title":"position","text":""},{"location":"reference/pygerber/common/position.html#pygerber.common.position","title":"position","text":"<p>Contains tools for expressing positions in text.</p>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position","title":"Position  <code>dataclass</code>","text":"<p>Position of token in text in pyparsing scheme (lines starts from 1, columns also start from 1).</p> Source code in <code>src/pygerber/common/position.py</code> <pre><code>@dataclass\nclass Position:\n    \"\"\"Position of token in text in pyparsing scheme (lines starts from 1,\n    columns also start from 1).\n    \"\"\"\n\n    line: int\n    column: int\n\n    @classmethod\n    def from_vscode_position(cls, line: int, character: int) -&gt; Self:\n        \"\"\"Return position in pyparsing scheme from vscode scheme (lines starts from 0,\n        columns starts from 0).\n        \"\"\"\n        return cls(line + 1, character + 1)\n\n    def to_lspt(self) -&gt; lspt.Position:\n        \"\"\"Return position in pyparsing scheme from vscode scheme (lines starts from 1,\n        columns starts from 1).\n        \"\"\"\n        return lspt.Position(line=self.line - 1, character=self.column - 1)\n\n    def offset(self, line: int, column: int) -&gt; Self:\n        \"\"\"Create new Position offset by line and column.\"\"\"\n        return self.__class__(self.line + line, self.column + column)\n\n    def __str__(self) -&gt; str:\n        return f\"[line: {self.line}, col: {self.column}]\"\n\n    def __eq__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line == __value.line and self.column == __value.column\n\n    def __ne__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line != __value.line and self.column != __value.column\n\n    def __gt__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line &gt; __value.line or (\n            self.line == __value.line and self.column &gt; __value.column\n        )\n\n    def __ge__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line &gt;= __value.line or (\n            self.line == __value.line and self.column &gt;= __value.column\n        )\n\n    def __lt__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line &lt; __value.line or (\n            self.line == __value.line and self.column &lt; __value.column\n        )\n\n    def __le__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, self.__class__):\n            return NotImplemented\n        return self.line &lt;= __value.line or (\n            self.line == __value.line and self.column &lt;= __value.column\n        )\n</code></pre>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.from_vscode_position","title":"from_vscode_position  <code>classmethod</code>","text":"<pre><code>from_vscode_position(line: int, character: int) -&gt; Self\n</code></pre> <p>Return position in pyparsing scheme from vscode scheme (lines starts from 0, columns starts from 0).</p> Source code in <code>src/pygerber/common/position.py</code> <pre><code>@classmethod\ndef from_vscode_position(cls, line: int, character: int) -&gt; Self:\n    \"\"\"Return position in pyparsing scheme from vscode scheme (lines starts from 0,\n    columns starts from 0).\n    \"\"\"\n    return cls(line + 1, character + 1)\n</code></pre>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.Position\n</code></pre> <p>Return position in pyparsing scheme from vscode scheme (lines starts from 1, columns starts from 1).</p> Source code in <code>src/pygerber/common/position.py</code> <pre><code>def to_lspt(self) -&gt; lspt.Position:\n    \"\"\"Return position in pyparsing scheme from vscode scheme (lines starts from 1,\n    columns starts from 1).\n    \"\"\"\n    return lspt.Position(line=self.line - 1, character=self.column - 1)\n</code></pre>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.offset","title":"offset","text":"<pre><code>offset(line: int, column: int) -&gt; Self\n</code></pre> <p>Create new Position offset by line and column.</p> Source code in <code>src/pygerber/common/position.py</code> <pre><code>def offset(self, line: int, column: int) -&gt; Self:\n    \"\"\"Create new Position offset by line and column.\"\"\"\n    return self.__class__(self.line + line, self.column + column)\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html","title":"rgba","text":""},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba","title":"rgba","text":"<p>RGBA colors are used for declaring visuals of rendering output.</p> <p>This module contains RGBA class which can be used to provide such color.</p>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA","title":"RGBA","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Representation of RGBA color.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>class RGBA(FrozenGeneralModel):\n    \"\"\"Representation of RGBA color.\"\"\"\n\n    r: Color = ColorField\n    g: Color = ColorField\n    b: Color = ColorField\n    a: Color = ColorField\n\n    @classmethod\n    def from_hex(cls, string: str) -&gt; Self:\n        \"\"\"Build RGBA color object from hexadecimal string.\n\n        Parameters\n        ----------\n        string : str\n            String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n            For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n            `#` symbol prefix for hex string is accepted.\n\n        Returns\n        -------\n        RGBA\n            Color built from hexadecimal values.\n\n        \"\"\"\n        if string[0] == \"#\":\n            string = string[1:]\n\n        r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n        if len(a) == 0:\n            a = \"FF\"\n\n        return cls(\n            r=int(r, base=16),\n            g=int(g, base=16),\n            b=int(b, base=16),\n            a=int(a, base=16),\n        )\n\n    @classmethod\n    def from_rgba(cls, r: int, g: int, b: int, a: int = 0xFF) -&gt; Self:\n        \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n        Parameters\n        ----------\n        r : int\n            Red chanel value as integer from 0 to 255, inclusive.\n        g : int\n            Green chanel value as integer from 0 to 255, inclusive.\n        b : int\n            Blue chanel value as integer from 0 to 255, inclusive.\n        a : int, optional\n            Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n        Returns\n        -------\n        Self\n            Color built from r, g, b, a values.\n\n        \"\"\"\n        return cls(r=r, g=g, b=b, a=a)\n\n    @classmethod\n    def from_hsv(\n        cls,\n        h: int,\n        s: float,\n        v: float,\n        a: int = 255,\n    ) -&gt; Self:\n        \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n        For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n        Parameters\n        ----------\n        h : int\n            Hue of color, integer in range 0 to 360 inclusive.\n        s : float\n            Saturation of color, float in range 0.0 to 100.0 inclusive.\n        v : float\n            Value of color, float in range 0.0 to 100.0 inclusive.\n        a : int\n            Alpha of color, int in range 0 to 255 inclusive.\n\n        Returns\n        -------\n        Self\n            Color built from h, s, v, a values.\n\n        \"\"\"\n        h %= 360\n        s /= 100\n        v /= 100\n\n        c = v * s\n        x = c * (1 - abs(((h / 60) % 2) - 1))\n        m = v - c\n\n        if 0 &lt;= h &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, x, 0.0\n        elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, c, 0.0\n        elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, c, x\n        elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, x, c\n        elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, 0.0, c\n        elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= h &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, 0.0, x\n        else:\n            raise ValueError(h)\n\n        return cls(\n            r=round((r_ + m) * 255),\n            g=round((g_ + m) * 255),\n            b=round((b_ + m) * 255),\n            a=a,\n        )\n\n    def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n        \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.r, self.g, self.b, self.a\n\n    def as_rgb_int(self) -&gt; tuple[int, int, int]:\n        \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.r, self.g, self.b\n\n    def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n        \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n        return (\n            float(Decimal(self.r) / Decimal(255)),\n            float(Decimal(self.g) / Decimal(255)),\n            float(Decimal(self.b) / Decimal(255)),\n            float(Decimal(self.a) / Decimal(255)),\n        )\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Return color as hexadecimal string.\n\n        Eg. `#FF0000FF` for red color.\n        \"\"\"\n        r = f\"{self.r:0{2}x}\"\n        g = f\"{self.g:0{2}x}\"\n        b = f\"{self.b:0{2}x}\"\n        a = f\"{self.a:0{2}x}\"\n        return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> required <p>Returns:</p> Type Description <code>RGBA</code> <p>Color built from hexadecimal values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_hex(cls, string: str) -&gt; Self:\n    \"\"\"Build RGBA color object from hexadecimal string.\n\n    Parameters\n    ----------\n    string : str\n        String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n        For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n        `#` symbol prefix for hex string is accepted.\n\n    Returns\n    -------\n    RGBA\n        Color built from hexadecimal values.\n\n    \"\"\"\n    if string[0] == \"#\":\n        string = string[1:]\n\n    r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n    if len(a) == 0:\n        a = \"FF\"\n\n    return cls(\n        r=int(r, base=16),\n        g=int(g, base=16),\n        b=int(b, base=16),\n        a=int(a, base=16),\n    )\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(r: int, g: int, b: int, a: int = 255) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> Name Type Description Default <code>r</code> <code>int</code> <p>Red chanel value as integer from 0 to 255, inclusive.</p> required <code>g</code> <code>int</code> <p>Green chanel value as integer from 0 to 255, inclusive.</p> required <code>b</code> <code>int</code> <p>Blue chanel value as integer from 0 to 255, inclusive.</p> required <code>a</code> <code>int</code> <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from r, g, b, a values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_rgba(cls, r: int, g: int, b: int, a: int = 0xFF) -&gt; Self:\n    \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n    Parameters\n    ----------\n    r : int\n        Red chanel value as integer from 0 to 255, inclusive.\n    g : int\n        Green chanel value as integer from 0 to 255, inclusive.\n    b : int\n        Blue chanel value as integer from 0 to 255, inclusive.\n    a : int, optional\n        Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n    Returns\n    -------\n    Self\n        Color built from r, g, b, a values.\n\n    \"\"\"\n    return cls(r=r, g=g, b=b, a=a)\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(h: int, s: float, v: float, a: int = 255) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>int</code> <p>Hue of color, integer in range 0 to 360 inclusive.</p> required <code>s</code> <code>float</code> <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> required <code>v</code> <code>float</code> <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> required <code>a</code> <code>int</code> <p>Alpha of color, int in range 0 to 255 inclusive.</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from h, s, v, a values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_hsv(\n    cls,\n    h: int,\n    s: float,\n    v: float,\n    a: int = 255,\n) -&gt; Self:\n    \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n    For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n    Parameters\n    ----------\n    h : int\n        Hue of color, integer in range 0 to 360 inclusive.\n    s : float\n        Saturation of color, float in range 0.0 to 100.0 inclusive.\n    v : float\n        Value of color, float in range 0.0 to 100.0 inclusive.\n    a : int\n        Alpha of color, int in range 0 to 255 inclusive.\n\n    Returns\n    -------\n    Self\n        Color built from h, s, v, a values.\n\n    \"\"\"\n    h %= 360\n    s /= 100\n    v /= 100\n\n    c = v * s\n    x = c * (1 - abs(((h / 60) % 2) - 1))\n    m = v - c\n\n    if 0 &lt;= h &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, x, 0.0\n    elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, c, 0.0\n    elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, c, x\n    elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, x, c\n    elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, 0.0, c\n    elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= h &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, 0.0, x\n    else:\n        raise ValueError(h)\n\n    return cls(\n        r=round((r_ + m) * 255),\n        g=round((g_ + m) * 255),\n        b=round((b_ + m) * 255),\n        a=a,\n    )\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n    \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.r, self.g, self.b, self.a\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgb_int(self) -&gt; tuple[int, int, int]:\n    \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.r, self.g, self.b\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n    \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n    return (\n        float(Decimal(self.r) / Decimal(255)),\n        float(Decimal(self.g) / Decimal(255)),\n        float(Decimal(self.b) / Decimal(255)),\n        float(Decimal(self.a) / Decimal(255)),\n    )\n</code></pre>"},{"location":"reference/pygerber/common/rgba.html#pygerber.common.rgba.RGBA.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Return color as hexadecimal string.\n\n    Eg. `#FF0000FF` for red color.\n    \"\"\"\n    r = f\"{self.r:0{2}x}\"\n    g = f\"{self.g:0{2}x}\"\n    b = f\"{self.b:0{2}x}\"\n    a = f\"{self.a:0{2}x}\"\n    return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/console/__init__.html","title":"init","text":""},{"location":"reference/pygerber/console/__init__.html#pygerber.console","title":"console","text":"<p>Console interface of PyGerber.</p>"},{"location":"reference/pygerber/console/commands.html","title":"commands","text":""},{"location":"reference/pygerber/console/commands.html#pygerber.console.commands","title":"commands","text":"<p>Command line commands of PyGerber.</p>"},{"location":"reference/pygerber/console/commands.html#pygerber.console.commands.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Command line interface of PyGerber, python implementation of Gerber X3/X2 standard with 2D rendering engine.</p> Source code in <code>src/pygerber/console/commands.py</code> <pre><code>@click.group(\"pygerber\")\n@click.version_option(version=pygerber.__version__)\ndef main() -&gt; None:\n    \"\"\"Command line interface of PyGerber, python implementation of Gerber X3/X2\n    standard with 2D rendering engine.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/console/raster_2d_style.html","title":"raster_2d_style","text":""},{"location":"reference/pygerber/console/raster_2d_style.html#pygerber.console.raster_2d_style","title":"raster_2d_style","text":"<p>Tool for converting style string to ColorScheme objects.</p>"},{"location":"reference/pygerber/console/raster_2d_style.html#pygerber.console.raster_2d_style.STYLE_TO_COLOR_SCHEME","title":"STYLE_TO_COLOR_SCHEME  <code>module-attribute</code>","text":"<pre><code>STYLE_TO_COLOR_SCHEME = {\n    \"silk\": SILK,\n    \"silk_alpha\": SILK_ALPHA,\n    \"copper\": COPPER,\n    \"copper_alpha\": COPPER_ALPHA,\n    \"paste_mask\": PASTE_MASK,\n    \"paste_mask_alpha\": PASTE_MASK_ALPHA,\n    \"solder_mask\": SOLDER_MASK,\n    \"solder_mask_alpha\": SOLDER_MASK_ALPHA,\n    \"default_grayscale\": DEFAULT_GRAYSCALE,\n    \"debug_1\": DEBUG_1,\n    CUSTOM_STYLE_OPTION: None,\n}\n</code></pre> <p>Map of known color styles to ColorScheme objects.</p>"},{"location":"reference/pygerber/console/raster_2d_style.html#pygerber.console.raster_2d_style.get_color_scheme_from_style","title":"get_color_scheme_from_style","text":"<pre><code>get_color_scheme_from_style(\n    style: str, custom: Optional[str] = None\n) -&gt; ColorScheme\n</code></pre> <p>Convert style string to ColorScheme object.</p> <p>Accepted values for style are any key from STYLE_TO_COLOR_SCHEME. When style is 'custom' then parameter custom must also be provided. Custom color should be a single string consisting of 5 or 7 valid hexadecimal colors separated with commas. Any color which can be parsed by RGBA type is accepted. Colors are assigned in order:</p> <ul> <li>background_color</li> <li>clear_color</li> <li>solid_color</li> <li>clear_region_color</li> <li>solid_region_color</li> <li>debug_1_color (optional, by default #ABABAB)</li> <li>debug_2_color (optional, by default #7D7D7D)</li> </ul> <p>eg. <code>\"000000,000000,FFFFFF,000000,FFFFFF\"</code></p> Source code in <code>src/pygerber/console/raster_2d_style.py</code> <pre><code>def get_color_scheme_from_style(\n    style: str,\n    custom: Optional[str] = None,\n) -&gt; ColorScheme:\n    \"\"\"Convert style string to ColorScheme object.\n\n    Accepted values for style are any key from STYLE_TO_COLOR_SCHEME. When style is\n    'custom' then parameter custom must also be provided.\n    Custom color should be a single string consisting of 5 or 7 valid hexadecimal colors\n    separated with commas. Any color which can be parsed by RGBA type is accepted.\n    Colors are assigned in order:\n\n    - background_color\n    - clear_color\n    - solid_color\n    - clear_region_color\n    - solid_region_color\n    - debug_1_color (optional, by default #ABABAB)\n    - debug_2_color (optional, by default #7D7D7D)\n\n    eg. `\"000000,000000,FFFFFF,000000,FFFFFF\"`\n    \"\"\"\n    if style == CUSTOM_STYLE_OPTION:\n        if custom is None:\n            msg = (\n                f\"When style is {CUSTOM_STYLE_OPTION!r} custom have to be a valid \"\n                \"custom scheme.\"\n            )\n            raise TypeError(msg)\n        return _construct_custom_scheme(custom)\n\n    color_scheme = STYLE_TO_COLOR_SCHEME[style]\n    if color_scheme is None:\n        # Can't happen - option 'custom' is picked by if above.\n        raise TypeError\n\n    return color_scheme\n</code></pre>"},{"location":"reference/pygerber/examples/__init__.html","title":"examples","text":""},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples","title":"examples","text":"<p>Utility for loading example Gerber files shipped with PyGerber.</p>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.ExamplesEnum","title":"ExamplesEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of all available examples.</p> Source code in <code>src/pygerber/examples/__init__.py</code> <pre><code>class ExamplesEnum(Enum):\n    \"\"\"Enumeration of all available examples.\"\"\"\n\n    UCAMCO_ex_2_Shapes = \"ucamco_ex_2_shapes.grb\"\n    ShapeFlashes = \"shape_flashes.grb\"\n    simple_2layer_F_Cu = \"simple_2layer-F_Cu.gbr\"  # noqa: N815\n    simple_2layer_F_Mask = \"simple_2layer-F_Mask.gbr\"  # noqa: N815\n    simple_2layer_F_Paste = \"simple_2layer-F_Paste.gbr\"  # noqa: N815\n    simple_2layer_F_Silkscreen = \"simple_2layer-F_Silkscreen.gbr\"  # noqa: N815\n</code></pre>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.get_example_path","title":"get_example_path","text":"<pre><code>get_example_path(example: ExamplesEnum) -&gt; Path\n</code></pre> <p>Get path to example Gerber file.</p> Source code in <code>src/pygerber/examples/__init__.py</code> <pre><code>def get_example_path(example: ExamplesEnum) -&gt; Path:\n    \"\"\"Get path to example Gerber file.\"\"\"\n    return DIRECTORY / example.value\n</code></pre>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.load_example","title":"load_example","text":"<pre><code>load_example(example: ExamplesEnum) -&gt; str\n</code></pre> <p>Load example Gerber file.</p> Source code in <code>src/pygerber/examples/__init__.py</code> <pre><code>def load_example(example: ExamplesEnum) -&gt; str:\n    \"\"\"Load example Gerber file.\"\"\"\n    return get_example_path(example).read_text(encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/__init__.html#pygerber.gerberx3","title":"gerberx3","text":"<p>Package for Gerber X3 format visualization.</p>"},{"location":"reference/pygerber/gerberx3/revisions.html","title":"revisions","text":""},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions","title":"revisions","text":"<p>Gerber format metadata.</p>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.Gerber","title":"Gerber","text":"<p>             Bases: <code>Enum</code></p> <p>Gerber specification major versions.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>class Gerber(Enum):\n    \"\"\"Gerber specification major versions.\"\"\"\n\n    X1 = 0x01FF\n    X2 = 0x02FF\n    X3 = 0x03FF\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.RevisionData","title":"RevisionData","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Container for Gerber format revision metadata.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>class RevisionData(FrozenGeneralModel):\n    \"\"\"Container for Gerber format revision metadata.\"\"\"\n\n    name: str\n    spec: Gerber\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.Revision","title":"Revision","text":"<p>             Bases: <code>Enum</code></p> <p>List of known Gerber format revisions.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>class Revision(Enum):\n    \"\"\"List of known Gerber format revisions.\"\"\"\n\n    Revision_Legacy = RevisionData(name=\"Revision Legacy\", spec=Gerber.X1)\n    # Gerber X2\n    Revision_2012_12 = RevisionData(name=\"Revision I1 (2012 12)\", spec=Gerber.X2)\n    Revision_2013_04 = RevisionData(name=\"Revision I2 (2013 04)\", spec=Gerber.X2)\n    Revision_2013_06 = RevisionData(name=\"Revision I3 (2013 06)\", spec=Gerber.X2)\n    Revision_2013_10 = RevisionData(name=\"Revision I4 (2013 10)\", spec=Gerber.X2)\n    Revision_2014_02 = RevisionData(name=\"Revision J1 (2014 02) - X2\", spec=Gerber.X2)\n    Revision_2014_07 = RevisionData(name=\"Revision J2 (2014 07)\", spec=Gerber.X2)\n    Revision_2014_10 = RevisionData(name=\"Revision J3 (2014 10)\", spec=Gerber.X2)\n    Revision_2015_02 = RevisionData(name=\"Revision J4 (2015 02)\", spec=Gerber.X2)\n    Revision_2015_06 = RevisionData(name=\"Revision 2015.06\", spec=Gerber.X2)\n    Revision_2015_07 = RevisionData(name=\"Revision 2015.07\", spec=Gerber.X2)\n    Revision_2015_10 = RevisionData(name=\"Revision 2015.10\", spec=Gerber.X2)\n    Revision_2016_01 = RevisionData(name=\"Revision 2016.01\", spec=Gerber.X2)\n    Revision_2016_04 = RevisionData(name=\"Revision 2016.04\", spec=Gerber.X2)\n    Revision_2016_06 = RevisionData(name=\"Revision 2016.06\", spec=Gerber.X2)\n    Revision_2016_09 = RevisionData(name=\"Revision 2016.09\", spec=Gerber.X2)\n    Revision_2016_11 = RevisionData(name=\"Revision 2016.11\", spec=Gerber.X2)\n    Revision_2016_12 = RevisionData(\n        name=\"Revision 2016.12 - Nested step and repeat\",\n        spec=Gerber.X2,\n    )\n    Revision_2017_03 = RevisionData(name=\"Revision 2017.03\", spec=Gerber.X2)\n    Revision_2017_05 = RevisionData(name=\"Revision 2017.05\", spec=Gerber.X2)\n    Revision_2017_11 = RevisionData(name=\"Revision 2017.11\", spec=Gerber.X2)\n    Revision_2018_05 = RevisionData(name=\"Revision 2018.05\", spec=Gerber.X2)\n    Revision_2018_06 = RevisionData(name=\"Revision 2018.06\", spec=Gerber.X2)\n    Revision_2018_09 = RevisionData(name=\"Revision 2018.09\", spec=Gerber.X2)\n    Revision_2018_11 = RevisionData(name=\"Revision 2018.11\", spec=Gerber.X2)\n    Revision_2019_06 = RevisionData(name=\"Revision 2019.06\", spec=Gerber.X2)\n    Revision_2019_09 = RevisionData(name=\"Revision 2019.09\", spec=Gerber.X2)\n    # Gerber X3\n    Revision_2020_09 = RevisionData(name=\"Revision 2020.09\", spec=Gerber.X3)\n    Revision_2021_02 = RevisionData(name=\"Revision 2021.02\", spec=Gerber.X3)\n    Revision_2021_04 = RevisionData(name=\"Revision 2021.04\", spec=Gerber.X3)\n    Revision_2021_11 = RevisionData(name=\"Revision 2021.11\", spec=Gerber.X3)\n    Revision_2022_02 = RevisionData(name=\"Revision 2022.02\", spec=Gerber.X3)\n    Revision_2023_03 = RevisionData(name=\"Revision 2023.03\", spec=Gerber.X3)\n    Revision_2023_08 = RevisionData(name=\"Revision 2023.08\", spec=Gerber.X3)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.SpecSec","title":"SpecSec  <code>dataclass</code>","text":"<p>Gerber specification section.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>@dataclass\nclass SpecSec:\n    \"\"\"Gerber specification section.\"\"\"\n\n    sec_id: str\n    name: str\n    page: int\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.Revision202308","title":"Revision202308","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of all known sections in Gerber specification, revision 2023.08.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>class Revision202308(Enum):\n    \"\"\"Enumeration of all known sections in Gerber specification, revision 2023.08.\"\"\"\n\n    Contents = SpecSec(\"\", \"Contents\", 2)\n    Preface = SpecSec(\"\", \"Preface\", 7)\n    S_1 = SpecSec(\"1\", \"Introduction\", 8)\n    S_1_1 = SpecSec(\"1.1\", \"Scope and Target Audience\", 8)\n    S_1_2 = SpecSec(\"1.2\", \"Further Resources\", 8)\n    S_1_3 = SpecSec(\"1.3\", \"Reference Gerber Viewer\", 8)\n    S_1_4 = SpecSec(\"1.4\", \"Copyright and Intellectual Property\", 9)\n    S_2 = SpecSec(\"2\", \"Overview\", 10)\n    S_2_1 = SpecSec(\"2.1\", \"File Structure\", 10)\n    S_2_2 = SpecSec(\"2.2\", \"Apertures\", 10)\n    S_2_3 = SpecSec(\"2.3\", \"Graphical objects\", 11)\n    S_2_4 = SpecSec(\"2.4\", \"Draws and Arcs\", 12)\n    S_2_5 = SpecSec(\"2.5\", \"Operations (D01, D02, D03)\", 13)\n    S_2_6 = SpecSec(\"2.6\", \"Graphics State\", 16)\n    S_2_7 = SpecSec(\"2.7\", \"Polarity\", 13)\n    S_2_8 = SpecSec(\"2.8\", \"Blocks\", 14)\n    S_2_9 = SpecSec(\"2.9\", \"Attributes\", 14)\n    S_2_10 = SpecSec(\"2.10\", \"Commands Overview\", 18)\n    S_2_11 = SpecSec(\"2.11\", \"Processing a Gerber File\", 19)\n    S_2_12 = SpecSec(\"2.12\", \"Glossary\", 21)\n    S_2_13 = SpecSec(\"2.13\", \"Annotated Example Files\", 24)\n    S_2_13_1 = SpecSec(\"\", \"Example: Two Square Boxes\", 24)\n    S_2_13_2 = SpecSec(\"\", \"Example: Polarities and Apertures\", 26)\n    S_2_14 = SpecSec(\"2.14\", \"Conformance\", 30)\n    S_3 = SpecSec(\"3\", \"Syntax\", 31)\n    S_3_1 = SpecSec(\"3.1\", \"Character Set\", 31)\n    S_3_2 = SpecSec(\"3.2\", \"Grammar Syntax\", 31)\n    S_3_3 = SpecSec(\"3.3\", \"Commands\", 33)\n    S_3_4 = SpecSec(\"3.4\", \"Data Types\", 35)\n    S_3_4_1 = SpecSec(\"\", \"Integers\", 35)\n    S_3_4_2 = SpecSec(\"\", \"Decimals\", 35)\n    S_3_4_3 = SpecSec(\"\", \"Strings\", 35)\n    S_3_4_4 = SpecSec(\"\", \"Fields\", 36)\n    S_3_4_5 = SpecSec(\"\", \"Names\", 36)\n    S_3_5 = SpecSec(\"3.5\", \"Grammar of the Gerber Layer Format\", 37)\n    S_3_6 = SpecSec(\"3.6\", \"File Extension, MIME Type and UTI\", 43)\n    S_4 = SpecSec(\"4\", \"Graphics\", 44)\n    S_4_1 = SpecSec(\"4.1\", \"Comment (G04)\", 44)\n    S_4_2 = SpecSec(\"4.2\", \"Coordinate Commands\", 45)\n    S_4_2_1 = SpecSec(\"\", \"Unit (MO)\", 46)\n    S_4_2_2 = SpecSec(\"\", \"Format Specification (FS)\", 47)\n    S_4_3 = SpecSec(\"4.3\", \"Aperture Definition (AD)\", 48)\n    S_4_3_1 = SpecSec(\"\", \"AD Command\", 48)\n    S_4_3_2 = SpecSec(\"\", \"Zero-size Apertures\", 48)\n    S_4_3_3 = SpecSec(\"\", \"Examples\", 49)\n    S_4_4 = SpecSec(\"4.4\", \"Standard Aperture Templates\", 50)\n    S_4_4_1 = SpecSec(\"\", \"Overview\", 50)\n    S_4_4_2 = SpecSec(\"\", \"Circle\", 50)\n    S_4_4_3 = SpecSec(\"\", \"Rectangle\", 52)\n    S_4_4_4 = SpecSec(\"\", \"Obround\", 53)\n    S_4_4_5 = SpecSec(\"\", \"Polygon\", 54)\n    S_4_4_6 = SpecSec(\"\", \"Transparency of Holes\", 55)\n    S_4_5 = SpecSec(\"4.5\", \"Aperture Macro (AM)\", 56)\n    S_4_5_1 = SpecSec(\"\", \"Primitives\", 58)\n    S_4_5_2 = SpecSec(\"\", \"Exposure Parameter\", 67)\n    S_4_5_3 = SpecSec(\"\", \"Rotation Parameter\", 68)\n    S_4_5_4 = SpecSec(\"\", \"Macro Variables and Expressions\", 70)\n    S_4_5_5 = SpecSec(\"\", \"Examples\", 72)\n    S_4_6 = SpecSec(\"4.6\", \"Set Current Aperture (Dnn)\", 75)\n    S_4_7 = SpecSec(\"4.7\", \"Plot State Commands (G01,G02,G03,G75)\", 76)\n    S_4_7_1 = SpecSec(\"\", \"Linear Plotting (G01)\", 76)\n    S_4_7_2 = SpecSec(\"\", \"Circular Plotting (G02, G03, G75)\", 77)\n    S_4_8 = SpecSec(\"4.8\", \"Operations (D01/D02/D03)\", 81)\n    S_4_8_1 = SpecSec(\"\", \"Overview\", 81)\n    S_4_8_2 = SpecSec(\"\", \"Plot (D01)\", 83)\n    S_4_8_3 = SpecSec(\"\", \"Move (D02)\", 83)\n    S_4_8_4 = SpecSec(\"\", \"Flash (D03)\", 83)\n    S_4_8_5 = SpecSec(\"\", \"Example\", 84)\n    S_4_9 = SpecSec(\"4.9\", \"Aperture Transformations (LP, LM, LR, LS)\", 85)\n    S_4_9_1 = SpecSec(\"\", \"Overview\", 85)\n    S_4_9_2 = SpecSec(\"\", \"Load Polarity (LP)\", 87)\n    S_4_9_3 = SpecSec(\"\", \"Load Mirroring (LM)\", 87)\n    S_4_9_4 = SpecSec(\"\", \"Load Rotation (LR)\", 87)\n    S_4_9_5 = SpecSec(\"\", \"Load Scaling (LS)\", 88)\n    S_4_9_6 = SpecSec(\"\", \"Example\", 88)\n    S_4_10 = SpecSec(\"4.10\", \"Region Statement (G36/G37)\", 90)\n    S_4_10_1 = SpecSec(\"\", \"Region Overview\", 90)\n    S_4_10_2 = SpecSec(\"\", \"Region Statement Syntax\", 90)\n    S_4_10_3 = SpecSec(\"\", \"Valid Contours\", 91)\n    S_4_10_4 = SpecSec(\"\", \"Examples\", 93)\n    S_4_10_5 = SpecSec(\"\", \"Copper Pours, Power and Ground Planes\", 108)\n    S_4_11 = SpecSec(\"4.11\", \"Block Aperture (AB)\", 111)\n    S_4_11_1 = SpecSec(\"\", \"Overview of block apertures\", 111)\n    S_4_11_2 = SpecSec(\"\", \"AB Statement Syntax\", 111)\n    S_4_11_3 = SpecSec(\"\", \"Usage of Block Apertures\", 113)\n    S_4_11_4 = SpecSec(\"\", \"Example\", 114)\n    S_4_12 = SpecSec(\"4.12\", \"Step and Repeat (SR)\", 116)\n    S_4_13 = SpecSec(\"4.13\", \"End-of-file (M02)\", 119)\n    S_4_14 = SpecSec(\"4.14\", \"Numerical Accuracy\", 120)\n    S_4_14_1 = SpecSec(\"\", \"Visualization\", 120)\n    S_4_14_2 = SpecSec(\"\", \"Image Processing\", 120)\n    S_5 = SpecSec(\"5\", \"Attributes\", 122)\n    S_5_1 = SpecSec(\"5.1\", \"Attributes Overview\", 122)\n    S_5_2 = SpecSec(\"5.2\", \"File Attributes (TF)\", 124)\n    S_5_3 = SpecSec(\"5.3\", \"Aperture Attributes (TA)\", 124)\n    S_5_3_1 = SpecSec(\"\", \"Aperture Attributes on Regions\", 125)\n    S_5_4 = SpecSec(\"5.4\", \"Object Attributes (TO)\", 125)\n    S_5_5 = SpecSec(\"5.5\", \"Delete Attribute (TD)\", 126)\n    S_5_6 = SpecSec(\"5.6\", \"Standard Attributes\", 127)\n    S_5_6_1 = SpecSec(\"\", \"Overview\", 127)\n    S_5_6_2 = SpecSec(\"\", \".Part\", 129)\n    S_5_6_3 = SpecSec(\"\", \".FileFunction\", 130)\n    S_5_6_4 = SpecSec(\"\", \".FilePolarity\", 135)\n    S_5_6_5 = SpecSec(\"\", \".SameCoordinates\", 136)\n    S_5_6_6 = SpecSec(\"\", \".CreationDate\", 136)\n    S_5_6_7 = SpecSec(\"\", \".GenerationSoftware\", 137)\n    S_5_6_8 = SpecSec(\"\", \".ProjectId\", 137)\n    S_5_6_9 = SpecSec(\"\", \".MD5\", 138)\n    S_5_6_10 = SpecSec(\"\", \".AperFunction\", 139)\n    S_5_6_11 = SpecSec(\"\", \".DrillTolerance\", 147)\n    S_5_6_12 = SpecSec(\"\", \".FlashText\", 147)\n    S_5_6_13 = SpecSec(\"\", \".N (Net)\", 149)\n    S_5_6_14 = SpecSec(\"\", \".P (Pin)\", 151)\n    S_5_6_15 = SpecSec(\"\", \".C (Component Refdes)\", 152)\n    S_5_6_16 = SpecSec(\"\", \".Cxxx (Component Characteristics)\", 153)\n    S_5_7 = SpecSec(\"5.7\", \"Text in the Image\", 155)\n    S_5_8 = SpecSec(\"5.8\", \"Examples\", 156)\n    S_6 = SpecSec(\"6\", \"PCB Fabrication and Assembly Data\", 158)\n    S_6_1 = SpecSec(\"6.1\", \"Structure\", 158)\n    S_6_2 = SpecSec(\"6.2\", \"Mandatory Attributes\", 158)\n    S_6_3 = SpecSec(\"6.3\", \"Alignment\", 158)\n    S_6_4 = SpecSec(\"6.4\", \"Pads\", 158)\n    S_6_5 = SpecSec(\"6.5\", \"The Profile\", 158)\n    S_6_6 = SpecSec(\"6.6\", \"Drill/rout files\", 159)\n    S_6_6_1 = SpecSec(\"\", \"Backdrilling\", 159)\n    S_6_6_2 = SpecSec(\"\", \"Example Drill File\", 160)\n    S_6_7 = SpecSec(\"6.7\", \"Drawings and Data\", 163)\n    S_6_8 = SpecSec(\"6.8\", \"The CAD Netlist\", 164)\n    S_6_8_1 = SpecSec(\"\", \"Benefits of Including the CAD Netlist\", 164)\n    S_6_8_2 = SpecSec(\"\", \"IP Considerations\", 165)\n    S_6_9 = SpecSec(\"6.9\", \"PCB Assembly Data\", 166)\n    S_6_9_1 = SpecSec(\"\", \"Overview\", 166)\n    S_6_9_2 = SpecSec(\"\", \"Assembly Data Set\", 166)\n    S_6_9_3 = SpecSec(\"\", \"Annotated Example Component Layer\", 167)\n    S_7 = SpecSec(\"7\", \"Errors and Bad Practices\", 169)\n    S_7_1 = SpecSec(\"7.1\", \"Errors\", 169)\n    S_7_2 = SpecSec(\"7.2\", \"Bad Practices\", 171)\n    S_8 = SpecSec(\"8\", \"Deprecated Format Elements\", 173)\n    S_8_1 = SpecSec(\"8.1\", \"Deprecated Commands\", 173)\n    S_8_1_1 = SpecSec(\"\", \"Overview\", 173)\n    S_8_1_2 = SpecSec(\"\", \"Axis Select (AS)\", 175)\n    S_8_1_3 = SpecSec(\"\", \"Image Name (IN)\", 176)\n    S_8_1_4 = SpecSec(\"\", \"Image Polarity (IP)\", 177)\n    S_8_1_5 = SpecSec(\"\", \"Image Rotation (IR)\", 178)\n    S_8_1_6 = SpecSec(\"\", \"Load Name (LN)\", 179)\n    S_8_1_7 = SpecSec(\"\", \"Mirror Image (MI)\", 180)\n    S_8_1_8 = SpecSec(\"\", \"Offset (OF)\", 181)\n    S_8_1_9 = SpecSec(\"\", \"Scale Factor (SF)\", 182)\n    S_8_1_10 = SpecSec(\"\", \"Single-quadrant arc mode (G74)\", 183)\n    S_8_2 = SpecSec(\"8.2\", \"Deprecated Command Options\", 187)\n    S_8_2_1 = SpecSec(\"\", \"Format Specification (FS) Options\", 187)\n    S_8_2_2 = SpecSec(\"\", \"Rectangular Hole in Standard Apertures\", 188)\n    S_8_2_3 = SpecSec(\"\", \"Draws and Arcs with Rectangular Apertures\", 189)\n    S_8_2_4 = SpecSec(\"\", \"Macro Primitive Code 2, Vector Line\", 190)\n    S_8_2_5 = SpecSec(\"\", \"Macro Primitive Code 22, Lower Left Line\", 190)\n    S_8_2_6 = SpecSec(\"\", \"Macro Primitive Code 6, Moir\u00e9\", 191)\n    S_8_3 = SpecSec(\"8.3\", \"Deprecated Syntax Variations\", 192)\n    S_8_3_1 = SpecSec(\"\", \"Combining G01/G02/G03 and D01 in a single command.\", 192)\n    S_8_3_2 = SpecSec(\"\", \"Coordinate Data without Operation Code\", 192)\n    S_8_3_3 = SpecSec(\"\", \"Style Variations in Command Codes\", 192)\n    S_8_3_4 = SpecSec(\"\", \"Deprecated usage of SR\", 192)\n    S_8_4 = SpecSec(\"8.4\", \"Deprecated Attribute Values\", 193)\n    S_8_5 = SpecSec(\"8.5\", \"Standard Gerber (RS-274-D)\", 194)\n    S_9 = SpecSec(\"9\", \"References\", 195)\n    S_10 = SpecSec(\"10\", \"History\", 196)\n    S_11 = SpecSec(\"11\", \"Revisions\", 198)\n    S_11_1 = SpecSec(\"11.1\", \"Revision 2023.08\", 198)\n    S_11_2 = SpecSec(\"11.2\", \"Revision 2023.03\", 198)\n    S_11_3 = SpecSec(\"11.3\", \"Revision 2022.02\", 198)\n    S_11_4 = SpecSec(\"11.4\", \"Revision 2021.11\", 198)\n    S_11_5 = SpecSec(\"11.5\", \"Revision 2021.04\", 198)\n    S_11_6 = SpecSec(\"11.6\", \"Revision 2021.02 - Formal grammar\", 199)\n    S_11_7 = SpecSec(\"11.7\", \"Revision 2020.09 - X3\", 199)\n    S_11_8 = SpecSec(\"11.8\", \"Revision 2019.09\", 199)\n    S_11_9 = SpecSec(\"11.9\", \"Revision 2019.06\", 199)\n    S_11_10 = SpecSec(\"11.10\", \"Revision 2018.11\", 200)\n    S_11_11 = SpecSec(\"11.11\", \"Revision 2018.09\", 200)\n    S_11_12 = SpecSec(\"11.12\", \"Revision 2018.06\", 200)\n    S_11_13 = SpecSec(\"11.13\", \"Revision 2018.05\", 200)\n    S_11_14 = SpecSec(\"11.14\", \"Revision 2017.11\", 200)\n    S_11_15 = SpecSec(\"11.15\", \"Revision 2017.05\", 201)\n    S_11_16 = SpecSec(\"11.16\", \"Revision 2017.03\", 201)\n    S_11_17 = SpecSec(\"11.17\", \"Revision 2016.12 - Nested step and repeat\", 201)\n    S_11_18 = SpecSec(\"11.18\", \"Revision 2016.11\", 201)\n    S_11_19 = SpecSec(\"11.19\", \"Revision 2016.09\", 202)\n    S_11_20 = SpecSec(\"11.20\", \"Revision 2016.06\", 202)\n    S_11_21 = SpecSec(\"11.21\", \"Revision 2016.04\", 202)\n    S_11_22 = SpecSec(\"11.22\", \"Revision 2016.01\", 202)\n    S_11_23 = SpecSec(\"11.23\", \"Revision 2015.10\", 203)\n    S_11_24 = SpecSec(\"11.24\", \"Revision 2015.07\", 203)\n    S_11_25 = SpecSec(\"11.25\", \"Revision 2015.06\", 203)\n    S_11_26 = SpecSec(\"11.26\", \"Revision J3 (2014 10)\", 203)\n    S_11_27 = SpecSec(\"11.27\", \"Revision J4 (2015 02)\", 203)\n    S_11_28 = SpecSec(\"11.28\", \"Revision J2 (2014 07)\", 203)\n    S_11_29 = SpecSec(\"11.29\", \"Revision J1 (2014 02) - X2\", 204)\n    S_11_30 = SpecSec(\"11.30\", \"Revision I4 (2013 10)\", 204)\n    S_11_31 = SpecSec(\"11.31\", \"Revision I3 (2013 06)\", 204)\n    S_11_32 = SpecSec(\"11.32\", \"Revision I2 (2013 04)\", 204)\n    S_11_33 = SpecSec(\"11.33\", \"Revision I1 (2012 12)\", 204)\n\n    def get_url(self) -&gt; str:\n        \"\"\"Get url to this section.\"\"\"\n        return f\"{REVISION_2023_08_SOURCE_URL}page={self.value.page}\"\n\n    def get_sec_id(self) -&gt; str:\n        \"\"\"Get section id.\"\"\"\n        return self.value.sec_id or self.value.name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.Revision202308.get_url","title":"get_url","text":"<pre><code>get_url() -&gt; str\n</code></pre> <p>Get url to this section.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>def get_url(self) -&gt; str:\n    \"\"\"Get url to this section.\"\"\"\n    return f\"{REVISION_2023_08_SOURCE_URL}page={self.value.page}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/revisions.html#pygerber.gerberx3.revisions.Revision202308.get_sec_id","title":"get_sec_id","text":"<pre><code>get_sec_id() -&gt; str\n</code></pre> <p>Get section id.</p> Source code in <code>src/pygerber/gerberx3/revisions.py</code> <pre><code>def get_sec_id(self) -&gt; str:\n    \"\"\"Get section id.\"\"\"\n    return self.value.sec_id or self.value.name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html","title":"state_enums","text":""},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums","title":"state_enums","text":"<p>All state-defining enumerations.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.DrawMode","title":"DrawMode","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Drawing mode.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class DrawMode(GerberCodeEnum):\n    \"\"\"Drawing mode.\"\"\"\n\n    Linear = \"G01\"\n    \"\"\"In linear plot mode a D01 operation generates a linear segment, from the current\n    point to the (X, Y) coordinates in the command. The current point is then set to the\n    (X, Y) coordinates.Outside a region statement the segment is stroked with the\n    current aperture to create a draw graphical object. In a region statement the\n    segment is added to the contour under construction.\"\"\"\n\n    ClockwiseCircular = \"G02\"\n    \"\"\"In circular plot mode a D01 operation generates an arc segment, from the current\n    point to the (X, Y) coordinates in the command. The current point is then set to the\n    (X, Y) coordinates. Outside a region statement the segment is stroked with the\n    current aperture to create an arc graphical object. In a region statement the\n    segment is added to the contour under construction. For compatibility with older\n    versions of the Gerber format, a G75* must be issued before the first D01 in\n    circular mode.\"\"\"\n\n    CounterclockwiseCircular = \"G03\"\n    \"\"\"In circular plot mode a D01 operation generates an arc segment, from the current\n    point to the (X, Y) coordinates in the command. The current point is then set to the\n    (X, Y) coordinates. Outside a region statement the segment is stroked with the\n    current aperture to create an arc graphical object. In a region statement the\n    segment is added to the contour under construction. For compatibility with older\n    versions of the Gerber format, a G75* must be issued before the first D01 in\n    circular mode.\"\"\"\n\n    def to_human_readable(self) -&gt; str:\n        \"\"\"Convert to human friendly string.\"\"\"\n        return _to_what_draw_message[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.DrawMode.Linear","title":"Linear  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Linear = 'G01'\n</code></pre> <p>In linear plot mode a D01 operation generates a linear segment, from the current point to the (X, Y) coordinates in the command. The current point is then set to the (X, Y) coordinates.Outside a region statement the segment is stroked with the current aperture to create a draw graphical object. In a region statement the segment is added to the contour under construction.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.DrawMode.ClockwiseCircular","title":"ClockwiseCircular  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ClockwiseCircular = 'G02'\n</code></pre> <p>In circular plot mode a D01 operation generates an arc segment, from the current point to the (X, Y) coordinates in the command. The current point is then set to the (X, Y) coordinates. Outside a region statement the segment is stroked with the current aperture to create an arc graphical object. In a region statement the segment is added to the contour under construction. For compatibility with older versions of the Gerber format, a G75* must be issued before the first D01 in circular mode.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.DrawMode.CounterclockwiseCircular","title":"CounterclockwiseCircular  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CounterclockwiseCircular = 'G03'\n</code></pre> <p>In circular plot mode a D01 operation generates an arc segment, from the current point to the (X, Y) coordinates in the command. The current point is then set to the (X, Y) coordinates. Outside a region statement the segment is stroked with the current aperture to create an arc graphical object. In a region statement the segment is added to the contour under construction. For compatibility with older versions of the Gerber format, a G75* must be issued before the first D01 in circular mode.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.DrawMode.to_human_readable","title":"to_human_readable","text":"<pre><code>to_human_readable() -&gt; str\n</code></pre> <p>Convert to human friendly string.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>def to_human_readable(self) -&gt; str:\n    \"\"\"Convert to human friendly string.\"\"\"\n    return _to_what_draw_message[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Polarity","title":"Polarity","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Aperture polarity.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class Polarity(GerberCodeEnum):\n    \"\"\"Aperture polarity.\"\"\"\n\n    Clear = \"C\"\n    Dark = \"D\"\n    ClearRegion = \"ClearRegion\"\n    DarkRegion = \"DarkRegion\"\n    Background = \"Background\"\n    DEBUG = \"DBG\"\n    DEBUG2 = \"DBG2\"\n\n    def invert(self) -&gt; Polarity:\n        \"\"\"Return opposite polarity.\"\"\"\n        return _polarity_invert_map[self]\n\n    def to_region_variant(self) -&gt; Polarity:\n        \"\"\"Return region variant of polarity.\"\"\"\n        return _to_region_variant_map[self]\n\n    def get_2d_rasterized_color(self) -&gt; int:\n        \"\"\"Get color for \"1\" mode image.\"\"\"\n        return _2d_rasterized_color_map[self]\n\n    def is_solid(self) -&gt; bool:\n        \"\"\"Check if polarity represents solid surface.\"\"\"\n        return _is_solid_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Polarity.invert","title":"invert","text":"<pre><code>invert() -&gt; Polarity\n</code></pre> <p>Return opposite polarity.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>def invert(self) -&gt; Polarity:\n    \"\"\"Return opposite polarity.\"\"\"\n    return _polarity_invert_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Polarity.to_region_variant","title":"to_region_variant","text":"<pre><code>to_region_variant() -&gt; Polarity\n</code></pre> <p>Return region variant of polarity.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>def to_region_variant(self) -&gt; Polarity:\n    \"\"\"Return region variant of polarity.\"\"\"\n    return _to_region_variant_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Polarity.get_2d_rasterized_color","title":"get_2d_rasterized_color","text":"<pre><code>get_2d_rasterized_color() -&gt; int\n</code></pre> <p>Get color for \"1\" mode image.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>def get_2d_rasterized_color(self) -&gt; int:\n    \"\"\"Get color for \"1\" mode image.\"\"\"\n    return _2d_rasterized_color_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Polarity.is_solid","title":"is_solid","text":"<pre><code>is_solid() -&gt; bool\n</code></pre> <p>Check if polarity represents solid surface.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>def is_solid(self) -&gt; bool:\n    \"\"\"Check if polarity represents solid surface.\"\"\"\n    return _is_solid_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Mirroring","title":"Mirroring","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Aperture mirroring.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class Mirroring(GerberCodeEnum):\n    \"\"\"Aperture mirroring.\"\"\"\n\n    NoMirroring = \"N\"\n    XY = \"XY\"\n    X = \"X\"\n    Y = \"Y\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.Unit","title":"Unit","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Aperture unit.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class Unit(GerberCodeEnum):\n    \"\"\"Aperture unit.\"\"\"\n\n    Millimeters = \"MM\"\n    Inches = \"IN\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.ImagePolarityEnum","title":"ImagePolarityEnum","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Image polarity.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.ImagePolarityEnum--image-polarity-ip","title":"Image Polarity (IP)","text":"<p>Note: The IP command is deprecated.</p> <p>The <code>IP</code> command is responsible for setting the polarity for the entire image. It is designed to be used only once, preferably at the very beginning of the file.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.ImagePolarityEnum--7131-positive-image-polarity","title":"7.1.3.1 Positive Image Polarity","text":"<p>Under the positive image polarity: - The image is generated in accordance with the specifications provided elsewhere in     this document. - It's worth noting that, by default, image generation has always assumed a positive     image polarity.</p>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.ImagePolarityEnum--7132-negative-image-polarity","title":"7.1.3.2 Negative Image Polarity","text":"<p>When the negative image polarity is in use: - The intent is to produce an image that portrays clear areas against a dark     backdrop. - The initial state of the entire image plane is dark, as opposed to being clear. - The polarity effects between dark and clear regions are interchanged. Essentially,     what was dark becomes white and vice-versa. - For negative image polarity, the very first graphics object that gets produced     must possess a dark polarity. As a result, it takes on the role of clearing the     dark backdrop.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class ImagePolarityEnum(GerberCodeEnum):\n    \"\"\"Image polarity.\n\n    ### Image Polarity (IP)\n\n    Note: The IP command is deprecated.\n\n    The `IP` command is responsible for setting the polarity for the entire image. It is\n    designed to be used only once, preferably at the very beginning of the file.\n\n    #### 7.1.3.1 Positive Image Polarity\n    Under the positive image polarity:\n    - The image is generated in accordance with the specifications provided elsewhere in\n        this document.\n    - It's worth noting that, by default, image generation has always assumed a positive\n        image polarity.\n\n    #### 7.1.3.2 Negative Image Polarity\n    When the negative image polarity is in use:\n    - The intent is to produce an image that portrays clear areas against a dark\n        backdrop.\n    - The initial state of the entire image plane is dark, as opposed to being clear.\n    - The polarity effects between dark and clear regions are interchanged. Essentially,\n        what was dark becomes white and vice-versa.\n    - For negative image polarity, the very first graphics object that gets produced\n        must possess a dark polarity. As a result, it takes on the role of clearing the\n        dark backdrop.\n    \"\"\"\n\n    POSITIVE = \"POS\"\n    NEGATIVE = \"NEG\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/state_enums.html#pygerber.gerberx3.state_enums.AxisCorrespondence","title":"AxisCorrespondence","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Possible values of AS command axis correspondence.</p> Source code in <code>src/pygerber/gerberx3/state_enums.py</code> <pre><code>class AxisCorrespondence(GerberCodeEnum):\n    \"\"\"Possible values of AS command axis correspondence.\"\"\"\n\n    AXBY = \"AXBY\"\n    AYBX = \"AYBX\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api","title":"api","text":"<p><code>pygerber.gerberx3.api</code> module provides simple, high-level API for rendering Gerber X3/X2 files.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme","title":"ColorScheme","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Set of colors which should be used for rendering.</p> <p>ColorScheme class contains set of colors which should be used for different parts of rendered image. At the same time it also works as a container for predefined color schemes commonly used for parts of PCB.</p> <p>Predefined colors</p> <p>All predefined colors have two variants - normal one and one with \"*_ALPHA\" suffix. Those without suffix have solid background and are not intended for constructing multi-layer images out of them ie. they are not suitable for rendering a project consisting of separate copper, silk, pase mask and composing them into single image. For cases when rendered images are intended for stacking \"*_ALPHA\" schemes should be used, as background and transparent parts of image will be truly transparent.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>class ColorScheme(FrozenGeneralModel):\n    r\"\"\"Set of colors which should be used for rendering.\n\n    ColorScheme class contains set of colors which should be used for different parts\n    of rendered image. At the same time it also works as a container for predefined\n    color schemes commonly used for parts of PCB.\n\n    !!! info \"Predefined colors\"\n\n        All predefined colors have two variants - normal one and one with \"\\*_ALPHA\"\n        suffix. Those without suffix have solid background and are not intended for\n        constructing multi-layer images out of them ie. they are not suitable for\n        rendering a project consisting of separate copper, silk, pase mask and composing\n        them into single image. For cases when rendered images are intended for stacking\n        \"\\*_ALPHA\" schemes should be used, as background and transparent parts of image\n        will be truly transparent.\n\n    \"\"\"\n\n    SILK: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SILK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    COPPER: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    COPPER_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    PASTE_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    PASTE_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    SOLDER_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SOLDER_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    DEFAULT_GRAYSCALE: ClassVar[ColorScheme]\n    \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n    DEBUG_1: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme.\"\"\"\n\n    DEBUG_1_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme with alpha channel.\"\"\"\n\n    background_color: RGBA\n    \"\"\"Color used as empty image background.\"\"\"\n\n    clear_color: RGBA\n    \"\"\"Color used for clear draws.\"\"\"\n\n    solid_color: RGBA\n    \"\"\"Color used for solid draws.\"\"\"\n\n    clear_region_color: RGBA\n    \"\"\"Color used for clear region draws.\"\"\"\n\n    solid_region_color: RGBA\n    \"\"\"Color used for solid region draws.\"\"\"\n\n    debug_1_color: RGBA = RGBA.from_hex(\"#ababab\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    debug_2_color: RGBA = RGBA.from_hex(\"#7d7d7d\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n        \"\"\"Return grayscale to RGBA color map.\"\"\"\n        return {\n            Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n            Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n            Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n            Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n            Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n        }\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: ColorScheme\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: ColorScheme\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: ColorScheme\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: ColorScheme\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: ColorScheme\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: ColorScheme\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: ColorScheme\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: ColorScheme\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: ColorScheme\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: RGBA\n</code></pre> <p>Color used as empty image background.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.clear_color","title":"clear_color  <code>instance-attribute</code>","text":"<pre><code>clear_color: RGBA\n</code></pre> <p>Color used for clear draws.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.solid_color","title":"solid_color  <code>instance-attribute</code>","text":"<pre><code>solid_color: RGBA\n</code></pre> <p>Color used for solid draws.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.clear_region_color","title":"clear_region_color  <code>instance-attribute</code>","text":"<pre><code>clear_region_color: RGBA\n</code></pre> <p>Color used for clear region draws.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.solid_region_color","title":"solid_region_color  <code>instance-attribute</code>","text":"<pre><code>solid_region_color: RGBA\n</code></pre> <p>Color used for solid region draws.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.debug_1_color","title":"debug_1_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_1_color: RGBA = from_hex('#ababab')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.debug_2_color","title":"debug_2_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_2_color: RGBA = from_hex('#7d7d7d')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.ColorScheme.get_grayscale_to_rgba_color_map","title":"get_grayscale_to_rgba_color_map","text":"<pre><code>get_grayscale_to_rgba_color_map() -&gt; (\n    dict[int, tuple[int, int, int, int]]\n)\n</code></pre> <p>Return grayscale to RGBA color map.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n    \"\"\"Return grayscale to RGBA color map.\"\"\"\n    return {\n        Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n        Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n        Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n        Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n        Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n    }\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA","title":"RGBA","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Representation of RGBA color.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>class RGBA(FrozenGeneralModel):\n    \"\"\"Representation of RGBA color.\"\"\"\n\n    r: Color = ColorField\n    g: Color = ColorField\n    b: Color = ColorField\n    a: Color = ColorField\n\n    @classmethod\n    def from_hex(cls, string: str) -&gt; Self:\n        \"\"\"Build RGBA color object from hexadecimal string.\n\n        Parameters\n        ----------\n        string : str\n            String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n            For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n            `#` symbol prefix for hex string is accepted.\n\n        Returns\n        -------\n        RGBA\n            Color built from hexadecimal values.\n\n        \"\"\"\n        if string[0] == \"#\":\n            string = string[1:]\n\n        r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n        if len(a) == 0:\n            a = \"FF\"\n\n        return cls(\n            r=int(r, base=16),\n            g=int(g, base=16),\n            b=int(b, base=16),\n            a=int(a, base=16),\n        )\n\n    @classmethod\n    def from_rgba(cls, r: int, g: int, b: int, a: int = 0xFF) -&gt; Self:\n        \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n        Parameters\n        ----------\n        r : int\n            Red chanel value as integer from 0 to 255, inclusive.\n        g : int\n            Green chanel value as integer from 0 to 255, inclusive.\n        b : int\n            Blue chanel value as integer from 0 to 255, inclusive.\n        a : int, optional\n            Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n        Returns\n        -------\n        Self\n            Color built from r, g, b, a values.\n\n        \"\"\"\n        return cls(r=r, g=g, b=b, a=a)\n\n    @classmethod\n    def from_hsv(\n        cls,\n        h: int,\n        s: float,\n        v: float,\n        a: int = 255,\n    ) -&gt; Self:\n        \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n        For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n        Parameters\n        ----------\n        h : int\n            Hue of color, integer in range 0 to 360 inclusive.\n        s : float\n            Saturation of color, float in range 0.0 to 100.0 inclusive.\n        v : float\n            Value of color, float in range 0.0 to 100.0 inclusive.\n        a : int\n            Alpha of color, int in range 0 to 255 inclusive.\n\n        Returns\n        -------\n        Self\n            Color built from h, s, v, a values.\n\n        \"\"\"\n        h %= 360\n        s /= 100\n        v /= 100\n\n        c = v * s\n        x = c * (1 - abs(((h / 60) % 2) - 1))\n        m = v - c\n\n        if 0 &lt;= h &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, x, 0.0\n        elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, c, 0.0\n        elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, c, x\n        elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, x, c\n        elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, 0.0, c\n        elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= h &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, 0.0, x\n        else:\n            raise ValueError(h)\n\n        return cls(\n            r=round((r_ + m) * 255),\n            g=round((g_ + m) * 255),\n            b=round((b_ + m) * 255),\n            a=a,\n        )\n\n    def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n        \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.r, self.g, self.b, self.a\n\n    def as_rgb_int(self) -&gt; tuple[int, int, int]:\n        \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.r, self.g, self.b\n\n    def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n        \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n        return (\n            float(Decimal(self.r) / Decimal(255)),\n            float(Decimal(self.g) / Decimal(255)),\n            float(Decimal(self.b) / Decimal(255)),\n            float(Decimal(self.a) / Decimal(255)),\n        )\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Return color as hexadecimal string.\n\n        Eg. `#FF0000FF` for red color.\n        \"\"\"\n        r = f\"{self.r:0{2}x}\"\n        g = f\"{self.g:0{2}x}\"\n        b = f\"{self.b:0{2}x}\"\n        a = f\"{self.a:0{2}x}\"\n        return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> required <p>Returns:</p> Type Description <code>RGBA</code> <p>Color built from hexadecimal values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_hex(cls, string: str) -&gt; Self:\n    \"\"\"Build RGBA color object from hexadecimal string.\n\n    Parameters\n    ----------\n    string : str\n        String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n        For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n        `#` symbol prefix for hex string is accepted.\n\n    Returns\n    -------\n    RGBA\n        Color built from hexadecimal values.\n\n    \"\"\"\n    if string[0] == \"#\":\n        string = string[1:]\n\n    r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n    if len(a) == 0:\n        a = \"FF\"\n\n    return cls(\n        r=int(r, base=16),\n        g=int(g, base=16),\n        b=int(b, base=16),\n        a=int(a, base=16),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(r: int, g: int, b: int, a: int = 255) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> Name Type Description Default <code>r</code> <code>int</code> <p>Red chanel value as integer from 0 to 255, inclusive.</p> required <code>g</code> <code>int</code> <p>Green chanel value as integer from 0 to 255, inclusive.</p> required <code>b</code> <code>int</code> <p>Blue chanel value as integer from 0 to 255, inclusive.</p> required <code>a</code> <code>int</code> <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from r, g, b, a values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_rgba(cls, r: int, g: int, b: int, a: int = 0xFF) -&gt; Self:\n    \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n    Parameters\n    ----------\n    r : int\n        Red chanel value as integer from 0 to 255, inclusive.\n    g : int\n        Green chanel value as integer from 0 to 255, inclusive.\n    b : int\n        Blue chanel value as integer from 0 to 255, inclusive.\n    a : int, optional\n        Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n    Returns\n    -------\n    Self\n        Color built from r, g, b, a values.\n\n    \"\"\"\n    return cls(r=r, g=g, b=b, a=a)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(h: int, s: float, v: float, a: int = 255) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>int</code> <p>Hue of color, integer in range 0 to 360 inclusive.</p> required <code>s</code> <code>float</code> <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> required <code>v</code> <code>float</code> <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> required <code>a</code> <code>int</code> <p>Alpha of color, int in range 0 to 255 inclusive.</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from h, s, v, a values.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>@classmethod\ndef from_hsv(\n    cls,\n    h: int,\n    s: float,\n    v: float,\n    a: int = 255,\n) -&gt; Self:\n    \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n    For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n    Parameters\n    ----------\n    h : int\n        Hue of color, integer in range 0 to 360 inclusive.\n    s : float\n        Saturation of color, float in range 0.0 to 100.0 inclusive.\n    v : float\n        Value of color, float in range 0.0 to 100.0 inclusive.\n    a : int\n        Alpha of color, int in range 0 to 255 inclusive.\n\n    Returns\n    -------\n    Self\n        Color built from h, s, v, a values.\n\n    \"\"\"\n    h %= 360\n    s /= 100\n    v /= 100\n\n    c = v * s\n    x = c * (1 - abs(((h / 60) % 2) - 1))\n    m = v - c\n\n    if 0 &lt;= h &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, x, 0.0\n    elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, c, 0.0\n    elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, c, x\n    elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, x, c\n    elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= h &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, 0.0, c\n    elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= h &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, 0.0, x\n    else:\n        raise ValueError(h)\n\n    return cls(\n        r=round((r_ + m) * 255),\n        g=round((g_ + m) * 255),\n        b=round((b_ + m) * 255),\n        a=a,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n    \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.r, self.g, self.b, self.a\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgb_int(self) -&gt; tuple[int, int, int]:\n    \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.r, self.g, self.b\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n    \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n    return (\n        float(Decimal(self.r) / Decimal(255)),\n        float(Decimal(self.g) / Decimal(255)),\n        float(Decimal(self.b) / Decimal(255)),\n        float(Decimal(self.a) / Decimal(255)),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RGBA.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p> Source code in <code>src/pygerber/common/rgba.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Return color as hexadecimal string.\n\n    Eg. `#FF0000FF` for red color.\n    \"\"\"\n    r = f\"{self.r:0{2}x}\"\n    g = f\"{self.g:0{2}x}\"\n    b = f\"{self.b:0{2}x}\"\n    a = f\"{self.a:0{2}x}\"\n    return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.GerberX3APIError","title":"GerberX3APIError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for API errors.</p> <p>Exceptions derived from this exception are exclusively raised in PyGerber's Gerber X3 high level API. This exception can be used in <code>try: ... except GerberX3APIError: ...</code> block to catch all exceptions raised by this API while allowing other exceptions to interrupt execution.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class GerberX3APIError(Exception):\n    \"\"\"Base class for API errors.\n\n    Exceptions derived from this exception are exclusively raised in PyGerber's Gerber\n    X3 high level API. This exception can be used in\n    `#!python try: ... except GerberX3APIError: ...` block to catch all exceptions\n    raised by this API while allowing other exceptions to interrupt execution.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.MutuallyExclusiveViolationError","title":"MutuallyExclusiveViolationError","text":"<p>             Bases: <code>GerberX3APIError</code></p> <p>Raised when two or more of mutually exclusive parameters are provided.</p> <p><code>LayerParams</code> class accepts three mutually exclusive fields, <code>source_path</code>, <code>source_code</code> and <code>source_buffer</code> for providing source code to <code>Layer</code>. When more than one of those options is set, this exception will be raised.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class MutuallyExclusiveViolationError(GerberX3APIError):\n    \"\"\"Raised when two or more of mutually exclusive parameters are provided.\n\n    `LayerParams` class accepts three mutually exclusive fields, `source_path`,\n    `source_code` and `source_buffer` for providing source code to `Layer`.\n    When more than one of those options is set, this exception will be raised.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/__init__.html#pygerber.gerberx3.api.RenderingResultNotReadyError","title":"RenderingResultNotReadyError","text":"<p>             Bases: <code>GerberX3APIError</code></p> <p>Raised when RenderingResult is requested before it was rendered.</p> <p><code>Layer.get_rendering_result()</code> method can only be called after <code>Layer.render()</code>. Breaking this rule will cause this exception to be raised.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class RenderingResultNotReadyError(GerberX3APIError):\n    \"\"\"Raised when RenderingResult is requested before it was rendered.\n\n    `Layer.get_rendering_result()` method can only be called after `Layer.render()`.\n    Breaking this rule will cause this exception to be raised.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_errors.html","title":"_errors","text":""},{"location":"reference/pygerber/gerberx3/api/_errors.html#pygerber.gerberx3.api._errors","title":"_errors","text":"<p>Errors which may be called by API layer.</p>"},{"location":"reference/pygerber/gerberx3/api/_errors.html#pygerber.gerberx3.api._errors.GerberX3APIError","title":"GerberX3APIError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for API errors.</p> <p>Exceptions derived from this exception are exclusively raised in PyGerber's Gerber X3 high level API. This exception can be used in <code>try: ... except GerberX3APIError: ...</code> block to catch all exceptions raised by this API while allowing other exceptions to interrupt execution.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class GerberX3APIError(Exception):\n    \"\"\"Base class for API errors.\n\n    Exceptions derived from this exception are exclusively raised in PyGerber's Gerber\n    X3 high level API. This exception can be used in\n    `#!python try: ... except GerberX3APIError: ...` block to catch all exceptions\n    raised by this API while allowing other exceptions to interrupt execution.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_errors.html#pygerber.gerberx3.api._errors.RenderingResultNotReadyError","title":"RenderingResultNotReadyError","text":"<p>             Bases: <code>GerberX3APIError</code></p> <p>Raised when RenderingResult is requested before it was rendered.</p> <p><code>Layer.get_rendering_result()</code> method can only be called after <code>Layer.render()</code>. Breaking this rule will cause this exception to be raised.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class RenderingResultNotReadyError(GerberX3APIError):\n    \"\"\"Raised when RenderingResult is requested before it was rendered.\n\n    `Layer.get_rendering_result()` method can only be called after `Layer.render()`.\n    Breaking this rule will cause this exception to be raised.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_errors.html#pygerber.gerberx3.api._errors.MutuallyExclusiveViolationError","title":"MutuallyExclusiveViolationError","text":"<p>             Bases: <code>GerberX3APIError</code></p> <p>Raised when two or more of mutually exclusive parameters are provided.</p> <p><code>LayerParams</code> class accepts three mutually exclusive fields, <code>source_path</code>, <code>source_code</code> and <code>source_buffer</code> for providing source code to <code>Layer</code>. When more than one of those options is set, this exception will be raised.</p> Source code in <code>src/pygerber/gerberx3/api/_errors.py</code> <pre><code>class MutuallyExclusiveViolationError(GerberX3APIError):\n    \"\"\"Raised when two or more of mutually exclusive parameters are provided.\n\n    `LayerParams` class accepts three mutually exclusive fields, `source_path`,\n    `source_code` and `source_buffer` for providing source code to `Layer`.\n    When more than one of those options is set, this exception will be raised.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html","title":"_v2","text":""},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2","title":"_v2","text":"<p>Module contains implementation details of GerberX3 high level interface of API v2.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.OnParserErrorEnum","title":"OnParserErrorEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible actions to take on parser error.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass OnParserErrorEnum(Enum):\n    \"\"\"Enumeration of possible actions to take on parser error.\"\"\"\n\n    Ignore = \"ignore\"\n    \"\"\"Ignore parser errors. Errors which occurred will not be signaled. May yield\n    unexpected results for broken files, with missing draw commands or even more\n    significant errors.\"\"\"\n\n    Warn = \"warn\"\n    \"\"\"Warn on parser error. Parser will log warning message about what went wrong.\n    Best for supporting wide range of files without silently ignoring errors in code.\"\"\"\n\n    Raise = \"raise\"\n    \"\"\"Raise exception whenever parser encounters error. Will completely break out of\n    parsing process, making it impossible to render slightly malformed files.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.OnParserErrorEnum.Ignore","title":"Ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ignore = 'ignore'\n</code></pre> <p>Ignore parser errors. Errors which occurred will not be signaled. May yield unexpected results for broken files, with missing draw commands or even more significant errors.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.OnParserErrorEnum.Warn","title":"Warn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warn = 'warn'\n</code></pre> <p>Warn on parser error. Parser will log warning message about what went wrong. Best for supporting wide range of files without silently ignoring errors in code.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.OnParserErrorEnum.Raise","title":"Raise  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Raise = 'raise'\n</code></pre> <p>Raise exception whenever parser encounters error. Will completely break out of parsing process, making it impossible to render slightly malformed files.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.FileTypeEnum","title":"FileTypeEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible Gerber file types.</p> <p>If file type is not listed here you can request adding it by creating an issue on https://github.com/Argmaster/pygerber/issues</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass FileTypeEnum(Enum):\n    \"\"\"Enumeration of possible Gerber file types.\n\n    If file type is not listed here you can request adding it by creating an issue on\n    https://github.com/Argmaster/pygerber/issues\n    \"\"\"\n\n    COPPER = \"COPPER\"\n    MASK = \"MASK\"\n    PASTE = \"PASTE\"\n    SILK = \"SILK\"\n    EDGE = \"EDGE\"\n\n    PLATED = \"PLATED\"\n    NON_PLATED = \"NON_PLATED\"\n    PROFILE = \"PROFILE\"\n    SOLDERMASK = \"SOLDERMASK\"\n    LEGEND = \"LEGEND\"\n    COMPONENT = \"COMPONENT\"\n    GLUE = \"GLUE\"\n    CARBONMASK = \"CARBONMASK\"\n    GOLDMASK = \"GOLDMASK\"\n    HEATSINKMASK = \"HEATSINKMASK\"\n    PEELABLEMASK = \"PEELABLEMASK\"\n    SILVERMASK = \"SILVERMASK\"\n    TINMASK = \"TINMASK\"\n    DEPTHROUT = \"DEPTHROUT\"\n    VCUT = \"VCUT\"\n    VIAFILL = \"VIAFILL\"\n    PADS = \"PADS\"\n\n    OTHER = \"OTHER\"\n    UNDEFINED = \"UNDEFINED\"\n\n    INFER_FROM_EXTENSION = \"INFER_FROM_EXTENSION\"\n    INFER_FROM_ATTRIBUTES = \"INFER_FROM_ATTRIBUTES\"\n    INFER = \"INFER\"\n\n    @classmethod\n    def infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n        \"\"\"Infer file type from file extension.\"\"\"\n        if file_function is None:\n            return cls.UNDEFINED\n\n        function, *_ = file_function.split(\",\")\n        function = function.upper()\n\n        try:\n            return FileTypeEnum(function)\n        except (ValueError, TypeError, KeyError):\n            return cls.UNDEFINED\n\n    @classmethod\n    def infer_from_extension(cls, extension: str) -&gt; FileTypeEnum:\n        if re.match(r\"\\.g[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gp[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gm[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        return GERBER_EXTENSION_TO_FILE_TYPE_MAPPING.get(\n            extension.lower(), FileTypeEnum.UNDEFINED\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.FileTypeEnum.infer_from_attributes","title":"infer_from_attributes  <code>classmethod</code>","text":"<pre><code>infer_from_attributes(\n    file_function: Optional[str] = None,\n) -&gt; FileTypeEnum\n</code></pre> <p>Infer file type from file extension.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n    \"\"\"Infer file type from file extension.\"\"\"\n    if file_function is None:\n        return cls.UNDEFINED\n\n    function, *_ = file_function.split(\",\")\n    function = function.upper()\n\n    try:\n        return FileTypeEnum(function)\n    except (ValueError, TypeError, KeyError):\n        return cls.UNDEFINED\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFile","title":"GerberFile  <code>dataclass</code>","text":"<p>Generic representation of Gerber file.</p> <p>This objects provides interface for loading and parsing Gerber files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFile:\n    \"\"\"Generic representation of Gerber file.\n\n    This objects provides interface for loading and parsing Gerber files.\n    \"\"\"\n\n    source_code: str\n    file_type: FileTypeEnum\n\n    @classmethod\n    def from_file(\n        cls,\n        file_path: str | Path,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n        file_path = Path(file_path)\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n        if file_type == FileTypeEnum.INFER:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n            if file_type == FileTypeEnum.UNDEFINED:\n                file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n        return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n\n    @classmethod\n    def from_str(\n        cls,\n        source_code: str,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from string.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(source_code, file_type)\n\n    @classmethod\n    def from_buffer(\n        cls,\n        buffer: TextIO,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(buffer.read(), file_type)\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedFile:\n        \"\"\"Parse Gerber file.\"\"\"\n        tokens = Tokenizer().tokenize(self.source_code)\n        parser = Parser2(\n            Parser2Options(\n                on_update_drawing_state_error=Parser2OnErrorAction(\n                    on_parser_error.value,\n                ),\n            ),\n        )\n        command_buffer = parser.parse(tokens)\n\n        if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n            file_type = FileTypeEnum.infer_from_attributes(\n                parser.context.file_attributes.get(\".FileFunction\", None)\n            )\n        else:\n            file_type = self.file_type\n\n        return ParsedFile(\n            GerberFileInfo.from_readonly_command_buffer(command_buffer),\n            command_buffer,\n            file_type,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code loaded from file on disk.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_file(\n    cls,\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n    file_path = Path(file_path)\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n    if file_type == FileTypeEnum.INFER:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n        if file_type == FileTypeEnum.UNDEFINED:\n            file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n    return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFile.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from string.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_str(\n    cls,\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from string.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(source_code, file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFile.from_buffer","title":"from_buffer  <code>classmethod</code>","text":"<pre><code>from_buffer(\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from readable buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_buffer(\n    cls,\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(buffer.read(), file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFile.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedFile\n</code></pre> <p>Parse Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedFile:\n    \"\"\"Parse Gerber file.\"\"\"\n    tokens = Tokenizer().tokenize(self.source_code)\n    parser = Parser2(\n        Parser2Options(\n            on_update_drawing_state_error=Parser2OnErrorAction(\n                on_parser_error.value,\n            ),\n        ),\n    )\n    command_buffer = parser.parse(tokens)\n\n    if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n        file_type = FileTypeEnum.infer_from_attributes(\n            parser.context.file_attributes.get(\".FileFunction\", None)\n        )\n    else:\n        file_type = self.file_type\n\n    return ParsedFile(\n        GerberFileInfo.from_readonly_command_buffer(command_buffer),\n        command_buffer,\n        file_type,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ImageFormatEnum","title":"ImageFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported raster image formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ImageFormatEnum(Enum):\n    \"\"\"List of officially supported raster image formats.\"\"\"\n\n    PNG = \"png\"\n    JPEG = \"jpg\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.PixelFormatEnum","title":"PixelFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported pixel formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class PixelFormatEnum(Enum):\n    \"\"\"List of officially supported pixel formats.\"\"\"\n\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedFile","title":"ParsedFile  <code>dataclass</code>","text":"<p>Wrapper around parsed Gerber file.</p> <p>This objects allow actions like rendering and retrieving information about file contents.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass ParsedFile:\n    \"\"\"Wrapper around parsed Gerber file.\n\n    This objects allow actions like rendering and retrieving information about file\n    contents.\n    \"\"\"\n\n    _info: GerberFileInfo\n    _command_buffer: ReadonlyCommandBuffer2\n    _file_type: FileTypeEnum\n\n    def get_info(self) -&gt; GerberFileInfo:\n        \"\"\"Get information about Gerber file.\"\"\"\n        return self._info\n\n    def get_file_type(self) -&gt; FileTypeEnum:\n        \"\"\"Get type of Gerber file.\"\"\"\n        return self._file_type\n\n    def render_svg(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        scale: float = 1.0,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to SVG format.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        scale : float, optional\n            Scale of image, can be used to scale very large or very small images, by\n            default 1.0\n\n        \"\"\"\n        output = SvgRenderer2(\n            SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n        ).render(self._command_buffer)\n        output.save_to(destination)\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n        quality: int = 85,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to raster image.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n        quality: int, optional\n            Image quality for JPEG format, by default 85.\n\n        \"\"\"\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n        ).render(self._command_buffer)\n        output.save_to(\n            destination,\n            RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n                quality=quality,\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedFile.get_info","title":"get_info","text":"<pre><code>get_info() -&gt; GerberFileInfo\n</code></pre> <p>Get information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_info(self) -&gt; GerberFileInfo:\n    \"\"\"Get information about Gerber file.\"\"\"\n    return self._info\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedFile.get_file_type","title":"get_file_type","text":"<pre><code>get_file_type() -&gt; FileTypeEnum\n</code></pre> <p>Get type of Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_file_type(self) -&gt; FileTypeEnum:\n    \"\"\"Get type of Gerber file.\"\"\"\n    return self._file_type\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedFile.render_svg","title":"render_svg","text":"<pre><code>render_svg(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0\n) -&gt; None\n</code></pre> <p>Render Gerber file to SVG format.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>scale</code> <code>float</code> <p>Scale of image, can be used to scale very large or very small images, by default 1.0</p> <code>1.0</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_svg(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0,\n) -&gt; None:\n    \"\"\"Render Gerber file to SVG format.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    scale : float, optional\n        Scale of image, can be used to scale very large or very small images, by\n        default 1.0\n\n    \"\"\"\n    output = SvgRenderer2(\n        SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n    ).render(self._command_buffer)\n    output.save_to(destination)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedFile.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85\n) -&gt; None\n</code></pre> <p>Render Gerber file to raster image.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> <code>quality</code> <code>int</code> <p>Image quality for JPEG format, by default 85.</p> <code>85</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85,\n) -&gt; None:\n    \"\"\"Render Gerber file to raster image.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n    quality: int, optional\n        Image quality for JPEG format, by default 85.\n\n    \"\"\"\n    output = RasterRenderer2(\n        RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n    ).render(self._command_buffer)\n    output.save_to(\n        destination,\n        RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n            quality=quality,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo","title":"GerberFileInfo  <code>dataclass</code>","text":"<p>Container for information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFileInfo:\n    \"\"\"Container for information about Gerber file.\"\"\"\n\n    min_x_mm: Decimal\n    \"\"\"Minimum X coordinate in file in millimeters.\"\"\"\n    min_y_mm: Decimal\n    \"\"\"Minimum Y coordinate in file in millimeters.\"\"\"\n    max_x_mm: Decimal\n    \"\"\"Maximum X coordinate in file in millimeters.\"\"\"\n    max_y_mm: Decimal\n    \"\"\"Maximum T coordinate in file in millimeters.\"\"\"\n\n    width_mm: Decimal\n    \"\"\"Width of image in millimeters.\"\"\"\n    height_mm: Decimal\n    \"\"\"Height of image in millimeters.\"\"\"\n\n    @classmethod\n    def from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n        \"\"\"Initialize object with information from command buffer.\"\"\"\n        bbox = buffer.get_bounding_box()\n        return cls(\n            bbox.min_x.as_millimeters(),\n            bbox.min_y.as_millimeters(),\n            bbox.max_x.as_millimeters(),\n            bbox.max_y.as_millimeters(),\n            bbox.width.as_millimeters(),\n            bbox.height.as_millimeters(),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.min_x_mm","title":"min_x_mm  <code>instance-attribute</code>","text":"<pre><code>min_x_mm: Decimal\n</code></pre> <p>Minimum X coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.min_y_mm","title":"min_y_mm  <code>instance-attribute</code>","text":"<pre><code>min_y_mm: Decimal\n</code></pre> <p>Minimum Y coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.max_x_mm","title":"max_x_mm  <code>instance-attribute</code>","text":"<pre><code>max_x_mm: Decimal\n</code></pre> <p>Maximum X coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.max_y_mm","title":"max_y_mm  <code>instance-attribute</code>","text":"<pre><code>max_y_mm: Decimal\n</code></pre> <p>Maximum T coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.width_mm","title":"width_mm  <code>instance-attribute</code>","text":"<pre><code>width_mm: Decimal\n</code></pre> <p>Width of image in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.height_mm","title":"height_mm  <code>instance-attribute</code>","text":"<pre><code>height_mm: Decimal\n</code></pre> <p>Height of image in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.GerberFileInfo.from_readonly_command_buffer","title":"from_readonly_command_buffer  <code>classmethod</code>","text":"<pre><code>from_readonly_command_buffer(\n    buffer: ReadonlyCommandBuffer2,\n) -&gt; Self\n</code></pre> <p>Initialize object with information from command buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n    \"\"\"Initialize object with information from command buffer.\"\"\"\n    bbox = buffer.get_bounding_box()\n    return cls(\n        bbox.min_x.as_millimeters(),\n        bbox.min_y.as_millimeters(),\n        bbox.max_x.as_millimeters(),\n        bbox.max_y.as_millimeters(),\n        bbox.width.as_millimeters(),\n        bbox.height.as_millimeters(),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.Project","title":"Project","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files. Files should be ordered bottom up, topmost layer last, like if adding one layer on top of previous.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class Project:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    Files should be ordered bottom up, topmost layer last, like if adding one layer on\n    top of previous.\n    \"\"\"\n\n    def __init__(self, files: List[GerberFile]) -&gt; None:\n        self.files = files\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedProject:\n        \"\"\"Parse all Gerber files one by one.\"\"\"\n        return ParsedProject(\n            [f.parse(on_parser_error=on_parser_error) for f in self.files],\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.Project.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedProject\n</code></pre> <p>Parse all Gerber files one by one.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedProject:\n    \"\"\"Parse all Gerber files one by one.\"\"\"\n    return ParsedProject(\n        [f.parse(on_parser_error=on_parser_error) for f in self.files],\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedProject","title":"ParsedProject","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ParsedProject:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    \"\"\"\n\n    def __init__(self, files: List[ParsedFile]) -&gt; None:\n        self.files = files\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    ) -&gt; None:\n        \"\"\"Render all Gerber file, align them and merge into single file.\n\n        Resulting image will be saved to given `destination`.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_map : COLOR_MAP_T, optional\n            Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n\n        \"\"\"\n        if len(self.files) == 0:\n            msg = \"No files to render\"\n            raise ValueError(msg)\n\n        min_x_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_x_mm,\n            )\n            .get_info()\n            .min_x_mm\n        )\n\n        min_y_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_y_mm,\n            )\n            .get_info()\n            .min_y_mm\n        )\n\n        max_x_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_x_mm,\n            )\n            .get_info()\n            .max_x_mm\n        )\n\n        max_y_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_y_mm,\n            )\n            .get_info()\n            .max_y_mm\n        )\n\n        width_mm = max_x_mm - min_x_mm\n        height_mm = max_y_mm - min_y_mm\n\n        images = [\n            self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n        ]\n        base_image = Image.new(\n            \"RGBA\",\n            (\n                int(width_mm * dpmm),\n                int(height_mm * dpmm),\n            ),\n            (0, 0, 0, 0),\n        )\n\n        for image, file in zip(images, self.files):\n            offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n            offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n            base_image.paste(\n                image.image,\n                (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n                image.image,\n            )\n\n        RasterImageRef(base_image).save_to(\n            destination,\n            options=RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n            ),\n        )\n\n    def _render_raster(\n        self,\n        file: ParsedFile,\n        *,\n        color_map: COLOR_MAP_T,\n        dpmm: int = 20,\n    ) -&gt; RasterImageRef:\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(\n                color_scheme=color_map[file.get_file_type()],\n                dpmm=dpmm,\n            ),\n        ).render(\n            file._command_buffer,  # noqa: SLF001\n        )\n        if not isinstance(output, RasterImageRef):\n            msg = \"Expected RasterImageRef\"\n            raise TypeError(msg)\n\n        return output\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/_v2.html#pygerber.gerberx3.api._v2.ParsedProject.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB\n) -&gt; None\n</code></pre> <p>Render all Gerber file, align them and merge into single file.</p> <p>Resulting image will be saved to given <code>destination</code>.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_map</code> <code>COLOR_MAP_T</code> <p>Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP</p> <code>DEFAULT_COLOR_MAP</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n) -&gt; None:\n    \"\"\"Render all Gerber file, align them and merge into single file.\n\n    Resulting image will be saved to given `destination`.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_map : COLOR_MAP_T, optional\n        Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n\n    \"\"\"\n    if len(self.files) == 0:\n        msg = \"No files to render\"\n        raise ValueError(msg)\n\n    min_x_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_x_mm,\n        )\n        .get_info()\n        .min_x_mm\n    )\n\n    min_y_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_y_mm,\n        )\n        .get_info()\n        .min_y_mm\n    )\n\n    max_x_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_x_mm,\n        )\n        .get_info()\n        .max_x_mm\n    )\n\n    max_y_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_y_mm,\n        )\n        .get_info()\n        .max_y_mm\n    )\n\n    width_mm = max_x_mm - min_x_mm\n    height_mm = max_y_mm - min_y_mm\n\n    images = [\n        self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n    ]\n    base_image = Image.new(\n        \"RGBA\",\n        (\n            int(width_mm * dpmm),\n            int(height_mm * dpmm),\n        ),\n        (0, 0, 0, 0),\n    )\n\n    for image, file in zip(images, self.files):\n        offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n        offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n        base_image.paste(\n            image.image,\n            (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n            image.image,\n        )\n\n    RasterImageRef(base_image).save_to(\n        destination,\n        options=RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html","title":"v2","text":""},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2","title":"v2","text":"<p>PyGerber hight level rendering API version 2.</p> <p>This API utilizes Parser2 for parsing and SvgRenderer2, RasterRenderer2 for rendering output files. It is designed to be more limited and easier to use than the previous. For more advanced uses users will have to fall back to the lower level APIs and manual interaction with the parser and renderers.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme","title":"ColorScheme","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Set of colors which should be used for rendering.</p> <p>ColorScheme class contains set of colors which should be used for different parts of rendered image. At the same time it also works as a container for predefined color schemes commonly used for parts of PCB.</p> <p>Predefined colors</p> <p>All predefined colors have two variants - normal one and one with \"*_ALPHA\" suffix. Those without suffix have solid background and are not intended for constructing multi-layer images out of them ie. they are not suitable for rendering a project consisting of separate copper, silk, pase mask and composing them into single image. For cases when rendered images are intended for stacking \"*_ALPHA\" schemes should be used, as background and transparent parts of image will be truly transparent.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>class ColorScheme(FrozenGeneralModel):\n    r\"\"\"Set of colors which should be used for rendering.\n\n    ColorScheme class contains set of colors which should be used for different parts\n    of rendered image. At the same time it also works as a container for predefined\n    color schemes commonly used for parts of PCB.\n\n    !!! info \"Predefined colors\"\n\n        All predefined colors have two variants - normal one and one with \"\\*_ALPHA\"\n        suffix. Those without suffix have solid background and are not intended for\n        constructing multi-layer images out of them ie. they are not suitable for\n        rendering a project consisting of separate copper, silk, pase mask and composing\n        them into single image. For cases when rendered images are intended for stacking\n        \"\\*_ALPHA\" schemes should be used, as background and transparent parts of image\n        will be truly transparent.\n\n    \"\"\"\n\n    SILK: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SILK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of silk layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    COPPER: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    COPPER_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of copper layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    PASTE_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    PASTE_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of paste mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    SOLDER_MASK: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SOLDER_MASK_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Default color of solder mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    DEFAULT_GRAYSCALE: ClassVar[ColorScheme]\n    \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n    DEBUG_1: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme.\"\"\"\n\n    DEBUG_1_ALPHA: ClassVar[ColorScheme]\n    \"\"\"Debug color scheme with alpha channel.\"\"\"\n\n    background_color: RGBA\n    \"\"\"Color used as empty image background.\"\"\"\n\n    clear_color: RGBA\n    \"\"\"Color used for clear draws.\"\"\"\n\n    solid_color: RGBA\n    \"\"\"Color used for solid draws.\"\"\"\n\n    clear_region_color: RGBA\n    \"\"\"Color used for clear region draws.\"\"\"\n\n    solid_region_color: RGBA\n    \"\"\"Color used for solid region draws.\"\"\"\n\n    debug_1_color: RGBA = RGBA.from_hex(\"#ababab\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    debug_2_color: RGBA = RGBA.from_hex(\"#7d7d7d\")\n    \"\"\"Color used for debug elements.\"\"\"\n\n    def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n        \"\"\"Return grayscale to RGBA color map.\"\"\"\n        return {\n            Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n            Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n            Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n            Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n            Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n            Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n        }\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: ColorScheme\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: ColorScheme\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: ColorScheme\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: ColorScheme\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: ColorScheme\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: ColorScheme\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: ColorScheme\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: ColorScheme\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: ColorScheme\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: ColorScheme\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: RGBA\n</code></pre> <p>Color used as empty image background.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.clear_color","title":"clear_color  <code>instance-attribute</code>","text":"<pre><code>clear_color: RGBA\n</code></pre> <p>Color used for clear draws.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.solid_color","title":"solid_color  <code>instance-attribute</code>","text":"<pre><code>solid_color: RGBA\n</code></pre> <p>Color used for solid draws.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.clear_region_color","title":"clear_region_color  <code>instance-attribute</code>","text":"<pre><code>clear_region_color: RGBA\n</code></pre> <p>Color used for clear region draws.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.solid_region_color","title":"solid_region_color  <code>instance-attribute</code>","text":"<pre><code>solid_region_color: RGBA\n</code></pre> <p>Color used for solid region draws.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.debug_1_color","title":"debug_1_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_1_color: RGBA = from_hex('#ababab')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.debug_2_color","title":"debug_2_color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_2_color: RGBA = from_hex('#7d7d7d')\n</code></pre> <p>Color used for debug elements.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ColorScheme.get_grayscale_to_rgba_color_map","title":"get_grayscale_to_rgba_color_map","text":"<pre><code>get_grayscale_to_rgba_color_map() -&gt; (\n    dict[int, tuple[int, int, int, int]]\n)\n</code></pre> <p>Return grayscale to RGBA color map.</p> Source code in <code>src/pygerber/backend/rasterized_2d/color_scheme.py</code> <pre><code>def get_grayscale_to_rgba_color_map(self) -&gt; dict[int, tuple[int, int, int, int]]:\n    \"\"\"Return grayscale to RGBA color map.\"\"\"\n    return {\n        Polarity.Dark.get_2d_rasterized_color(): self.solid_color.as_rgba_int(),\n        Polarity.Clear.get_2d_rasterized_color(): self.clear_color.as_rgba_int(),\n        Polarity.DarkRegion.get_2d_rasterized_color(): self.solid_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.ClearRegion.get_2d_rasterized_color(): self.clear_region_color.as_rgba_int(),  # noqa: E501\n        Polarity.Background.get_2d_rasterized_color(): self.background_color.as_rgba_int(),  # noqa: E501\n        Polarity.DEBUG.get_2d_rasterized_color(): self.debug_1_color.as_rgba_int(),\n        Polarity.DEBUG2.get_2d_rasterized_color(): self.debug_2_color.as_rgba_int(),\n    }\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.FileTypeEnum","title":"FileTypeEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible Gerber file types.</p> <p>If file type is not listed here you can request adding it by creating an issue on https://github.com/Argmaster/pygerber/issues</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass FileTypeEnum(Enum):\n    \"\"\"Enumeration of possible Gerber file types.\n\n    If file type is not listed here you can request adding it by creating an issue on\n    https://github.com/Argmaster/pygerber/issues\n    \"\"\"\n\n    COPPER = \"COPPER\"\n    MASK = \"MASK\"\n    PASTE = \"PASTE\"\n    SILK = \"SILK\"\n    EDGE = \"EDGE\"\n\n    PLATED = \"PLATED\"\n    NON_PLATED = \"NON_PLATED\"\n    PROFILE = \"PROFILE\"\n    SOLDERMASK = \"SOLDERMASK\"\n    LEGEND = \"LEGEND\"\n    COMPONENT = \"COMPONENT\"\n    GLUE = \"GLUE\"\n    CARBONMASK = \"CARBONMASK\"\n    GOLDMASK = \"GOLDMASK\"\n    HEATSINKMASK = \"HEATSINKMASK\"\n    PEELABLEMASK = \"PEELABLEMASK\"\n    SILVERMASK = \"SILVERMASK\"\n    TINMASK = \"TINMASK\"\n    DEPTHROUT = \"DEPTHROUT\"\n    VCUT = \"VCUT\"\n    VIAFILL = \"VIAFILL\"\n    PADS = \"PADS\"\n\n    OTHER = \"OTHER\"\n    UNDEFINED = \"UNDEFINED\"\n\n    INFER_FROM_EXTENSION = \"INFER_FROM_EXTENSION\"\n    INFER_FROM_ATTRIBUTES = \"INFER_FROM_ATTRIBUTES\"\n    INFER = \"INFER\"\n\n    @classmethod\n    def infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n        \"\"\"Infer file type from file extension.\"\"\"\n        if file_function is None:\n            return cls.UNDEFINED\n\n        function, *_ = file_function.split(\",\")\n        function = function.upper()\n\n        try:\n            return FileTypeEnum(function)\n        except (ValueError, TypeError, KeyError):\n            return cls.UNDEFINED\n\n    @classmethod\n    def infer_from_extension(cls, extension: str) -&gt; FileTypeEnum:\n        if re.match(r\"\\.g[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gp[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        if re.match(r\"\\.gm[0-9]+\", extension):\n            return FileTypeEnum.COPPER\n\n        return GERBER_EXTENSION_TO_FILE_TYPE_MAPPING.get(\n            extension.lower(), FileTypeEnum.UNDEFINED\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.FileTypeEnum.infer_from_attributes","title":"infer_from_attributes  <code>classmethod</code>","text":"<pre><code>infer_from_attributes(\n    file_function: Optional[str] = None,\n) -&gt; FileTypeEnum\n</code></pre> <p>Infer file type from file extension.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef infer_from_attributes(cls, file_function: Optional[str] = None) -&gt; FileTypeEnum:\n    \"\"\"Infer file type from file extension.\"\"\"\n    if file_function is None:\n        return cls.UNDEFINED\n\n    function, *_ = file_function.split(\",\")\n    function = function.upper()\n\n    try:\n        return FileTypeEnum(function)\n    except (ValueError, TypeError, KeyError):\n        return cls.UNDEFINED\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFile","title":"GerberFile  <code>dataclass</code>","text":"<p>Generic representation of Gerber file.</p> <p>This objects provides interface for loading and parsing Gerber files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFile:\n    \"\"\"Generic representation of Gerber file.\n\n    This objects provides interface for loading and parsing Gerber files.\n    \"\"\"\n\n    source_code: str\n    file_type: FileTypeEnum\n\n    @classmethod\n    def from_file(\n        cls,\n        file_path: str | Path,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n        file_path = Path(file_path)\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n        if file_type == FileTypeEnum.INFER:\n            file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n            if file_type == FileTypeEnum.UNDEFINED:\n                file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n        return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n\n    @classmethod\n    def from_str(\n        cls,\n        source_code: str,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from string.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(source_code, file_type)\n\n    @classmethod\n    def from_buffer(\n        cls,\n        buffer: TextIO,\n        file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n    ) -&gt; Self:\n        \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n        if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n            file_type = FileTypeEnum.UNDEFINED\n        return cls(buffer.read(), file_type)\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedFile:\n        \"\"\"Parse Gerber file.\"\"\"\n        tokens = Tokenizer().tokenize(self.source_code)\n        parser = Parser2(\n            Parser2Options(\n                on_update_drawing_state_error=Parser2OnErrorAction(\n                    on_parser_error.value,\n                ),\n            ),\n        )\n        command_buffer = parser.parse(tokens)\n\n        if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n            file_type = FileTypeEnum.infer_from_attributes(\n                parser.context.file_attributes.get(\".FileFunction\", None)\n            )\n        else:\n            file_type = self.file_type\n\n        return ParsedFile(\n            GerberFileInfo.from_readonly_command_buffer(command_buffer),\n            command_buffer,\n            file_type,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code loaded from file on disk.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_file(\n    cls,\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code loaded from file on disk.\"\"\"\n    file_path = Path(file_path)\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n\n    if file_type == FileTypeEnum.INFER:\n        file_type = FileTypeEnum.infer_from_extension(file_path.suffix)\n        if file_type == FileTypeEnum.UNDEFINED:\n            file_type = FileTypeEnum.INFER_FROM_ATTRIBUTES\n\n    return cls(file_path.read_text(encoding=\"utf-8\"), file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFile.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from string.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_str(\n    cls,\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from string.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(source_code, file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFile.from_buffer","title":"from_buffer  <code>classmethod</code>","text":"<pre><code>from_buffer(\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from readable buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_buffer(\n    cls,\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.UNDEFINED,\n) -&gt; Self:\n    \"\"\"Initialize object with Gerber source code from readable buffer.\"\"\"\n    if file_type == FileTypeEnum.INFER_FROM_EXTENSION:\n        file_type = FileTypeEnum.UNDEFINED\n    return cls(buffer.read(), file_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFile.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedFile\n</code></pre> <p>Parse Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedFile:\n    \"\"\"Parse Gerber file.\"\"\"\n    tokens = Tokenizer().tokenize(self.source_code)\n    parser = Parser2(\n        Parser2Options(\n            on_update_drawing_state_error=Parser2OnErrorAction(\n                on_parser_error.value,\n            ),\n        ),\n    )\n    command_buffer = parser.parse(tokens)\n\n    if self.file_type in (FileTypeEnum.INFER_FROM_ATTRIBUTES, FileTypeEnum.INFER):\n        file_type = FileTypeEnum.infer_from_attributes(\n            parser.context.file_attributes.get(\".FileFunction\", None)\n        )\n    else:\n        file_type = self.file_type\n\n    return ParsedFile(\n        GerberFileInfo.from_readonly_command_buffer(command_buffer),\n        command_buffer,\n        file_type,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo","title":"GerberFileInfo  <code>dataclass</code>","text":"<p>Container for information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass GerberFileInfo:\n    \"\"\"Container for information about Gerber file.\"\"\"\n\n    min_x_mm: Decimal\n    \"\"\"Minimum X coordinate in file in millimeters.\"\"\"\n    min_y_mm: Decimal\n    \"\"\"Minimum Y coordinate in file in millimeters.\"\"\"\n    max_x_mm: Decimal\n    \"\"\"Maximum X coordinate in file in millimeters.\"\"\"\n    max_y_mm: Decimal\n    \"\"\"Maximum T coordinate in file in millimeters.\"\"\"\n\n    width_mm: Decimal\n    \"\"\"Width of image in millimeters.\"\"\"\n    height_mm: Decimal\n    \"\"\"Height of image in millimeters.\"\"\"\n\n    @classmethod\n    def from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n        \"\"\"Initialize object with information from command buffer.\"\"\"\n        bbox = buffer.get_bounding_box()\n        return cls(\n            bbox.min_x.as_millimeters(),\n            bbox.min_y.as_millimeters(),\n            bbox.max_x.as_millimeters(),\n            bbox.max_y.as_millimeters(),\n            bbox.width.as_millimeters(),\n            bbox.height.as_millimeters(),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.min_x_mm","title":"min_x_mm  <code>instance-attribute</code>","text":"<pre><code>min_x_mm: Decimal\n</code></pre> <p>Minimum X coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.min_y_mm","title":"min_y_mm  <code>instance-attribute</code>","text":"<pre><code>min_y_mm: Decimal\n</code></pre> <p>Minimum Y coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.max_x_mm","title":"max_x_mm  <code>instance-attribute</code>","text":"<pre><code>max_x_mm: Decimal\n</code></pre> <p>Maximum X coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.max_y_mm","title":"max_y_mm  <code>instance-attribute</code>","text":"<pre><code>max_y_mm: Decimal\n</code></pre> <p>Maximum T coordinate in file in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.width_mm","title":"width_mm  <code>instance-attribute</code>","text":"<pre><code>width_mm: Decimal\n</code></pre> <p>Width of image in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.height_mm","title":"height_mm  <code>instance-attribute</code>","text":"<pre><code>height_mm: Decimal\n</code></pre> <p>Height of image in millimeters.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.GerberFileInfo.from_readonly_command_buffer","title":"from_readonly_command_buffer  <code>classmethod</code>","text":"<pre><code>from_readonly_command_buffer(\n    buffer: ReadonlyCommandBuffer2,\n) -&gt; Self\n</code></pre> <p>Initialize object with information from command buffer.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@classmethod\ndef from_readonly_command_buffer(cls, buffer: ReadonlyCommandBuffer2) -&gt; Self:\n    \"\"\"Initialize object with information from command buffer.\"\"\"\n    bbox = buffer.get_bounding_box()\n    return cls(\n        bbox.min_x.as_millimeters(),\n        bbox.min_y.as_millimeters(),\n        bbox.max_x.as_millimeters(),\n        bbox.max_y.as_millimeters(),\n        bbox.width.as_millimeters(),\n        bbox.height.as_millimeters(),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ImageFormatEnum","title":"ImageFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported raster image formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ImageFormatEnum(Enum):\n    \"\"\"List of officially supported raster image formats.\"\"\"\n\n    PNG = \"png\"\n    JPEG = \"jpg\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.OnParserErrorEnum","title":"OnParserErrorEnum","text":"<p>             Bases: <code>Enum</code></p> <p>Enumeration of possible actions to take on parser error.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@unique\nclass OnParserErrorEnum(Enum):\n    \"\"\"Enumeration of possible actions to take on parser error.\"\"\"\n\n    Ignore = \"ignore\"\n    \"\"\"Ignore parser errors. Errors which occurred will not be signaled. May yield\n    unexpected results for broken files, with missing draw commands or even more\n    significant errors.\"\"\"\n\n    Warn = \"warn\"\n    \"\"\"Warn on parser error. Parser will log warning message about what went wrong.\n    Best for supporting wide range of files without silently ignoring errors in code.\"\"\"\n\n    Raise = \"raise\"\n    \"\"\"Raise exception whenever parser encounters error. Will completely break out of\n    parsing process, making it impossible to render slightly malformed files.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Ignore","title":"Ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ignore = 'ignore'\n</code></pre> <p>Ignore parser errors. Errors which occurred will not be signaled. May yield unexpected results for broken files, with missing draw commands or even more significant errors.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Warn","title":"Warn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warn = 'warn'\n</code></pre> <p>Warn on parser error. Parser will log warning message about what went wrong. Best for supporting wide range of files without silently ignoring errors in code.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.OnParserErrorEnum.Raise","title":"Raise  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Raise = 'raise'\n</code></pre> <p>Raise exception whenever parser encounters error. Will completely break out of parsing process, making it impossible to render slightly malformed files.</p>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedFile","title":"ParsedFile  <code>dataclass</code>","text":"<p>Wrapper around parsed Gerber file.</p> <p>This objects allow actions like rendering and retrieving information about file contents.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>@dataclass\nclass ParsedFile:\n    \"\"\"Wrapper around parsed Gerber file.\n\n    This objects allow actions like rendering and retrieving information about file\n    contents.\n    \"\"\"\n\n    _info: GerberFileInfo\n    _command_buffer: ReadonlyCommandBuffer2\n    _file_type: FileTypeEnum\n\n    def get_info(self) -&gt; GerberFileInfo:\n        \"\"\"Get information about Gerber file.\"\"\"\n        return self._info\n\n    def get_file_type(self) -&gt; FileTypeEnum:\n        \"\"\"Get type of Gerber file.\"\"\"\n        return self._file_type\n\n    def render_svg(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        scale: float = 1.0,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to SVG format.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        scale : float, optional\n            Scale of image, can be used to scale very large or very small images, by\n            default 1.0\n\n        \"\"\"\n        output = SvgRenderer2(\n            SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n        ).render(self._command_buffer)\n        output.save_to(destination)\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_scheme: ColorScheme = ColorScheme.COPPER,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n        quality: int = 85,\n    ) -&gt; None:\n        \"\"\"Render Gerber file to raster image.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_scheme : ColorScheme, optional\n            Color scheme of image, by default ColorScheme.COPPER\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n        quality: int, optional\n            Image quality for JPEG format, by default 85.\n\n        \"\"\"\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n        ).render(self._command_buffer)\n        output.save_to(\n            destination,\n            RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n                quality=quality,\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedFile.get_info","title":"get_info","text":"<pre><code>get_info() -&gt; GerberFileInfo\n</code></pre> <p>Get information about Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_info(self) -&gt; GerberFileInfo:\n    \"\"\"Get information about Gerber file.\"\"\"\n    return self._info\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedFile.get_file_type","title":"get_file_type","text":"<pre><code>get_file_type() -&gt; FileTypeEnum\n</code></pre> <p>Get type of Gerber file.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def get_file_type(self) -&gt; FileTypeEnum:\n    \"\"\"Get type of Gerber file.\"\"\"\n    return self._file_type\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedFile.render_svg","title":"render_svg","text":"<pre><code>render_svg(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0\n) -&gt; None\n</code></pre> <p>Render Gerber file to SVG format.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>scale</code> <code>float</code> <p>Scale of image, can be used to scale very large or very small images, by default 1.0</p> <code>1.0</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_svg(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    scale: float = 1.0,\n) -&gt; None:\n    \"\"\"Render Gerber file to SVG format.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    scale : float, optional\n        Scale of image, can be used to scale very large or very small images, by\n        default 1.0\n\n    \"\"\"\n    output = SvgRenderer2(\n        SvgRenderer2Hooks(color_scheme=color_scheme, scale=Decimal(scale)),\n    ).render(self._command_buffer)\n    output.save_to(destination)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedFile.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85\n) -&gt; None\n</code></pre> <p>Render Gerber file to raster image.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme of image, by default ColorScheme.COPPER</p> <code>COPPER</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> <code>quality</code> <code>int</code> <p>Image quality for JPEG format, by default 85.</p> <code>85</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_scheme: ColorScheme = ColorScheme.COPPER,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    quality: int = 85,\n) -&gt; None:\n    \"\"\"Render Gerber file to raster image.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_scheme : ColorScheme, optional\n        Color scheme of image, by default ColorScheme.COPPER\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n    quality: int, optional\n        Image quality for JPEG format, by default 85.\n\n    \"\"\"\n    output = RasterRenderer2(\n        RasterRenderer2Hooks(color_scheme=color_scheme, dpmm=dpmm),\n    ).render(self._command_buffer)\n    output.save_to(\n        destination,\n        RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n            quality=quality,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedProject","title":"ParsedProject","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class ParsedProject:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    \"\"\"\n\n    def __init__(self, files: List[ParsedFile]) -&gt; None:\n        self.files = files\n\n    def render_raster(\n        self,\n        destination: BytesIO | Path | str,\n        *,\n        color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n        dpmm: int = 20,\n        image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n        pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n    ) -&gt; None:\n        \"\"\"Render all Gerber file, align them and merge into single file.\n\n        Resulting image will be saved to given `destination`.\n\n        Parameters\n        ----------\n        destination : BytesIO | Path | str\n            Destination to save file to. When BytesIO is provided, file will be saved\n            to buffer. When Path or str is provided, they are treated as file path\n            and will be used to open and save file on disk.\n        color_map : COLOR_MAP_T, optional\n            Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n        dpmm : int, optional\n            Resolution of image in dots per millimeter, by default 96\n        image_format : ImageFormatEnum, optional\n            Image format to save, by default ImageFormatEnum.AUTO\n        pixel_format : PixelFormatEnum, optional\n            Pixel format, by default PixelFormatEnum.RGB\n\n        \"\"\"\n        if len(self.files) == 0:\n            msg = \"No files to render\"\n            raise ValueError(msg)\n\n        min_x_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_x_mm,\n            )\n            .get_info()\n            .min_x_mm\n        )\n\n        min_y_mm = (\n            min(\n                self.files,\n                key=lambda f: f.get_info().min_y_mm,\n            )\n            .get_info()\n            .min_y_mm\n        )\n\n        max_x_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_x_mm,\n            )\n            .get_info()\n            .max_x_mm\n        )\n\n        max_y_mm = (\n            max(\n                self.files,\n                key=lambda f: f.get_info().max_y_mm,\n            )\n            .get_info()\n            .max_y_mm\n        )\n\n        width_mm = max_x_mm - min_x_mm\n        height_mm = max_y_mm - min_y_mm\n\n        images = [\n            self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n        ]\n        base_image = Image.new(\n            \"RGBA\",\n            (\n                int(width_mm * dpmm),\n                int(height_mm * dpmm),\n            ),\n            (0, 0, 0, 0),\n        )\n\n        for image, file in zip(images, self.files):\n            offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n            offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n            base_image.paste(\n                image.image,\n                (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n                image.image,\n            )\n\n        RasterImageRef(base_image).save_to(\n            destination,\n            options=RasterFormatOptions(\n                image_format=ImageFormat(image_format.value),\n                pixel_format=PixelFormat(pixel_format.value),\n            ),\n        )\n\n    def _render_raster(\n        self,\n        file: ParsedFile,\n        *,\n        color_map: COLOR_MAP_T,\n        dpmm: int = 20,\n    ) -&gt; RasterImageRef:\n        output = RasterRenderer2(\n            RasterRenderer2Hooks(\n                color_scheme=color_map[file.get_file_type()],\n                dpmm=dpmm,\n            ),\n        ).render(\n            file._command_buffer,  # noqa: SLF001\n        )\n        if not isinstance(output, RasterImageRef):\n            msg = \"Expected RasterImageRef\"\n            raise TypeError(msg)\n\n        return output\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.ParsedProject.render_raster","title":"render_raster","text":"<pre><code>render_raster(\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB\n) -&gt; None\n</code></pre> <p>Render all Gerber file, align them and merge into single file.</p> <p>Resulting image will be saved to given <code>destination</code>.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>BytesIO | Path | str</code> <p>Destination to save file to. When BytesIO is provided, file will be saved to buffer. When Path or str is provided, they are treated as file path and will be used to open and save file on disk.</p> required <code>color_map</code> <code>COLOR_MAP_T</code> <p>Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP</p> <code>DEFAULT_COLOR_MAP</code> <code>dpmm</code> <code>int</code> <p>Resolution of image in dots per millimeter, by default 96</p> <code>20</code> <code>image_format</code> <code>ImageFormatEnum</code> <p>Image format to save, by default ImageFormatEnum.AUTO</p> <code>AUTO</code> <code>pixel_format</code> <code>PixelFormatEnum</code> <p>Pixel format, by default PixelFormatEnum.RGB</p> <code>RGB</code> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def render_raster(\n    self,\n    destination: BytesIO | Path | str,\n    *,\n    color_map: COLOR_MAP_T = DEFAULT_COLOR_MAP,\n    dpmm: int = 20,\n    image_format: ImageFormatEnum = ImageFormatEnum.AUTO,\n    pixel_format: PixelFormatEnum = PixelFormatEnum.RGB,\n) -&gt; None:\n    \"\"\"Render all Gerber file, align them and merge into single file.\n\n    Resulting image will be saved to given `destination`.\n\n    Parameters\n    ----------\n    destination : BytesIO | Path | str\n        Destination to save file to. When BytesIO is provided, file will be saved\n        to buffer. When Path or str is provided, they are treated as file path\n        and will be used to open and save file on disk.\n    color_map : COLOR_MAP_T, optional\n        Mapping from image type to color scheme, by default DEFAULT_COLOR_MAP\n    dpmm : int, optional\n        Resolution of image in dots per millimeter, by default 96\n    image_format : ImageFormatEnum, optional\n        Image format to save, by default ImageFormatEnum.AUTO\n    pixel_format : PixelFormatEnum, optional\n        Pixel format, by default PixelFormatEnum.RGB\n\n    \"\"\"\n    if len(self.files) == 0:\n        msg = \"No files to render\"\n        raise ValueError(msg)\n\n    min_x_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_x_mm,\n        )\n        .get_info()\n        .min_x_mm\n    )\n\n    min_y_mm = (\n        min(\n            self.files,\n            key=lambda f: f.get_info().min_y_mm,\n        )\n        .get_info()\n        .min_y_mm\n    )\n\n    max_x_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_x_mm,\n        )\n        .get_info()\n        .max_x_mm\n    )\n\n    max_y_mm = (\n        max(\n            self.files,\n            key=lambda f: f.get_info().max_y_mm,\n        )\n        .get_info()\n        .max_y_mm\n    )\n\n    width_mm = max_x_mm - min_x_mm\n    height_mm = max_y_mm - min_y_mm\n\n    images = [\n        self._render_raster(f, color_map=color_map, dpmm=dpmm) for f in self.files\n    ]\n    base_image = Image.new(\n        \"RGBA\",\n        (\n            int(width_mm * dpmm),\n            int(height_mm * dpmm),\n        ),\n        (0, 0, 0, 0),\n    )\n\n    for image, file in zip(images, self.files):\n        offset_x_mm = abs(min_x_mm - file.get_info().min_x_mm)\n        offset_y_mm = abs(max_y_mm - file.get_info().max_y_mm)\n        base_image.paste(\n            image.image,\n            (int(offset_x_mm * dpmm), int(offset_y_mm * dpmm)),\n            image.image,\n        )\n\n    RasterImageRef(base_image).save_to(\n        destination,\n        options=RasterFormatOptions(\n            image_format=ImageFormat(image_format.value),\n            pixel_format=PixelFormat(pixel_format.value),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.PixelFormatEnum","title":"PixelFormatEnum","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported pixel formats.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class PixelFormatEnum(Enum):\n    \"\"\"List of officially supported pixel formats.\"\"\"\n\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.Project","title":"Project","text":"<p>Multi file project representation.</p> <p>This object can be used to render multiple Gerber files to single image. It automatically performs alignment and merging of files. Files should be ordered bottom up, topmost layer last, like if adding one layer on top of previous.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>class Project:\n    \"\"\"Multi file project representation.\n\n    This object can be used to render multiple Gerber files to single image.\n    It automatically performs alignment and merging of files.\n    Files should be ordered bottom up, topmost layer last, like if adding one layer on\n    top of previous.\n    \"\"\"\n\n    def __init__(self, files: List[GerberFile]) -&gt; None:\n        self.files = files\n\n    def parse(\n        self,\n        *,\n        on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n    ) -&gt; ParsedProject:\n        \"\"\"Parse all Gerber files one by one.\"\"\"\n        return ParsedProject(\n            [f.parse(on_parser_error=on_parser_error) for f in self.files],\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/api/v2.html#pygerber.gerberx3.api.v2.Project.parse","title":"parse","text":"<pre><code>parse(\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore\n) -&gt; ParsedProject\n</code></pre> <p>Parse all Gerber files one by one.</p> Source code in <code>src/pygerber/gerberx3/api/_v2.py</code> <pre><code>def parse(\n    self,\n    *,\n    on_parser_error: OnParserErrorEnum = OnParserErrorEnum.Ignore,\n) -&gt; ParsedProject:\n    \"\"\"Parse all Gerber files one by one.\"\"\"\n    return ParsedProject(\n        [f.parse(on_parser_error=on_parser_error) for f in self.files],\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast","title":"ast","text":"<p><code>pygerber.gerberx3.ast</code> package contains all the node classes used to represent the Gerber X3 abstract syntax tree.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor","title":"AstVisitor","text":"<p>The <code>AstVisitor</code> class is a class that acts as a visitor for <code>Node</code> instances according to the visitor design pattern.</p> <p>For more information on this pattern visit: https://refactoring.guru/design-patterns/visitor</p> <p>Logic of walking the AST is implemented within the visitor callbacks, hence be careful when overriding methods of this class, as not calling <code>super().method()</code> may result in subnodes of a node not being visited at all. This applies to nodes like <code>AB</code>, <code>AM</code> etc. Whenever you override a method, look up the implementation from AstVisitor to make sure you will be getting the behavior you intend to get.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>class AstVisitor:\n    \"\"\"The `AstVisitor` class is a class that acts as a visitor for `Node` instances\n    according to the visitor design pattern.\n\n    For more information on this pattern visit:\n    https://refactoring.guru/design-patterns/visitor\n\n    Logic of walking the AST is implemented within the visitor callbacks, hence be\n    careful when overriding methods of this class, as not calling `super().method()` may\n    result in subnodes of a node not being visited at all. This applies to nodes\n    like `AB`, `AM` etc. Whenever you override a method, look up the implementation from\n    AstVisitor to make sure you will be getting the behavior you intend to get.\n    \"\"\"\n\n    # Aperture\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` root node.\"\"\"\n        node.open.visit(self)\n        for inner_node in node.nodes:\n            inner_node.visit(self)\n        node.close.visit(self)\n\n        return node\n\n    def on_ab_close(self, node: ABclose) -&gt; ABclose:\n        \"\"\"Handle `ABclose` node.\"\"\"\n        return node\n\n    def on_ab_open(self, node: ABopen) -&gt; ABopen:\n        \"\"\"Handle `ABopen` node.\"\"\"\n        return node\n\n    def on_ad(self, node: AD) -&gt; None:\n        \"\"\"Handle `AD` node.\"\"\"\n\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        node.open.visit(self)\n        for primitive in node.primitives:\n            primitive.visit(self)\n        node.close.visit(self)\n        return node\n\n    def on_am_close(self, node: AMclose) -&gt; AMclose:\n        \"\"\"Handle `AMclose` node.\"\"\"\n        return node\n\n    def on_am_open(self, node: AMopen) -&gt; AMopen:\n        \"\"\"Handle `AMopen` node.\"\"\"\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` root node.\"\"\"\n        node.open.visit(self)\n        for inner_node in node.nodes:\n            inner_node.visit(self)\n        node.close.visit(self)\n        return node\n\n    def on_sr_close(self, node: SRclose) -&gt; SRclose:\n        \"\"\"Handle `SRclose` node.\"\"\"\n        return node\n\n    def on_sr_open(self, node: SRopen) -&gt; SRopen:\n        \"\"\"Handle `SRopen` node.\"\"\"\n        return node\n\n    # Attribute\n\n    def on_ta(self, node: TA) -&gt; None:\n        \"\"\"Handle `TA` node.\"\"\"\n\n    def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n        \"\"\"Handle `TA_AperFunction` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n        \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n        \"\"\"Handle `TA_FlashText` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        return node\n\n    def on_tf(self, node: TF) -&gt; None:\n        \"\"\"Handle `TF` node.\"\"\"\n\n    def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n        \"\"\"Handle `TF_UserName` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n        \"\"\"Handle `TF_Part` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n        \"\"\"Handle `TF_FileFunction` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n        \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n        \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n        \"\"\"Handle `TF_CreationDate` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_generation_software(\n        self, node: TF_GenerationSoftware\n    ) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n        \"\"\"Handle `TF_ProjectId` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n        \"\"\"Handle `TF_MD5` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_to(self, node: TO) -&gt; None:\n        \"\"\"Handle `TO` node.\"\"\"\n\n    def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n        \"\"\"Handle `TO_UserName` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_n(self, node: TO_N) -&gt; TO_N:\n        \"\"\"Handle `TO_N` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_p(self, node: TO_P) -&gt; TO_P:\n        \"\"\"Handle `TO_P` node`.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_c(self, node: TO_C) -&gt; TO_C:\n        \"\"\"Handle `TO_C` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n        \"\"\"Handle `TO_CRot` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n        \"\"\"Handle `TO_CMfr` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n        \"\"\"Handle `TO_CMNP` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n        \"\"\"Handle `TO_Cftp` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n        \"\"\"Handle `TO_CPgN` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n        \"\"\"Handle `TO_CPgD` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n        \"\"\"Handle `TO_CHgt` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n        \"\"\"Handle `TO_CLbN` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n        \"\"\"Handle `TO_CLbD` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n        \"\"\"Handle `TO_CSup` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    # D codes\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        if node.i is not None:\n            node.i.visit(self)\n\n        if node.j is not None:\n            node.j.visit(self)\n\n        return node\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        return node\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        return node\n\n    # G codes\n\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        return node\n\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        return node\n\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        return node\n\n    def on_g04(self, node: G04) -&gt; G04:\n        \"\"\"Handle `G04` node.\"\"\"\n        return node\n\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        return node\n\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        return node\n\n    def on_g54(self, node: G54) -&gt; G54:\n        \"\"\"Handle `G54` node.\"\"\"\n        return node\n\n    def on_g55(self, node: G55) -&gt; G55:\n        \"\"\"Handle `G55` node.\"\"\"\n        return node\n\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        return node\n\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        return node\n\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        return node\n\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        return node\n\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        return node\n\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        return node\n\n    # Load\n\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        return node\n\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        return node\n\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        return node\n\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        return node\n\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        return node\n\n    # M Codes\n\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        return node\n\n    def on_m01(self, node: M01) -&gt; M01:\n        \"\"\"Handle `M01` node.\"\"\"\n        return node\n\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        return node\n\n    # Math\n\n    # Math :: Operators :: Binary\n\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        self.on_expression(node)\n        node.operand.visit(self)\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        self.on_expression(node)\n        node.operand.visit(self)\n        return node\n\n    def on_assignment(self, node: Assignment) -&gt; Assignment:\n        \"\"\"Handle `Assignment` node.\"\"\"\n        node.variable.visit(self)\n        node.expression.visit(self)\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self.on_expression(node)\n        return node\n\n    def on_expression(self, node: Expression) -&gt; None:\n        \"\"\"Handle `Expression` node.\"\"\"\n\n    def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n        \"\"\"Handle `Parenthesis` node.\"\"\"\n        self.on_expression(node)\n        node.inner.visit(self)\n        return node\n\n    def on_point(self, node: Point) -&gt; Point:\n        \"\"\"Handle `Point` node.\"\"\"\n        node.x.visit(self)\n        node.y.visit(self)\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self.on_expression(node)\n        return node\n\n    # Other\n\n    def on_coordinate(self, node: Coordinate) -&gt; None:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    # Primitives\n\n    def on_code_0(self, node: Code0) -&gt; Code0:\n        \"\"\"Handle `Code0` node.\"\"\"\n        return node\n\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        \"\"\"Handle `Code1` node.\"\"\"\n        node.exposure.visit(self)\n        node.diameter.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        if node.rotation is not None:\n            node.rotation.visit(self)\n        return node\n\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        \"\"\"Handle `Code2` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        node.end_x.visit(self)\n        node.end_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_4(self, node: Code4) -&gt; Code4:\n        \"\"\"Handle `Code4` node.\"\"\"\n        node.exposure.visit(self)\n        node.number_of_points.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        for point in node.points:\n            point.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_5(self, node: Code5) -&gt; Code5:\n        \"\"\"Handle `Code5` node.\"\"\"\n        node.exposure.visit(self)\n        node.number_of_vertices.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.diameter.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_6(self, node: Code6) -&gt; Code6:\n        \"\"\"Handle `Code6` node.\"\"\"\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.outer_diameter.visit(self)\n        node.ring_thickness.visit(self)\n        node.gap_between_rings.visit(self)\n        node.max_ring_count.visit(self)\n        node.crosshair_thickness.visit(self)\n        node.crosshair_length.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_7(self, node: Code7) -&gt; Code7:\n        \"\"\"Handle `Code7` node.\"\"\"\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.outer_diameter.visit(self)\n        node.inner_diameter.visit(self)\n        node.gap_thickness.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        \"\"\"Handle `Code20` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        node.end_x.visit(self)\n        node.end_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_21(self, node: Code21) -&gt; Code21:\n        \"\"\"Handle `Code21` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.height.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_22(self, node: Code22) -&gt; Code22:\n        \"\"\"Handle `Code22` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.height.visit(self)\n        node.x_lower_left.visit(self)\n        node.y_lower_left.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    # Properties\n\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        return node\n\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        return node\n\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        return node\n\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        return node\n\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        return node\n\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        return node\n\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        return node\n\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        return node\n\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        return node\n\n    # Root node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        try:\n            for command in node.nodes:\n                try:\n                    command.visit(self)\n                except Exception as e:  # noqa: PERF203\n                    if self.on_exception(command, e):\n                        raise\n        finally:\n            self.on_end_of_file(node)\n        return node\n\n    def on_end_of_file(self, node: File) -&gt; None:\n        \"\"\"Handle end of file.\"\"\"\n\n    def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n        \"\"\"Handle exception.\n\n        If return value is True, exception will be re-raised.\n        \"\"\"\n        return True\n\n    def on_invalid(self, node: Invalid) -&gt; Invalid:\n        \"\"\"Handle invalid node.\"\"\"\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` root node.\"\"\"\n    node.open.visit(self)\n    for inner_node in node.nodes:\n        inner_node.visit(self)\n    node.close.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab_close(self, node: ABclose) -&gt; ABclose:\n    \"\"\"Handle `ABclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab_open(self, node: ABopen) -&gt; ABopen:\n    \"\"\"Handle `ABopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ad(self, node: AD) -&gt; None:\n    \"\"\"Handle `AD` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    node.open.visit(self)\n    for primitive in node.primitives:\n        primitive.visit(self)\n    node.close.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am_close(self, node: AMclose) -&gt; AMclose:\n    \"\"\"Handle `AMclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am_open(self, node: AMopen) -&gt; AMopen:\n    \"\"\"Handle `AMopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` root node.\"\"\"\n    node.open.visit(self)\n    for inner_node in node.nodes:\n        inner_node.visit(self)\n    node.close.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr_close(self, node: SRclose) -&gt; SRclose:\n    \"\"\"Handle `SRclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr_open(self, node: SRopen) -&gt; SRopen:\n    \"\"\"Handle `SRopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta(self, node: TA) -&gt; None:\n    \"\"\"Handle `TA` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n    \"\"\"Handle `TA_AperFunction` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n    \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n    \"\"\"Handle `TA_FlashText` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf(self, node: TF) -&gt; None:\n    \"\"\"Handle `TF` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n    \"\"\"Handle `TF_UserName` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n    \"\"\"Handle `TF_Part` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n    \"\"\"Handle `TF_FileFunction` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n    \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n    \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n    \"\"\"Handle `TF_CreationDate` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_generation_software(\n    self, node: TF_GenerationSoftware\n) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n    \"\"\"Handle `TF_ProjectId` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n    \"\"\"Handle `TF_MD5` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to(self, node: TO) -&gt; None:\n    \"\"\"Handle `TO` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n    \"\"\"Handle `TO_UserName` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_n(self, node: TO_N) -&gt; TO_N:\n    \"\"\"Handle `TO_N` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_p(self, node: TO_P) -&gt; TO_P:\n    \"\"\"Handle `TO_P` node`.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_c(self, node: TO_C) -&gt; TO_C:\n    \"\"\"Handle `TO_C` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n    \"\"\"Handle `TO_CRot` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n    \"\"\"Handle `TO_CMfr` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n    \"\"\"Handle `TO_CMNP` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n    \"\"\"Handle `TO_Cftp` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n    \"\"\"Handle `TO_CPgN` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n    \"\"\"Handle `TO_CPgD` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n    \"\"\"Handle `TO_CHgt` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n    \"\"\"Handle `TO_CLbN` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n    \"\"\"Handle `TO_CLbD` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n    \"\"\"Handle `TO_CSup` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    if node.i is not None:\n        node.i.visit(self)\n\n    if node.j is not None:\n        node.j.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g04(self, node: G04) -&gt; G04:\n    \"\"\"Handle `G04` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g54(self, node: G54) -&gt; G54:\n    \"\"\"Handle `G54` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g55(self, node: G55) -&gt; G55:\n    \"\"\"Handle `G55` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m01(self, node: M01) -&gt; M01:\n    \"\"\"Handle `M01` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    self.on_expression(node)\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    self.on_expression(node)\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_assignment(self, node: Assignment) -&gt; Assignment:\n    \"\"\"Handle `Assignment` node.\"\"\"\n    node.variable.visit(self)\n    node.expression.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self.on_expression(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_expression","title":"on_expression","text":"<pre><code>on_expression(node: Expression) -&gt; None\n</code></pre> <p>Handle <code>Expression</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_expression(self, node: Expression) -&gt; None:\n    \"\"\"Handle `Expression` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n    \"\"\"Handle `Parenthesis` node.\"\"\"\n    self.on_expression(node)\n    node.inner.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_point(self, node: Point) -&gt; Point:\n    \"\"\"Handle `Point` node.\"\"\"\n    node.x.visit(self)\n    node.y.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self.on_expression(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_coordinate","title":"on_coordinate","text":"<pre><code>on_coordinate(node: Coordinate) -&gt; None\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate(self, node: Coordinate) -&gt; None:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_0(self, node: Code0) -&gt; Code0:\n    \"\"\"Handle `Code0` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_1(self, node: Code1) -&gt; Code1:\n    \"\"\"Handle `Code1` node.\"\"\"\n    node.exposure.visit(self)\n    node.diameter.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    if node.rotation is not None:\n        node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_2(self, node: Code2) -&gt; Code2:\n    \"\"\"Handle `Code2` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    node.end_x.visit(self)\n    node.end_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_4(self, node: Code4) -&gt; Code4:\n    \"\"\"Handle `Code4` node.\"\"\"\n    node.exposure.visit(self)\n    node.number_of_points.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    for point in node.points:\n        point.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_5(self, node: Code5) -&gt; Code5:\n    \"\"\"Handle `Code5` node.\"\"\"\n    node.exposure.visit(self)\n    node.number_of_vertices.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.diameter.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_6(self, node: Code6) -&gt; Code6:\n    \"\"\"Handle `Code6` node.\"\"\"\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.outer_diameter.visit(self)\n    node.ring_thickness.visit(self)\n    node.gap_between_rings.visit(self)\n    node.max_ring_count.visit(self)\n    node.crosshair_thickness.visit(self)\n    node.crosshair_length.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_7(self, node: Code7) -&gt; Code7:\n    \"\"\"Handle `Code7` node.\"\"\"\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.outer_diameter.visit(self)\n    node.inner_diameter.visit(self)\n    node.gap_thickness.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_20(self, node: Code20) -&gt; Code20:\n    \"\"\"Handle `Code20` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    node.end_x.visit(self)\n    node.end_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_21(self, node: Code21) -&gt; Code21:\n    \"\"\"Handle `Code21` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.height.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_22(self, node: Code22) -&gt; Code22:\n    \"\"\"Handle `Code22` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.height.visit(self)\n    node.x_lower_left.visit(self)\n    node.y_lower_left.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    try:\n        for command in node.nodes:\n            try:\n                command.visit(self)\n            except Exception as e:  # noqa: PERF203\n                if self.on_exception(command, e):\n                    raise\n    finally:\n        self.on_end_of_file(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_end_of_file","title":"on_end_of_file","text":"<pre><code>on_end_of_file(node: File) -&gt; None\n</code></pre> <p>Handle end of file.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_end_of_file(self, node: File) -&gt; None:\n    \"\"\"Handle end of file.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> <p>If return value is True, exception will be re-raised.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n    \"\"\"Handle exception.\n\n    If return value is True, exception will be re-raised.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstVisitor.on_invalid","title":"on_invalid","text":"<pre><code>on_invalid(node: Invalid) -&gt; Invalid\n</code></pre> <p>Handle invalid node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_invalid(self, node: Invalid) -&gt; Invalid:\n    \"\"\"Handle invalid node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder","title":"GerberX3Builder","text":"<p>Builder class for constructing Gerber ASTs.</p> <p>Code generated is compliant with <code>The Gerber Layer Format Specification - Revision 2024.05</code>.</p> <p>https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>class GerberX3Builder:\n    \"\"\"Builder class for constructing Gerber ASTs.\n\n    Code generated is compliant with\n    `The Gerber Layer Format Specification - Revision 2024.05`.\n\n    https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self._pad_creator = _PadCreator()\n        self._draws: list[_Draw] = []\n\n        self._coordinate_format = CoordinateFormat(\n            zeros=Zeros.SKIP_LEADING,\n            coordinate_mode=CoordinateNotation.ABSOLUTE,\n            x_integral=4,\n            x_decimal=6,\n            y_integral=4,\n            y_decimal=6,\n        )\n\n        self._current_location = (0.0, 0.0)\n\n        self._selected_aperture: Optional[ApertureIdStr] = None\n        self._rotation: float = 0.0\n        self._mirroring: Mirroring = Mirroring.NONE\n        self._mirror_x: bool = False\n        self._mirror_y: bool = False\n        self._scale: float = 1.0\n        self._polarity: Polarity = Polarity.Dark\n\n    def new_pad(self) -&gt; _PadCreator:\n        \"\"\"Create a new pad.\"\"\"\n        return self._pad_creator\n\n    def add_pad(\n        self,\n        pad: _Pad,\n        at: tuple[float, float],\n        *,\n        rotation: float = 0.0,\n        mirror_x: bool = False,\n        mirror_y: bool = False,\n        scale: float = 1.0,\n    ) -&gt; _Draw:\n        \"\"\"Add a pad to the current layer.\"\"\"\n        state_updates = list(\n            self._update_state(\n                selected_aperture=pad.aperture_id,\n                polarity=Polarity.Dark,\n                rotation=rotation,\n                mirror_x=mirror_x,\n                mirror_y=mirror_y,\n                scale=scale,\n            )\n        )\n        draw = _Draw(\n            state_updates=state_updates,\n            draw_op=D03(\n                x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n                y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n            ),\n        )\n        self._draws.append(draw)\n        return draw\n\n    def _update_state(\n        self,\n        selected_aperture: Optional[ApertureIdStr] = None,\n        polarity: Optional[Polarity] = None,\n        rotation: Optional[float] = None,\n        mirror_x: Optional[bool] = None,\n        mirror_y: Optional[bool] = None,\n        scale: Optional[float] = None,\n    ) -&gt; Iterable[Node]:\n        if (\n            selected_aperture is not None\n            and self._selected_aperture != selected_aperture\n        ):\n            self._selected_aperture = selected_aperture\n            yield Dnn(is_standalone=True, aperture_id=selected_aperture)\n\n        if polarity is not None and polarity != self._polarity:\n            self._polarity = polarity\n            yield LP(polarity=polarity)\n\n        if rotation is not None and rotation != self._rotation:\n            self._rotation = rotation\n            yield LR(rotation=rotation)\n\n        if mirror_x is None:\n            mirror_x = self._mirror_x\n\n        if mirror_y is None:\n            mirror_y = self._mirror_y\n\n        mirroring = Mirroring.new(x=mirror_x, y=mirror_y)\n\n        if mirroring != self._mirroring:\n            self._mirroring = mirroring\n            yield LM(mirroring=mirroring)\n\n        if scale is not None and scale != self._scale:\n            self._scale = scale\n            yield LS(scale=scale)\n\n    def add_cutout_pad(\n        self,\n        pad: _Pad,\n        at: tuple[float, float],\n        *,\n        rotation: float = 0.0,\n        mirror_x: bool = False,\n        mirror_y: bool = False,\n        scale: float = 1.0,\n    ) -&gt; _Draw:\n        \"\"\"Add cutout in shape of a pad to image.\"\"\"\n        state_updates = list(\n            self._update_state(\n                selected_aperture=pad.aperture_id,\n                polarity=Polarity.Clear,\n                rotation=rotation,\n                mirror_x=mirror_x,\n                mirror_y=mirror_y,\n                scale=scale,\n            )\n        )\n        draw = _Draw(\n            state_updates=state_updates,\n            draw_op=D03(\n                x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n                y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n            ),\n        )\n        self._draws.append(draw)\n        return draw\n\n    def get_code(self) -&gt; GerberX3Code:\n        \"\"\"Get the AST.\"\"\"\n        commands: list[Node] = []\n        commands.append(\n            FS(\n                zeros=Zeros.SKIP_LEADING,\n                coordinate_mode=CoordinateNotation.ABSOLUTE,\n                x_integral=4,\n                x_decimal=6,\n                y_integral=4,\n                y_decimal=6,\n            )\n        )\n        commands.append(MO(mode=UnitMode.METRIC))\n        commands.extend(self._pad_creator._get_nodes())  # noqa: SLF001\n        for draw in self._draws:\n            commands.extend(draw._get_nodes())  # noqa: SLF001\n        commands.append(M02())\n\n        return GerberX3Code(File(nodes=commands))\n\n    def set_standard_attributes(self) -&gt; None:\n        \"\"\"Set standard attributes for the file.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder.new_pad","title":"new_pad","text":"<pre><code>new_pad() -&gt; _PadCreator\n</code></pre> <p>Create a new pad.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def new_pad(self) -&gt; _PadCreator:\n    \"\"\"Create a new pad.\"\"\"\n    return self._pad_creator\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder.add_pad","title":"add_pad","text":"<pre><code>add_pad(\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; _Draw\n</code></pre> <p>Add a pad to the current layer.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def add_pad(\n    self,\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0,\n) -&gt; _Draw:\n    \"\"\"Add a pad to the current layer.\"\"\"\n    state_updates = list(\n        self._update_state(\n            selected_aperture=pad.aperture_id,\n            polarity=Polarity.Dark,\n            rotation=rotation,\n            mirror_x=mirror_x,\n            mirror_y=mirror_y,\n            scale=scale,\n        )\n    )\n    draw = _Draw(\n        state_updates=state_updates,\n        draw_op=D03(\n            x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n            y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n        ),\n    )\n    self._draws.append(draw)\n    return draw\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder.add_cutout_pad","title":"add_cutout_pad","text":"<pre><code>add_cutout_pad(\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; _Draw\n</code></pre> <p>Add cutout in shape of a pad to image.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def add_cutout_pad(\n    self,\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0,\n) -&gt; _Draw:\n    \"\"\"Add cutout in shape of a pad to image.\"\"\"\n    state_updates = list(\n        self._update_state(\n            selected_aperture=pad.aperture_id,\n            polarity=Polarity.Clear,\n            rotation=rotation,\n            mirror_x=mirror_x,\n            mirror_y=mirror_y,\n            scale=scale,\n        )\n    )\n    draw = _Draw(\n        state_updates=state_updates,\n        draw_op=D03(\n            x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n            y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n        ),\n    )\n    self._draws.append(draw)\n    return draw\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder.get_code","title":"get_code","text":"<pre><code>get_code() -&gt; GerberX3Code\n</code></pre> <p>Get the AST.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def get_code(self) -&gt; GerberX3Code:\n    \"\"\"Get the AST.\"\"\"\n    commands: list[Node] = []\n    commands.append(\n        FS(\n            zeros=Zeros.SKIP_LEADING,\n            coordinate_mode=CoordinateNotation.ABSOLUTE,\n            x_integral=4,\n            x_decimal=6,\n            y_integral=4,\n            y_decimal=6,\n        )\n    )\n    commands.append(MO(mode=UnitMode.METRIC))\n    commands.extend(self._pad_creator._get_nodes())  # noqa: SLF001\n    for draw in self._draws:\n        commands.extend(draw._get_nodes())  # noqa: SLF001\n    commands.append(M02())\n\n    return GerberX3Code(File(nodes=commands))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.GerberX3Builder.set_standard_attributes","title":"set_standard_attributes","text":"<pre><code>set_standard_attributes() -&gt; None\n</code></pre> <p>Set standard attributes for the file.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def set_standard_attributes(self) -&gt; None:\n    \"\"\"Set standard attributes for the file.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ApertureNotFoundError","title":"ApertureNotFoundError","text":"<p>             Bases: <code>VisitorError</code></p> <p>Raised when an aperture is not found in the aperture dictionary.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class ApertureNotFoundError(VisitorError):\n    \"\"\"Raised when an aperture is not found in the aperture dictionary.\"\"\"\n\n    def __init__(self, aperture_number: ApertureIdStr) -&gt; None:\n        self.aperture_number = aperture_number\n        super().__init__(\n            f\"Aperture {aperture_number} not found in the aperture dictionary.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ApertureNotSelectedError","title":"ApertureNotSelectedError","text":"<p>             Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when an aperture is not selected in the state tracking visitor.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class ApertureNotSelectedError(StateTrackingVisitorError):\n    \"\"\"Raised when an aperture is not selected in the state tracking visitor.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"Aperture was not selected before attempt was made to use it to draw.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.AstError","title":"AstError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all errors raised by AST.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class AstError(Exception):\n    \"\"\"Base class for all errors raised by AST.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.CoordinateFormatNotSetError","title":"CoordinateFormatNotSetError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when coordinate parsing is requested but format was not prior to it.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class CoordinateFormatNotSetError(AstError):\n    \"\"\"Raised when coordinate parsing is requested but format was not prior to it.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.DirectADHandlerDispatchNotSupportedError","title":"DirectADHandlerDispatchNotSupportedError","text":"<p>             Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when generic AD class is used to select aperture handler.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class DirectADHandlerDispatchNotSupportedError(StateTrackingVisitorError):\n    \"\"\"Raised when generic AD class is used to select aperture handler.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"Aperture was not selected before flash command was issued.\"\n            \" PyGerber does not support direct use of AD class as handler.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.PackedCoordinateTooLongError","title":"PackedCoordinateTooLongError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too long for the format.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class PackedCoordinateTooLongError(AstError):\n    \"\"\"Raised when packed coordinate is too long for the format.\"\"\"\n\n    def __init__(self, coordinate: str, integer: int, decimal: int) -&gt; None:\n        self.coordinate = coordinate\n        self.integer = integer\n        self.decimal = decimal\n        super().__init__(\n            f\"Packed coordinate {coordinate!r} is too long for the format\"\n            f\"({integer},{decimal}).\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.PackedCoordinateTooShortError","title":"PackedCoordinateTooShortError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too short for the format.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class PackedCoordinateTooShortError(AstError):\n    \"\"\"Raised when packed coordinate is too short for the format.\"\"\"\n\n    def __init__(self, coordinate: str, integer: int, decimal: int) -&gt; None:\n        self.coordinate = coordinate\n        self.integer = integer\n        self.decimal = decimal\n        super().__init__(\n            f\"Packed coordinate {coordinate!r} is too short for the format \"\n            f\"({integer},{decimal}).\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.SourceNotAvailableError","title":"SourceNotAvailableError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when source is not available for MD5 check.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class SourceNotAvailableError(AstError):\n    \"\"\"Raised when source is not available for MD5 check.\"\"\"\n\n    def __init__(self, node: TF_MD5) -&gt; None:\n        super().__init__(\"Source is not available for MD5 check.\")\n        self.node = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.VisitorError","title":"VisitorError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all errors raised by visitors.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class VisitorError(Exception):\n    \"\"\"Base class for all errors raised by visitors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor","title":"ExpressionEvalVisitor","text":"<p>             Bases: <code>AstVisitor</code></p> <p><code>ExpressionEvalVisitor</code> class implements a visitor pattern for evaluating value of an mathematical expression.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>class ExpressionEvalVisitor(AstVisitor):\n    \"\"\"`ExpressionEvalVisitor` class implements a visitor pattern for evaluating\n    value of an mathematical expression.\n    \"\"\"\n\n    def __init__(self, scope: Optional[dict[str, Double]] = None) -&gt; None:\n        super().__init__()\n        self.scope = {} if scope is None else scope\n        self.return_value = Double(0.0)\n\n    def evaluate(self, node: Expression) -&gt; float:\n        \"\"\"Evaluate the given expression node.\"\"\"\n        self.return_value = Double(0.0)\n        node.visit(self)\n        return self.return_value\n\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total += self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total /= self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total *= self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total -= self.return_value\n\n        self.return_value = total\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        node.operand.visit(self)\n        self.return_value = -self.return_value\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        node.operand.visit(self)\n        self.return_value = +self.return_value\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self.return_value = self.scope[node.variable]\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self.return_value = node.constant\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.evaluate","title":"evaluate","text":"<pre><code>evaluate(node: Expression) -&gt; float\n</code></pre> <p>Evaluate the given expression node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def evaluate(self, node: Expression) -&gt; float:\n    \"\"\"Evaluate the given expression node.\"\"\"\n    self.return_value = Double(0.0)\n    node.visit(self)\n    return self.return_value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total += self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total /= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total *= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total -= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    node.operand.visit(self)\n    self.return_value = -self.return_value\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    node.operand.visit(self)\n    self.return_value = +self.return_value\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self.return_value = self.scope[node.variable]\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.ExpressionEvalVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self.return_value = node.constant\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder","title":"NodeFinder","text":"<p>             Bases: <code>AstVisitor</code></p> <p>The <code>NodeFinder</code> class can quickly find AST nodes by their location in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>class NodeFinder(AstVisitor):\n    \"\"\"The `NodeFinder` class can quickly find AST nodes by their location\n    in source code.\n    \"\"\"\n\n    def __init__(self, ast: File) -&gt; None:\n        self.ast = ast\n\n    def find_node(self, location: OneBasedPosition) -&gt; Optional[Node]:\n        \"\"\"Find node closest to the given location.\"\"\"\n        self.location = location\n        self.return_node: Optional[Node] = self.ast\n        self.on_file(self.ast)\n        return self.return_node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        if len(node.nodes) == 0:\n            return node\n\n        if len(node.nodes) == 1:\n            self.return_node = node.nodes[0]\n            return node\n\n        self.return_node = self._bin_search(node.nodes)\n\n        return node\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        self._bin_search([node.open, *node.primitives, node.close])\n        return node\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` root node.\"\"\"\n        self._bin_search([node.open, *node.nodes, node.close])\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` root node.\"\"\"\n        self._bin_search([node.open, *node.nodes, node.close])\n        return node\n\n    def _bin_search(self, nodes: Sequence[Node]) -&gt; Optional[Node]:  # noqa: PLR0911\n        if len(nodes) == 1:\n            self.return_node = nodes[0]\n            source_info = self.return_node.source_info\n            if source_info is not None and self.location.column &lt; source_info.column:\n                self.return_node = None\n                return None\n\n            self.return_node.visit(self)\n            return self.return_node\n\n        center_index = len(nodes) // 2\n        center_node = nodes[center_index]\n        source_info = center_node.source_info\n\n        if source_info is None:\n            return self.ast\n\n        if self.location.line == source_info.line:\n            if self.location.column == source_info.column:\n                return self._bin_search(nodes=[center_node])\n\n            if self.location.column &lt; source_info.column:\n                return self._bin_search(nodes=nodes[:center_index])\n\n            return self._bin_search(nodes=nodes[center_index:])\n\n        if self.location.line &lt; source_info.line:\n            return self._bin_search(nodes=nodes[:center_index])\n\n        return self._bin_search(nodes=nodes[center_index:])\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder.find_node","title":"find_node","text":"<pre><code>find_node(location: OneBasedPosition) -&gt; Optional[Node]\n</code></pre> <p>Find node closest to the given location.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def find_node(self, location: OneBasedPosition) -&gt; Optional[Node]:\n    \"\"\"Find node closest to the given location.\"\"\"\n    self.location = location\n    self.return_node: Optional[Node] = self.ast\n    self.on_file(self.ast)\n    return self.return_node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    if len(node.nodes) == 0:\n        return node\n\n    if len(node.nodes) == 1:\n        self.return_node = node.nodes[0]\n        return node\n\n    self.return_node = self._bin_search(node.nodes)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    self._bin_search([node.open, *node.primitives, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` root node.\"\"\"\n    self._bin_search([node.open, *node.nodes, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.NodeFinder.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` root node.\"\"\"\n    self._bin_search([node.open, *node.nodes, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor","title":"StateTrackingVisitor","text":"<p>             Bases: <code>AstVisitor</code></p> <p><code>StateTrackingVisitor</code> is a visitor class that tracks the internal state defined in the GerberX3 specification and modifies it according to Gerber commands.</p> <p>Additionally, it defines a set of higher level callback methods that extend interface of <code>AstVisitor</code> class.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class StateTrackingVisitor(AstVisitor):\n    \"\"\"`StateTrackingVisitor` is a visitor class that tracks the internal state\n    defined in the GerberX3 specification and modifies it according to Gerber\n    commands.\n\n    Additionally, it defines a set of higher level callback methods that extend\n    interface of `AstVisitor` class.\n    \"\"\"\n\n    def __init__(self, *, ignore_program_stop: bool = False) -&gt; None:\n        super().__init__()\n        self._ignore_program_stop = ignore_program_stop\n\n        self.state = State()\n        self._on_d01_handler = self.on_draw_line\n        self._plot_mode_to_d01_handler = {\n            PlotMode.LINEAR: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_line,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_line,\n            },\n            PlotMode.ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_cw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_cw_arc_mq,\n            },\n            PlotMode.CCW_ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_ccw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_ccw_arc_mq,\n            },\n        }\n        self._plot_mode_to_in_region_d01_handler = {\n            PlotMode.LINEAR: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_line,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_line,\n            },\n            PlotMode.ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_cw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_cw_arc_mq,\n            },\n            PlotMode.CCW_ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_ccw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_ccw_arc_mq,\n            },\n        }\n        self._on_d03_handler: Callable[[D03, AD | AB], None] = lambda *_: throw(  # type: ignore[unreachable]\n            ApertureNotSelectedError()\n        )\n        self._dispatch_d01_handler: Callable[[], None] = (\n            self._dispatch_d01_handler_non_region\n        )\n\n    @property\n    def coordinate_x(self) -&gt; Double:\n        \"\"\"Get X coordinate.\"\"\"\n        coordinate = self.state.coordinate_x\n        if coordinate is None:\n            return self.state.current_x\n        return coordinate\n\n    @property\n    def coordinate_y(self) -&gt; Double:\n        \"\"\"Get Y coordinate.\"\"\"\n        coordinate = self.state.coordinate_y\n        if coordinate is None:\n            return self.state.current_y\n        return coordinate\n\n    @property\n    def coordinate_i(self) -&gt; Double:\n        \"\"\"Get X coordinate.\"\"\"\n        coordinate = self.state.coordinate_i\n        if coordinate is None:\n            return 0.0\n        return coordinate\n\n    @property\n    def coordinate_j(self) -&gt; Double:\n        \"\"\"Get Y coordinate.\"\"\"\n        coordinate = self.state.coordinate_j\n        if coordinate is None:\n            return 0.0\n        return coordinate\n\n    @property\n    def is_negative(self) -&gt; bool:\n        \"\"\"Check if current aperture is negative.\"\"\"\n        return self.state.transform.polarity == Polarity.Clear\n\n    # Aperture\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` node.\"\"\"\n        super().on_ab(node)\n        self.state.apertures.blocks[node.open.aperture_id] = node\n        self.state.apertures.per_aperture_attributes[node.open.aperture_id] = (\n            self.state.attributes.aperture_attributes.copy()\n        )\n        return node\n\n    def on_ad(self, node: AD) -&gt; None:\n        \"\"\"Handle `AD` node.\"\"\"\n        self.state.apertures.apertures[node.aperture_id] = node\n        self.state.apertures.per_aperture_attributes[node.aperture_id] = (\n            self.state.attributes.aperture_attributes.copy()\n        )\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        self.state.apertures.macros[node.open.name] = node\n        return node\n\n    # Attribute\n\n    def on_ta(self, node: TA) -&gt; None:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        self.state.attributes.aperture_attributes[node.attribute_name] = node\n\n    def on_tf(self, node: TF) -&gt; None:\n        \"\"\"Handle `TF` node.\"\"\"\n        self.state.attributes.file_attributes[node.attribute_name] = node\n\n    def on_to(self, node: TO) -&gt; None:\n        \"\"\"Handle `TO` node.\"\"\"\n        self.state.attributes.object_attributes[node.attribute_name] = node\n\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        if node.name is None:\n            self.state.attributes.aperture_attributes.clear()\n            self.state.attributes.object_attributes.clear()\n            return node\n\n        self.state.attributes.aperture_attributes.pop(node.name, None)\n        self.state.attributes.object_attributes.pop(node.name, None)\n        return node\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        super().on_d01(node)\n        self._on_d01_handler(node)\n        self._update_coordinates()\n        return node\n\n    def on_draw_line(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n\n    def on_draw_cw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant\n        mode.\n        \"\"\"\n\n    def on_draw_cw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n\n    def on_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n        mode.\n        \"\"\"\n\n    def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode.\n        \"\"\"\n\n    def _update_coordinates(self) -&gt; None:\n        if self.state.coordinate_x is not None:\n            self.state.current_x = self.state.coordinate_x\n        if self.state.coordinate_y is not None:\n            self.state.current_y = self.state.coordinate_y\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        super().on_d02(node)\n        self._update_coordinates()\n        if self.state.is_region:\n            self.on_flush_region()\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        super().on_d03(node)\n        self._on_d03_handler(node, self.state.current_aperture)\n        self._update_coordinates()\n        return node\n\n    def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n\n    def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:\n        \"\"\"Handle `D03` node with `ADR` aperture.\"\"\"\n\n    def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:\n        \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n\n    def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:\n        \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n\n    def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:\n        \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n\n    def on_flash_block(self, node: D03, aperture: AB) -&gt; None:\n        \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        self.state.current_aperture_id = node.aperture_id\n\n        aperture = self.state.current_aperture\n        handler: Any\n\n        if isinstance(aperture, ADC):\n            handler = self.on_flash_circle\n        elif isinstance(aperture, ADR):\n            handler = self.on_flash_rectangle\n        elif isinstance(aperture, ADO):\n            handler = self.on_flash_obround\n        elif isinstance(aperture, ADP):\n            handler = self.on_flash_polygon\n        elif isinstance(aperture, ADmacro):\n            handler = self.on_flash_macro\n        elif isinstance(aperture, AB):\n            handler = self.on_flash_block\n        elif isinstance(aperture, AD):\n            raise DirectADHandlerDispatchNotSupportedError\n\n        self._on_d03_handler = handler\n        return node\n\n    # G codes\n\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        super().on_g01(node)\n        self.state.plot_mode = PlotMode.LINEAR\n        self._dispatch_d01_handler()\n        return node\n\n    def _dispatch_d01_handler_in_region(self) -&gt; None:\n        self._on_d01_handler = self._plot_mode_to_in_region_d01_handler[\n            self.state.plot_mode\n        ][self.state.arc_interpolation]\n\n    def _dispatch_d01_handler_non_region(self) -&gt; None:\n        self._on_d01_handler = self._plot_mode_to_d01_handler[self.state.plot_mode][\n            self.state.arc_interpolation\n        ]\n\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        super().on_g02(node)\n        self.state.plot_mode = PlotMode.ARC\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        super().on_g03(node)\n        self.state.plot_mode = PlotMode.CCW_ARC\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        super().on_g36(node)\n        self.on_start_region()\n        return node\n\n    def on_start_region(self) -&gt; None:\n        \"\"\"Handle start of region.\"\"\"\n        self.state.is_region = True\n        self._dispatch_d01_handler = self._dispatch_d01_handler_in_region\n        self._dispatch_d01_handler()\n\n    def on_in_region_draw_line(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n\n    def on_in_region_draw_cw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant mode\n        within region statement.\n        \"\"\"\n\n    def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n        within region statement.\n        \"\"\"\n\n    def on_in_region_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n        mode within region statement.\n        \"\"\"\n\n    def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode within region statement.\n        \"\"\"\n\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        super().on_g37(node)\n        self.on_flush_region()\n        self.on_end_region()\n        return node\n\n    def on_flush_region(self) -&gt; None:\n        \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n\n    def on_end_region(self) -&gt; None:\n        \"\"\"Handle end of region.\"\"\"\n        self.state.is_region = False\n        self._dispatch_d01_handler = self._dispatch_d01_handler_non_region\n        self._dispatch_d01_handler()\n\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        super().on_g70(node)\n        self.state.unit_mode = UnitMode.IMPERIAL\n        return node\n\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        super().on_g71(node)\n        self.state.unit_mode = UnitMode.METRIC\n        return node\n\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        super().on_g74(node)\n        self.state.arc_interpolation = ArcInterpolation.SINGLE_QUADRANT\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        super().on_g75(node)\n        self.state.arc_interpolation = ArcInterpolation.MULTI_QUADRANT\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        super().on_g90(node)\n        if self.state.coordinate_format is None:\n            self.state.coordinate_format = CoordinateFormat()\n\n        self.state.coordinate_format.coordinate_mode = CoordinateNotation.ABSOLUTE\n        return node\n\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        super().on_g91(node)\n        if self.state.coordinate_format is None:\n            self.state.coordinate_format = CoordinateFormat()\n\n        self.state.coordinate_format.coordinate_mode = CoordinateNotation.INCREMENTAL\n        return node\n\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        super().on_lm(node)\n        self.state.transform.mirroring = node.mirroring\n        return node\n\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        super().on_ln(node)\n        self.state.image_attributes.file_name = node.name\n        return node\n\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        super().on_lp(node)\n        self.state.transform.polarity = node.polarity\n        return node\n\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        super().on_lr(node)\n        self.state.transform.rotation = node.rotation\n        return node\n\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        super().on_ls(node)\n        self.state.transform.scaling = node.scale\n        return node\n\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        raise ProgramStop(node)\n\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        raise ProgramStop(node)\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_x(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_x = self.state.coordinate_format.unpack_x(node.value)\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_y(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_y = self.state.coordinate_format.unpack_y(node.value)\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_i(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_i = self.state.coordinate_format.unpack_x(node.value)\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_j(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_j = self.state.coordinate_format.unpack_y(node.value)\n        return node\n\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        super().on_as(node)\n        self.state.image_attributes.axis_correspondence = node.correspondence\n        return node\n\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        super().on_fs(node)\n        self.state.coordinate_format = CoordinateFormat(\n            zeros=node.zeros,\n            coordinate_mode=node.coordinate_mode,\n            x_integral=node.x_integral,\n            x_decimal=node.x_decimal,\n            y_integral=node.y_integral,\n            y_decimal=node.y_decimal,\n        )\n        return node\n\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        super().on_in(node)\n        self.state.image_attributes.image_name = node.name\n        return node\n\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        super().on_ip(node)\n        self.state.image_attributes.polarity = node.polarity\n        return node\n\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        super().on_ir(node)\n        self.state.image_attributes.rotation = node.rotation_degrees\n        return node\n\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        super().on_mi(node)\n        self.state.image_attributes.a_axis_mirroring = node.a_mirroring\n        self.state.image_attributes.b_axis_mirroring = node.b_mirroring\n        return node\n\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        super().on_mo(node)\n        self.state.unit_mode = node.mode\n        return node\n\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        super().on_of(node)\n        self.state.image_attributes.a_axis_offset = node.a_offset\n        self.state.image_attributes.b_axis_offset = node.b_offset\n        return node\n\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        super().on_sf(node)\n        self.state.image_attributes.a_axis_scale = node.a_scale\n        self.state.image_attributes.b_axis_scale = node.b_scale\n        return node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        with suppress(ProgramStop):\n            super().on_file(node)\n        return node\n\n    def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n        \"\"\"Handle exception.\"\"\"\n        if isinstance(exception, ProgramStop):\n            return bool(self._ignore_program_stop)\n\n        return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.coordinate_x","title":"coordinate_x  <code>property</code>","text":"<pre><code>coordinate_x: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.coordinate_y","title":"coordinate_y  <code>property</code>","text":"<pre><code>coordinate_y: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.coordinate_i","title":"coordinate_i  <code>property</code>","text":"<pre><code>coordinate_i: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.coordinate_j","title":"coordinate_j  <code>property</code>","text":"<pre><code>coordinate_j: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.is_negative","title":"is_negative  <code>property</code>","text":"<pre><code>is_negative: bool\n</code></pre> <p>Check if current aperture is negative.</p>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` node.\"\"\"\n    super().on_ab(node)\n    self.state.apertures.blocks[node.open.aperture_id] = node\n    self.state.apertures.per_aperture_attributes[node.open.aperture_id] = (\n        self.state.attributes.aperture_attributes.copy()\n    )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ad(self, node: AD) -&gt; None:\n    \"\"\"Handle `AD` node.\"\"\"\n    self.state.apertures.apertures[node.aperture_id] = node\n    self.state.apertures.per_aperture_attributes[node.aperture_id] = (\n        self.state.attributes.aperture_attributes.copy()\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    self.state.apertures.macros[node.open.name] = node\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ta(self, node: TA) -&gt; None:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    self.state.attributes.aperture_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_tf(self, node: TF) -&gt; None:\n    \"\"\"Handle `TF` node.\"\"\"\n    self.state.attributes.file_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_to(self, node: TO) -&gt; None:\n    \"\"\"Handle `TO` node.\"\"\"\n    self.state.attributes.object_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    if node.name is None:\n        self.state.attributes.aperture_attributes.clear()\n        self.state.attributes.object_attributes.clear()\n        return node\n\n    self.state.attributes.aperture_attributes.pop(node.name, None)\n    self.state.attributes.object_attributes.pop(node.name, None)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    super().on_d01(node)\n    self._on_d01_handler(node)\n    self._update_coordinates()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_line(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_draw_cw_arc_sq","title":"on_draw_cw_arc_sq","text":"<pre><code>on_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_cw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_cw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_draw_ccw_arc_sq","title":"on_draw_ccw_arc_sq","text":"<pre><code>on_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    super().on_d02(node)\n    self._update_coordinates()\n    if self.state.is_region:\n        self.on_flush_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    super().on_d03(node)\n    self._on_d03_handler(node, self.state.current_aperture)\n    self._update_coordinates()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADR</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:\n    \"\"\"Handle `D03` node with `ADR` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:\n    \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:\n    \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:\n    \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_block(self, node: D03, aperture: AB) -&gt; None:\n    \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    self.state.current_aperture_id = node.aperture_id\n\n    aperture = self.state.current_aperture\n    handler: Any\n\n    if isinstance(aperture, ADC):\n        handler = self.on_flash_circle\n    elif isinstance(aperture, ADR):\n        handler = self.on_flash_rectangle\n    elif isinstance(aperture, ADO):\n        handler = self.on_flash_obround\n    elif isinstance(aperture, ADP):\n        handler = self.on_flash_polygon\n    elif isinstance(aperture, ADmacro):\n        handler = self.on_flash_macro\n    elif isinstance(aperture, AB):\n        handler = self.on_flash_block\n    elif isinstance(aperture, AD):\n        raise DirectADHandlerDispatchNotSupportedError\n\n    self._on_d03_handler = handler\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    super().on_g01(node)\n    self.state.plot_mode = PlotMode.LINEAR\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    super().on_g02(node)\n    self.state.plot_mode = PlotMode.ARC\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    super().on_g03(node)\n    self.state.plot_mode = PlotMode.CCW_ARC\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    super().on_g36(node)\n    self.on_start_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_start_region(self) -&gt; None:\n    \"\"\"Handle start of region.\"\"\"\n    self.state.is_region = True\n    self._dispatch_d01_handler = self._dispatch_d01_handler_in_region\n    self._dispatch_d01_handler()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_line(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in_region_draw_cw_arc_sq","title":"on_in_region_draw_cw_arc_sq","text":"<pre><code>on_in_region_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_cw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant mode\n    within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n    within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in_region_draw_ccw_arc_sq","title":"on_in_region_draw_ccw_arc_sq","text":"<pre><code>on_in_region_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n    mode within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    super().on_g37(node)\n    self.on_flush_region()\n    self.on_end_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flush_region(self) -&gt; None:\n    \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_end_region(self) -&gt; None:\n    \"\"\"Handle end of region.\"\"\"\n    self.state.is_region = False\n    self._dispatch_d01_handler = self._dispatch_d01_handler_non_region\n    self._dispatch_d01_handler()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    super().on_g70(node)\n    self.state.unit_mode = UnitMode.IMPERIAL\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    super().on_g71(node)\n    self.state.unit_mode = UnitMode.METRIC\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    super().on_g74(node)\n    self.state.arc_interpolation = ArcInterpolation.SINGLE_QUADRANT\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    super().on_g75(node)\n    self.state.arc_interpolation = ArcInterpolation.MULTI_QUADRANT\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    super().on_g90(node)\n    if self.state.coordinate_format is None:\n        self.state.coordinate_format = CoordinateFormat()\n\n    self.state.coordinate_format.coordinate_mode = CoordinateNotation.ABSOLUTE\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    super().on_g91(node)\n    if self.state.coordinate_format is None:\n        self.state.coordinate_format = CoordinateFormat()\n\n    self.state.coordinate_format.coordinate_mode = CoordinateNotation.INCREMENTAL\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    super().on_lm(node)\n    self.state.transform.mirroring = node.mirroring\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    super().on_ln(node)\n    self.state.image_attributes.file_name = node.name\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    super().on_lp(node)\n    self.state.transform.polarity = node.polarity\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    super().on_lr(node)\n    self.state.transform.rotation = node.rotation\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    super().on_ls(node)\n    self.state.transform.scaling = node.scale\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    raise ProgramStop(node)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    raise ProgramStop(node)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_x(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_x = self.state.coordinate_format.unpack_x(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_y(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_y = self.state.coordinate_format.unpack_y(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_i(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_i = self.state.coordinate_format.unpack_x(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_j(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_j = self.state.coordinate_format.unpack_y(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    super().on_as(node)\n    self.state.image_attributes.axis_correspondence = node.correspondence\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    super().on_fs(node)\n    self.state.coordinate_format = CoordinateFormat(\n        zeros=node.zeros,\n        coordinate_mode=node.coordinate_mode,\n        x_integral=node.x_integral,\n        x_decimal=node.x_decimal,\n        y_integral=node.y_integral,\n        y_decimal=node.y_decimal,\n    )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    super().on_in(node)\n    self.state.image_attributes.image_name = node.name\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    super().on_ip(node)\n    self.state.image_attributes.polarity = node.polarity\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    super().on_ir(node)\n    self.state.image_attributes.rotation = node.rotation_degrees\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    super().on_mi(node)\n    self.state.image_attributes.a_axis_mirroring = node.a_mirroring\n    self.state.image_attributes.b_axis_mirroring = node.b_mirroring\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    super().on_mo(node)\n    self.state.unit_mode = node.mode\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    super().on_of(node)\n    self.state.image_attributes.a_axis_offset = node.a_offset\n    self.state.image_attributes.b_axis_offset = node.b_offset\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    super().on_sf(node)\n    self.state.image_attributes.a_axis_scale = node.a_scale\n    self.state.image_attributes.b_axis_scale = node.b_scale\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    with suppress(ProgramStop):\n        super().on_file(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/__init__.html#pygerber.gerberx3.ast.StateTrackingVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n    \"\"\"Handle exception.\"\"\"\n    if isinstance(exception, ProgramStop):\n        return bool(self._ignore_program_stop)\n\n    return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html","title":"ast_visitor","text":""},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor","title":"ast_visitor","text":"<p>The <code>ast_visitor</code> module contains <code>AstVisitor</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor","title":"AstVisitor","text":"<p>The <code>AstVisitor</code> class is a class that acts as a visitor for <code>Node</code> instances according to the visitor design pattern.</p> <p>For more information on this pattern visit: https://refactoring.guru/design-patterns/visitor</p> <p>Logic of walking the AST is implemented within the visitor callbacks, hence be careful when overriding methods of this class, as not calling <code>super().method()</code> may result in subnodes of a node not being visited at all. This applies to nodes like <code>AB</code>, <code>AM</code> etc. Whenever you override a method, look up the implementation from AstVisitor to make sure you will be getting the behavior you intend to get.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>class AstVisitor:\n    \"\"\"The `AstVisitor` class is a class that acts as a visitor for `Node` instances\n    according to the visitor design pattern.\n\n    For more information on this pattern visit:\n    https://refactoring.guru/design-patterns/visitor\n\n    Logic of walking the AST is implemented within the visitor callbacks, hence be\n    careful when overriding methods of this class, as not calling `super().method()` may\n    result in subnodes of a node not being visited at all. This applies to nodes\n    like `AB`, `AM` etc. Whenever you override a method, look up the implementation from\n    AstVisitor to make sure you will be getting the behavior you intend to get.\n    \"\"\"\n\n    # Aperture\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` root node.\"\"\"\n        node.open.visit(self)\n        for inner_node in node.nodes:\n            inner_node.visit(self)\n        node.close.visit(self)\n\n        return node\n\n    def on_ab_close(self, node: ABclose) -&gt; ABclose:\n        \"\"\"Handle `ABclose` node.\"\"\"\n        return node\n\n    def on_ab_open(self, node: ABopen) -&gt; ABopen:\n        \"\"\"Handle `ABopen` node.\"\"\"\n        return node\n\n    def on_ad(self, node: AD) -&gt; None:\n        \"\"\"Handle `AD` node.\"\"\"\n\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        self.on_ad(node)\n        return node\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        node.open.visit(self)\n        for primitive in node.primitives:\n            primitive.visit(self)\n        node.close.visit(self)\n        return node\n\n    def on_am_close(self, node: AMclose) -&gt; AMclose:\n        \"\"\"Handle `AMclose` node.\"\"\"\n        return node\n\n    def on_am_open(self, node: AMopen) -&gt; AMopen:\n        \"\"\"Handle `AMopen` node.\"\"\"\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` root node.\"\"\"\n        node.open.visit(self)\n        for inner_node in node.nodes:\n            inner_node.visit(self)\n        node.close.visit(self)\n        return node\n\n    def on_sr_close(self, node: SRclose) -&gt; SRclose:\n        \"\"\"Handle `SRclose` node.\"\"\"\n        return node\n\n    def on_sr_open(self, node: SRopen) -&gt; SRopen:\n        \"\"\"Handle `SRopen` node.\"\"\"\n        return node\n\n    # Attribute\n\n    def on_ta(self, node: TA) -&gt; None:\n        \"\"\"Handle `TA` node.\"\"\"\n\n    def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n        \"\"\"Handle `TA_AperFunction` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n        \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n        \"\"\"Handle `TA_FlashText` node.\"\"\"\n        self.on_ta(node)\n        return node\n\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        return node\n\n    def on_tf(self, node: TF) -&gt; None:\n        \"\"\"Handle `TF` node.\"\"\"\n\n    def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n        \"\"\"Handle `TF_UserName` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n        \"\"\"Handle `TF_Part` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n        \"\"\"Handle `TF_FileFunction` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n        \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n        \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n        \"\"\"Handle `TF_CreationDate` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_generation_software(\n        self, node: TF_GenerationSoftware\n    ) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n        \"\"\"Handle `TF_ProjectId` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n        \"\"\"Handle `TF_MD5` node.\"\"\"\n        self.on_tf(node)\n        return node\n\n    def on_to(self, node: TO) -&gt; None:\n        \"\"\"Handle `TO` node.\"\"\"\n\n    def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n        \"\"\"Handle `TO_UserName` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_n(self, node: TO_N) -&gt; TO_N:\n        \"\"\"Handle `TO_N` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_p(self, node: TO_P) -&gt; TO_P:\n        \"\"\"Handle `TO_P` node`.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_c(self, node: TO_C) -&gt; TO_C:\n        \"\"\"Handle `TO_C` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n        \"\"\"Handle `TO_CRot` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n        \"\"\"Handle `TO_CMfr` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n        \"\"\"Handle `TO_CMNP` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n        \"\"\"Handle `TO_Cftp` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n        \"\"\"Handle `TO_CPgN` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n        \"\"\"Handle `TO_CPgD` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n        \"\"\"Handle `TO_CHgt` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n        \"\"\"Handle `TO_CLbN` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n        \"\"\"Handle `TO_CLbD` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n        \"\"\"Handle `TO_CSup` node.\"\"\"\n        self.on_to(node)\n        return node\n\n    # D codes\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        if node.i is not None:\n            node.i.visit(self)\n\n        if node.j is not None:\n            node.j.visit(self)\n\n        return node\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        if node.x is not None:\n            node.x.visit(self)\n\n        if node.y is not None:\n            node.y.visit(self)\n\n        return node\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        return node\n\n    # G codes\n\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        return node\n\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        return node\n\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        return node\n\n    def on_g04(self, node: G04) -&gt; G04:\n        \"\"\"Handle `G04` node.\"\"\"\n        return node\n\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        return node\n\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        return node\n\n    def on_g54(self, node: G54) -&gt; G54:\n        \"\"\"Handle `G54` node.\"\"\"\n        return node\n\n    def on_g55(self, node: G55) -&gt; G55:\n        \"\"\"Handle `G55` node.\"\"\"\n        return node\n\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        return node\n\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        return node\n\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        return node\n\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        return node\n\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        return node\n\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        return node\n\n    # Load\n\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        return node\n\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        return node\n\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        return node\n\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        return node\n\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        return node\n\n    # M Codes\n\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        return node\n\n    def on_m01(self, node: M01) -&gt; M01:\n        \"\"\"Handle `M01` node.\"\"\"\n        return node\n\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        return node\n\n    # Math\n\n    # Math :: Operators :: Binary\n\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        self.on_expression(node)\n        node.head.visit(self)\n\n        for operand in node.tail:\n            operand.visit(self)\n\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        self.on_expression(node)\n        node.operand.visit(self)\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        self.on_expression(node)\n        node.operand.visit(self)\n        return node\n\n    def on_assignment(self, node: Assignment) -&gt; Assignment:\n        \"\"\"Handle `Assignment` node.\"\"\"\n        node.variable.visit(self)\n        node.expression.visit(self)\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self.on_expression(node)\n        return node\n\n    def on_expression(self, node: Expression) -&gt; None:\n        \"\"\"Handle `Expression` node.\"\"\"\n\n    def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n        \"\"\"Handle `Parenthesis` node.\"\"\"\n        self.on_expression(node)\n        node.inner.visit(self)\n        return node\n\n    def on_point(self, node: Point) -&gt; Point:\n        \"\"\"Handle `Point` node.\"\"\"\n        node.x.visit(self)\n        node.y.visit(self)\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self.on_expression(node)\n        return node\n\n    # Other\n\n    def on_coordinate(self, node: Coordinate) -&gt; None:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self.on_coordinate(node)\n        return node\n\n    # Primitives\n\n    def on_code_0(self, node: Code0) -&gt; Code0:\n        \"\"\"Handle `Code0` node.\"\"\"\n        return node\n\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        \"\"\"Handle `Code1` node.\"\"\"\n        node.exposure.visit(self)\n        node.diameter.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        if node.rotation is not None:\n            node.rotation.visit(self)\n        return node\n\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        \"\"\"Handle `Code2` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        node.end_x.visit(self)\n        node.end_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_4(self, node: Code4) -&gt; Code4:\n        \"\"\"Handle `Code4` node.\"\"\"\n        node.exposure.visit(self)\n        node.number_of_points.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        for point in node.points:\n            point.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_5(self, node: Code5) -&gt; Code5:\n        \"\"\"Handle `Code5` node.\"\"\"\n        node.exposure.visit(self)\n        node.number_of_vertices.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.diameter.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_6(self, node: Code6) -&gt; Code6:\n        \"\"\"Handle `Code6` node.\"\"\"\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.outer_diameter.visit(self)\n        node.ring_thickness.visit(self)\n        node.gap_between_rings.visit(self)\n        node.max_ring_count.visit(self)\n        node.crosshair_thickness.visit(self)\n        node.crosshair_length.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_7(self, node: Code7) -&gt; Code7:\n        \"\"\"Handle `Code7` node.\"\"\"\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.outer_diameter.visit(self)\n        node.inner_diameter.visit(self)\n        node.gap_thickness.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        \"\"\"Handle `Code20` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.start_x.visit(self)\n        node.start_y.visit(self)\n        node.end_x.visit(self)\n        node.end_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_21(self, node: Code21) -&gt; Code21:\n        \"\"\"Handle `Code21` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.height.visit(self)\n        node.center_x.visit(self)\n        node.center_y.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    def on_code_22(self, node: Code22) -&gt; Code22:\n        \"\"\"Handle `Code22` node.\"\"\"\n        node.exposure.visit(self)\n        node.width.visit(self)\n        node.height.visit(self)\n        node.x_lower_left.visit(self)\n        node.y_lower_left.visit(self)\n        node.rotation.visit(self)\n        return node\n\n    # Properties\n\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        return node\n\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        return node\n\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        return node\n\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        return node\n\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        return node\n\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        return node\n\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        return node\n\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        return node\n\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        return node\n\n    # Root node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        try:\n            for command in node.nodes:\n                try:\n                    command.visit(self)\n                except Exception as e:  # noqa: PERF203\n                    if self.on_exception(command, e):\n                        raise\n        finally:\n            self.on_end_of_file(node)\n        return node\n\n    def on_end_of_file(self, node: File) -&gt; None:\n        \"\"\"Handle end of file.\"\"\"\n\n    def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n        \"\"\"Handle exception.\n\n        If return value is True, exception will be re-raised.\n        \"\"\"\n        return True\n\n    def on_invalid(self, node: Invalid) -&gt; Invalid:\n        \"\"\"Handle invalid node.\"\"\"\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` root node.\"\"\"\n    node.open.visit(self)\n    for inner_node in node.nodes:\n        inner_node.visit(self)\n    node.close.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab_close(self, node: ABclose) -&gt; ABclose:\n    \"\"\"Handle `ABclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ab_open(self, node: ABopen) -&gt; ABopen:\n    \"\"\"Handle `ABopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ad(self, node: AD) -&gt; None:\n    \"\"\"Handle `AD` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    self.on_ad(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    node.open.visit(self)\n    for primitive in node.primitives:\n        primitive.visit(self)\n    node.close.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am_close(self, node: AMclose) -&gt; AMclose:\n    \"\"\"Handle `AMclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_am_open(self, node: AMopen) -&gt; AMopen:\n    \"\"\"Handle `AMopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` root node.\"\"\"\n    node.open.visit(self)\n    for inner_node in node.nodes:\n        inner_node.visit(self)\n    node.close.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr_close(self, node: SRclose) -&gt; SRclose:\n    \"\"\"Handle `SRclose` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sr_open(self, node: SRopen) -&gt; SRopen:\n    \"\"\"Handle `SRopen` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta(self, node: TA) -&gt; None:\n    \"\"\"Handle `TA` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n    \"\"\"Handle `TA_AperFunction` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n    \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n    \"\"\"Handle `TA_FlashText` node.\"\"\"\n    self.on_ta(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf(self, node: TF) -&gt; None:\n    \"\"\"Handle `TF` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n    \"\"\"Handle `TF_UserName` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n    \"\"\"Handle `TF_Part` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n    \"\"\"Handle `TF_FileFunction` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n    \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n    \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n    \"\"\"Handle `TF_CreationDate` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_generation_software(\n    self, node: TF_GenerationSoftware\n) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n    \"\"\"Handle `TF_ProjectId` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n    \"\"\"Handle `TF_MD5` node.\"\"\"\n    self.on_tf(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to(self, node: TO) -&gt; None:\n    \"\"\"Handle `TO` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n    \"\"\"Handle `TO_UserName` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_n(self, node: TO_N) -&gt; TO_N:\n    \"\"\"Handle `TO_N` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_p(self, node: TO_P) -&gt; TO_P:\n    \"\"\"Handle `TO_P` node`.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_c(self, node: TO_C) -&gt; TO_C:\n    \"\"\"Handle `TO_C` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n    \"\"\"Handle `TO_CRot` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n    \"\"\"Handle `TO_CMfr` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n    \"\"\"Handle `TO_CMNP` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n    \"\"\"Handle `TO_Cftp` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n    \"\"\"Handle `TO_CPgN` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n    \"\"\"Handle `TO_CPgD` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n    \"\"\"Handle `TO_CHgt` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n    \"\"\"Handle `TO_CLbN` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n    \"\"\"Handle `TO_CLbD` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n    \"\"\"Handle `TO_CSup` node.\"\"\"\n    self.on_to(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    if node.i is not None:\n        node.i.visit(self)\n\n    if node.j is not None:\n        node.j.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    if node.x is not None:\n        node.x.visit(self)\n\n    if node.y is not None:\n        node.y.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g04(self, node: G04) -&gt; G04:\n    \"\"\"Handle `G04` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g54(self, node: G54) -&gt; G54:\n    \"\"\"Handle `G54` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g55(self, node: G55) -&gt; G55:\n    \"\"\"Handle `G55` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m01(self, node: M01) -&gt; M01:\n    \"\"\"Handle `M01` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    self.on_expression(node)\n    node.head.visit(self)\n\n    for operand in node.tail:\n        operand.visit(self)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    self.on_expression(node)\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    self.on_expression(node)\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_assignment(self, node: Assignment) -&gt; Assignment:\n    \"\"\"Handle `Assignment` node.\"\"\"\n    node.variable.visit(self)\n    node.expression.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self.on_expression(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_expression","title":"on_expression","text":"<pre><code>on_expression(node: Expression) -&gt; None\n</code></pre> <p>Handle <code>Expression</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_expression(self, node: Expression) -&gt; None:\n    \"\"\"Handle `Expression` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n    \"\"\"Handle `Parenthesis` node.\"\"\"\n    self.on_expression(node)\n    node.inner.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_point(self, node: Point) -&gt; Point:\n    \"\"\"Handle `Point` node.\"\"\"\n    node.x.visit(self)\n    node.y.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self.on_expression(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_coordinate","title":"on_coordinate","text":"<pre><code>on_coordinate(node: Coordinate) -&gt; None\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate(self, node: Coordinate) -&gt; None:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self.on_coordinate(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_0(self, node: Code0) -&gt; Code0:\n    \"\"\"Handle `Code0` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_1(self, node: Code1) -&gt; Code1:\n    \"\"\"Handle `Code1` node.\"\"\"\n    node.exposure.visit(self)\n    node.diameter.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    if node.rotation is not None:\n        node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_2(self, node: Code2) -&gt; Code2:\n    \"\"\"Handle `Code2` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    node.end_x.visit(self)\n    node.end_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_4(self, node: Code4) -&gt; Code4:\n    \"\"\"Handle `Code4` node.\"\"\"\n    node.exposure.visit(self)\n    node.number_of_points.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    for point in node.points:\n        point.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_5(self, node: Code5) -&gt; Code5:\n    \"\"\"Handle `Code5` node.\"\"\"\n    node.exposure.visit(self)\n    node.number_of_vertices.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.diameter.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_6(self, node: Code6) -&gt; Code6:\n    \"\"\"Handle `Code6` node.\"\"\"\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.outer_diameter.visit(self)\n    node.ring_thickness.visit(self)\n    node.gap_between_rings.visit(self)\n    node.max_ring_count.visit(self)\n    node.crosshair_thickness.visit(self)\n    node.crosshair_length.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_7(self, node: Code7) -&gt; Code7:\n    \"\"\"Handle `Code7` node.\"\"\"\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.outer_diameter.visit(self)\n    node.inner_diameter.visit(self)\n    node.gap_thickness.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_20(self, node: Code20) -&gt; Code20:\n    \"\"\"Handle `Code20` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.start_x.visit(self)\n    node.start_y.visit(self)\n    node.end_x.visit(self)\n    node.end_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_21(self, node: Code21) -&gt; Code21:\n    \"\"\"Handle `Code21` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.height.visit(self)\n    node.center_x.visit(self)\n    node.center_y.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_code_22(self, node: Code22) -&gt; Code22:\n    \"\"\"Handle `Code22` node.\"\"\"\n    node.exposure.visit(self)\n    node.width.visit(self)\n    node.height.visit(self)\n    node.x_lower_left.visit(self)\n    node.y_lower_left.visit(self)\n    node.rotation.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    try:\n        for command in node.nodes:\n            try:\n                command.visit(self)\n            except Exception as e:  # noqa: PERF203\n                if self.on_exception(command, e):\n                    raise\n    finally:\n        self.on_end_of_file(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_end_of_file","title":"on_end_of_file","text":"<pre><code>on_end_of_file(node: File) -&gt; None\n</code></pre> <p>Handle end of file.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_end_of_file(self, node: File) -&gt; None:\n    \"\"\"Handle end of file.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> <p>If return value is True, exception will be re-raised.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n    \"\"\"Handle exception.\n\n    If return value is True, exception will be re-raised.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/ast_visitor.html#pygerber.gerberx3.ast.ast_visitor.AstVisitor.on_invalid","title":"on_invalid","text":"<pre><code>on_invalid(node: Invalid) -&gt; Invalid\n</code></pre> <p>Handle invalid node.</p> Source code in <code>src/pygerber/gerberx3/ast/ast_visitor.py</code> <pre><code>def on_invalid(self, node: Invalid) -&gt; Invalid:\n    \"\"\"Handle invalid node.\"\"\"\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html","title":"builder","text":""},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder","title":"builder","text":"<p>The <code>builder</code> module provides a <code>stable</code> interface for constructing Gerber code which can then be dumped using formatter interface to Gerber files.</p>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder","title":"GerberX3Builder","text":"<p>Builder class for constructing Gerber ASTs.</p> <p>Code generated is compliant with <code>The Gerber Layer Format Specification - Revision 2024.05</code>.</p> <p>https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>class GerberX3Builder:\n    \"\"\"Builder class for constructing Gerber ASTs.\n\n    Code generated is compliant with\n    `The Gerber Layer Format Specification - Revision 2024.05`.\n\n    https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self._pad_creator = _PadCreator()\n        self._draws: list[_Draw] = []\n\n        self._coordinate_format = CoordinateFormat(\n            zeros=Zeros.SKIP_LEADING,\n            coordinate_mode=CoordinateNotation.ABSOLUTE,\n            x_integral=4,\n            x_decimal=6,\n            y_integral=4,\n            y_decimal=6,\n        )\n\n        self._current_location = (0.0, 0.0)\n\n        self._selected_aperture: Optional[ApertureIdStr] = None\n        self._rotation: float = 0.0\n        self._mirroring: Mirroring = Mirroring.NONE\n        self._mirror_x: bool = False\n        self._mirror_y: bool = False\n        self._scale: float = 1.0\n        self._polarity: Polarity = Polarity.Dark\n\n    def new_pad(self) -&gt; _PadCreator:\n        \"\"\"Create a new pad.\"\"\"\n        return self._pad_creator\n\n    def add_pad(\n        self,\n        pad: _Pad,\n        at: tuple[float, float],\n        *,\n        rotation: float = 0.0,\n        mirror_x: bool = False,\n        mirror_y: bool = False,\n        scale: float = 1.0,\n    ) -&gt; _Draw:\n        \"\"\"Add a pad to the current layer.\"\"\"\n        state_updates = list(\n            self._update_state(\n                selected_aperture=pad.aperture_id,\n                polarity=Polarity.Dark,\n                rotation=rotation,\n                mirror_x=mirror_x,\n                mirror_y=mirror_y,\n                scale=scale,\n            )\n        )\n        draw = _Draw(\n            state_updates=state_updates,\n            draw_op=D03(\n                x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n                y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n            ),\n        )\n        self._draws.append(draw)\n        return draw\n\n    def _update_state(\n        self,\n        selected_aperture: Optional[ApertureIdStr] = None,\n        polarity: Optional[Polarity] = None,\n        rotation: Optional[float] = None,\n        mirror_x: Optional[bool] = None,\n        mirror_y: Optional[bool] = None,\n        scale: Optional[float] = None,\n    ) -&gt; Iterable[Node]:\n        if (\n            selected_aperture is not None\n            and self._selected_aperture != selected_aperture\n        ):\n            self._selected_aperture = selected_aperture\n            yield Dnn(is_standalone=True, aperture_id=selected_aperture)\n\n        if polarity is not None and polarity != self._polarity:\n            self._polarity = polarity\n            yield LP(polarity=polarity)\n\n        if rotation is not None and rotation != self._rotation:\n            self._rotation = rotation\n            yield LR(rotation=rotation)\n\n        if mirror_x is None:\n            mirror_x = self._mirror_x\n\n        if mirror_y is None:\n            mirror_y = self._mirror_y\n\n        mirroring = Mirroring.new(x=mirror_x, y=mirror_y)\n\n        if mirroring != self._mirroring:\n            self._mirroring = mirroring\n            yield LM(mirroring=mirroring)\n\n        if scale is not None and scale != self._scale:\n            self._scale = scale\n            yield LS(scale=scale)\n\n    def add_cutout_pad(\n        self,\n        pad: _Pad,\n        at: tuple[float, float],\n        *,\n        rotation: float = 0.0,\n        mirror_x: bool = False,\n        mirror_y: bool = False,\n        scale: float = 1.0,\n    ) -&gt; _Draw:\n        \"\"\"Add cutout in shape of a pad to image.\"\"\"\n        state_updates = list(\n            self._update_state(\n                selected_aperture=pad.aperture_id,\n                polarity=Polarity.Clear,\n                rotation=rotation,\n                mirror_x=mirror_x,\n                mirror_y=mirror_y,\n                scale=scale,\n            )\n        )\n        draw = _Draw(\n            state_updates=state_updates,\n            draw_op=D03(\n                x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n                y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n            ),\n        )\n        self._draws.append(draw)\n        return draw\n\n    def get_code(self) -&gt; GerberX3Code:\n        \"\"\"Get the AST.\"\"\"\n        commands: list[Node] = []\n        commands.append(\n            FS(\n                zeros=Zeros.SKIP_LEADING,\n                coordinate_mode=CoordinateNotation.ABSOLUTE,\n                x_integral=4,\n                x_decimal=6,\n                y_integral=4,\n                y_decimal=6,\n            )\n        )\n        commands.append(MO(mode=UnitMode.METRIC))\n        commands.extend(self._pad_creator._get_nodes())  # noqa: SLF001\n        for draw in self._draws:\n            commands.extend(draw._get_nodes())  # noqa: SLF001\n        commands.append(M02())\n\n        return GerberX3Code(File(nodes=commands))\n\n    def set_standard_attributes(self) -&gt; None:\n        \"\"\"Set standard attributes for the file.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder.new_pad","title":"new_pad","text":"<pre><code>new_pad() -&gt; _PadCreator\n</code></pre> <p>Create a new pad.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def new_pad(self) -&gt; _PadCreator:\n    \"\"\"Create a new pad.\"\"\"\n    return self._pad_creator\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder.add_pad","title":"add_pad","text":"<pre><code>add_pad(\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; _Draw\n</code></pre> <p>Add a pad to the current layer.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def add_pad(\n    self,\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0,\n) -&gt; _Draw:\n    \"\"\"Add a pad to the current layer.\"\"\"\n    state_updates = list(\n        self._update_state(\n            selected_aperture=pad.aperture_id,\n            polarity=Polarity.Dark,\n            rotation=rotation,\n            mirror_x=mirror_x,\n            mirror_y=mirror_y,\n            scale=scale,\n        )\n    )\n    draw = _Draw(\n        state_updates=state_updates,\n        draw_op=D03(\n            x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n            y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n        ),\n    )\n    self._draws.append(draw)\n    return draw\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder.add_cutout_pad","title":"add_cutout_pad","text":"<pre><code>add_cutout_pad(\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; _Draw\n</code></pre> <p>Add cutout in shape of a pad to image.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def add_cutout_pad(\n    self,\n    pad: _Pad,\n    at: tuple[float, float],\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0,\n) -&gt; _Draw:\n    \"\"\"Add cutout in shape of a pad to image.\"\"\"\n    state_updates = list(\n        self._update_state(\n            selected_aperture=pad.aperture_id,\n            polarity=Polarity.Clear,\n            rotation=rotation,\n            mirror_x=mirror_x,\n            mirror_y=mirror_y,\n            scale=scale,\n        )\n    )\n    draw = _Draw(\n        state_updates=state_updates,\n        draw_op=D03(\n            x=CoordinateX(value=self._coordinate_format.pack_x(at[0])),\n            y=CoordinateY(value=self._coordinate_format.pack_y(at[1])),\n        ),\n    )\n    self._draws.append(draw)\n    return draw\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder.get_code","title":"get_code","text":"<pre><code>get_code() -&gt; GerberX3Code\n</code></pre> <p>Get the AST.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def get_code(self) -&gt; GerberX3Code:\n    \"\"\"Get the AST.\"\"\"\n    commands: list[Node] = []\n    commands.append(\n        FS(\n            zeros=Zeros.SKIP_LEADING,\n            coordinate_mode=CoordinateNotation.ABSOLUTE,\n            x_integral=4,\n            x_decimal=6,\n            y_integral=4,\n            y_decimal=6,\n        )\n    )\n    commands.append(MO(mode=UnitMode.METRIC))\n    commands.extend(self._pad_creator._get_nodes())  # noqa: SLF001\n    for draw in self._draws:\n        commands.extend(draw._get_nodes())  # noqa: SLF001\n    commands.append(M02())\n\n    return GerberX3Code(File(nodes=commands))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Builder.set_standard_attributes","title":"set_standard_attributes","text":"<pre><code>set_standard_attributes() -&gt; None\n</code></pre> <p>Set standard attributes for the file.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def set_standard_attributes(self) -&gt; None:\n    \"\"\"Set standard attributes for the file.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Code","title":"GerberX3Code","text":"<p>Container for Gerber code produced by the builder.</p> <p>Code generated is compliant with <code>The Gerber Layer Format Specification - Revision 2024.05</code>.</p> <p>https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>class GerberX3Code:\n    \"\"\"Container for Gerber code produced by the builder.\n\n    Code generated is compliant with\n    `The Gerber Layer Format Specification - Revision 2024.05`.\n\n    https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf\n    \"\"\"\n\n    def __init__(self, ast: File) -&gt; None:\n        self._ast = ast\n\n    def dump(self, dst: StringIO) -&gt; None:\n        \"\"\"Dump the Gerber code to file or other buffer.\"\"\"\n        Formatter().format(self._ast, dst)\n\n    def dumps(self) -&gt; str:\n        \"\"\"Dump the Gerber code to string.\"\"\"\n        dst = StringIO()\n        self.dump(dst)\n        return dst.getvalue()\n\n    @property\n    def raw(self) -&gt; File:\n        \"\"\"Get the raw AST.\"\"\"\n        return self._ast\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Code.raw","title":"raw  <code>property</code>","text":"<pre><code>raw: File\n</code></pre> <p>Get the raw AST.</p>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Code.dump","title":"dump","text":"<pre><code>dump(dst: StringIO) -&gt; None\n</code></pre> <p>Dump the Gerber code to file or other buffer.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def dump(self, dst: StringIO) -&gt; None:\n    \"\"\"Dump the Gerber code to file or other buffer.\"\"\"\n    Formatter().format(self._ast, dst)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/builder.html#pygerber.gerberx3.ast.builder.GerberX3Code.dumps","title":"dumps","text":"<pre><code>dumps() -&gt; str\n</code></pre> <p>Dump the Gerber code to string.</p> Source code in <code>src/pygerber/gerberx3/ast/builder.py</code> <pre><code>def dumps(self) -&gt; str:\n    \"\"\"Dump the Gerber code to string.\"\"\"\n    dst = StringIO()\n    self.dump(dst)\n    return dst.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors","title":"errors","text":"<p><code>pygerber.gerberx3.ast.errors</code> module gathers errors raised by visitors.</p>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.AstError","title":"AstError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all errors raised by AST.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class AstError(Exception):\n    \"\"\"Base class for all errors raised by AST.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.VisitorError","title":"VisitorError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all errors raised by visitors.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class VisitorError(Exception):\n    \"\"\"Base class for all errors raised by visitors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.StateTrackingVisitorError","title":"StateTrackingVisitorError","text":"<p>             Bases: <code>VisitorError</code></p> <p>Base class for all errors raised by state tracking visitors.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class StateTrackingVisitorError(VisitorError):\n    \"\"\"Base class for all errors raised by state tracking visitors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.DirectADHandlerDispatchNotSupportedError","title":"DirectADHandlerDispatchNotSupportedError","text":"<p>             Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when generic AD class is used to select aperture handler.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class DirectADHandlerDispatchNotSupportedError(StateTrackingVisitorError):\n    \"\"\"Raised when generic AD class is used to select aperture handler.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"Aperture was not selected before flash command was issued.\"\n            \" PyGerber does not support direct use of AD class as handler.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.ApertureNotSelectedError","title":"ApertureNotSelectedError","text":"<p>             Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when an aperture is not selected in the state tracking visitor.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class ApertureNotSelectedError(StateTrackingVisitorError):\n    \"\"\"Raised when an aperture is not selected in the state tracking visitor.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"Aperture was not selected before attempt was made to use it to draw.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.ApertureNotFoundError","title":"ApertureNotFoundError","text":"<p>             Bases: <code>VisitorError</code></p> <p>Raised when an aperture is not found in the aperture dictionary.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class ApertureNotFoundError(VisitorError):\n    \"\"\"Raised when an aperture is not found in the aperture dictionary.\"\"\"\n\n    def __init__(self, aperture_number: ApertureIdStr) -&gt; None:\n        self.aperture_number = aperture_number\n        super().__init__(\n            f\"Aperture {aperture_number} not found in the aperture dictionary.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.SourceNotAvailableError","title":"SourceNotAvailableError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when source is not available for MD5 check.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class SourceNotAvailableError(AstError):\n    \"\"\"Raised when source is not available for MD5 check.\"\"\"\n\n    def __init__(self, node: TF_MD5) -&gt; None:\n        super().__init__(\"Source is not available for MD5 check.\")\n        self.node = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.CoordinateFormatNotSetError","title":"CoordinateFormatNotSetError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when coordinate parsing is requested but format was not prior to it.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class CoordinateFormatNotSetError(AstError):\n    \"\"\"Raised when coordinate parsing is requested but format was not prior to it.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.PackedCoordinateTooLongError","title":"PackedCoordinateTooLongError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too long for the format.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class PackedCoordinateTooLongError(AstError):\n    \"\"\"Raised when packed coordinate is too long for the format.\"\"\"\n\n    def __init__(self, coordinate: str, integer: int, decimal: int) -&gt; None:\n        self.coordinate = coordinate\n        self.integer = integer\n        self.decimal = decimal\n        super().__init__(\n            f\"Packed coordinate {coordinate!r} is too long for the format\"\n            f\"({integer},{decimal}).\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/errors.html#pygerber.gerberx3.ast.errors.PackedCoordinateTooShortError","title":"PackedCoordinateTooShortError","text":"<p>             Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too short for the format.</p> Source code in <code>src/pygerber/gerberx3/ast/errors.py</code> <pre><code>class PackedCoordinateTooShortError(AstError):\n    \"\"\"Raised when packed coordinate is too short for the format.\"\"\"\n\n    def __init__(self, coordinate: str, integer: int, decimal: int) -&gt; None:\n        self.coordinate = coordinate\n        self.integer = integer\n        self.decimal = decimal\n        super().__init__(\n            f\"Packed coordinate {coordinate!r} is too short for the format \"\n            f\"({integer},{decimal}).\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html","title":"expression_eval_visitor","text":""},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor","title":"expression_eval_visitor","text":"<p><code>pygerber.gerberx3.expression_eval_visitor</code> contains definition of <code>ExpressionEvalVisitor</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor","title":"ExpressionEvalVisitor","text":"<p>             Bases: <code>AstVisitor</code></p> <p><code>ExpressionEvalVisitor</code> class implements a visitor pattern for evaluating value of an mathematical expression.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>class ExpressionEvalVisitor(AstVisitor):\n    \"\"\"`ExpressionEvalVisitor` class implements a visitor pattern for evaluating\n    value of an mathematical expression.\n    \"\"\"\n\n    def __init__(self, scope: Optional[dict[str, Double]] = None) -&gt; None:\n        super().__init__()\n        self.scope = {} if scope is None else scope\n        self.return_value = Double(0.0)\n\n    def evaluate(self, node: Expression) -&gt; float:\n        \"\"\"Evaluate the given expression node.\"\"\"\n        self.return_value = Double(0.0)\n        node.visit(self)\n        return self.return_value\n\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total += self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total /= self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total *= self.return_value\n\n        self.return_value = total\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        node.head.visit(self)\n        total = self.return_value\n\n        for operand in node.tail:\n            operand.visit(self)\n            total -= self.return_value\n\n        self.return_value = total\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        node.operand.visit(self)\n        self.return_value = -self.return_value\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        node.operand.visit(self)\n        self.return_value = +self.return_value\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self.return_value = self.scope[node.variable]\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self.return_value = node.constant\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.evaluate","title":"evaluate","text":"<pre><code>evaluate(node: Expression) -&gt; float\n</code></pre> <p>Evaluate the given expression node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def evaluate(self, node: Expression) -&gt; float:\n    \"\"\"Evaluate the given expression node.\"\"\"\n    self.return_value = Double(0.0)\n    node.visit(self)\n    return self.return_value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total += self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total /= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total *= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    node.head.visit(self)\n    total = self.return_value\n\n    for operand in node.tail:\n        operand.visit(self)\n        total -= self.return_value\n\n    self.return_value = total\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    node.operand.visit(self)\n    self.return_value = -self.return_value\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    node.operand.visit(self)\n    self.return_value = +self.return_value\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self.return_value = self.scope[node.variable]\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/expression_eval_visitor.html#pygerber.gerberx3.ast.expression_eval_visitor.ExpressionEvalVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/expression_eval_visitor.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self.return_value = node.constant\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html","title":"node_finder","text":""},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder","title":"node_finder","text":"<p>The <code>node_finder</code> module contains <code>NodeFinder</code> class, which can quickly find AST nodes by their location in source code.</p>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.ZeroBasedPosition","title":"ZeroBasedPosition","text":"<p>             Bases: <code>BaseModel</code></p> <p>Zero-based position in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>class ZeroBasedPosition(BaseModel):\n    \"\"\"Zero-based position in source code.\"\"\"\n\n    line: int = Field(ge=0)\n    column: int = Field(ge=0)\n\n    def to_one_based(self) -&gt; OneBasedPosition:\n        \"\"\"Convert zero-based position to one-based position.\"\"\"\n        return OneBasedPosition(line=self.line + 1, column=self.column + 1)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.ZeroBasedPosition.to_one_based","title":"to_one_based","text":"<pre><code>to_one_based() -&gt; OneBasedPosition\n</code></pre> <p>Convert zero-based position to one-based position.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def to_one_based(self) -&gt; OneBasedPosition:\n    \"\"\"Convert zero-based position to one-based position.\"\"\"\n    return OneBasedPosition(line=self.line + 1, column=self.column + 1)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.OneBasedPosition","title":"OneBasedPosition","text":"<p>             Bases: <code>BaseModel</code></p> <p>One-based position in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>class OneBasedPosition(BaseModel):\n    \"\"\"One-based position in source code.\"\"\"\n\n    line: int = Field(ge=1)\n    column: int = Field(ge=1)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder","title":"NodeFinder","text":"<p>             Bases: <code>AstVisitor</code></p> <p>The <code>NodeFinder</code> class can quickly find AST nodes by their location in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>class NodeFinder(AstVisitor):\n    \"\"\"The `NodeFinder` class can quickly find AST nodes by their location\n    in source code.\n    \"\"\"\n\n    def __init__(self, ast: File) -&gt; None:\n        self.ast = ast\n\n    def find_node(self, location: OneBasedPosition) -&gt; Optional[Node]:\n        \"\"\"Find node closest to the given location.\"\"\"\n        self.location = location\n        self.return_node: Optional[Node] = self.ast\n        self.on_file(self.ast)\n        return self.return_node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        if len(node.nodes) == 0:\n            return node\n\n        if len(node.nodes) == 1:\n            self.return_node = node.nodes[0]\n            return node\n\n        self.return_node = self._bin_search(node.nodes)\n\n        return node\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        self._bin_search([node.open, *node.primitives, node.close])\n        return node\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` root node.\"\"\"\n        self._bin_search([node.open, *node.nodes, node.close])\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` root node.\"\"\"\n        self._bin_search([node.open, *node.nodes, node.close])\n        return node\n\n    def _bin_search(self, nodes: Sequence[Node]) -&gt; Optional[Node]:  # noqa: PLR0911\n        if len(nodes) == 1:\n            self.return_node = nodes[0]\n            source_info = self.return_node.source_info\n            if source_info is not None and self.location.column &lt; source_info.column:\n                self.return_node = None\n                return None\n\n            self.return_node.visit(self)\n            return self.return_node\n\n        center_index = len(nodes) // 2\n        center_node = nodes[center_index]\n        source_info = center_node.source_info\n\n        if source_info is None:\n            return self.ast\n\n        if self.location.line == source_info.line:\n            if self.location.column == source_info.column:\n                return self._bin_search(nodes=[center_node])\n\n            if self.location.column &lt; source_info.column:\n                return self._bin_search(nodes=nodes[:center_index])\n\n            return self._bin_search(nodes=nodes[center_index:])\n\n        if self.location.line &lt; source_info.line:\n            return self._bin_search(nodes=nodes[:center_index])\n\n        return self._bin_search(nodes=nodes[center_index:])\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder.find_node","title":"find_node","text":"<pre><code>find_node(location: OneBasedPosition) -&gt; Optional[Node]\n</code></pre> <p>Find node closest to the given location.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def find_node(self, location: OneBasedPosition) -&gt; Optional[Node]:\n    \"\"\"Find node closest to the given location.\"\"\"\n    self.location = location\n    self.return_node: Optional[Node] = self.ast\n    self.on_file(self.ast)\n    return self.return_node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    if len(node.nodes) == 0:\n        return node\n\n    if len(node.nodes) == 1:\n        self.return_node = node.nodes[0]\n        return node\n\n    self.return_node = self._bin_search(node.nodes)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    self._bin_search([node.open, *node.primitives, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` root node.\"\"\"\n    self._bin_search([node.open, *node.nodes, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/node_finder.html#pygerber.gerberx3.ast.node_finder.NodeFinder.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/node_finder.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` root node.\"\"\"\n    self._bin_search([node.open, *node.nodes, node.close])\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html","title":"state_tracking_visitor","text":""},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor","title":"state_tracking_visitor","text":"<p><code>pygerber.gerberx3.state_tracking_visitor</code> contains definition of <code>StateTrackingVisitor</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.CoordinateFormat","title":"CoordinateFormat","text":"<p>             Bases: <code>_StateModel</code></p> <p>Coordinate format information.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class CoordinateFormat(_StateModel):\n    \"\"\"Coordinate format information.\"\"\"\n\n    zeros: Zeros = Field(default=Zeros.SKIP_LEADING)\n    coordinate_mode: CoordinateNotation = Field(default=CoordinateNotation.ABSOLUTE)\n\n    x_integral: int = Field(default=2)\n    x_decimal: int = Field(default=6)\n\n    y_integral: int = Field(default=2)\n    y_decimal: int = Field(default=6)\n\n    def __init__(self, **kwargs: Any) -&gt; None:\n        super().__init__(**kwargs)\n\n        if self.zeros == Zeros.SKIP_LEADING:\n            self.unpack_x = self._unpack_skip_leading(self.x_integral, self.x_decimal)  # type: ignore[method-assign]\n            self.unpack_y = self._unpack_skip_leading(self.y_integral, self.y_decimal)  # type: ignore[method-assign]\n            self.pack_x = self._pack_skip_leading(self.x_integral, self.x_decimal)  # type: ignore[method-assign]\n            self.pack_y = self._pack_skip_leading(self.y_integral, self.y_decimal)  # type: ignore[method-assign]\n        elif self.zeros == Zeros.SKIP_TRAILING:\n            self.unpack_x = self._unpack_skip_trailing(self.x_integral, self.x_decimal)  # type: ignore[method-assign]\n            self.unpack_y = self._unpack_skip_trailing(self.y_integral, self.y_decimal)  # type: ignore[method-assign]\n            self.pack_x = self._pack_skip_trailing(self.x_integral, self.x_decimal)  # type: ignore[method-assign]\n            self.pack_y = self._pack_skip_trailing(self.y_integral, self.y_decimal)  # type: ignore[method-assign]\n        else:\n            msg = f\"Unknown zeros mode: {self.zeros}\"\n            raise ValueError(msg)\n\n    def unpack_x(self, coordinate: PackedCoordinateStr, /) -&gt; Double:  # noqa: ARG002\n        \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n        msg = \"Coordinate format was not properly set.\"\n        raise NotImplementedError(msg)  # pragma: no cover\n\n    def unpack_y(self, coordinate: PackedCoordinateStr, /) -&gt; Double:  # noqa: ARG002\n        \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n        msg = \"Coordinate format was not properly set.\"\n        raise NotImplementedError(msg)  # pragma: no cover\n\n    def _unpack_skip_trailing(\n        self, integer: int, decimal: int\n    ) -&gt; Callable[[PackedCoordinateStr], Double]:\n        def _(coordinate: PackedCoordinateStr) -&gt; Double:\n            sign, coordinate_str = self._unpack_preprocess(coordinate, integer, decimal)\n\n            padded_coordinate = coordinate_str.ljust((integer + decimal), \"0\")\n            integer_value_str = padded_coordinate[:integer]\n            decimal_value_str = padded_coordinate[integer:]\n\n            return float(f\"{sign}{integer_value_str}.{decimal_value_str}\")\n\n        return _\n\n    def _unpack_skip_leading(\n        self, integer: int, decimal: int\n    ) -&gt; Callable[[PackedCoordinateStr], Double]:\n        def _(coordinate: PackedCoordinateStr) -&gt; Double:\n            sign, coordinate_str = self._unpack_preprocess(coordinate, integer, decimal)\n\n            padded_coordinate = coordinate_str.rjust((integer + decimal), \"0\")\n            integer_value_str = padded_coordinate[:integer]\n            decimal_value_str = padded_coordinate[integer:]\n\n            return float(f\"{sign}{integer_value_str}.{decimal_value_str}\")\n\n        return _\n\n    def _unpack_preprocess(\n        self, coordinate: PackedCoordinateStr, integer: int, decimal: int\n    ) -&gt; tuple[Literal[\"-\", \"+\"], str]:\n        if len(coordinate) &lt;= 0:\n            raise PackedCoordinateTooShortError(coordinate, integer, decimal)\n\n        sign: Literal[\"+\", \"-\"] = \"+\"\n\n        if coordinate[0] in (\"+\", \"-\"):\n            sign = coordinate[0]  # type: ignore[assignment]\n            coordinate_str = coordinate[1:]\n        else:\n            coordinate_str = str(coordinate)\n\n        if len(coordinate_str) &gt; (integer + decimal):\n            raise PackedCoordinateTooLongError(coordinate, integer, decimal)\n\n        if len(coordinate_str) &lt;= 0:\n            raise PackedCoordinateTooShortError(coordinate, integer, decimal)\n\n        return sign, coordinate_str\n\n    def pack_x(self, coordinate: Double, /) -&gt; PackedCoordinateStr:  # noqa: ARG002\n        \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n        msg = \"Coordinate format was not properly set.\"\n        raise NotImplementedError(msg)  # pragma: no cover\n\n    def pack_y(self, coordinate: Double, /) -&gt; PackedCoordinateStr:  # noqa: ARG002\n        \"\"\"Pack X coordinate using the current coordinate format.\"\"\"\n        msg = \"Coordinate format was not properly set.\"\n        raise NotImplementedError(msg)  # pragma: no cover\n\n    def _pack_skip_leading(\n        self,\n        integer: int,\n        decimal: int,\n    ) -&gt; Callable[[Double], PackedCoordinateStr]:\n        def _(coordinate: Double) -&gt; PackedCoordinateStr:\n            integer_str, decimal_str = f\"{coordinate:.{decimal}f}\".split(\".\")\n            assert len(integer_str) &gt; 0\n            assert len(decimal_str) &gt; 0\n\n            if integer_str[0] in (\"+\", \"-\"):\n                sign, integer_str = integer_str[0], integer_str[1:]\n            else:\n                sign = \"\"\n\n            if len(integer_str) &gt; integer:\n                raise PackedCoordinateTooLongError(str(coordinate), integer, decimal)\n\n            packed_no_sign = f\"{integer_str}{decimal_str}\".lstrip(\"0\") or \"0\"\n\n            return PackedCoordinateStr(f\"{sign}{packed_no_sign}\")\n\n        return _\n\n    def _pack_skip_trailing(\n        self,\n        integer: int,\n        decimal: int,\n    ) -&gt; Callable[[Double], PackedCoordinateStr]:\n        def _(coordinate: Double) -&gt; PackedCoordinateStr:\n            integer_str, decimal_str = f\"{coordinate:.{decimal}f}\".split(\".\")\n            assert len(integer_str) &gt; 0\n            assert len(decimal_str) &gt; 0\n\n            if integer_str[0] in (\"+\", \"-\"):\n                sign, integer_str = integer_str[0], integer_str[1:]\n            else:\n                sign = \"\"\n\n            if len(integer_str) &gt; integer:\n                raise PackedCoordinateTooLongError(str(coordinate), integer, decimal)\n\n            integer_str = integer_str.rjust(integer, \"0\")\n\n            packed_no_sign = f\"{integer_str}{decimal_str}\".rstrip(\"0\") or \"0\"\n\n            return PackedCoordinateStr(f\"{sign}{packed_no_sign}\")\n\n        return _\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.CoordinateFormat.unpack_x","title":"unpack_x","text":"<pre><code>unpack_x(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def unpack_x(self, coordinate: PackedCoordinateStr, /) -&gt; Double:  # noqa: ARG002\n    \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n    msg = \"Coordinate format was not properly set.\"\n    raise NotImplementedError(msg)  # pragma: no cover\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.CoordinateFormat.unpack_y","title":"unpack_y","text":"<pre><code>unpack_y(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def unpack_y(self, coordinate: PackedCoordinateStr, /) -&gt; Double:  # noqa: ARG002\n    \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n    msg = \"Coordinate format was not properly set.\"\n    raise NotImplementedError(msg)  # pragma: no cover\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.CoordinateFormat.pack_x","title":"pack_x","text":"<pre><code>pack_x(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def pack_x(self, coordinate: Double, /) -&gt; PackedCoordinateStr:  # noqa: ARG002\n    \"\"\"Unpack X coordinate using the current coordinate format.\"\"\"\n    msg = \"Coordinate format was not properly set.\"\n    raise NotImplementedError(msg)  # pragma: no cover\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.CoordinateFormat.pack_y","title":"pack_y","text":"<pre><code>pack_y(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Pack X coordinate using the current coordinate format.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def pack_y(self, coordinate: Double, /) -&gt; PackedCoordinateStr:  # noqa: ARG002\n    \"\"\"Pack X coordinate using the current coordinate format.\"\"\"\n    msg = \"Coordinate format was not properly set.\"\n    raise NotImplementedError(msg)  # pragma: no cover\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Attributes","title":"Attributes","text":"<p>             Bases: <code>_StateModel</code></p> <p>Attributes Gerber X3 of apertures, objects and file.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class Attributes(_StateModel):\n    \"\"\"Attributes Gerber X3 of apertures, objects and file.\"\"\"\n\n    aperture_attributes: Dict[str, TA] = Field(default_factory=dict)\n    \"\"\"Object attributes created with TA extended command.\"\"\"\n\n    file_attributes: Dict[str, TF] = Field(default_factory=dict)\n    \"\"\"Object attributes created with TF extended command.\"\"\"\n\n    object_attributes: Dict[str, TO] = Field(default_factory=dict)\n    \"\"\"Object attributes created with TO extended command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Attributes.aperture_attributes","title":"aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aperture_attributes: Dict[str, TA] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TA extended command.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Attributes.file_attributes","title":"file_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_attributes: Dict[str, TF] = Field(default_factory=dict)\n</code></pre> <p>Object attributes created with TF extended command.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Attributes.object_attributes","title":"object_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>object_attributes: Dict[str, TO] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TO extended command.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes","title":"ImageAttributes","text":"<p>             Bases: <code>_StateModel</code></p> <p>Legacy attributes of the image.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class ImageAttributes(_StateModel):\n    \"\"\"Legacy attributes of the image.\"\"\"\n\n    polarity: ImagePolarity = Field(default=None)\n    \"\"\"The name of the image. (Spec reference: 8.1.4)\"\"\"\n\n    rotation: Double = Field(default=0.0)\n    \"\"\"The rotation of the image. (Spec reference: 8.1.5)\"\"\"\n\n    a_axis_mirroring: int = Field(default=0)\n    \"\"\"The mirroring of A axis of the image. (Spec reference: 8.1.7)\"\"\"\n\n    b_axis_mirroring: int = Field(default=0)\n    \"\"\"The mirroring of B axis of the image. (Spec reference: 8.1.7)\"\"\"\n\n    a_axis_offset: Optional[Double] = Field(default=0)\n    \"\"\"The offset of A axis of the image. (Spec reference: 8.1.8)\"\"\"\n\n    b_axis_offset: Optional[Double] = Field(default=0)\n    \"\"\"The offset of B axis of the image. (Spec reference: 8.1.8)\"\"\"\n\n    a_axis_scale: Optional[Double] = Field(default=0)\n    \"\"\"The scale of A axis of the image. (Spec reference: 8.1.9)\"\"\"\n\n    b_axis_scale: Optional[Double] = Field(default=0)\n    \"\"\"The scale of B axis of the image. (Spec reference: 8.1.9)\"\"\"\n\n    image_name: Optional[str] = Field(default=None)\n    \"\"\"The name of the image. (Spec reference: 8.1.3)\"\"\"\n\n    file_name: Optional[str] = Field(default=None)\n    \"\"\"The name of the file. (Spec reference: 8.1.6)\"\"\"\n\n    axis_correspondence: AxisCorrespondence = Field(default=AxisCorrespondence.AX_BY)\n    \"\"\"The axis correspondence. (Spec reference: 8.1.2)\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: ImagePolarity = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.4)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>The rotation of the image. (Spec reference: 8.1.5)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.a_axis_mirroring","title":"a_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of A axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.b_axis_mirroring","title":"b_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of B axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.a_axis_offset","title":"a_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of A axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.b_axis_offset","title":"b_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of B axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.a_axis_scale","title":"a_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of A axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.b_axis_scale","title":"b_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of B axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.image_name","title":"image_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.3)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.file_name","title":"file_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the file. (Spec reference: 8.1.6)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ImageAttributes.axis_correspondence","title":"axis_correspondence  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>axis_correspondence: AxisCorrespondence = Field(\n    default=AX_BY\n)\n</code></pre> <p>The axis correspondence. (Spec reference: 8.1.2)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform","title":"Transform","text":"<p>             Bases: <code>_StateModel</code></p> <p>Aperture transformations.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class Transform(_StateModel):\n    \"\"\"Aperture transformations.\"\"\"\n\n    polarity: Polarity = Field(default=Polarity.Dark)\n    \"\"\"Aperture polarity set with LP command. (Spec reference: 4.9.2)\"\"\"\n\n    mirroring: Mirroring = Field(default=Mirroring.NONE)\n    \"\"\"Aperture mirroring set with LM command. (Spec reference: 4.9.3)\"\"\"\n\n    rotation: Double = Field(default=0.0)\n    \"\"\"Aperture rotation set with LR command. (Spec reference: 4.9.4)\"\"\"\n\n    scaling: Double = Field(default=1.0)\n    \"\"\"Aperture scaling set with LS command. (Spec reference: 4.9.5)\"\"\"\n\n    @property\n    def tag(self) -&gt; str:\n        \"\"\"Get string tag identifying the transformation.\"\"\"\n        return f\"{self.mirroring.value}%{self.rotation:.8f}%{self.scaling:.8f}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: Polarity = Field(default=Dark)\n</code></pre> <p>Aperture polarity set with LP command. (Spec reference: 4.9.2)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform.mirroring","title":"mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mirroring: Mirroring = Field(default=NONE)\n</code></pre> <p>Aperture mirroring set with LM command. (Spec reference: 4.9.3)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>Aperture rotation set with LR command. (Spec reference: 4.9.4)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform.scaling","title":"scaling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scaling: Double = Field(default=1.0)\n</code></pre> <p>Aperture scaling set with LS command. (Spec reference: 4.9.5)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.Transform.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Get string tag identifying the transformation.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.PlotMode","title":"PlotMode","text":"<p>             Bases: <code>Enum</code></p> <p>Plot mode of the Gerber file.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class PlotMode(Enum):\n    \"\"\"Plot mode of the Gerber file.\"\"\"\n\n    LINEAR = \"LINEAR\"\n    \"\"\"Linear interpolation mode.\"\"\"\n\n    ARC = \"ARC\"\n    \"\"\"Clockwise circular interpolation mode.\"\"\"\n\n    CCW_ARC = \"CCW_ARC\"\n    \"\"\"Counter-clockwise circular interpolation mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.PlotMode.LINEAR","title":"LINEAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LINEAR = 'LINEAR'\n</code></pre> <p>Linear interpolation mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.PlotMode.ARC","title":"ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARC = 'ARC'\n</code></pre> <p>Clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.PlotMode.CCW_ARC","title":"CCW_ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CCW_ARC = 'CCW_ARC'\n</code></pre> <p>Counter-clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ArcInterpolation","title":"ArcInterpolation","text":"<p>             Bases: <code>Enum</code></p> <p>Arc interpolation mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class ArcInterpolation(Enum):\n    \"\"\"Arc interpolation mode.\"\"\"\n\n    SINGLE_QUADRANT = \"SINGLE_QUADRANT\"\n    \"\"\"Single quadrant mode.\"\"\"\n\n    MULTI_QUADRANT = \"MULTI_QUADRANT\"\n    \"\"\"Multi quadrant mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ArcInterpolation.SINGLE_QUADRANT","title":"SINGLE_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINGLE_QUADRANT = 'SINGLE_QUADRANT'\n</code></pre> <p>Single quadrant mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ArcInterpolation.MULTI_QUADRANT","title":"MULTI_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MULTI_QUADRANT = 'MULTI_QUADRANT'\n</code></pre> <p>Multi quadrant mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage","title":"ApertureStorage","text":"<p>             Bases: <code>_StateModel</code></p> <p>Storage for apertures.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class ApertureStorage(_StateModel):\n    \"\"\"Storage for apertures.\"\"\"\n\n    apertures: Dict[ApertureIdStr, AD] = Field(default_factory=dict)\n    \"\"\"Aperture storage.\"\"\"\n\n    blocks: Dict[ApertureIdStr, AB] = Field(default_factory=dict)\n    \"\"\"Block aperture storage.\"\"\"\n\n    macros: Dict[str, AM] = Field(default_factory=dict)\n    \"\"\"Macro definition storage.\"\"\"\n\n    per_aperture_attributes: Dict[str, Dict[str, TA]] = Field(default_factory=dict)\n    \"\"\"Attributes assigned to apertures during creation.\"\"\"\n\n    def get_next_free_aperture_code(self) -&gt; int:\n        \"\"\"Get next free aperture code.\"\"\"\n        return (\n            max(\n                int(aperture_id.lstrip(\"D\"))\n                for aperture_id in chain(self.apertures.keys(), self.blocks.keys())\n            )\n            + 1\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: Dict[ApertureIdStr, AD] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Aperture storage.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage.blocks","title":"blocks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blocks: Dict[ApertureIdStr, AB] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Block aperture storage.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage.macros","title":"macros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macros: Dict[str, AM] = Field(default_factory=dict)\n</code></pre> <p>Macro definition storage.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage.per_aperture_attributes","title":"per_aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>per_aperture_attributes: Dict[str, Dict[str, TA]] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Attributes assigned to apertures during creation.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ApertureStorage.get_next_free_aperture_code","title":"get_next_free_aperture_code","text":"<pre><code>get_next_free_aperture_code() -&gt; int\n</code></pre> <p>Get next free aperture code.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def get_next_free_aperture_code(self) -&gt; int:\n    \"\"\"Get next free aperture code.\"\"\"\n    return (\n        max(\n            int(aperture_id.lstrip(\"D\"))\n            for aperture_id in chain(self.apertures.keys(), self.blocks.keys())\n        )\n        + 1\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State","title":"State","text":"<p>             Bases: <code>_StateModel</code></p> <p>Internal state of the compiler.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class State(_StateModel):\n    \"\"\"Internal state of the compiler.\"\"\"\n\n    unit_mode: UnitMode = Field(default=UnitMode.METRIC)\n    \"\"\"The draw units used for the Gerber file. (Spec reference: 4.2.1)\"\"\"\n\n    coordinate_format: Optional[CoordinateFormat] = Field(default=None)\n    \"\"\"The coordinate format specification, including the number of decimals.\n    (Spec reference: 4.2.2)\"\"\"\n\n    plot_mode: PlotMode = Field(default=PlotMode.LINEAR)\n    \"\"\"The plot mode. (Spec reference 4.7)\"\"\"\n\n    arc_interpolation: ArcInterpolation = Field(\n        default=ArcInterpolation.SINGLE_QUADRANT\n    )\n    \"\"\"The arc interpolation mode. (Spec reference: 4.7.2)\"\"\"\n\n    current_aperture_id: Optional[ApertureIdStr] = Field(default=None)\n    \"\"\"The ID of currently selected aperture. (Spec reference: 8.6)\"\"\"\n\n    current_x: Double = Field(default=0.0)\n    \"\"\"Current X coordinate value.\"\"\"\n\n    current_y: Double = Field(default=0.0)\n    \"\"\"Current Y coordinate value.\"\"\"\n\n    coordinate_x: Optional[Double] = Field(default=None)\n    \"\"\"Last X coordinate value set by CoordinateX node.\"\"\"\n\n    coordinate_y: Optional[Double] = Field(default=None)\n    \"\"\"Last Y coordinate value set by CoordinateY node.\"\"\"\n\n    coordinate_i: Optional[Double] = Field(default=None)\n    \"\"\"Last I coordinate value set by CoordinateI node.\"\"\"\n\n    coordinate_j: Optional[Double] = Field(default=None)\n    \"\"\"Last J coordinate value set by CoordinateJ node.\"\"\"\n\n    transform: Transform = Field(default_factory=Transform)\n    \"\"\"Current aperture transformation parameters.\"\"\"\n\n    apertures: ApertureStorage = Field(default_factory=ApertureStorage)\n    \"\"\"Container for different types of apertures.\"\"\"\n\n    attributes: Attributes = Field(default_factory=Attributes)\n    \"\"\"Container for holding currently active attributes.\"\"\"\n\n    image_attributes: ImageAttributes = Field(default_factory=ImageAttributes)\n    \"\"\"Container for holding legacy image attributes.\"\"\"\n\n    is_region: bool = Field(default=False)\n    \"\"\"Flag indicating if visitor is in region mode.\"\"\"\n\n    @property\n    def current_aperture(self) -&gt; AD | AB:\n        \"\"\"Get currently selected aperture.\"\"\"\n        if self.current_aperture_id is None:\n            raise ApertureNotSelectedError\n\n        if self.current_aperture_id in self.apertures.apertures:\n            return self.apertures.apertures[self.current_aperture_id]\n\n        if self.current_aperture_id in self.apertures.blocks:\n            return self.apertures.blocks[self.current_aperture_id]\n\n        raise ApertureNotFoundError(self.current_aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.unit_mode","title":"unit_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unit_mode: UnitMode = Field(default=METRIC)\n</code></pre> <p>The draw units used for the Gerber file. (Spec reference: 4.2.1)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.coordinate_format","title":"coordinate_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_format: Optional[CoordinateFormat] = Field(\n    default=None\n)\n</code></pre> <p>The coordinate format specification, including the number of decimals. (Spec reference: 4.2.2)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.plot_mode","title":"plot_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plot_mode: PlotMode = Field(default=LINEAR)\n</code></pre> <p>The plot mode. (Spec reference 4.7)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.arc_interpolation","title":"arc_interpolation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arc_interpolation: ArcInterpolation = Field(\n    default=SINGLE_QUADRANT\n)\n</code></pre> <p>The arc interpolation mode. (Spec reference: 4.7.2)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.current_aperture_id","title":"current_aperture_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_aperture_id: Optional[ApertureIdStr] = Field(\n    default=None\n)\n</code></pre> <p>The ID of currently selected aperture. (Spec reference: 8.6)</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.current_x","title":"current_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_x: Double = Field(default=0.0)\n</code></pre> <p>Current X coordinate value.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.current_y","title":"current_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_y: Double = Field(default=0.0)\n</code></pre> <p>Current Y coordinate value.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.coordinate_x","title":"coordinate_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_x: Optional[Double] = Field(default=None)\n</code></pre> <p>Last X coordinate value set by CoordinateX node.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.coordinate_y","title":"coordinate_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_y: Optional[Double] = Field(default=None)\n</code></pre> <p>Last Y coordinate value set by CoordinateY node.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.coordinate_i","title":"coordinate_i  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_i: Optional[Double] = Field(default=None)\n</code></pre> <p>Last I coordinate value set by CoordinateI node.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.coordinate_j","title":"coordinate_j  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_j: Optional[Double] = Field(default=None)\n</code></pre> <p>Last J coordinate value set by CoordinateJ node.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.transform","title":"transform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transform: Transform = Field(default_factory=Transform)\n</code></pre> <p>Current aperture transformation parameters.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: ApertureStorage = Field(\n    default_factory=ApertureStorage\n)\n</code></pre> <p>Container for different types of apertures.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: Attributes = Field(default_factory=Attributes)\n</code></pre> <p>Container for holding currently active attributes.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.image_attributes","title":"image_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_attributes: ImageAttributes = Field(\n    default_factory=ImageAttributes\n)\n</code></pre> <p>Container for holding legacy image attributes.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.is_region","title":"is_region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_region: bool = Field(default=False)\n</code></pre> <p>Flag indicating if visitor is in region mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.State.current_aperture","title":"current_aperture  <code>property</code>","text":"<pre><code>current_aperture: AD | AB\n</code></pre> <p>Get currently selected aperture.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.ProgramStop","title":"ProgramStop","text":"<p>             Bases: <code>Exception</code></p> <p>Exception raised when M00 or M02 command is encountered.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class ProgramStop(Exception):  # noqa: N818\n    \"\"\"Exception raised when M00 or M02 command is encountered.\"\"\"\n\n    def __init__(self, node: M00 | M02) -&gt; None:\n        self.node = node\n        super().__init__()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor","title":"StateTrackingVisitor","text":"<p>             Bases: <code>AstVisitor</code></p> <p><code>StateTrackingVisitor</code> is a visitor class that tracks the internal state defined in the GerberX3 specification and modifies it according to Gerber commands.</p> <p>Additionally, it defines a set of higher level callback methods that extend interface of <code>AstVisitor</code> class.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>class StateTrackingVisitor(AstVisitor):\n    \"\"\"`StateTrackingVisitor` is a visitor class that tracks the internal state\n    defined in the GerberX3 specification and modifies it according to Gerber\n    commands.\n\n    Additionally, it defines a set of higher level callback methods that extend\n    interface of `AstVisitor` class.\n    \"\"\"\n\n    def __init__(self, *, ignore_program_stop: bool = False) -&gt; None:\n        super().__init__()\n        self._ignore_program_stop = ignore_program_stop\n\n        self.state = State()\n        self._on_d01_handler = self.on_draw_line\n        self._plot_mode_to_d01_handler = {\n            PlotMode.LINEAR: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_line,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_line,\n            },\n            PlotMode.ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_cw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_cw_arc_mq,\n            },\n            PlotMode.CCW_ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_draw_ccw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_draw_ccw_arc_mq,\n            },\n        }\n        self._plot_mode_to_in_region_d01_handler = {\n            PlotMode.LINEAR: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_line,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_line,\n            },\n            PlotMode.ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_cw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_cw_arc_mq,\n            },\n            PlotMode.CCW_ARC: {\n                ArcInterpolation.SINGLE_QUADRANT: self.on_in_region_draw_ccw_arc_sq,\n                ArcInterpolation.MULTI_QUADRANT: self.on_in_region_draw_ccw_arc_mq,\n            },\n        }\n        self._on_d03_handler: Callable[[D03, AD | AB], None] = lambda *_: throw(  # type: ignore[unreachable]\n            ApertureNotSelectedError()\n        )\n        self._dispatch_d01_handler: Callable[[], None] = (\n            self._dispatch_d01_handler_non_region\n        )\n\n    @property\n    def coordinate_x(self) -&gt; Double:\n        \"\"\"Get X coordinate.\"\"\"\n        coordinate = self.state.coordinate_x\n        if coordinate is None:\n            return self.state.current_x\n        return coordinate\n\n    @property\n    def coordinate_y(self) -&gt; Double:\n        \"\"\"Get Y coordinate.\"\"\"\n        coordinate = self.state.coordinate_y\n        if coordinate is None:\n            return self.state.current_y\n        return coordinate\n\n    @property\n    def coordinate_i(self) -&gt; Double:\n        \"\"\"Get X coordinate.\"\"\"\n        coordinate = self.state.coordinate_i\n        if coordinate is None:\n            return 0.0\n        return coordinate\n\n    @property\n    def coordinate_j(self) -&gt; Double:\n        \"\"\"Get Y coordinate.\"\"\"\n        coordinate = self.state.coordinate_j\n        if coordinate is None:\n            return 0.0\n        return coordinate\n\n    @property\n    def is_negative(self) -&gt; bool:\n        \"\"\"Check if current aperture is negative.\"\"\"\n        return self.state.transform.polarity == Polarity.Clear\n\n    # Aperture\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` node.\"\"\"\n        super().on_ab(node)\n        self.state.apertures.blocks[node.open.aperture_id] = node\n        self.state.apertures.per_aperture_attributes[node.open.aperture_id] = (\n            self.state.attributes.aperture_attributes.copy()\n        )\n        return node\n\n    def on_ad(self, node: AD) -&gt; None:\n        \"\"\"Handle `AD` node.\"\"\"\n        self.state.apertures.apertures[node.aperture_id] = node\n        self.state.apertures.per_aperture_attributes[node.aperture_id] = (\n            self.state.attributes.aperture_attributes.copy()\n        )\n\n    def on_am(self, node: AM) -&gt; AM:\n        \"\"\"Handle `AM` root node.\"\"\"\n        self.state.apertures.macros[node.open.name] = node\n        return node\n\n    # Attribute\n\n    def on_ta(self, node: TA) -&gt; None:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        self.state.attributes.aperture_attributes[node.attribute_name] = node\n\n    def on_tf(self, node: TF) -&gt; None:\n        \"\"\"Handle `TF` node.\"\"\"\n        self.state.attributes.file_attributes[node.attribute_name] = node\n\n    def on_to(self, node: TO) -&gt; None:\n        \"\"\"Handle `TO` node.\"\"\"\n        self.state.attributes.object_attributes[node.attribute_name] = node\n\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        if node.name is None:\n            self.state.attributes.aperture_attributes.clear()\n            self.state.attributes.object_attributes.clear()\n            return node\n\n        self.state.attributes.aperture_attributes.pop(node.name, None)\n        self.state.attributes.object_attributes.pop(node.name, None)\n        return node\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        super().on_d01(node)\n        self._on_d01_handler(node)\n        self._update_coordinates()\n        return node\n\n    def on_draw_line(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n\n    def on_draw_cw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant\n        mode.\n        \"\"\"\n\n    def on_draw_cw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n\n    def on_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n        mode.\n        \"\"\"\n\n    def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode.\n        \"\"\"\n\n    def _update_coordinates(self) -&gt; None:\n        if self.state.coordinate_x is not None:\n            self.state.current_x = self.state.coordinate_x\n        if self.state.coordinate_y is not None:\n            self.state.current_y = self.state.coordinate_y\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        super().on_d02(node)\n        self._update_coordinates()\n        if self.state.is_region:\n            self.on_flush_region()\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        super().on_d03(node)\n        self._on_d03_handler(node, self.state.current_aperture)\n        self._update_coordinates()\n        return node\n\n    def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n\n    def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:\n        \"\"\"Handle `D03` node with `ADR` aperture.\"\"\"\n\n    def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:\n        \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n\n    def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:\n        \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n\n    def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:\n        \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n\n    def on_flash_block(self, node: D03, aperture: AB) -&gt; None:\n        \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        self.state.current_aperture_id = node.aperture_id\n\n        aperture = self.state.current_aperture\n        handler: Any\n\n        if isinstance(aperture, ADC):\n            handler = self.on_flash_circle\n        elif isinstance(aperture, ADR):\n            handler = self.on_flash_rectangle\n        elif isinstance(aperture, ADO):\n            handler = self.on_flash_obround\n        elif isinstance(aperture, ADP):\n            handler = self.on_flash_polygon\n        elif isinstance(aperture, ADmacro):\n            handler = self.on_flash_macro\n        elif isinstance(aperture, AB):\n            handler = self.on_flash_block\n        elif isinstance(aperture, AD):\n            raise DirectADHandlerDispatchNotSupportedError\n\n        self._on_d03_handler = handler\n        return node\n\n    # G codes\n\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        super().on_g01(node)\n        self.state.plot_mode = PlotMode.LINEAR\n        self._dispatch_d01_handler()\n        return node\n\n    def _dispatch_d01_handler_in_region(self) -&gt; None:\n        self._on_d01_handler = self._plot_mode_to_in_region_d01_handler[\n            self.state.plot_mode\n        ][self.state.arc_interpolation]\n\n    def _dispatch_d01_handler_non_region(self) -&gt; None:\n        self._on_d01_handler = self._plot_mode_to_d01_handler[self.state.plot_mode][\n            self.state.arc_interpolation\n        ]\n\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        super().on_g02(node)\n        self.state.plot_mode = PlotMode.ARC\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        super().on_g03(node)\n        self.state.plot_mode = PlotMode.CCW_ARC\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        super().on_g36(node)\n        self.on_start_region()\n        return node\n\n    def on_start_region(self) -&gt; None:\n        \"\"\"Handle start of region.\"\"\"\n        self.state.is_region = True\n        self._dispatch_d01_handler = self._dispatch_d01_handler_in_region\n        self._dispatch_d01_handler()\n\n    def on_in_region_draw_line(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n\n    def on_in_region_draw_cw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant mode\n        within region statement.\n        \"\"\"\n\n    def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n        within region statement.\n        \"\"\"\n\n    def on_in_region_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n        mode within region statement.\n        \"\"\"\n\n    def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode within region statement.\n        \"\"\"\n\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        super().on_g37(node)\n        self.on_flush_region()\n        self.on_end_region()\n        return node\n\n    def on_flush_region(self) -&gt; None:\n        \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n\n    def on_end_region(self) -&gt; None:\n        \"\"\"Handle end of region.\"\"\"\n        self.state.is_region = False\n        self._dispatch_d01_handler = self._dispatch_d01_handler_non_region\n        self._dispatch_d01_handler()\n\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        super().on_g70(node)\n        self.state.unit_mode = UnitMode.IMPERIAL\n        return node\n\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        super().on_g71(node)\n        self.state.unit_mode = UnitMode.METRIC\n        return node\n\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        super().on_g74(node)\n        self.state.arc_interpolation = ArcInterpolation.SINGLE_QUADRANT\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        super().on_g75(node)\n        self.state.arc_interpolation = ArcInterpolation.MULTI_QUADRANT\n        self._dispatch_d01_handler()\n        return node\n\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        super().on_g90(node)\n        if self.state.coordinate_format is None:\n            self.state.coordinate_format = CoordinateFormat()\n\n        self.state.coordinate_format.coordinate_mode = CoordinateNotation.ABSOLUTE\n        return node\n\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        super().on_g91(node)\n        if self.state.coordinate_format is None:\n            self.state.coordinate_format = CoordinateFormat()\n\n        self.state.coordinate_format.coordinate_mode = CoordinateNotation.INCREMENTAL\n        return node\n\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        super().on_lm(node)\n        self.state.transform.mirroring = node.mirroring\n        return node\n\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        super().on_ln(node)\n        self.state.image_attributes.file_name = node.name\n        return node\n\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        super().on_lp(node)\n        self.state.transform.polarity = node.polarity\n        return node\n\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        super().on_lr(node)\n        self.state.transform.rotation = node.rotation\n        return node\n\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        super().on_ls(node)\n        self.state.transform.scaling = node.scale\n        return node\n\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        raise ProgramStop(node)\n\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        raise ProgramStop(node)\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_x(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_x = self.state.coordinate_format.unpack_x(node.value)\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_y(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_y = self.state.coordinate_format.unpack_y(node.value)\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_i(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_i = self.state.coordinate_format.unpack_x(node.value)\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        super().on_coordinate_j(node)\n        if self.state.coordinate_format is None:\n            raise CoordinateFormatNotSetError(node)\n\n        self.state.coordinate_j = self.state.coordinate_format.unpack_y(node.value)\n        return node\n\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        super().on_as(node)\n        self.state.image_attributes.axis_correspondence = node.correspondence\n        return node\n\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        super().on_fs(node)\n        self.state.coordinate_format = CoordinateFormat(\n            zeros=node.zeros,\n            coordinate_mode=node.coordinate_mode,\n            x_integral=node.x_integral,\n            x_decimal=node.x_decimal,\n            y_integral=node.y_integral,\n            y_decimal=node.y_decimal,\n        )\n        return node\n\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        super().on_in(node)\n        self.state.image_attributes.image_name = node.name\n        return node\n\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        super().on_ip(node)\n        self.state.image_attributes.polarity = node.polarity\n        return node\n\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        super().on_ir(node)\n        self.state.image_attributes.rotation = node.rotation_degrees\n        return node\n\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        super().on_mi(node)\n        self.state.image_attributes.a_axis_mirroring = node.a_mirroring\n        self.state.image_attributes.b_axis_mirroring = node.b_mirroring\n        return node\n\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        super().on_mo(node)\n        self.state.unit_mode = node.mode\n        return node\n\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        super().on_of(node)\n        self.state.image_attributes.a_axis_offset = node.a_offset\n        self.state.image_attributes.b_axis_offset = node.b_offset\n        return node\n\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        super().on_sf(node)\n        self.state.image_attributes.a_axis_scale = node.a_scale\n        self.state.image_attributes.b_axis_scale = node.b_scale\n        return node\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        with suppress(ProgramStop):\n            super().on_file(node)\n        return node\n\n    def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n        \"\"\"Handle exception.\"\"\"\n        if isinstance(exception, ProgramStop):\n            return bool(self._ignore_program_stop)\n\n        return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_x","title":"coordinate_x  <code>property</code>","text":"<pre><code>coordinate_x: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_y","title":"coordinate_y  <code>property</code>","text":"<pre><code>coordinate_y: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_i","title":"coordinate_i  <code>property</code>","text":"<pre><code>coordinate_i: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_j","title":"coordinate_j  <code>property</code>","text":"<pre><code>coordinate_j: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.is_negative","title":"is_negative  <code>property</code>","text":"<pre><code>is_negative: bool\n</code></pre> <p>Check if current aperture is negative.</p>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` node.\"\"\"\n    super().on_ab(node)\n    self.state.apertures.blocks[node.open.aperture_id] = node\n    self.state.apertures.per_aperture_attributes[node.open.aperture_id] = (\n        self.state.attributes.aperture_attributes.copy()\n    )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ad(self, node: AD) -&gt; None:\n    \"\"\"Handle `AD` node.\"\"\"\n    self.state.apertures.apertures[node.aperture_id] = node\n    self.state.apertures.per_aperture_attributes[node.aperture_id] = (\n        self.state.attributes.aperture_attributes.copy()\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_am(self, node: AM) -&gt; AM:\n    \"\"\"Handle `AM` root node.\"\"\"\n    self.state.apertures.macros[node.open.name] = node\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ta(self, node: TA) -&gt; None:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    self.state.attributes.aperture_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_tf(self, node: TF) -&gt; None:\n    \"\"\"Handle `TF` node.\"\"\"\n    self.state.attributes.file_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_to(self, node: TO) -&gt; None:\n    \"\"\"Handle `TO` node.\"\"\"\n    self.state.attributes.object_attributes[node.attribute_name] = node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    if node.name is None:\n        self.state.attributes.aperture_attributes.clear()\n        self.state.attributes.object_attributes.clear()\n        return node\n\n    self.state.attributes.aperture_attributes.pop(node.name, None)\n    self.state.attributes.object_attributes.pop(node.name, None)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    super().on_d01(node)\n    self._on_d01_handler(node)\n    self._update_coordinates()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_line(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_cw_arc_sq","title":"on_draw_cw_arc_sq","text":"<pre><code>on_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_cw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_cw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_ccw_arc_sq","title":"on_draw_ccw_arc_sq","text":"<pre><code>on_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    super().on_d02(node)\n    self._update_coordinates()\n    if self.state.is_region:\n        self.on_flush_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    super().on_d03(node)\n    self._on_d03_handler(node, self.state.current_aperture)\n    self._update_coordinates()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADR</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:\n    \"\"\"Handle `D03` node with `ADR` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:\n    \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:\n    \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:\n    \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flash_block(self, node: D03, aperture: AB) -&gt; None:\n    \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    self.state.current_aperture_id = node.aperture_id\n\n    aperture = self.state.current_aperture\n    handler: Any\n\n    if isinstance(aperture, ADC):\n        handler = self.on_flash_circle\n    elif isinstance(aperture, ADR):\n        handler = self.on_flash_rectangle\n    elif isinstance(aperture, ADO):\n        handler = self.on_flash_obround\n    elif isinstance(aperture, ADP):\n        handler = self.on_flash_polygon\n    elif isinstance(aperture, ADmacro):\n        handler = self.on_flash_macro\n    elif isinstance(aperture, AB):\n        handler = self.on_flash_block\n    elif isinstance(aperture, AD):\n        raise DirectADHandlerDispatchNotSupportedError\n\n    self._on_d03_handler = handler\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    super().on_g01(node)\n    self.state.plot_mode = PlotMode.LINEAR\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    super().on_g02(node)\n    self.state.plot_mode = PlotMode.ARC\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    super().on_g03(node)\n    self.state.plot_mode = PlotMode.CCW_ARC\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    super().on_g36(node)\n    self.on_start_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_start_region(self) -&gt; None:\n    \"\"\"Handle start of region.\"\"\"\n    self.state.is_region = True\n    self._dispatch_d01_handler = self._dispatch_d01_handler_in_region\n    self._dispatch_d01_handler()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_line(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_cw_arc_sq","title":"on_in_region_draw_cw_arc_sq","text":"<pre><code>on_in_region_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_cw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation single quadrant mode\n    within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n    within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_ccw_arc_sq","title":"on_in_region_draw_ccw_arc_sq","text":"<pre><code>on_in_region_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_ccw_arc_sq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation single quadrant\n    mode within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode within region statement.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    super().on_g37(node)\n    self.on_flush_region()\n    self.on_end_region()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_flush_region(self) -&gt; None:\n    \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_end_region(self) -&gt; None:\n    \"\"\"Handle end of region.\"\"\"\n    self.state.is_region = False\n    self._dispatch_d01_handler = self._dispatch_d01_handler_non_region\n    self._dispatch_d01_handler()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    super().on_g70(node)\n    self.state.unit_mode = UnitMode.IMPERIAL\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    super().on_g71(node)\n    self.state.unit_mode = UnitMode.METRIC\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    super().on_g74(node)\n    self.state.arc_interpolation = ArcInterpolation.SINGLE_QUADRANT\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    super().on_g75(node)\n    self.state.arc_interpolation = ArcInterpolation.MULTI_QUADRANT\n    self._dispatch_d01_handler()\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    super().on_g90(node)\n    if self.state.coordinate_format is None:\n        self.state.coordinate_format = CoordinateFormat()\n\n    self.state.coordinate_format.coordinate_mode = CoordinateNotation.ABSOLUTE\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    super().on_g91(node)\n    if self.state.coordinate_format is None:\n        self.state.coordinate_format = CoordinateFormat()\n\n    self.state.coordinate_format.coordinate_mode = CoordinateNotation.INCREMENTAL\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    super().on_lm(node)\n    self.state.transform.mirroring = node.mirroring\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    super().on_ln(node)\n    self.state.image_attributes.file_name = node.name\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    super().on_lp(node)\n    self.state.transform.polarity = node.polarity\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    super().on_lr(node)\n    self.state.transform.rotation = node.rotation\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    super().on_ls(node)\n    self.state.transform.scaling = node.scale\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    raise ProgramStop(node)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    raise ProgramStop(node)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_x(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_x = self.state.coordinate_format.unpack_x(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_y(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_y = self.state.coordinate_format.unpack_y(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_i(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_i = self.state.coordinate_format.unpack_x(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    super().on_coordinate_j(node)\n    if self.state.coordinate_format is None:\n        raise CoordinateFormatNotSetError(node)\n\n    self.state.coordinate_j = self.state.coordinate_format.unpack_y(node.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    super().on_as(node)\n    self.state.image_attributes.axis_correspondence = node.correspondence\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    super().on_fs(node)\n    self.state.coordinate_format = CoordinateFormat(\n        zeros=node.zeros,\n        coordinate_mode=node.coordinate_mode,\n        x_integral=node.x_integral,\n        x_decimal=node.x_decimal,\n        y_integral=node.y_integral,\n        y_decimal=node.y_decimal,\n    )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    super().on_in(node)\n    self.state.image_attributes.image_name = node.name\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    super().on_ip(node)\n    self.state.image_attributes.polarity = node.polarity\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    super().on_ir(node)\n    self.state.image_attributes.rotation = node.rotation_degrees\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    super().on_mi(node)\n    self.state.image_attributes.a_axis_mirroring = node.a_mirroring\n    self.state.image_attributes.b_axis_mirroring = node.b_mirroring\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    super().on_mo(node)\n    self.state.unit_mode = node.mode\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    super().on_of(node)\n    self.state.image_attributes.a_axis_offset = node.a_offset\n    self.state.image_attributes.b_axis_offset = node.b_offset\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    super().on_sf(node)\n    self.state.image_attributes.a_axis_scale = node.a_scale\n    self.state.image_attributes.b_axis_scale = node.b_scale\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    with suppress(ProgramStop):\n        super().on_file(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/state_tracking_visitor.html#pygerber.gerberx3.ast.state_tracking_visitor.StateTrackingVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> Source code in <code>src/pygerber/gerberx3/ast/state_tracking_visitor.py</code> <pre><code>def on_exception(self, node: Node, exception: Exception) -&gt; bool:  # noqa: ARG002\n    \"\"\"Handle exception.\"\"\"\n    if isinstance(exception, ProgramStop):\n        return bool(self._ignore_program_stop)\n\n    return True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes","title":"nodes","text":"<p><code>pygerber.gerberx3.ast.nodes</code> package contains all the node container classes generated by the Gerber X3 parser.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AB","title":"AB","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>class AB(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    open: ABopen\n    nodes: List[Node]\n    close: ABclose\n\n    def visit(self, visitor: AstVisitor) -&gt; AB:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AB]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AB.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AB\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AB:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AB.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AB]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AB]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABclose","title":"ABclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>class ABclose(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; ABclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ABclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ABclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ABclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABopen","title":"ABopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>class ABopen(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    aperture_id: ApertureIdStr\n\n    def visit(self, visitor: AstVisitor) -&gt; ABopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ABopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ABopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ABopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ABopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AD","title":"AD","text":"<p>             Bases: <code>Node</code></p> <p>Common base class for all commands adding new apertures.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AD.py</code> <pre><code>class AD(Node):\n    \"\"\"Common base class for all commands adding new apertures.\"\"\"\n\n    aperture_id: ApertureIdStr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADC","title":"ADC","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>class ADC(AD):\n    \"\"\"Represents AD Gerber extended command.\"\"\"\n\n    diameter: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADC:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adc(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADC]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adc\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADC.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADC\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADC:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADC.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADC]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADC]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adc\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADmacro","title":"ADmacro","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD macro Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>class ADmacro(AD):\n    \"\"\"Represents AD macro Gerber extended command.\"\"\"\n\n    name: str\n    params: Optional[List[Double]] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADmacro:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ad_macro(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADmacro]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ad_macro\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADmacro.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADmacro\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADmacro:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ad_macro(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADmacro.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADmacro]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADmacro]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ad_macro\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADO","title":"ADO","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD obround Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>class ADO(AD):\n    \"\"\"Represents AD obround Gerber extended command.\"\"\"\n\n    width: Double\n    height: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADO:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ado(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADO]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ado\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADO\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADO:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ado(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADO]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADO]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ado\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADP","title":"ADP","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD polygon Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>class ADP(AD):\n    \"\"\"Represents AD polygon Gerber extended command.\"\"\"\n\n    outer_diameter: Double\n    vertices: Integer\n    rotation: Optional[Double] = Field(default=None)\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADR","title":"ADR","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD rectangle Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>class ADR(AD):\n    \"\"\"Represents AD rectangle Gerber extended command.\"\"\"\n\n    width: Double\n    height: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ADR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AM","title":"AM","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>class AM(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    open: AMopen\n    primitives: List[Node]\n    close: AMclose\n\n    def visit(self, visitor: AstVisitor) -&gt; AM:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AM]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AM\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AM:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AM]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AM]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMclose","title":"AMclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>class AMclose(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; AMclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AMclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AMclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AMclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMopen","title":"AMopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>class AMopen(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    name: str\n\n    def visit(self, visitor: AstVisitor) -&gt; AMopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AMopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AMopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AMopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AMopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SR","title":"SR","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>class SR(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    open: SRopen\n    nodes: List[Node]\n    close: SRclose\n\n    def visit(self, visitor: AstVisitor) -&gt; SR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRclose","title":"SRclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>class SRclose(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; SRclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SRclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SRclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SRclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen","title":"SRopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>class SRopen(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    x: Optional[str] = Field(default=None)\n    y: Optional[str] = Field(default=None)\n    i: Optional[str] = Field(default=None)\n    j: Optional[str] = Field(default=None)\n\n    @property\n    def x_repeats(self) -&gt; int:\n        \"\"\"Get number of repeats in X axis.\"\"\"\n        repeats = 1 if self.x is None else int(self.x)\n        assert repeats &gt; 0\n        return repeats\n\n    @property\n    def y_repeats(self) -&gt; int:\n        \"\"\"Get number of repeats in Y axis.\"\"\"\n        repeats = 1 if self.y is None else int(self.y)\n        assert repeats &gt; 0\n        return repeats\n\n    @property\n    def x_delta(self) -&gt; float:\n        \"\"\"Get number of X repeats.\"\"\"\n        return 0 if self.i is None else float(self.i)\n\n    @property\n    def y_delta(self) -&gt; float:\n        \"\"\"Get number of Y repeats.\"\"\"\n        return 0 if self.j is None else float(self.j)\n\n    def visit(self, visitor: AstVisitor) -&gt; SRopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SRopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.x_repeats","title":"x_repeats  <code>property</code>","text":"<pre><code>x_repeats: int\n</code></pre> <p>Get number of repeats in X axis.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.y_repeats","title":"y_repeats  <code>property</code>","text":"<pre><code>y_repeats: int\n</code></pre> <p>Get number of repeats in Y axis.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.x_delta","title":"x_delta  <code>property</code>","text":"<pre><code>x_delta: float\n</code></pre> <p>Get number of X repeats.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.y_delta","title":"y_delta  <code>property</code>","text":"<pre><code>y_delta: float\n</code></pre> <p>Get number of Y repeats.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SRopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SRopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SRopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA","title":"TA","text":"<p>             Bases: <code>Node</code></p> <p>Represents TA Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA(Node):\n    \"\"\"Represents TA Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_AperFunction","title":"TA_AperFunction","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .AperFunction Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_AperFunction(TA):  # noqa: N801\n    \"\"\"Represents TA .AperFunction Gerber attribute.\"\"\"\n\n    function: Optional[AperFunction] = Field(default=None)\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".AperFunction\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_AperFunction:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_aper_function(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_AperFunction]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_aper_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_AperFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_AperFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_AperFunction\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_AperFunction:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_aper_function(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_AperFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_AperFunction]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_AperFunction]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_aper_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_DrillTolerance","title":"TA_DrillTolerance","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .DrillTolerance Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_DrillTolerance(TA):  # noqa: N801\n    \"\"\"Represents TA .DrillTolerance Gerber attribute.\"\"\"\n\n    plus_tolerance: Optional[float] = Field(default=None)\n    minus_tolerance: Optional[float] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".DrillTolerance\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_DrillTolerance:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_drill_tolerance(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_DrillTolerance]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_drill_tolerance\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_DrillTolerance.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_DrillTolerance.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_DrillTolerance:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_drill_tolerance(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_DrillTolerance.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_DrillTolerance]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_DrillTolerance]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_drill_tolerance\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_FlashText","title":"TA_FlashText","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .FlashText Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_FlashText(TA):  # noqa: N801\n    \"\"\"Represents TA .FlashText Gerber attribute.\"\"\"\n\n    string: str\n    mode: Literal[\"B\", \"C\"]\n    mirroring: Literal[\"R\", \"M\"] = Field(default=\"R\")\n    font: Optional[str] = Field(default=None)\n    size: Optional[str] = Field(default=None)\n    comments: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FlashText\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_FlashText:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_flash_text(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_FlashText]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_flash_text\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_FlashText.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_FlashText.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_FlashText\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_FlashText:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_flash_text(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_FlashText.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_FlashText]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_FlashText]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_flash_text\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_UserName","title":"TA_UserName","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_UserName(TA):  # noqa: N801\n    \"\"\"Represents TA Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TA_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TD","title":"TD","text":"<p>             Bases: <code>Node</code></p> <p>Represents TD Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>class TD(Node):\n    \"\"\"Represents TD Gerber extended command.\"\"\"\n\n    name: Optional[str] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; TD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_td(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_td\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_td(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_td\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF","title":"TF","text":"<p>             Bases: <code>Node</code></p> <p>Represents TF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF(Node):\n    \"\"\"Represents TF Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_MD5","title":"TF_MD5","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with MD5 attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_MD5(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with MD5 attribute.\"\"\"\n\n    md5: str = Field(min_length=MD5_LENGTH_HEX, max_length=MD5_LENGTH_HEX)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".MD5\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_MD5:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_md5(self)\n\n    def check_source_hash(self) -&gt; bool:\n        \"\"\"Validate MD5 attribute.\"\"\"\n        if self.source_info is None:\n            raise SourceNotAvailableError(self)\n\n        source = (\n            self.source_info.source[: self.source_info.location - 1]\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\")\n            .encode(\"utf-8\")\n        )\n        source_hash = hashlib.md5(source).hexdigest()  # noqa: S324\n        return source_hash == self.md5\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_MD5]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_MD5.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_MD5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_MD5\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_MD5:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_md5(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_MD5.check_source_hash","title":"check_source_hash","text":"<pre><code>check_source_hash() -&gt; bool\n</code></pre> <p>Validate MD5 attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def check_source_hash(self) -&gt; bool:\n    \"\"\"Validate MD5 attribute.\"\"\"\n    if self.source_info is None:\n        raise SourceNotAvailableError(self)\n\n    source = (\n        self.source_info.source[: self.source_info.location - 1]\n        .replace(\"\\n\", \"\")\n        .replace(\"\\r\", \"\")\n        .encode(\"utf-8\")\n    )\n    source_hash = hashlib.md5(source).hexdigest()  # noqa: S324\n    return source_hash == self.md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_MD5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_MD5]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_MD5]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_CreationDate","title":"TF_CreationDate","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with creation date attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_CreationDate(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with creation date attribute.\"\"\"\n\n    creation_date: datetime.datetime\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CreationDate\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_CreationDate:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_creation_date(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_CreationDate]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_creation_date\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_CreationDate.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_CreationDate.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_CreationDate\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_CreationDate:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_creation_date(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_CreationDate.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_CreationDate]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_CreationDate]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_creation_date\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FileFunction","title":"TF_FileFunction","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file function attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_FileFunction(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with file function attribute.\"\"\"\n\n    file_function: FileFunction\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FileFunction\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_FileFunction:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_file_function(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_FileFunction]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_file_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FileFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FileFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FileFunction\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_FileFunction:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_file_function(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FileFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FileFunction]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_FileFunction]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_file_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FilePolarity","title":"TF_FilePolarity","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file polarity attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_FilePolarity(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with file polarity attribute.\"\"\"\n\n    polarity: Literal[\"Positive\", \"Negative\"]\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FilePolarity\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_FilePolarity:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_file_polarity(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_FilePolarity]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_file_polarity\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FilePolarity.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FilePolarity.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FilePolarity\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_FilePolarity:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_file_polarity(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_FilePolarity.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FilePolarity]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_FilePolarity]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_file_polarity\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_GenerationSoftware","title":"TF_GenerationSoftware","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with generation software attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_GenerationSoftware(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with generation software attribute.\"\"\"\n\n    vendor: Optional[str] = Field(default=None)\n    application: Optional[str] = Field(default=None)\n    version: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".GenerationSoftware\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_generation_software(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_GenerationSoftware]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_generation_software\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_GenerationSoftware.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_GenerationSoftware.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_generation_software(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_GenerationSoftware.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_GenerationSoftware]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_GenerationSoftware]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_generation_software\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_Part","title":"TF_Part","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with part attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_Part(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with part attribute.\"\"\"\n\n    part: Part\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".Part\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_Part:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_part(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_Part]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_part\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_Part.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_Part.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_Part\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_Part:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_part(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_Part.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_Part]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_Part]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_part\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_ProjectId","title":"TF_ProjectId","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with project id attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_ProjectId(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with project id attribute.\"\"\"\n\n    name: Optional[str] = Field(default=None)\n    guid: Optional[str] = Field(default=None)\n    revision: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".ProjectId\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_ProjectId:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_project_id(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_ProjectId]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_project_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_ProjectId.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_ProjectId.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_ProjectId\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_ProjectId:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_project_id(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_ProjectId.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_ProjectId]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_ProjectId]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_project_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_SameCoordinates","title":"TF_SameCoordinates","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with same coordinates attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_SameCoordinates(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with same coordinates attribute.\"\"\"\n\n    identifier: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".SameCoordinates\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_SameCoordinates:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_same_coordinates(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_SameCoordinates]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_same_coordinates\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_SameCoordinates.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_SameCoordinates.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_SameCoordinates:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_same_coordinates(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_SameCoordinates.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_SameCoordinates]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_SameCoordinates]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_same_coordinates\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_UserName","title":"TF_UserName","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_UserName(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TF_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO","title":"TO","text":"<p>             Bases: <code>Node</code></p> <p>Represents TO Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO(Node):\n    \"\"\"Represents TO Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_C","title":"TO_C","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .C attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_C(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .C attribute.\"\"\"\n\n    refdes: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".C\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_C:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_c(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_C]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_c\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_C.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_C.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_C\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_C:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_c(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_C.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_C]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_C]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_c\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMNP","title":"TO_CMNP","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMNP attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMNP(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMNP attribute.\"\"\"\n\n    part_number: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMNP\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMNP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmnp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMNP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmnp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMNP.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMNP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMNP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMNP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmnp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMNP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMNP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMNP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmnp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_N","title":"TO_N","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .N attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_N(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .N attribute.\"\"\"\n\n    net_names: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".N\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_N:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_n(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_N]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_n\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_N.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_N.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_N\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_N:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_n(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_N.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_N]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_N]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_n\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_P","title":"TO_P","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .P attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_P(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .P attribute.\"\"\"\n\n    refdes: str\n    number: str\n    function: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".P\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_P:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_p(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_P]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_p\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_P.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_P.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_P\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_P:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_p(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_P.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_P]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_P]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_p\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CFtp","title":"TO_CFtp","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CFtp attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CFtp(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CFtp attribute.\"\"\"\n\n    footprint: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CFtp\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CFtp:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cftp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CFtp]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cftp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CFtp.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CFtp.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CFtp\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CFtp:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cftp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CFtp.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CFtp]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CFtp]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cftp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CHgt","title":"TO_CHgt","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CHgt attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CHgt(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CHgt attribute.\"\"\"\n\n    height: Double\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CHgt\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CHgt:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_chgt(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CHgt]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_chgt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CHgt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CHgt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CHgt\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CHgt:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_chgt(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CHgt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CHgt]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CHgt]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_chgt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbD","title":"TO_CLbD","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbD attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CLbD(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CLbD attribute.\"\"\"\n\n    description: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CLbD\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CLbD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_clbd(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CLbD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_clbd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CLbD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_clbd(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CLbD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_clbd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbN","title":"TO_CLbN","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbN attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CLbN(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CLbN attribute.\"\"\"\n\n    name: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CLbN\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CLbN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_clbn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CLbN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_clbn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CLbN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_clbn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CLbN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CLbN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_clbn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMfr","title":"TO_CMfr","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMfr attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMfr(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMfr attribute.\"\"\"\n\n    manufacturer: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMfr\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMfr:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmfr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMfr]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmfr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMfr.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMfr.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMfr\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMfr:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmfr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMfr.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMfr]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMfr]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmfr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMnt","title":"TO_CMnt","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMnt attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMnt(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMnt attribute.\"\"\"\n\n    mount: Mount\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMnt\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMnt:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmnt(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMnt]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmnt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMnt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMnt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMnt\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMnt:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmnt(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CMnt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMnt]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMnt]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmnt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgD","title":"TO_CPgD","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgD attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CPgD(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CPgD attribute.\"\"\"\n\n    description: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CPgD\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CPgD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cpgd(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CPgD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cpgd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CPgD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cpgd(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CPgD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cpgd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgN","title":"TO_CPgN","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgN attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CPgN(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CPgN attribute.\"\"\"\n\n    name: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CPgN\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CPgN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cpgn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CPgN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cpgn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CPgN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cpgn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CPgN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CPgN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cpgn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CRot","title":"TO_CRot","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CRot attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CRot(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CRot attribute.\"\"\"\n\n    angle: Double\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CRot\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CRot:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_crot(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CRot]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_crot\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CRot.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CRot.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CRot\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CRot:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_crot(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CRot.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CRot]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CRot]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_crot\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CSup","title":"TO_CSup","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CSup attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CSup(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CSup attribute.\"\"\"\n\n    supplier: str\n    supplier_part: str\n\n    other_suppliers: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CSup\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CSup:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_csup(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CSup]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_csup\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CSup.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CSup.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CSup\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CSup:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_csup(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CSup.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CSup]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CSup]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_csup\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CVal","title":"TO_CVal","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CVal attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CVal(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CVal attribute.\"\"\"\n\n    value: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CVal\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CVal:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cval(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CVal]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cval\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CVal.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CVal.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CVal\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CVal:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cval(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_CVal.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CVal]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CVal]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cval\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_UserName","title":"TO_UserName","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_UserName(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.TO_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Node","title":"Node","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for all nodes.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>class Node(ModelType):\n    \"\"\"Base class for all nodes.\"\"\"\n\n    source_info: Optional[SourceInfo] = Field(default=None, repr=False, exclude=True)\n\n    @abstractmethod\n    def visit(self, visitor: AstVisitor) -&gt; Self:\n        \"\"\"Handle visitor call.\"\"\"\n\n    @abstractmethod\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Self]:\n        \"\"\"Get callback function for the node.\"\"\"\n\n    def __len__(self) -&gt; int:\n        \"\"\"Get the length of token in source code.\"\"\"\n        if self.source_info is None:\n            return 0\n        return self.source_info.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Node.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Self\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@abstractmethod\ndef visit(self, visitor: AstVisitor) -&gt; Self:\n    \"\"\"Handle visitor call.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Node.get_visitor_callback_function","title":"get_visitor_callback_function  <code>abstractmethod</code>","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Self]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@abstractmethod\ndef get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Self]:\n    \"\"\"Get callback function for the node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Node.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Get the length of token in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Get the length of token in source code.\"\"\"\n    if self.source_info is None:\n        return 0\n    return self.source_info.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo","title":"SourceInfo","text":"<p>             Bases: <code>ModelType</code></p> <p>Source information for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>class SourceInfo(ModelType):\n    \"\"\"Source information for the node.\"\"\"\n\n    source: str\n    location: int\n    length: int\n\n    @pp.cached_property\n    def line(self) -&gt; int:\n        \"\"\"Get the line number of the start location within the string; the first line\n        is line 1, newlines start new rows.\n        \"\"\"\n        return pp.lineno(self.location, self.source)\n\n    @pp.cached_property\n    def column(self) -&gt; int:\n        \"\"\"Get the column number of the start location within the string; the first\n        column is column 1, newlines reset the column number to 1.\n        \"\"\"\n        return pp.col(self.location, self.source)\n\n    @pp.cached_property\n    def end_line(self) -&gt; int:\n        \"\"\"Get the line number of the end location within the string; the first line\n        is line 1, newlines start new rows.\n        \"\"\"\n        return pp.lineno(self.location + self.length, self.source)\n\n    @pp.cached_property\n    def end_column(self) -&gt; int:\n        \"\"\"Get the column number of the end location within the string; the first\n        column is column 1, newlines reset the column number to 1.\n        \"\"\"\n        return pp.col(self.location + self.length, self.source)\n\n    @pp.cached_property\n    def end_location(self) -&gt; int:\n        \"\"\"Get the end location of the source.\"\"\"\n        return self.location + self.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo.line","title":"line","text":"<pre><code>line() -&gt; int\n</code></pre> <p>Get the line number of the start location within the string; the first line is line 1, newlines start new rows.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef line(self) -&gt; int:\n    \"\"\"Get the line number of the start location within the string; the first line\n    is line 1, newlines start new rows.\n    \"\"\"\n    return pp.lineno(self.location, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo.column","title":"column","text":"<pre><code>column() -&gt; int\n</code></pre> <p>Get the column number of the start location within the string; the first column is column 1, newlines reset the column number to 1.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef column(self) -&gt; int:\n    \"\"\"Get the column number of the start location within the string; the first\n    column is column 1, newlines reset the column number to 1.\n    \"\"\"\n    return pp.col(self.location, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo.end_line","title":"end_line","text":"<pre><code>end_line() -&gt; int\n</code></pre> <p>Get the line number of the end location within the string; the first line is line 1, newlines start new rows.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_line(self) -&gt; int:\n    \"\"\"Get the line number of the end location within the string; the first line\n    is line 1, newlines start new rows.\n    \"\"\"\n    return pp.lineno(self.location + self.length, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo.end_column","title":"end_column","text":"<pre><code>end_column() -&gt; int\n</code></pre> <p>Get the column number of the end location within the string; the first column is column 1, newlines reset the column number to 1.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_column(self) -&gt; int:\n    \"\"\"Get the column number of the end location within the string; the first\n    column is column 1, newlines reset the column number to 1.\n    \"\"\"\n    return pp.col(self.location + self.length, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SourceInfo.end_location","title":"end_location","text":"<pre><code>end_location() -&gt; int\n</code></pre> <p>Get the end location of the source.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_location(self) -&gt; int:\n    \"\"\"Get the end location of the source.\"\"\"\n    return self.location + self.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D01","title":"D01","text":"<p>             Bases: <code>D</code></p> <p>Represents D01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>class D01(D):\n    \"\"\"Represents D01 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n    i: Optional[CoordinateI] = Field(default=None)\n    j: Optional[CoordinateJ] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D02","title":"D02","text":"<p>             Bases: <code>D</code></p> <p>Represents D02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>class D02(D):\n    \"\"\"Represents D02 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D03","title":"D03","text":"<p>             Bases: <code>D</code></p> <p>Represents D03 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>class D03(D):\n    \"\"\"Represents D03 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D03:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d03(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D03]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D03\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D03:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d03(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.D03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D03]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D03]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Dnn","title":"Dnn","text":"<p>             Bases: <code>D</code></p> <p>Represents DNN Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>class Dnn(D):\n    \"\"\"Represents DNN Gerber command.\"\"\"\n\n    aperture_id: ApertureIdStr\n\n    def visit(self, visitor: AstVisitor) -&gt; Dnn:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_dnn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Dnn]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_dnn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Dnn.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Dnn\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Dnn:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_dnn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Dnn.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Dnn]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Dnn]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_dnn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.File","title":"File","text":"<p>             Bases: <code>Node</code></p> <p>The <code>File</code> node class represents a root of Gerber AST.</p> <p>It will be invalid for a File node to contain another File node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>class File(Node):\n    \"\"\"The `File` node class represents a root of Gerber AST.\n\n    It will be invalid for a File node to contain another File node.\n    \"\"\"\n\n    nodes: List[Node]\n\n    def visit(self, visitor: AstVisitor) -&gt; File:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_file(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], File]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_file\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.File.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; File\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; File:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_file(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.File.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], File]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], File]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_file\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G","title":"G","text":"<p>             Bases: <code>Node</code></p> <p>Base class for all Gxx nodes.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G.py</code> <pre><code>class G(Node):\n    \"\"\"Base class for all Gxx nodes.\"\"\"\n\n    is_standalone: bool = Field(default=True)\n    \"\"\"Flag indicating if the node is standalone, ie. it should include * at the end.\n\n    This is necessary as some legacy Gerber files use redundant G codes to prefix\n    pretty much every D01/D02/D03 command. To make it possible to keep the original\n    layout of the file, we need to know if the G code was directly followed by a D code.\n\n    Example:\n\n    ```gerber\n    G70D02*\n    G54D16*\n    G01X5440Y5650D03*\n    G01X5440Y6900D03*\n    G01X6800Y2200D03*\n    G01X5550Y2200D03*\n    G01X17720Y6860D03*\n    G01X17720Y5610D03*\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it should include * at the end.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the G code was directly followed by a D code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G01","title":"G01","text":"<p>             Bases: <code>G</code></p> <p>Represents G01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>class G01(G):\n    \"\"\"Represents G01 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G02","title":"G02","text":"<p>             Bases: <code>G</code></p> <p>Represents G02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>class G02(G):\n    \"\"\"Represents G02 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G03","title":"G03","text":"<p>             Bases: <code>G</code></p> <p>Represents G03 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>class G03(G):\n    \"\"\"Represents G03 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G03:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g03(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G03]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G03\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G03:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g03(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G03]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G03]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G04","title":"G04","text":"<p>             Bases: <code>G</code></p> <p>Represents G04 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>class G04(G):\n    \"\"\"Represents G04 Gerber command.\"\"\"\n\n    string: Optional[str] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; G04:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g04(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G04]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g04\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G04.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G04\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G04:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g04(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G04.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G04]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G04]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g04\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G36","title":"G36","text":"<p>             Bases: <code>G</code></p> <p>Represents G36 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>class G36(G):\n    \"\"\"Represents G36 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G36:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g36(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G36]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g36\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G36.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G36\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G36:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g36(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G36.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G36]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G36]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g36\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G37","title":"G37","text":"<p>             Bases: <code>G</code></p> <p>Represents G37 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>class G37(G):\n    \"\"\"Represents G37 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G37:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g37(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G37]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g37\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G37.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G37\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G37:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g37(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G37.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G37]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G37]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g37\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G54","title":"G54","text":"<p>             Bases: <code>G</code></p> <p>Represents G54 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>class G54(G):\n    \"\"\"Represents G54 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G54:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g54(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G54]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g54\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G54.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G54\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G54:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g54(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G54.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G54]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G54]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g54\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G55","title":"G55","text":"<p>             Bases: <code>G</code></p> <p>Represents G55 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>class G55(G):\n    \"\"\"Represents G55 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G55:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g55(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G55]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g55\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G55.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G55\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G55:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g55(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G55.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G55]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G55]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g55\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G70","title":"G70","text":"<p>             Bases: <code>G</code></p> <p>Represents G70 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>class G70(G):\n    \"\"\"Represents G70 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G70:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g70(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G70]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g70\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G70.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G70\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G70:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g70(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G70.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G70]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G70]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g70\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G71","title":"G71","text":"<p>             Bases: <code>G</code></p> <p>Represents G71 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>class G71(G):\n    \"\"\"Represents G71 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G71:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g71(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G71]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g71\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G71.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G71\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G71:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g71(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G71.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G71]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G71]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g71\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G74","title":"G74","text":"<p>             Bases: <code>G</code></p> <p>Represents G74 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>class G74(G):\n    \"\"\"Represents G74 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G74:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g74(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G74]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g74\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G74.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G74\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G74:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g74(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G74.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G74]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G74]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g74\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G75","title":"G75","text":"<p>             Bases: <code>G</code></p> <p>Represents G75 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>class G75(G):\n    \"\"\"Represents G75 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G75:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g75(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G75]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g75\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G75.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G75\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G75:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g75(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G75.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G75]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G75]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g75\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G90","title":"G90","text":"<p>             Bases: <code>G</code></p> <p>Represents G90 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>class G90(G):\n    \"\"\"Represents G90 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G90:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g90(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G90]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g90\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G90.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G90\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G90:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g90(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G90.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G90]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G90]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g90\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G91","title":"G91","text":"<p>             Bases: <code>G</code></p> <p>Represents G91 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>class G91(G):\n    \"\"\"Represents G91 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G91:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g91(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G91]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g91\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G91.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G91\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G91:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g91(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.G91.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G91]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G91]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g91\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Invalid","title":"Invalid","text":"<p>             Bases: <code>Node</code></p> <p>Represents G04 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>class Invalid(Node):\n    \"\"\"Represents G04 Gerber command.\"\"\"\n\n    string: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Invalid:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_invalid(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Invalid]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_invalid\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Invalid.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Invalid\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Invalid:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_invalid(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Invalid.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Invalid]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Invalid]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_invalid\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LM","title":"LM","text":"<p>             Bases: <code>Node</code></p> <p>Represents LM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>class LM(Node):\n    \"\"\"Represents LM Gerber extended command.\"\"\"\n\n    mirroring: Mirroring\n\n    def visit(self, visitor: AstVisitor) -&gt; LM:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lm(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LM]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lm\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LM\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LM:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lm(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LM]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LM]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lm\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LN","title":"LN","text":"<p>             Bases: <code>Node</code></p> <p>Represents LN Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>class LN(Node):\n    \"\"\"Represents LN Gerber extended command.\"\"\"\n\n    name: str\n\n    def visit(self, visitor: AstVisitor) -&gt; LN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ln(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ln\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ln(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ln\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LP","title":"LP","text":"<p>             Bases: <code>Node</code></p> <p>Represents LP Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>class LP(Node):\n    \"\"\"Represents LP Gerber extended command.\"\"\"\n\n    polarity: Polarity\n\n    def visit(self, visitor: AstVisitor) -&gt; LP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LR","title":"LR","text":"<p>             Bases: <code>Node</code></p> <p>Represents LR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>class LR(Node):\n    \"\"\"Represents LR Gerber extended command.\"\"\"\n\n    rotation: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; LR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LS","title":"LS","text":"<p>             Bases: <code>Node</code></p> <p>Represents LS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>class LS(Node):\n    \"\"\"Represents LS Gerber extended command.\"\"\"\n\n    scale: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; LS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ls(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ls\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ls(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.LS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ls\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M00","title":"M00","text":"<p>             Bases: <code>Node</code></p> <p>Represents M00 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>class M00(Node):\n    \"\"\"Represents M00 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M00:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m00(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M00]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m00\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M00.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M00\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M00:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m00(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M00.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M00]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M00]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m00\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M01","title":"M01","text":"<p>             Bases: <code>Node</code></p> <p>Represents M01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>class M01(Node):\n    \"\"\"Represents M01 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M02","title":"M02","text":"<p>             Bases: <code>Node</code></p> <p>Represents M02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>class M02(Node):\n    \"\"\"Represents M02 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.M02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Assignment","title":"Assignment","text":"<p>             Bases: <code>Node</code></p> <p>Represents math expression variable.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>class Assignment(Node):\n    \"\"\"Represents math expression variable.\"\"\"\n\n    variable: Variable\n    expression: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Assignment:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_assignment(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Assignment]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_assignment\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Assignment.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Assignment\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Assignment:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_assignment(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Assignment.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Assignment]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Assignment]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_assignment\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Constant","title":"Constant","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression constant.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>class Constant(Expression):\n    \"\"\"Represents math expression constant.\"\"\"\n\n    constant: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; Constant:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_constant(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Constant]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_constant\n\n    def __hash__(self) -&gt; int:\n        return hash(self.constant)\n\n    def __eq__(self, value: object) -&gt; bool:\n        if isinstance(value, Constant):\n            return self.constant == value.constant\n\n        return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Constant.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Constant\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Constant:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_constant(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Constant.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Constant]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Constant]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_constant\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Expression","title":"Expression","text":"<p>             Bases: <code>Node</code></p> <p>Represents math expression expression.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/expression.py</code> <pre><code>class Expression(Node):\n    \"\"\"Represents math expression expression.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Add","title":"Add","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression addition operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>class Add(Expression):\n    \"\"\"Represents math expression addition operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Add:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_add(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Add]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_add\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Add.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Add\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Add:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_add(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Add.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Add]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Add]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_add\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Div","title":"Div","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression division operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>class Div(Expression):\n    \"\"\"Represents math expression division operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Div:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_div(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Div]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_div\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Div.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Div\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Div:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_div(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Div.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Div]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Div]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_div\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Mul","title":"Mul","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression multiplication operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>class Mul(Expression):\n    \"\"\"Represents math expression multiplication operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Mul:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mul(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Mul]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mul\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Mul.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Mul\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Mul:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mul(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Mul.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Mul]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Mul]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mul\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Sub","title":"Sub","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression subtraction operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>class Sub(Expression):\n    \"\"\"Represents math expression subtraction operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Sub:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sub(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Sub]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sub\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Sub.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Sub\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Sub:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sub(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Sub.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Sub]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Sub]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sub\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Neg","title":"Neg","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression neg.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>class Neg(Expression):\n    \"\"\"Represents math expression neg.\"\"\"\n\n    operand: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Neg:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_neg(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Neg]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_neg\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Neg.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Neg\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Neg:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_neg(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Neg.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Neg]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Neg]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_neg\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Pos","title":"Pos","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression pos.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>class Pos(Expression):\n    \"\"\"Represents math expression pos.\"\"\"\n\n    operand: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Pos:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_pos(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Pos]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_pos\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Pos.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Pos\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Pos:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_pos(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Pos.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Pos]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Pos]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_pos\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Parenthesis","title":"Parenthesis","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression expression.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>class Parenthesis(Expression):\n    \"\"\"Represents math expression expression.\"\"\"\n\n    inner: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Parenthesis:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_parenthesis(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Parenthesis]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_parenthesis\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Parenthesis.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Parenthesis\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Parenthesis:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_parenthesis(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Parenthesis.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Parenthesis]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Parenthesis]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_parenthesis\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Point","title":"Point","text":"<p>             Bases: <code>Node</code></p> <p>Represents math point point.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>class Point(Node):\n    \"\"\"Represents math point point.\"\"\"\n\n    x: Expression\n    y: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Point:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_point(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Point]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Point.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Point\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Point:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_point(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Point.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Point]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Point]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Variable","title":"Variable","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression variable.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>class Variable(Expression):\n    \"\"\"Represents math expression variable.\"\"\"\n\n    variable: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Variable:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_variable(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Variable]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_variable\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Variable.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Variable\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Variable:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_variable(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Variable.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Variable]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Variable]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_variable\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Coordinate","title":"Coordinate","text":"<p>             Bases: <code>Node</code></p> <p>Represents Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class Coordinate(Node):\n    \"\"\"Represents Coordinate node.\"\"\"\n\n    value: PackedCoordinateStr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateI","title":"CoordinateI","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents I Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateI(Coordinate):\n    \"\"\"Represents I Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateI:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_i(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateI]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_i\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateI\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateI:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_i(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateI]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateI]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_i\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateJ","title":"CoordinateJ","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents J Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateJ(Coordinate):\n    \"\"\"Represents J Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateJ:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_j(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateJ]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_j\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateJ.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateJ\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateJ:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_j(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateJ.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateJ]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateJ]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_j\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateX","title":"CoordinateX","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents X Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateX(Coordinate):\n    \"\"\"Represents X Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateX:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_x(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateX]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_x\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateX.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateX\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateX:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_x(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateX.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateX]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateX]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_x\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateY","title":"CoordinateY","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents Y Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateY(Coordinate):\n    \"\"\"Represents Y Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateY:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_y(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateY]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_y\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateY.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateY\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateY:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_y(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.CoordinateY.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateY]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateY]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_y\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code0","title":"Code0","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 0 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>class Code0(Node):\n    \"\"\"Represents code 0 macro primitive.\"\"\"\n\n    string: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Code0:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_0(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code0]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_0\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code0.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code0\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code0:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_0(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code0.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code0]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code0]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_0\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code1","title":"Code1","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 1 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>class Code1(Node):\n    \"\"\"Represents code 1 macro primitive.\"\"\"\n\n    exposure: Expression\n    diameter: Expression\n    center_x: Expression\n    center_y: Expression\n    rotation: Optional[Expression] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; Code1:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_1(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code1]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_1\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code1.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code1\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code1:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_1(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code1.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code1]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code1]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_1\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code2","title":"Code2","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 2 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>class Code2(Node):\n    \"\"\"Represents code 2 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    start_x: Expression\n    start_y: Expression\n    end_x: Expression\n    end_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code2:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_2(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code2]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code2.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code2\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code2:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_2(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code2.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code2]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code2]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code4","title":"Code4","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 4 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>class Code4(Node):\n    \"\"\"Represents code 4 macro primitive.\"\"\"\n\n    exposure: Expression\n    number_of_points: Expression\n    start_x: Expression\n    start_y: Expression\n    points: List[Point]\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code4:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_4(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code4]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_4\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code4.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code4\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code4:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_4(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code4.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code4]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code4]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_4\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code5","title":"Code5","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 5 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>class Code5(Node):\n    \"\"\"Represents code 5 macro primitive.\"\"\"\n\n    exposure: Expression\n    number_of_vertices: Expression\n    center_x: Expression\n    center_y: Expression\n    diameter: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code5:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_5(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code5]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code5\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code5:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_5(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code5]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code5]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code6","title":"Code6","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 6 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>class Code6(Node):\n    \"\"\"Represents code 6 macro primitive.\"\"\"\n\n    center_x: Expression\n    center_y: Expression\n    outer_diameter: Expression\n    ring_thickness: Expression\n    gap_between_rings: Expression\n    max_ring_count: Expression\n    crosshair_thickness: Expression\n    crosshair_length: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code6:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_6(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code6]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_6\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code6.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code6\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code6:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_6(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code6.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code6]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code6]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_6\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code7","title":"Code7","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 7 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>class Code7(Node):\n    \"\"\"Represents code 7 macro primitive.\"\"\"\n\n    center_x: Expression\n    center_y: Expression\n    outer_diameter: Expression\n    inner_diameter: Expression\n    gap_thickness: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code7:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_7(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code7]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_7\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code7.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code7\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code7:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_7(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code7.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code7]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code7]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_7\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code20","title":"Code20","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 20 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>class Code20(Node):\n    \"\"\"Represents code 20 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    start_x: Expression\n    start_y: Expression\n    end_x: Expression\n    end_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code20:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_20(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code20]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_20\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code20.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code20\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code20:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_20(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code20.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code20]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code20]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_20\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code21","title":"Code21","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 21 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>class Code21(Node):\n    \"\"\"Represents code 21 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    height: Expression\n    center_x: Expression\n    center_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code21:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_21(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code21]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_21\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code21.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code21\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code21:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_21(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code21.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code21]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code21]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_21\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code22","title":"Code22","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 22 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>class Code22(Node):\n    \"\"\"Represents code 22 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    height: Expression\n    x_lower_left: Expression\n    y_lower_left: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code22:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_22(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code22]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_22\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code22.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code22\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code22:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_22(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.Code22.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code22]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code22]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_22\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AS","title":"AS","text":"<p>             Bases: <code>Node</code></p> <p>Represents AS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>class AS(Node):\n    \"\"\"Represents AS Gerber extended command.\"\"\"\n\n    correspondence: AxisCorrespondence\n\n    def visit(self, visitor: AstVisitor) -&gt; AS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_as(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_as\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_as(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.AS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_as\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.FS","title":"FS","text":"<p>             Bases: <code>Node</code></p> <p>Represents FS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>class FS(Node):\n    \"\"\"Represents FS Gerber extended command.\"\"\"\n\n    zeros: Zeros\n    coordinate_mode: CoordinateNotation\n\n    x_integral: int\n    x_decimal: int\n\n    y_integral: int\n    y_decimal: int\n\n    def visit(self, visitor: AstVisitor) -&gt; FS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_fs(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], FS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_fs\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.FS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; FS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; FS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_fs(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.FS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], FS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], FS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_fs\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IN","title":"IN","text":"<p>             Bases: <code>Node</code></p> <p>Represents IN Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>class IN(Node):\n    \"\"\"Represents IN Gerber extended command.\"\"\"\n\n    name: str = Field(default=\"\")\n\n    def visit(self, visitor: AstVisitor) -&gt; IN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_in(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_in\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_in(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_in\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IP","title":"IP","text":"<p>             Bases: <code>Node</code></p> <p>Represents IP Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>class IP(Node):\n    \"\"\"Represents IP Gerber extended command.\"\"\"\n\n    polarity: ImagePolarity\n\n    def visit(self, visitor: AstVisitor) -&gt; IP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ip(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ip\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ip(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ip\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IR","title":"IR","text":"<p>             Bases: <code>Node</code></p> <p>Represents IR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>class IR(Node):\n    \"\"\"Represents IR Gerber extended command.\"\"\"\n\n    rotation_degrees: int\n\n    def visit(self, visitor: AstVisitor) -&gt; IR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ir(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ir\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ir(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.IR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ir\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MI","title":"MI","text":"<p>             Bases: <code>Node</code></p> <p>Represents MI Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>class MI(Node):\n    \"\"\"Represents MI Gerber extended command.\"\"\"\n\n    a_mirroring: int = Field(default=0)\n    b_mirroring: int = Field(default=0)\n\n    def visit(self, visitor: AstVisitor) -&gt; MI:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mi(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], MI]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mi\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MI\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; MI:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mi(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MI]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], MI]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mi\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MO","title":"MO","text":"<p>             Bases: <code>Node</code></p> <p>Represents MO Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>class MO(Node):\n    \"\"\"Represents MO Gerber extended command.\"\"\"\n\n    mode: UnitMode\n\n    def visit(self, visitor: AstVisitor) -&gt; MO:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mo(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], MO]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mo\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MO\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; MO:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mo(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.MO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MO]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], MO]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mo\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.OF","title":"OF","text":"<p>             Bases: <code>Node</code></p> <p>Represents OF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>class OF(Node):\n    \"\"\"Represents OF Gerber extended command.\"\"\"\n\n    a_offset: Optional[float] = Field(default=None)\n    b_offset: Optional[float] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; OF:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_of(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], OF]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_of\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.OF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; OF\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; OF:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_of(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.OF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], OF]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], OF]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_of\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SF","title":"SF","text":"<p>             Bases: <code>Node</code></p> <p>Represents SF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>class SF(Node):\n    \"\"\"Represents SF Gerber extended command.\"\"\"\n\n    a_scale: Double = Field(default=1.0)\n    b_scale: Double = Field(default=1.0)\n\n    def visit(self, visitor: AstVisitor) -&gt; SF:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sf(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SF]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sf\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SF\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SF:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sf(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.SF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SF]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SF]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sf\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.ApertureIdStr","title":"ApertureIdStr","text":"<p>             Bases: <code>str</code></p> <p>String subclass representing aperture ID.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/types.py</code> <pre><code>class ApertureIdStr(str):\n    \"\"\"String subclass representing aperture ID.\"\"\"\n\n    __slots__ = ()\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source_type: Any, handler: GetCoreSchemaHandler\n    ) -&gt; CoreSchema:\n        return core_schema.no_info_after_validator_function(cls, handler(str))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/__init__.html#pygerber.gerberx3.ast.nodes.PackedCoordinateStr","title":"PackedCoordinateStr","text":"<p>             Bases: <code>str</code></p> <p>String subclass representing packed coordinates.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/types.py</code> <pre><code>class PackedCoordinateStr(str):\n    \"\"\"String subclass representing packed coordinates.\"\"\"\n\n    __slots__ = ()\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source_type: Any, handler: GetCoreSchemaHandler\n    ) -&gt; CoreSchema:\n        return core_schema.no_info_after_validator_function(cls, handler(str))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html","title":"base","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base","title":"base","text":"<p><code>pygerber.gerberx3.ast.nodes.base</code> contains definition of <code>node</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo","title":"SourceInfo","text":"<p>             Bases: <code>ModelType</code></p> <p>Source information for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>class SourceInfo(ModelType):\n    \"\"\"Source information for the node.\"\"\"\n\n    source: str\n    location: int\n    length: int\n\n    @pp.cached_property\n    def line(self) -&gt; int:\n        \"\"\"Get the line number of the start location within the string; the first line\n        is line 1, newlines start new rows.\n        \"\"\"\n        return pp.lineno(self.location, self.source)\n\n    @pp.cached_property\n    def column(self) -&gt; int:\n        \"\"\"Get the column number of the start location within the string; the first\n        column is column 1, newlines reset the column number to 1.\n        \"\"\"\n        return pp.col(self.location, self.source)\n\n    @pp.cached_property\n    def end_line(self) -&gt; int:\n        \"\"\"Get the line number of the end location within the string; the first line\n        is line 1, newlines start new rows.\n        \"\"\"\n        return pp.lineno(self.location + self.length, self.source)\n\n    @pp.cached_property\n    def end_column(self) -&gt; int:\n        \"\"\"Get the column number of the end location within the string; the first\n        column is column 1, newlines reset the column number to 1.\n        \"\"\"\n        return pp.col(self.location + self.length, self.source)\n\n    @pp.cached_property\n    def end_location(self) -&gt; int:\n        \"\"\"Get the end location of the source.\"\"\"\n        return self.location + self.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo.line","title":"line","text":"<pre><code>line() -&gt; int\n</code></pre> <p>Get the line number of the start location within the string; the first line is line 1, newlines start new rows.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef line(self) -&gt; int:\n    \"\"\"Get the line number of the start location within the string; the first line\n    is line 1, newlines start new rows.\n    \"\"\"\n    return pp.lineno(self.location, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo.column","title":"column","text":"<pre><code>column() -&gt; int\n</code></pre> <p>Get the column number of the start location within the string; the first column is column 1, newlines reset the column number to 1.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef column(self) -&gt; int:\n    \"\"\"Get the column number of the start location within the string; the first\n    column is column 1, newlines reset the column number to 1.\n    \"\"\"\n    return pp.col(self.location, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo.end_line","title":"end_line","text":"<pre><code>end_line() -&gt; int\n</code></pre> <p>Get the line number of the end location within the string; the first line is line 1, newlines start new rows.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_line(self) -&gt; int:\n    \"\"\"Get the line number of the end location within the string; the first line\n    is line 1, newlines start new rows.\n    \"\"\"\n    return pp.lineno(self.location + self.length, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo.end_column","title":"end_column","text":"<pre><code>end_column() -&gt; int\n</code></pre> <p>Get the column number of the end location within the string; the first column is column 1, newlines reset the column number to 1.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_column(self) -&gt; int:\n    \"\"\"Get the column number of the end location within the string; the first\n    column is column 1, newlines reset the column number to 1.\n    \"\"\"\n    return pp.col(self.location + self.length, self.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.SourceInfo.end_location","title":"end_location","text":"<pre><code>end_location() -&gt; int\n</code></pre> <p>Get the end location of the source.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@pp.cached_property\ndef end_location(self) -&gt; int:\n    \"\"\"Get the end location of the source.\"\"\"\n    return self.location + self.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.Node","title":"Node","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for all nodes.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>class Node(ModelType):\n    \"\"\"Base class for all nodes.\"\"\"\n\n    source_info: Optional[SourceInfo] = Field(default=None, repr=False, exclude=True)\n\n    @abstractmethod\n    def visit(self, visitor: AstVisitor) -&gt; Self:\n        \"\"\"Handle visitor call.\"\"\"\n\n    @abstractmethod\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Self]:\n        \"\"\"Get callback function for the node.\"\"\"\n\n    def __len__(self) -&gt; int:\n        \"\"\"Get the length of token in source code.\"\"\"\n        if self.source_info is None:\n            return 0\n        return self.source_info.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.Node.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Self\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@abstractmethod\ndef visit(self, visitor: AstVisitor) -&gt; Self:\n    \"\"\"Handle visitor call.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.Node.get_visitor_callback_function","title":"get_visitor_callback_function  <code>abstractmethod</code>","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Self]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>@abstractmethod\ndef get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Self]:\n    \"\"\"Get callback function for the node.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/base.html#pygerber.gerberx3.ast.nodes.base.Node.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Get the length of token in source code.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/base.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Get the length of token in source code.\"\"\"\n    if self.source_info is None:\n        return 0\n    return self.source_info.length\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html","title":"enums","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums","title":"enums","text":"<p><code>pygerber.gerberx3.ast.nodes.enums</code> module contains definition of enums used in GerberX3 AST nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Zeros","title":"Zeros","text":"<p>             Bases: <code>Enum</code></p> <p>Zeros enumeration.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class Zeros(Enum):\n    \"\"\"Zeros enumeration.\"\"\"\n\n    SKIP_LEADING = \"L\"\n    \"\"\"Skip leading zeros mode.\"\"\"\n\n    SKIP_TRAILING = \"T\"\n    \"\"\"Skip trailing zeros mode.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.__class__.__name__}.{self.name}\"\n\n    __str__ = __repr__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Zeros.SKIP_LEADING","title":"SKIP_LEADING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_LEADING = 'L'\n</code></pre> <p>Skip leading zeros mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Zeros.SKIP_TRAILING","title":"SKIP_TRAILING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_TRAILING = 'T'\n</code></pre> <p>Skip trailing zeros mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.CoordinateNotation","title":"CoordinateNotation","text":"<p>             Bases: <code>Enum</code></p> <p>Coordinate mode enumeration.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class CoordinateNotation(Enum):\n    \"\"\"Coordinate mode enumeration.\"\"\"\n\n    ABSOLUTE = \"A\"\n    \"\"\"Absolute coordinate mode.\"\"\"\n\n    INCREMENTAL = \"I\"\n    \"\"\"Incremental coordinate mode.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.__class__.__name__}.{self.name}\"\n\n    __str__ = __repr__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.CoordinateNotation.ABSOLUTE","title":"ABSOLUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE = 'A'\n</code></pre> <p>Absolute coordinate mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.CoordinateNotation.INCREMENTAL","title":"INCREMENTAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INCREMENTAL = 'I'\n</code></pre> <p>Incremental coordinate mode.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.AperFunction","title":"AperFunction","text":"<p>             Bases: <code>Enum</code></p> <p>Enum representing possible AperFunction values.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class AperFunction(Enum):\n    \"\"\"Enum representing possible AperFunction values.\"\"\"\n\n    ViaDrill = \"ViaDrill\"\n    BackDrill = \"BackDrill\"\n    ComponentDrill = \"ComponentDrill\"\n    MechanicalDrill = \"MechanicalDrill\"\n    CastellatedDrill = \"CastellatedDrill\"\n    OtherDrill = \"OtherDrill\"\n    ComponentPad = \"ComponentPad\"\n    SMDPad = \"SMDPad\"\n    BGAPad = \"BGAPad\"\n    ConnectorPad = \"ConnectorPad\"\n    HeatsinkPad = \"HeatsinkPad\"\n    ViaPad = \"ViaPad\"\n    TestPad = \"TestPad\"\n    CastellatedPad = \"CastellatedPad\"\n    FiducialPad = \"FiducialPad\"\n    ThermalReliefPad = \"ThermalReliefPad\"\n    WasherPad = \"WasherPad\"\n    AntiPad = \"AntiPad\"\n    OtherPad = \"OtherPad\"\n    Conductor = \"Conductor\"\n    EtchedComponent = \"EtchedComponent\"\n    NonConductor = \"NonConductor\"\n    CopperBalancing = \"CopperBalancing\"\n    Border = \"Border\"\n    OtherCopper = \"OtherCopper\"\n    ComponentMain = \"ComponentMain\"\n    ComponentOutline = \"ComponentOutline\"\n    ComponentPin = \"ComponentPin\"\n    Profile = \"Profile\"\n    Material = \"Material\"\n    NonMaterial = \"NonMaterial\"\n    Other = \"Other\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.__class__.__name__}.{self.name}\"\n\n    __str__ = __repr__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Part","title":"Part","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerate supported part types.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class Part(Enum):\n    \"\"\"Enumerate supported part types.\"\"\"\n\n    Single = \"Single\"\n    Array = \"Array\"\n    FabricationPanel = \"FabricationPanel\"\n    Coupon = \"Coupon\"\n    Other = \"Other\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.FileFunction","title":"FileFunction","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerate supported file function types.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class FileFunction(Enum):\n    \"\"\"Enumerate supported file function types.\"\"\"\n\n    Copper = \"Copper\"\n    Plated = \"Plated\"\n    NonPlated = \"NonPlated\"\n    Profile = \"Profile\"\n    Soldermask = \"Soldermask\"\n    Legend = \"Legend\"\n    Component = \"Component\"\n    Paste = \"Paste\"\n    Glue = \"Glue\"\n    Carbonmask = \"Carbonmask\"\n    Goldmask = \"Goldmask\"\n    Heatsinkmask = \"Heatsinkmask\"\n    Peelablemask = \"Peelablemask\"\n    Silvermask = \"Silvermask\"\n    Tinmask = \"Tinmask\"\n    Depthrout = \"Depthrout\"\n    Vcut = \"Vcut\"\n    Viafill = \"Viafill\"\n    Pads = \"Pads\"\n    Other = \"Other\"\n    Drillmap = \"Drillmap\"\n    FabricationDrawing = \"FabricationDrawing\"\n    Vcutmap = \"Vcutmap\"\n    AssemblyDrawing = \"AssemblyDrawing\"\n    ArrayDrawing = \"ArrayDrawing\"\n    OtherDrawing = \"OtherDrawing\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.__class__.__name__}.{self.name}\"\n\n    __str__ = __repr__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Mount","title":"Mount","text":"<p>             Bases: <code>Enum</code></p> <p>Mount type enumeration.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class Mount(Enum):\n    \"\"\"Mount type enumeration.\"\"\"\n\n    SMD = \"SMD\"\n    TH = \"TH\"\n    Pressfit = \"Pressfit\"\n    Fiducial = \"Fiducial\"\n    Other = \"Other\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Mirroring","title":"Mirroring","text":"<p>             Bases: <code>Enum</code></p> <p>Mirroring enum.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class Mirroring(Enum):\n    \"\"\"Mirroring enum.\"\"\"\n\n    NONE = \"N\"\n    X = \"X\"\n    Y = \"Y\"\n    XY = \"XY\"\n\n    @property\n    def kwargs(self) -&gt; dict[str, bool]:\n        \"\"\"Get mirroring kwargs.\"\"\"\n        return {\n            \"x\": self in (Mirroring.X, Mirroring.XY),\n            \"y\": self in (Mirroring.Y, Mirroring.XY),\n        }\n\n    @classmethod\n    def new(cls, *, x: bool, y: bool) -&gt; Mirroring:\n        \"\"\"Create new mirroring.\"\"\"\n        if x and y:\n            return cls.XY\n        if x:\n            return cls.X\n        if y:\n            return cls.Y\n\n        return cls.NONE\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Mirroring.kwargs","title":"kwargs  <code>property</code>","text":"<pre><code>kwargs: dict[str, bool]\n</code></pre> <p>Get mirroring kwargs.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Mirroring.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(*, x: bool, y: bool) -&gt; Mirroring\n</code></pre> <p>Create new mirroring.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>@classmethod\ndef new(cls, *, x: bool, y: bool) -&gt; Mirroring:\n    \"\"\"Create new mirroring.\"\"\"\n    if x and y:\n        return cls.XY\n    if x:\n        return cls.X\n    if y:\n        return cls.Y\n\n    return cls.NONE\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.Polarity","title":"Polarity","text":"<p>             Bases: <code>Enum</code></p> <p>Polarity enum.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class Polarity(Enum):\n    \"\"\"Polarity enum.\"\"\"\n\n    Clear = \"C\"\n    Dark = \"D\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.AxisCorrespondence","title":"AxisCorrespondence","text":"<p>             Bases: <code>Enum</code></p> <p>Represents axis correspondence.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class AxisCorrespondence(Enum):\n    \"\"\"Represents axis correspondence.\"\"\"\n\n    AX_BY = \"AXBY\"\n    AY_BX = \"AYBX\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.UnitMode","title":"UnitMode","text":"<p>             Bases: <code>Enum</code></p> <p>Unit mode enumeration.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class UnitMode(Enum):\n    \"\"\"Unit mode enumeration.\"\"\"\n\n    IMPERIAL = \"IN\"\n    \"\"\"Imperial unit mode. In this mode inches are used to express lengths.\"\"\"\n    METRIC = \"MM\"\n    \"\"\"Metric unit mode. In this mode millimeters are used to express lengths.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.UnitMode.IMPERIAL","title":"IMPERIAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IMPERIAL = 'IN'\n</code></pre> <p>Imperial unit mode. In this mode inches are used to express lengths.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.UnitMode.METRIC","title":"METRIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METRIC = 'MM'\n</code></pre> <p>Metric unit mode. In this mode millimeters are used to express lengths.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.ImagePolarity","title":"ImagePolarity","text":"<p>             Bases: <code>Enum</code></p> <p>Image polarity enumeration.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/enums.py</code> <pre><code>class ImagePolarity(Enum):\n    \"\"\"Image polarity enumeration.\"\"\"\n\n    POSITIVE = \"POS\"\n    \"\"\"Positive image polarity.\"\"\"\n\n    NEGATIVE = \"NEG\"\n    \"\"\"Negative image polarity.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.ImagePolarity.POSITIVE","title":"POSITIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POSITIVE = 'POS'\n</code></pre> <p>Positive image polarity.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/enums.html#pygerber.gerberx3.ast.nodes.enums.ImagePolarity.NEGATIVE","title":"NEGATIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NEGATIVE = 'NEG'\n</code></pre> <p>Negative image polarity.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/file.html","title":"file","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/file.html#pygerber.gerberx3.ast.nodes.file","title":"file","text":"<p><code>pygerber.gerberx3.ast.nodes.file</code> module contains definition of <code>File</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/file.html#pygerber.gerberx3.ast.nodes.file.File","title":"File","text":"<p>             Bases: <code>Node</code></p> <p>The <code>File</code> node class represents a root of Gerber AST.</p> <p>It will be invalid for a File node to contain another File node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>class File(Node):\n    \"\"\"The `File` node class represents a root of Gerber AST.\n\n    It will be invalid for a File node to contain another File node.\n    \"\"\"\n\n    nodes: List[Node]\n\n    def visit(self, visitor: AstVisitor) -&gt; File:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_file(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], File]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_file\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/file.html#pygerber.gerberx3.ast.nodes.file.File.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; File\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; File:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_file(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/file.html#pygerber.gerberx3.ast.nodes.file.File.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], File]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/file.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], File]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_file\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/invalid.html","title":"invalid","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/invalid.html#pygerber.gerberx3.ast.nodes.invalid","title":"invalid","text":"<p><code>pygerber.nodes.g_codes.G04</code> module contains definition of <code>G04</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/invalid.html#pygerber.gerberx3.ast.nodes.invalid.Invalid","title":"Invalid","text":"<p>             Bases: <code>Node</code></p> <p>Represents G04 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>class Invalid(Node):\n    \"\"\"Represents G04 Gerber command.\"\"\"\n\n    string: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Invalid:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_invalid(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Invalid]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_invalid\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/invalid.html#pygerber.gerberx3.ast.nodes.invalid.Invalid.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Invalid\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Invalid:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_invalid(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/invalid.html#pygerber.gerberx3.ast.nodes.invalid.Invalid.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Invalid]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/invalid.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Invalid]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_invalid\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/model.html","title":"model","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/model.html#pygerber.gerberx3.ast.nodes.model","title":"model","text":"<p><code>model</code> module definition of common base class for all <code>VirtualMachine</code> related model types.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/model.html#pygerber.gerberx3.ast.nodes.model.ModelType","title":"ModelType","text":"<p>             Bases: <code>BaseModel</code></p> <p>Common base class for all VM model types.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/model.py</code> <pre><code>class ModelType(BaseModel):\n    \"\"\"Common base class for all VM model types.\"\"\"\n\n    model_config = ConfigDict(\n        extra=\"ignore\",\n        frozen=True,\n        arbitrary_types_allowed=True,\n    )\n\n    @computed_field(repr=False)  # type: ignore[misc]\n    @property\n    def __class_qualname__(self) -&gt; str:\n        \"\"\"Name of class.\"\"\"\n        return self.__class__.__qualname__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/model.html#pygerber.gerberx3.ast.nodes.model.ModelType.__class_qualname__","title":"__class_qualname__  <code>property</code>","text":"<pre><code>__class_qualname__: str\n</code></pre> <p>Name of class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/types.html","title":"types","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/types.html#pygerber.gerberx3.ast.nodes.types","title":"types","text":"<p>Basic types for AST nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/types.html#pygerber.gerberx3.ast.nodes.types.ApertureIdStr","title":"ApertureIdStr","text":"<p>             Bases: <code>str</code></p> <p>String subclass representing aperture ID.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/types.py</code> <pre><code>class ApertureIdStr(str):\n    \"\"\"String subclass representing aperture ID.\"\"\"\n\n    __slots__ = ()\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source_type: Any, handler: GetCoreSchemaHandler\n    ) -&gt; CoreSchema:\n        return core_schema.no_info_after_validator_function(cls, handler(str))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/types.html#pygerber.gerberx3.ast.nodes.types.PackedCoordinateStr","title":"PackedCoordinateStr","text":"<p>             Bases: <code>str</code></p> <p>String subclass representing packed coordinates.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/types.py</code> <pre><code>class PackedCoordinateStr(str):\n    \"\"\"String subclass representing packed coordinates.\"\"\"\n\n    __slots__ = ()\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source_type: Any, handler: GetCoreSchemaHandler\n    ) -&gt; CoreSchema:\n        return core_schema.no_info_after_validator_function(cls, handler(str))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB.html","title":"AB","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB.html#pygerber.gerberx3.ast.nodes.aperture.AB","title":"AB","text":"<p><code>pygerber.nodes.aperture.AB</code> module contains definition of <code>AB</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB.html#pygerber.gerberx3.ast.nodes.aperture.AB.AB","title":"AB","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>class AB(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    open: ABopen\n    nodes: List[Node]\n    close: ABclose\n\n    def visit(self, visitor: AstVisitor) -&gt; AB:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AB]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB.html#pygerber.gerberx3.ast.nodes.aperture.AB.AB.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AB\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AB:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB.html#pygerber.gerberx3.ast.nodes.aperture.AB.AB.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AB]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AB]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_close.html","title":"AB_close","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_close.html#pygerber.gerberx3.ast.nodes.aperture.AB_close","title":"AB_close","text":"<p><code>pygerber.nodes.aperture.ABclose</code> module contains definition of <code>ABclose</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_close.html#pygerber.gerberx3.ast.nodes.aperture.AB_close.ABclose","title":"ABclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>class ABclose(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; ABclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ABclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_close.html#pygerber.gerberx3.ast.nodes.aperture.AB_close.ABclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ABclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_close.html#pygerber.gerberx3.ast.nodes.aperture.AB_close.ABclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ABclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_open.html","title":"AB_open","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_open.html#pygerber.gerberx3.ast.nodes.aperture.AB_open","title":"AB_open","text":"<p><code>pygerber.nodes.aperture.ABopen</code> module contains definition of <code>ABopen</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_open.html#pygerber.gerberx3.ast.nodes.aperture.AB_open.ABopen","title":"ABopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>class ABopen(Node):\n    \"\"\"Represents AB Gerber extended command.\"\"\"\n\n    aperture_id: ApertureIdStr\n\n    def visit(self, visitor: AstVisitor) -&gt; ABopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ab_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ABopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ab_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_open.html#pygerber.gerberx3.ast.nodes.aperture.AB_open.ABopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ABopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ab_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AB_open.html#pygerber.gerberx3.ast.nodes.aperture.AB_open.ABopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AB_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ABopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ab_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AD.html","title":"AD","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AD.html#pygerber.gerberx3.ast.nodes.aperture.AD","title":"AD","text":"<p><code>pygerber.nodes.aperture.ADC</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AD.html#pygerber.gerberx3.ast.nodes.aperture.AD.AD","title":"AD","text":"<p>             Bases: <code>Node</code></p> <p>Common base class for all commands adding new apertures.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AD.py</code> <pre><code>class AD(Node):\n    \"\"\"Common base class for all commands adding new apertures.\"\"\"\n\n    aperture_id: ApertureIdStr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADC.html","title":"ADC","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADC.html#pygerber.gerberx3.ast.nodes.aperture.ADC","title":"ADC","text":"<p><code>pygerber.nodes.aperture.ADC</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADC.html#pygerber.gerberx3.ast.nodes.aperture.ADC.ADC","title":"ADC","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>class ADC(AD):\n    \"\"\"Represents AD Gerber extended command.\"\"\"\n\n    diameter: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADC:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adc(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADC]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adc\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADC.html#pygerber.gerberx3.ast.nodes.aperture.ADC.ADC.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADC\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADC:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADC.html#pygerber.gerberx3.ast.nodes.aperture.ADC.ADC.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADC]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADC.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADC]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adc\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADO.html","title":"ADO","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADO.html#pygerber.gerberx3.ast.nodes.aperture.ADO","title":"ADO","text":"<p><code>pygerber.nodes.aperture.ADO</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADO.html#pygerber.gerberx3.ast.nodes.aperture.ADO.ADO","title":"ADO","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD obround Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>class ADO(AD):\n    \"\"\"Represents AD obround Gerber extended command.\"\"\"\n\n    width: Double\n    height: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADO:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ado(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADO]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ado\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADO.html#pygerber.gerberx3.ast.nodes.aperture.ADO.ADO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADO\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADO:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ado(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADO.html#pygerber.gerberx3.ast.nodes.aperture.ADO.ADO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADO]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADO]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ado\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADP.html","title":"ADP","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADP.html#pygerber.gerberx3.ast.nodes.aperture.ADP","title":"ADP","text":"<p><code>pygerber.nodes.aperture.ADP</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADP.html#pygerber.gerberx3.ast.nodes.aperture.ADP.ADP","title":"ADP","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD polygon Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>class ADP(AD):\n    \"\"\"Represents AD polygon Gerber extended command.\"\"\"\n\n    outer_diameter: Double\n    vertices: Integer\n    rotation: Optional[Double] = Field(default=None)\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADP.html#pygerber.gerberx3.ast.nodes.aperture.ADP.ADP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADP.html#pygerber.gerberx3.ast.nodes.aperture.ADP.ADP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADR.html","title":"ADR","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADR.html#pygerber.gerberx3.ast.nodes.aperture.ADR","title":"ADR","text":"<p><code>pygerber.nodes.aperture.ADP</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADR.html#pygerber.gerberx3.ast.nodes.aperture.ADR.ADR","title":"ADR","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD rectangle Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>class ADR(AD):\n    \"\"\"Represents AD rectangle Gerber extended command.\"\"\"\n\n    width: Double\n    height: Double\n    hole_diameter: Optional[Double] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_adr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_adr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADR.html#pygerber.gerberx3.ast.nodes.aperture.ADR.ADR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_adr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADR.html#pygerber.gerberx3.ast.nodes.aperture.ADR.ADR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_adr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADmacro.html","title":"ADmacro","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADmacro.html#pygerber.gerberx3.ast.nodes.aperture.ADmacro","title":"ADmacro","text":"<p><code>pygerber.nodes.aperture.ADmacro</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADmacro.html#pygerber.gerberx3.ast.nodes.aperture.ADmacro.ADmacro","title":"ADmacro","text":"<p>             Bases: <code>AD</code></p> <p>Represents AD macro Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>class ADmacro(AD):\n    \"\"\"Represents AD macro Gerber extended command.\"\"\"\n\n    name: str\n    params: Optional[List[Double]] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; ADmacro:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ad_macro(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], ADmacro]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ad_macro\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADmacro.html#pygerber.gerberx3.ast.nodes.aperture.ADmacro.ADmacro.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADmacro\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; ADmacro:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ad_macro(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/ADmacro.html#pygerber.gerberx3.ast.nodes.aperture.ADmacro.ADmacro.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADmacro]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/ADmacro.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], ADmacro]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ad_macro\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM.html","title":"AM","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM.html#pygerber.gerberx3.ast.nodes.aperture.AM","title":"AM","text":"<p><code>pygerber.nodes.aperture.AM</code> module contains definition of <code>AM</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM.html#pygerber.gerberx3.ast.nodes.aperture.AM.AM","title":"AM","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>class AM(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    open: AMopen\n    primitives: List[Node]\n    close: AMclose\n\n    def visit(self, visitor: AstVisitor) -&gt; AM:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AM]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM.html#pygerber.gerberx3.ast.nodes.aperture.AM.AM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AM\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AM:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM.html#pygerber.gerberx3.ast.nodes.aperture.AM.AM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AM]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AM]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_close.html","title":"AM_close","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_close.html#pygerber.gerberx3.ast.nodes.aperture.AM_close","title":"AM_close","text":"<p><code>pygerber.nodes.aperture.AMclose</code> module contains definition of <code>AMclose</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_close.html#pygerber.gerberx3.ast.nodes.aperture.AM_close.AMclose","title":"AMclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>class AMclose(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; AMclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AMclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_close.html#pygerber.gerberx3.ast.nodes.aperture.AM_close.AMclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AMclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_close.html#pygerber.gerberx3.ast.nodes.aperture.AM_close.AMclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AMclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_open.html","title":"AM_open","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_open.html#pygerber.gerberx3.ast.nodes.aperture.AM_open","title":"AM_open","text":"<p><code>pygerber.nodes.aperture.AMopen</code> module contains definition of <code>AMopen</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_open.html#pygerber.gerberx3.ast.nodes.aperture.AM_open.AMopen","title":"AMopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>class AMopen(Node):\n    \"\"\"Represents AM Gerber extended command.\"\"\"\n\n    name: str\n\n    def visit(self, visitor: AstVisitor) -&gt; AMopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_am_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AMopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_am_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_open.html#pygerber.gerberx3.ast.nodes.aperture.AM_open.AMopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AMopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_am_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/AM_open.html#pygerber.gerberx3.ast.nodes.aperture.AM_open.AMopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/AM_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AMopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_am_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR.html","title":"SR","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR.html#pygerber.gerberx3.ast.nodes.aperture.SR","title":"SR","text":"<p><code>pygerber.nodes.aperture.SR</code> module contains definition of <code>SR</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR.html#pygerber.gerberx3.ast.nodes.aperture.SR.SR","title":"SR","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>class SR(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    open: SRopen\n    nodes: List[Node]\n    close: SRclose\n\n    def visit(self, visitor: AstVisitor) -&gt; SR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR.html#pygerber.gerberx3.ast.nodes.aperture.SR.SR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR.html#pygerber.gerberx3.ast.nodes.aperture.SR.SR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_close.html","title":"SR_close","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_close.html#pygerber.gerberx3.ast.nodes.aperture.SR_close","title":"SR_close","text":"<p><code>pygerber.nodes.aperture.SR_close</code> module contains definition of <code>SRclose</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_close.html#pygerber.gerberx3.ast.nodes.aperture.SR_close.SRclose","title":"SRclose","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>class SRclose(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; SRclose:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr_close(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SRclose]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_close.html#pygerber.gerberx3.ast.nodes.aperture.SR_close.SRclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRclose\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SRclose:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr_close(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_close.html#pygerber.gerberx3.ast.nodes.aperture.SR_close.SRclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRclose]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_close.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SRclose]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr_close\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html","title":"SR_open","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open","title":"SR_open","text":"<p><code>pygerber.nodes.aperture.SR_open</code> module contains definition of <code>SRopen</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen","title":"SRopen","text":"<p>             Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>class SRopen(Node):\n    \"\"\"Represents SR Gerber extended command.\"\"\"\n\n    x: Optional[str] = Field(default=None)\n    y: Optional[str] = Field(default=None)\n    i: Optional[str] = Field(default=None)\n    j: Optional[str] = Field(default=None)\n\n    @property\n    def x_repeats(self) -&gt; int:\n        \"\"\"Get number of repeats in X axis.\"\"\"\n        repeats = 1 if self.x is None else int(self.x)\n        assert repeats &gt; 0\n        return repeats\n\n    @property\n    def y_repeats(self) -&gt; int:\n        \"\"\"Get number of repeats in Y axis.\"\"\"\n        repeats = 1 if self.y is None else int(self.y)\n        assert repeats &gt; 0\n        return repeats\n\n    @property\n    def x_delta(self) -&gt; float:\n        \"\"\"Get number of X repeats.\"\"\"\n        return 0 if self.i is None else float(self.i)\n\n    @property\n    def y_delta(self) -&gt; float:\n        \"\"\"Get number of Y repeats.\"\"\"\n        return 0 if self.j is None else float(self.j)\n\n    def visit(self, visitor: AstVisitor) -&gt; SRopen:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sr_open(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SRopen]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sr_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.x_repeats","title":"x_repeats  <code>property</code>","text":"<pre><code>x_repeats: int\n</code></pre> <p>Get number of repeats in X axis.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.y_repeats","title":"y_repeats  <code>property</code>","text":"<pre><code>y_repeats: int\n</code></pre> <p>Get number of repeats in Y axis.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.x_delta","title":"x_delta  <code>property</code>","text":"<pre><code>x_delta: float\n</code></pre> <p>Get number of X repeats.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.y_delta","title":"y_delta  <code>property</code>","text":"<pre><code>y_delta: float\n</code></pre> <p>Get number of Y repeats.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRopen\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SRopen:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sr_open(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/SR_open.html#pygerber.gerberx3.ast.nodes.aperture.SR_open.SRopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRopen]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/aperture/SR_open.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SRopen]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sr_open\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/aperture/__init__.html#pygerber.gerberx3.ast.nodes.aperture","title":"aperture","text":"<p><code>pygerber.gerberx3.ast.nodes.aperture</code> package contains all the aperture definition related nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html","title":"TA","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA","title":"TA","text":"<p><code>pygerber.nodes.attribute.TA</code> module contains definition of <code>TA</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA","title":"TA","text":"<p>             Bases: <code>Node</code></p> <p>Represents TA Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA(Node):\n    \"\"\"Represents TA Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_UserName","title":"TA_UserName","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_UserName(TA):  # noqa: N801\n    \"\"\"Represents TA Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_AperFunction","title":"TA_AperFunction","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .AperFunction Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_AperFunction(TA):  # noqa: N801\n    \"\"\"Represents TA .AperFunction Gerber attribute.\"\"\"\n\n    function: Optional[AperFunction] = Field(default=None)\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".AperFunction\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_AperFunction:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_aper_function(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_AperFunction]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_aper_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_AperFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_AperFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_AperFunction\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_AperFunction:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_aper_function(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_AperFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_AperFunction]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_AperFunction]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_aper_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_DrillTolerance","title":"TA_DrillTolerance","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .DrillTolerance Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_DrillTolerance(TA):  # noqa: N801\n    \"\"\"Represents TA .DrillTolerance Gerber attribute.\"\"\"\n\n    plus_tolerance: Optional[float] = Field(default=None)\n    minus_tolerance: Optional[float] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".DrillTolerance\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_DrillTolerance:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_drill_tolerance(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_DrillTolerance]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_drill_tolerance\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_DrillTolerance.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_DrillTolerance.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_DrillTolerance:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_drill_tolerance(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_DrillTolerance.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_DrillTolerance]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_DrillTolerance]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_drill_tolerance\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_FlashText","title":"TA_FlashText","text":"<p>             Bases: <code>TA</code></p> <p>Represents TA .FlashText Gerber attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>class TA_FlashText(TA):  # noqa: N801\n    \"\"\"Represents TA .FlashText Gerber attribute.\"\"\"\n\n    string: str\n    mode: Literal[\"B\", \"C\"]\n    mirroring: Literal[\"R\", \"M\"] = Field(default=\"R\")\n    font: Optional[str] = Field(default=None)\n    size: Optional[str] = Field(default=None)\n    comments: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FlashText\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TA_FlashText:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ta_flash_text(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TA_FlashText]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ta_flash_text\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_FlashText.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_FlashText.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_FlashText\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TA_FlashText:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ta_flash_text(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TA.html#pygerber.gerberx3.ast.nodes.attribute.TA.TA_FlashText.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_FlashText]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TA.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TA_FlashText]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ta_flash_text\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TD.html","title":"TD","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TD.html#pygerber.gerberx3.ast.nodes.attribute.TD","title":"TD","text":"<p><code>pygerber.nodes.attribute.TD</code> module contains definition of <code>TD</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TD.html#pygerber.gerberx3.ast.nodes.attribute.TD.TD","title":"TD","text":"<p>             Bases: <code>Node</code></p> <p>Represents TD Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>class TD(Node):\n    \"\"\"Represents TD Gerber extended command.\"\"\"\n\n    name: Optional[str] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; TD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_td(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_td\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TD.html#pygerber.gerberx3.ast.nodes.attribute.TD.TD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_td(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TD.html#pygerber.gerberx3.ast.nodes.attribute.TD.TD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TD.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_td\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html","title":"TF","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF","title":"TF","text":"<p><code>pygerber.nodes.attributes.TF</code> module contains definition of <code>TF</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF","title":"TF","text":"<p>             Bases: <code>Node</code></p> <p>Represents TF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF(Node):\n    \"\"\"Represents TF Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_UserName","title":"TF_UserName","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_UserName(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_Part","title":"TF_Part","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with part attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_Part(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with part attribute.\"\"\"\n\n    part: Part\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".Part\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_Part:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_part(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_Part]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_part\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_Part.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_Part.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_Part\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_Part:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_part(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_Part.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_Part]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_Part]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_part\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FileFunction","title":"TF_FileFunction","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file function attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_FileFunction(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with file function attribute.\"\"\"\n\n    file_function: FileFunction\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FileFunction\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_FileFunction:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_file_function(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_FileFunction]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_file_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FileFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FileFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FileFunction\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_FileFunction:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_file_function(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FileFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FileFunction]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_FileFunction]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_file_function\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FilePolarity","title":"TF_FilePolarity","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file polarity attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_FilePolarity(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with file polarity attribute.\"\"\"\n\n    polarity: Literal[\"Positive\", \"Negative\"]\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".FilePolarity\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_FilePolarity:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_file_polarity(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_FilePolarity]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_file_polarity\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FilePolarity.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FilePolarity.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FilePolarity\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_FilePolarity:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_file_polarity(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_FilePolarity.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FilePolarity]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_FilePolarity]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_file_polarity\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_SameCoordinates","title":"TF_SameCoordinates","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with same coordinates attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_SameCoordinates(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with same coordinates attribute.\"\"\"\n\n    identifier: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".SameCoordinates\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_SameCoordinates:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_same_coordinates(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_SameCoordinates]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_same_coordinates\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_SameCoordinates.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_SameCoordinates.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_SameCoordinates:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_same_coordinates(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_SameCoordinates.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_SameCoordinates]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_SameCoordinates]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_same_coordinates\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_CreationDate","title":"TF_CreationDate","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with creation date attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_CreationDate(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with creation date attribute.\"\"\"\n\n    creation_date: datetime.datetime\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CreationDate\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_CreationDate:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_creation_date(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_CreationDate]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_creation_date\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_CreationDate.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_CreationDate.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_CreationDate\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_CreationDate:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_creation_date(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_CreationDate.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_CreationDate]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_CreationDate]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_creation_date\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_GenerationSoftware","title":"TF_GenerationSoftware","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with generation software attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_GenerationSoftware(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with generation software attribute.\"\"\"\n\n    vendor: Optional[str] = Field(default=None)\n    application: Optional[str] = Field(default=None)\n    version: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".GenerationSoftware\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_generation_software(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_GenerationSoftware]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_generation_software\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_GenerationSoftware.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_GenerationSoftware.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_generation_software(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_GenerationSoftware.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_GenerationSoftware]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_GenerationSoftware]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_generation_software\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_ProjectId","title":"TF_ProjectId","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with project id attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_ProjectId(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with project id attribute.\"\"\"\n\n    name: Optional[str] = Field(default=None)\n    guid: Optional[str] = Field(default=None)\n    revision: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".ProjectId\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_ProjectId:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_project_id(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_ProjectId]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_project_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_ProjectId.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_ProjectId.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_ProjectId\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_ProjectId:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_project_id(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_ProjectId.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_ProjectId]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_ProjectId]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_project_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_MD5","title":"TF_MD5","text":"<p>             Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with MD5 attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>class TF_MD5(TF):  # noqa: N801\n    \"\"\"Represents TF Gerber extended command with MD5 attribute.\"\"\"\n\n    md5: str = Field(min_length=MD5_LENGTH_HEX, max_length=MD5_LENGTH_HEX)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".MD5\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TF_MD5:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_tf_md5(self)\n\n    def check_source_hash(self) -&gt; bool:\n        \"\"\"Validate MD5 attribute.\"\"\"\n        if self.source_info is None:\n            raise SourceNotAvailableError(self)\n\n        source = (\n            self.source_info.source[: self.source_info.location - 1]\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\")\n            .encode(\"utf-8\")\n        )\n        source_hash = hashlib.md5(source).hexdigest()  # noqa: S324\n        return source_hash == self.md5\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TF_MD5]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_tf_md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_MD5.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_MD5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_MD5\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TF_MD5:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_tf_md5(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_MD5.check_source_hash","title":"check_source_hash","text":"<pre><code>check_source_hash() -&gt; bool\n</code></pre> <p>Validate MD5 attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def check_source_hash(self) -&gt; bool:\n    \"\"\"Validate MD5 attribute.\"\"\"\n    if self.source_info is None:\n        raise SourceNotAvailableError(self)\n\n    source = (\n        self.source_info.source[: self.source_info.location - 1]\n        .replace(\"\\n\", \"\")\n        .replace(\"\\r\", \"\")\n        .encode(\"utf-8\")\n    )\n    source_hash = hashlib.md5(source).hexdigest()  # noqa: S324\n    return source_hash == self.md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TF.html#pygerber.gerberx3.ast.nodes.attribute.TF.TF_MD5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_MD5]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TF_MD5]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_tf_md5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html","title":"TO","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO","title":"TO","text":"<p><code>pygerber.nodes.d_codes.TO</code> module contains definition of <code>TO</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO","title":"TO","text":"<p>             Bases: <code>Node</code></p> <p>Represents TO Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO(Node):\n    \"\"\"Represents TO Gerber extended command.\"\"\"\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_UserName","title":"TO_UserName","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with user name.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_UserName(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with user name.\"\"\"\n\n    user_name: str\n    fields: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return self.user_name\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_UserName:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_user_name(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_UserName]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_UserName\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_UserName:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_user_name(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_UserName]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_UserName]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_user_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_N","title":"TO_N","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .N attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_N(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .N attribute.\"\"\"\n\n    net_names: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".N\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_N:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_n(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_N]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_n\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_N.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_N.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_N\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_N:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_n(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_N.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_N]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_N]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_n\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_P","title":"TO_P","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .P attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_P(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .P attribute.\"\"\"\n\n    refdes: str\n    number: str\n    function: Optional[str] = Field(default=None)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".P\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_P:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_p(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_P]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_p\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_P.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_P.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_P\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_P:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_p(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_P.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_P]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_P]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_p\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_C","title":"TO_C","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .C attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_C(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .C attribute.\"\"\"\n\n    refdes: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".C\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_C:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_c(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_C]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_c\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_C.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_C.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_C\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_C:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_c(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_C.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_C]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_C]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_c\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CRot","title":"TO_CRot","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CRot attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CRot(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CRot attribute.\"\"\"\n\n    angle: Double\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CRot\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CRot:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_crot(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CRot]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_crot\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CRot.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CRot.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CRot\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CRot:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_crot(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CRot.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CRot]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CRot]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_crot\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMfr","title":"TO_CMfr","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMfr attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMfr(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMfr attribute.\"\"\"\n\n    manufacturer: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMfr\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMfr:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmfr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMfr]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmfr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMfr.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMfr.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMfr\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMfr:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmfr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMfr.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMfr]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMfr]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmfr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMNP","title":"TO_CMNP","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMNP attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMNP(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMNP attribute.\"\"\"\n\n    part_number: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMNP\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMNP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmnp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMNP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmnp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMNP.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMNP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMNP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMNP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmnp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMNP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMNP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMNP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmnp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CVal","title":"TO_CVal","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CVal attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CVal(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CVal attribute.\"\"\"\n\n    value: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CVal\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CVal:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cval(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CVal]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cval\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CVal.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CVal.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CVal\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CVal:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cval(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CVal.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CVal]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CVal]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cval\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMnt","title":"TO_CMnt","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMnt attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CMnt(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CMnt attribute.\"\"\"\n\n    mount: Mount\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CMnt\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CMnt:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cmnt(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CMnt]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cmnt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMnt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMnt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMnt\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CMnt:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cmnt(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CMnt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMnt]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CMnt]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cmnt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CFtp","title":"TO_CFtp","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CFtp attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CFtp(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CFtp attribute.\"\"\"\n\n    footprint: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CFtp\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CFtp:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cftp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CFtp]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cftp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CFtp.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CFtp.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CFtp\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CFtp:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cftp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CFtp.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CFtp]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CFtp]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cftp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgN","title":"TO_CPgN","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgN attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CPgN(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CPgN attribute.\"\"\"\n\n    name: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CPgN\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CPgN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cpgn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CPgN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cpgn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CPgN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cpgn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CPgN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cpgn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgD","title":"TO_CPgD","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgD attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CPgD(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CPgD attribute.\"\"\"\n\n    description: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CPgD\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CPgD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_cpgd(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CPgD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_cpgd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CPgD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_cpgd(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CPgD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CPgD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_cpgd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CHgt","title":"TO_CHgt","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CHgt attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CHgt(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CHgt attribute.\"\"\"\n\n    height: Double\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CHgt\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CHgt:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_chgt(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CHgt]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_chgt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CHgt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CHgt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CHgt\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CHgt:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_chgt(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CHgt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CHgt]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CHgt]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_chgt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbN","title":"TO_CLbN","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbN attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CLbN(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CLbN attribute.\"\"\"\n\n    name: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CLbN\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CLbN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_clbn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CLbN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_clbn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CLbN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_clbn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CLbN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_clbn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbD","title":"TO_CLbD","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbD attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CLbD(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CLbD attribute.\"\"\"\n\n    description: str\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CLbD\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CLbD:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_clbd(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CLbD]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_clbd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbD\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CLbD:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_clbd(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CLbD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbD]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CLbD]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_clbd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CSup","title":"TO_CSup","text":"<p>             Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CSup attribute.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>class TO_CSup(TO):  # noqa: N801\n    \"\"\"Represents TO Gerber extended command with .CSup attribute.\"\"\"\n\n    supplier: str\n    supplier_part: str\n\n    other_suppliers: List[str] = Field(default_factory=list)\n\n    @property\n    def attribute_name(self) -&gt; str:\n        \"\"\"Get attribute name.\"\"\"\n        return \".CSup\"\n\n    def visit(self, visitor: AstVisitor) -&gt; TO_CSup:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_to_csup(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], TO_CSup]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_to_csup\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CSup.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CSup.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CSup\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; TO_CSup:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_to_csup(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/TO.html#pygerber.gerberx3.ast.nodes.attribute.TO.TO_CSup.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CSup]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/attribute/TO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], TO_CSup]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_to_csup\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/attribute/__init__.html#pygerber.gerberx3.ast.nodes.attribute","title":"attribute","text":"<p><code>pygerber.gerberx3.ast.nodes.attribute</code> package contains all the attribute related nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D.html","title":"D","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D.html#pygerber.gerberx3.ast.nodes.d_codes.D","title":"D","text":"<p><code>pygerber.nodes.d_codes.DNN</code> module contains definition of <code>DNN</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D.html#pygerber.gerberx3.ast.nodes.d_codes.D.D","title":"D","text":"<p>             Bases: <code>Node</code></p> <p>Base class for all Dxx commands.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D.py</code> <pre><code>class D(Node):\n    \"\"\"Base class for all Dxx commands.\"\"\"\n\n    is_standalone: bool = Field(default=True)\n    \"\"\"Flag indicating if the node is standalone, ie. it is not prefixed with\n    G code with no asterisk.\n\n    This is necessary as some legacy Gerber files use redundant G codes to prefix\n    pretty much every D01/D02/D03 command. To make it possible to keep the original\n    layout of the file, we need to know if the D code was directly prefixed by\n    such redundant G code.\n\n    Example:\n\n    ```gerber\n    G70D02*\n    G54D16*\n    G01X5440Y5650D03*\n    G01X5440Y6900D03*\n    G01X6800Y2200D03*\n    G01X5550Y2200D03*\n    G01X17720Y6860D03*\n    G01X17720Y5610D03*\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D.html#pygerber.gerberx3.ast.nodes.d_codes.D.D.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it is not prefixed with G code with no asterisk.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the D code was directly prefixed by such redundant G code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D01.html","title":"D01","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D01.html#pygerber.gerberx3.ast.nodes.d_codes.D01","title":"D01","text":"<p><code>pygerber.nodes.d_codes.D01</code> module contains definition of <code>D01</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D01.html#pygerber.gerberx3.ast.nodes.d_codes.D01.D01","title":"D01","text":"<p>             Bases: <code>D</code></p> <p>Represents D01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>class D01(D):\n    \"\"\"Represents D01 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n    i: Optional[CoordinateI] = Field(default=None)\n    j: Optional[CoordinateJ] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D01.html#pygerber.gerberx3.ast.nodes.d_codes.D01.D01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D01.html#pygerber.gerberx3.ast.nodes.d_codes.D01.D01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D02.html","title":"D02","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D02.html#pygerber.gerberx3.ast.nodes.d_codes.D02","title":"D02","text":"<p><code>pygerber.nodes.d_codes.D02</code> module contains definition of <code>D02</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D02.html#pygerber.gerberx3.ast.nodes.d_codes.D02.D02","title":"D02","text":"<p>             Bases: <code>D</code></p> <p>Represents D02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>class D02(D):\n    \"\"\"Represents D02 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D02.html#pygerber.gerberx3.ast.nodes.d_codes.D02.D02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D02.html#pygerber.gerberx3.ast.nodes.d_codes.D02.D02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D03.html","title":"D03","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D03.html#pygerber.gerberx3.ast.nodes.d_codes.D03","title":"D03","text":"<p><code>pygerber.nodes.d_codes.D03</code> module contains definition of <code>D03</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D03.html#pygerber.gerberx3.ast.nodes.d_codes.D03.D03","title":"D03","text":"<p>             Bases: <code>D</code></p> <p>Represents D03 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>class D03(D):\n    \"\"\"Represents D03 Gerber command.\"\"\"\n\n    x: Optional[CoordinateX] = Field(default=None)\n    y: Optional[CoordinateY] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; D03:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_d03(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], D03]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_d03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D03.html#pygerber.gerberx3.ast.nodes.d_codes.D03.D03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D03\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; D03:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_d03(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/D03.html#pygerber.gerberx3.ast.nodes.d_codes.D03.D03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D03]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/D03.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], D03]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_d03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/Dnn.html","title":"Dnn","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/Dnn.html#pygerber.gerberx3.ast.nodes.d_codes.Dnn","title":"Dnn","text":"<p><code>pygerber.nodes.d_codes.DNN</code> module contains definition of <code>DNN</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/Dnn.html#pygerber.gerberx3.ast.nodes.d_codes.Dnn.Dnn","title":"Dnn","text":"<p>             Bases: <code>D</code></p> <p>Represents DNN Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>class Dnn(D):\n    \"\"\"Represents DNN Gerber command.\"\"\"\n\n    aperture_id: ApertureIdStr\n\n    def visit(self, visitor: AstVisitor) -&gt; Dnn:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_dnn(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Dnn]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_dnn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/Dnn.html#pygerber.gerberx3.ast.nodes.d_codes.Dnn.Dnn.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Dnn\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Dnn:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_dnn(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/Dnn.html#pygerber.gerberx3.ast.nodes.d_codes.Dnn.Dnn.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Dnn]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/d_codes/Dnn.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Dnn]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_dnn\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/d_codes/__init__.html#pygerber.gerberx3.ast.nodes.d_codes","title":"d_codes","text":"<p><code>pygerber.gerberx3.ast.nodes.d_codes</code> package contains all the D-code nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G.html","title":"G","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G.html#pygerber.gerberx3.ast.nodes.g_codes.G","title":"G","text":"<p><code>pygerber.nodes.g_codes.G01</code> module contains definition of <code>G01</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G.html#pygerber.gerberx3.ast.nodes.g_codes.G.G","title":"G","text":"<p>             Bases: <code>Node</code></p> <p>Base class for all Gxx nodes.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G.py</code> <pre><code>class G(Node):\n    \"\"\"Base class for all Gxx nodes.\"\"\"\n\n    is_standalone: bool = Field(default=True)\n    \"\"\"Flag indicating if the node is standalone, ie. it should include * at the end.\n\n    This is necessary as some legacy Gerber files use redundant G codes to prefix\n    pretty much every D01/D02/D03 command. To make it possible to keep the original\n    layout of the file, we need to know if the G code was directly followed by a D code.\n\n    Example:\n\n    ```gerber\n    G70D02*\n    G54D16*\n    G01X5440Y5650D03*\n    G01X5440Y6900D03*\n    G01X6800Y2200D03*\n    G01X5550Y2200D03*\n    G01X17720Y6860D03*\n    G01X17720Y5610D03*\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G.html#pygerber.gerberx3.ast.nodes.g_codes.G.G.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it should include * at the end.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the G code was directly followed by a D code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G01.html","title":"G01","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G01.html#pygerber.gerberx3.ast.nodes.g_codes.G01","title":"G01","text":"<p><code>pygerber.nodes.g_codes.G01</code> module contains definition of <code>G01</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G01.html#pygerber.gerberx3.ast.nodes.g_codes.G01.G01","title":"G01","text":"<p>             Bases: <code>G</code></p> <p>Represents G01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>class G01(G):\n    \"\"\"Represents G01 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G01.html#pygerber.gerberx3.ast.nodes.g_codes.G01.G01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G01.html#pygerber.gerberx3.ast.nodes.g_codes.G01.G01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G02.html","title":"G02","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G02.html#pygerber.gerberx3.ast.nodes.g_codes.G02","title":"G02","text":"<p><code>pygerber.nodes.g_codes.G02</code> module contains definition of <code>G02</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G02.html#pygerber.gerberx3.ast.nodes.g_codes.G02.G02","title":"G02","text":"<p>             Bases: <code>G</code></p> <p>Represents G02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>class G02(G):\n    \"\"\"Represents G02 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G02.html#pygerber.gerberx3.ast.nodes.g_codes.G02.G02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G02.html#pygerber.gerberx3.ast.nodes.g_codes.G02.G02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G03.html","title":"G03","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G03.html#pygerber.gerberx3.ast.nodes.g_codes.G03","title":"G03","text":"<p><code>pygerber.nodes.g_codes.G03</code> module contains definition of <code>G03</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G03.html#pygerber.gerberx3.ast.nodes.g_codes.G03.G03","title":"G03","text":"<p>             Bases: <code>G</code></p> <p>Represents G03 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>class G03(G):\n    \"\"\"Represents G03 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G03:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g03(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G03]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G03.html#pygerber.gerberx3.ast.nodes.g_codes.G03.G03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G03\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G03:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g03(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G03.html#pygerber.gerberx3.ast.nodes.g_codes.G03.G03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G03]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G03.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G03]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g03\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G04.html","title":"G04","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G04.html#pygerber.gerberx3.ast.nodes.g_codes.G04","title":"G04","text":"<p><code>pygerber.nodes.g_codes.G04</code> module contains definition of <code>G04</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G04.html#pygerber.gerberx3.ast.nodes.g_codes.G04.G04","title":"G04","text":"<p>             Bases: <code>G</code></p> <p>Represents G04 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>class G04(G):\n    \"\"\"Represents G04 Gerber command.\"\"\"\n\n    string: Optional[str] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; G04:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g04(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G04]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g04\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G04.html#pygerber.gerberx3.ast.nodes.g_codes.G04.G04.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G04\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G04:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g04(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G04.html#pygerber.gerberx3.ast.nodes.g_codes.G04.G04.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G04]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G04.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G04]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g04\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G36.html","title":"G36","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G36.html#pygerber.gerberx3.ast.nodes.g_codes.G36","title":"G36","text":"<p><code>pygerber.nodes.g_codes.G36</code> module contains definition of <code>G36</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G36.html#pygerber.gerberx3.ast.nodes.g_codes.G36.G36","title":"G36","text":"<p>             Bases: <code>G</code></p> <p>Represents G36 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>class G36(G):\n    \"\"\"Represents G36 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G36:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g36(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G36]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g36\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G36.html#pygerber.gerberx3.ast.nodes.g_codes.G36.G36.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G36\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G36:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g36(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G36.html#pygerber.gerberx3.ast.nodes.g_codes.G36.G36.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G36]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G36.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G36]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g36\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G37.html","title":"G37","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G37.html#pygerber.gerberx3.ast.nodes.g_codes.G37","title":"G37","text":"<p><code>pygerber.nodes.g_codes.G37</code> module contains definition of <code>G37</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G37.html#pygerber.gerberx3.ast.nodes.g_codes.G37.G37","title":"G37","text":"<p>             Bases: <code>G</code></p> <p>Represents G37 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>class G37(G):\n    \"\"\"Represents G37 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G37:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g37(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G37]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g37\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G37.html#pygerber.gerberx3.ast.nodes.g_codes.G37.G37.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G37\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G37:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g37(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G37.html#pygerber.gerberx3.ast.nodes.g_codes.G37.G37.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G37]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G37.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G37]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g37\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G54.html","title":"G54","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G54.html#pygerber.gerberx3.ast.nodes.g_codes.G54","title":"G54","text":"<p><code>pygerber.nodes.g_codes.G54</code> module contains definition of <code>G54</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G54.html#pygerber.gerberx3.ast.nodes.g_codes.G54.G54","title":"G54","text":"<p>             Bases: <code>G</code></p> <p>Represents G54 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>class G54(G):\n    \"\"\"Represents G54 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G54:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g54(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G54]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g54\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G54.html#pygerber.gerberx3.ast.nodes.g_codes.G54.G54.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G54\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G54:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g54(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G54.html#pygerber.gerberx3.ast.nodes.g_codes.G54.G54.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G54]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G54.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G54]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g54\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G55.html","title":"G55","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G55.html#pygerber.gerberx3.ast.nodes.g_codes.G55","title":"G55","text":"<p><code>pygerber.nodes.g_codes.G55</code> module contains definition of <code>G55</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G55.html#pygerber.gerberx3.ast.nodes.g_codes.G55.G55","title":"G55","text":"<p>             Bases: <code>G</code></p> <p>Represents G55 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>class G55(G):\n    \"\"\"Represents G55 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G55:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g55(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G55]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g55\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G55.html#pygerber.gerberx3.ast.nodes.g_codes.G55.G55.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G55\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G55:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g55(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G55.html#pygerber.gerberx3.ast.nodes.g_codes.G55.G55.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G55]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G55.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G55]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g55\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G70.html","title":"G70","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G70.html#pygerber.gerberx3.ast.nodes.g_codes.G70","title":"G70","text":"<p><code>pygerber.nodes.g_codes.G70</code> module contains definition of <code>G70</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G70.html#pygerber.gerberx3.ast.nodes.g_codes.G70.G70","title":"G70","text":"<p>             Bases: <code>G</code></p> <p>Represents G70 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>class G70(G):\n    \"\"\"Represents G70 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G70:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g70(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G70]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g70\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G70.html#pygerber.gerberx3.ast.nodes.g_codes.G70.G70.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G70\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G70:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g70(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G70.html#pygerber.gerberx3.ast.nodes.g_codes.G70.G70.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G70]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G70.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G70]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g70\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G71.html","title":"G71","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G71.html#pygerber.gerberx3.ast.nodes.g_codes.G71","title":"G71","text":"<p><code>pygerber.nodes.g_codes.G71</code> module contains definition of <code>G71</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G71.html#pygerber.gerberx3.ast.nodes.g_codes.G71.G71","title":"G71","text":"<p>             Bases: <code>G</code></p> <p>Represents G71 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>class G71(G):\n    \"\"\"Represents G71 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G71:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g71(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G71]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g71\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G71.html#pygerber.gerberx3.ast.nodes.g_codes.G71.G71.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G71\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G71:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g71(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G71.html#pygerber.gerberx3.ast.nodes.g_codes.G71.G71.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G71]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G71.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G71]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g71\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G74.html","title":"G74","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G74.html#pygerber.gerberx3.ast.nodes.g_codes.G74","title":"G74","text":"<p><code>pygerber.nodes.g_codes.G74</code> module contains definition of <code>G74</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G74.html#pygerber.gerberx3.ast.nodes.g_codes.G74.G74","title":"G74","text":"<p>             Bases: <code>G</code></p> <p>Represents G74 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>class G74(G):\n    \"\"\"Represents G74 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G74:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g74(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G74]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g74\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G74.html#pygerber.gerberx3.ast.nodes.g_codes.G74.G74.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G74\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G74:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g74(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G74.html#pygerber.gerberx3.ast.nodes.g_codes.G74.G74.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G74]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G74.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G74]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g74\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G75.html","title":"G75","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G75.html#pygerber.gerberx3.ast.nodes.g_codes.G75","title":"G75","text":"<p><code>pygerber.nodes.g_codes.G75</code> module contains definition of <code>G75</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G75.html#pygerber.gerberx3.ast.nodes.g_codes.G75.G75","title":"G75","text":"<p>             Bases: <code>G</code></p> <p>Represents G75 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>class G75(G):\n    \"\"\"Represents G75 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G75:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g75(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G75]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g75\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G75.html#pygerber.gerberx3.ast.nodes.g_codes.G75.G75.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G75\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G75:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g75(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G75.html#pygerber.gerberx3.ast.nodes.g_codes.G75.G75.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G75]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G75.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G75]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g75\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G90.html","title":"G90","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G90.html#pygerber.gerberx3.ast.nodes.g_codes.G90","title":"G90","text":"<p><code>pygerber.nodes.g_codes.G90</code> module contains definition of <code>G90</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G90.html#pygerber.gerberx3.ast.nodes.g_codes.G90.G90","title":"G90","text":"<p>             Bases: <code>G</code></p> <p>Represents G90 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>class G90(G):\n    \"\"\"Represents G90 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G90:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g90(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G90]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g90\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G90.html#pygerber.gerberx3.ast.nodes.g_codes.G90.G90.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G90\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G90:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g90(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G90.html#pygerber.gerberx3.ast.nodes.g_codes.G90.G90.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G90]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G90.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G90]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g90\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G91.html","title":"G91","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G91.html#pygerber.gerberx3.ast.nodes.g_codes.G91","title":"G91","text":"<p><code>pygerber.nodes.g_codes.G91</code> module contains definition of <code>G91</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G91.html#pygerber.gerberx3.ast.nodes.g_codes.G91.G91","title":"G91","text":"<p>             Bases: <code>G</code></p> <p>Represents G91 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>class G91(G):\n    \"\"\"Represents G91 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; G91:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_g91(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], G91]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_g91\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G91.html#pygerber.gerberx3.ast.nodes.g_codes.G91.G91.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G91\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; G91:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_g91(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/G91.html#pygerber.gerberx3.ast.nodes.g_codes.G91.G91.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G91]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/g_codes/G91.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], G91]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_g91\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/g_codes/__init__.html#pygerber.gerberx3.ast.nodes.g_codes","title":"g_codes","text":"<p><code>pygerber.gerberx3.ast.nodes.g_codes</code> package contains all the G-code nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LM.html","title":"LM","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LM.html#pygerber.gerberx3.ast.nodes.load.LM","title":"LM","text":"<p><code>pygerber.nodes.load.LM</code> module contains definition of <code>LM</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LM.html#pygerber.gerberx3.ast.nodes.load.LM.LM","title":"LM","text":"<p>             Bases: <code>Node</code></p> <p>Represents LM Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>class LM(Node):\n    \"\"\"Represents LM Gerber extended command.\"\"\"\n\n    mirroring: Mirroring\n\n    def visit(self, visitor: AstVisitor) -&gt; LM:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lm(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LM]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lm\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LM.html#pygerber.gerberx3.ast.nodes.load.LM.LM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LM\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LM:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lm(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LM.html#pygerber.gerberx3.ast.nodes.load.LM.LM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LM]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LM.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LM]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lm\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LN.html","title":"LN","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LN.html#pygerber.gerberx3.ast.nodes.load.LN","title":"LN","text":"<p><code>pygerber.nodes.load.LN</code> module contains definition of <code>LN</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LN.html#pygerber.gerberx3.ast.nodes.load.LN.LN","title":"LN","text":"<p>             Bases: <code>Node</code></p> <p>Represents LN Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>class LN(Node):\n    \"\"\"Represents LN Gerber extended command.\"\"\"\n\n    name: str\n\n    def visit(self, visitor: AstVisitor) -&gt; LN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ln(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ln\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LN.html#pygerber.gerberx3.ast.nodes.load.LN.LN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ln(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LN.html#pygerber.gerberx3.ast.nodes.load.LN.LN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LN.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ln\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LP.html","title":"LP","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LP.html#pygerber.gerberx3.ast.nodes.load.LP","title":"LP","text":"<p><code>pygerber.nodes.load.LP</code> module contains definition of <code>LP</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LP.html#pygerber.gerberx3.ast.nodes.load.LP.LP","title":"LP","text":"<p>             Bases: <code>Node</code></p> <p>Represents LP Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>class LP(Node):\n    \"\"\"Represents LP Gerber extended command.\"\"\"\n\n    polarity: Polarity\n\n    def visit(self, visitor: AstVisitor) -&gt; LP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lp(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LP.html#pygerber.gerberx3.ast.nodes.load.LP.LP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lp(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LP.html#pygerber.gerberx3.ast.nodes.load.LP.LP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lp\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LR.html","title":"LR","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LR.html#pygerber.gerberx3.ast.nodes.load.LR","title":"LR","text":"<p><code>pygerber.nodes.load.LR</code> module contains definition of <code>LR</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LR.html#pygerber.gerberx3.ast.nodes.load.LR.LR","title":"LR","text":"<p>             Bases: <code>Node</code></p> <p>Represents LR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>class LR(Node):\n    \"\"\"Represents LR Gerber extended command.\"\"\"\n\n    rotation: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; LR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_lr(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_lr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LR.html#pygerber.gerberx3.ast.nodes.load.LR.LR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_lr(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LR.html#pygerber.gerberx3.ast.nodes.load.LR.LR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_lr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LS.html","title":"LS","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LS.html#pygerber.gerberx3.ast.nodes.load.LS","title":"LS","text":"<p><code>pygerber.nodes.load.LS</code> module contains definition of <code>LS</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LS.html#pygerber.gerberx3.ast.nodes.load.LS.LS","title":"LS","text":"<p>             Bases: <code>Node</code></p> <p>Represents LS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>class LS(Node):\n    \"\"\"Represents LS Gerber extended command.\"\"\"\n\n    scale: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; LS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ls(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], LS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ls\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LS.html#pygerber.gerberx3.ast.nodes.load.LS.LS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; LS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ls(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/LS.html#pygerber.gerberx3.ast.nodes.load.LS.LS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/load/LS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], LS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ls\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/load/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/load/__init__.html#pygerber.gerberx3.ast.nodes.load","title":"load","text":"<p><code>pygerber.gerberx3.ast.nodes.load</code> package contains all the load_ nodes."},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M00.html","title":"M00","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M00.html#pygerber.gerberx3.ast.nodes.m_codes.M00","title":"M00","text":"<p><code>pygerber.nodes.m_codes.M00</code> module contains definition of <code>M00</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M00.html#pygerber.gerberx3.ast.nodes.m_codes.M00.M00","title":"M00","text":"<p>             Bases: <code>Node</code></p> <p>Represents M00 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>class M00(Node):\n    \"\"\"Represents M00 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M00:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m00(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M00]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m00\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M00.html#pygerber.gerberx3.ast.nodes.m_codes.M00.M00.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M00\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M00:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m00(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M00.html#pygerber.gerberx3.ast.nodes.m_codes.M00.M00.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M00]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M00.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M00]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m00\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M01.html","title":"M01","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M01.html#pygerber.gerberx3.ast.nodes.m_codes.M01","title":"M01","text":"<p><code>pygerber.nodes.m_codes.M01</code> module contains definition of <code>M01</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M01.html#pygerber.gerberx3.ast.nodes.m_codes.M01.M01","title":"M01","text":"<p>             Bases: <code>Node</code></p> <p>Represents M01 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>class M01(Node):\n    \"\"\"Represents M01 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M01:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m01(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M01]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M01.html#pygerber.gerberx3.ast.nodes.m_codes.M01.M01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M01\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M01:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m01(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M01.html#pygerber.gerberx3.ast.nodes.m_codes.M01.M01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M01]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M01.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M01]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m01\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M02.html","title":"M02","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M02.html#pygerber.gerberx3.ast.nodes.m_codes.M02","title":"M02","text":"<p><code>pygerber.nodes.m_codes.M02</code> module contains definition of <code>M02</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M02.html#pygerber.gerberx3.ast.nodes.m_codes.M02.M02","title":"M02","text":"<p>             Bases: <code>Node</code></p> <p>Represents M02 Gerber command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>class M02(Node):\n    \"\"\"Represents M02 Gerber command.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; M02:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_m02(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], M02]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_m02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M02.html#pygerber.gerberx3.ast.nodes.m_codes.M02.M02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M02\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; M02:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_m02(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/M02.html#pygerber.gerberx3.ast.nodes.m_codes.M02.M02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M02]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/m_codes/M02.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], M02]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_m02\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/m_codes/__init__.html#pygerber.gerberx3.ast.nodes.m_codes","title":"m_codes","text":"<p><code>pygerber.gerberx3.ast.nodes.m_codes</code> package contains all the M-code nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/__init__.html#pygerber.gerberx3.ast.nodes.math","title":"math","text":"<p><code>pygerber.gerberx3.ast.nodes.math</code> package contains all the macro math expression nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/assignment.html","title":"assignment","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/assignment.html#pygerber.gerberx3.ast.nodes.math.assignment","title":"assignment","text":"<p><code>pygerber.nodes.math.assignment</code> module contains definition of <code>Assignment</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/assignment.html#pygerber.gerberx3.ast.nodes.math.assignment.Assignment","title":"Assignment","text":"<p>             Bases: <code>Node</code></p> <p>Represents math expression variable.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>class Assignment(Node):\n    \"\"\"Represents math expression variable.\"\"\"\n\n    variable: Variable\n    expression: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Assignment:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_assignment(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Assignment]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_assignment\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/assignment.html#pygerber.gerberx3.ast.nodes.math.assignment.Assignment.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Assignment\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Assignment:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_assignment(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/assignment.html#pygerber.gerberx3.ast.nodes.math.assignment.Assignment.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Assignment]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/assignment.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Assignment]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_assignment\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/constant.html","title":"constant","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/constant.html#pygerber.gerberx3.ast.nodes.math.constant","title":"constant","text":"<p><code>pygerber.nodes.math.constant</code> module contains definition of <code>Constant</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/constant.html#pygerber.gerberx3.ast.nodes.math.constant.Constant","title":"Constant","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression constant.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>class Constant(Expression):\n    \"\"\"Represents math expression constant.\"\"\"\n\n    constant: Double\n\n    def visit(self, visitor: AstVisitor) -&gt; Constant:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_constant(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Constant]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_constant\n\n    def __hash__(self) -&gt; int:\n        return hash(self.constant)\n\n    def __eq__(self, value: object) -&gt; bool:\n        if isinstance(value, Constant):\n            return self.constant == value.constant\n\n        return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/constant.html#pygerber.gerberx3.ast.nodes.math.constant.Constant.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Constant\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Constant:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_constant(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/constant.html#pygerber.gerberx3.ast.nodes.math.constant.Constant.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Constant]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/constant.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Constant]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_constant\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/expression.html","title":"expression","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/expression.html#pygerber.gerberx3.ast.nodes.math.expression","title":"expression","text":"<p><code>pygerber.nodes.math.expression</code> module contains definition of <code>Expression</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/expression.html#pygerber.gerberx3.ast.nodes.math.expression.Expression","title":"Expression","text":"<p>             Bases: <code>Node</code></p> <p>Represents math expression expression.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/expression.py</code> <pre><code>class Expression(Node):\n    \"\"\"Represents math expression expression.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/parenthesis.html","title":"parenthesis","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/parenthesis.html#pygerber.gerberx3.ast.nodes.math.parenthesis","title":"parenthesis","text":"<p><code>pygerber.nodes.math.parenthesis</code> module contains definition of <code>Parenthesis</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/parenthesis.html#pygerber.gerberx3.ast.nodes.math.parenthesis.Parenthesis","title":"Parenthesis","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression expression.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>class Parenthesis(Expression):\n    \"\"\"Represents math expression expression.\"\"\"\n\n    inner: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Parenthesis:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_parenthesis(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Parenthesis]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_parenthesis\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/parenthesis.html#pygerber.gerberx3.ast.nodes.math.parenthesis.Parenthesis.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Parenthesis\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Parenthesis:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_parenthesis(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/parenthesis.html#pygerber.gerberx3.ast.nodes.math.parenthesis.Parenthesis.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Parenthesis]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/parenthesis.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Parenthesis]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_parenthesis\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/point.html","title":"point","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/point.html#pygerber.gerberx3.ast.nodes.math.point","title":"point","text":"<p><code>pygerber.nodes.math.point</code> module contains definition of <code>Point</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/point.html#pygerber.gerberx3.ast.nodes.math.point.Point","title":"Point","text":"<p>             Bases: <code>Node</code></p> <p>Represents math point point.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>class Point(Node):\n    \"\"\"Represents math point point.\"\"\"\n\n    x: Expression\n    y: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Point:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_point(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Point]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/point.html#pygerber.gerberx3.ast.nodes.math.point.Point.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Point\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Point:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_point(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/point.html#pygerber.gerberx3.ast.nodes.math.point.Point.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Point]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/point.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Point]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/variable.html","title":"variable","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/variable.html#pygerber.gerberx3.ast.nodes.math.variable","title":"variable","text":"<p><code>pygerber.nodes.math.variable</code> module contains definition of <code>Variable</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/variable.html#pygerber.gerberx3.ast.nodes.math.variable.Variable","title":"Variable","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression variable.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>class Variable(Expression):\n    \"\"\"Represents math expression variable.\"\"\"\n\n    variable: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Variable:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_variable(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Variable]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_variable\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/variable.html#pygerber.gerberx3.ast.nodes.math.variable.Variable.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Variable\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Variable:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_variable(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/variable.html#pygerber.gerberx3.ast.nodes.math.variable.Variable.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Variable]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/variable.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Variable]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_variable\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/__init__.html#pygerber.gerberx3.ast.nodes.math.operators","title":"operators","text":"<p><code>pygerber.gerberx3.ast.nodes.math.operators</code> package contains all the macro math expression operators.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/__init__.html#pygerber.gerberx3.ast.nodes.math.operators.binary","title":"binary","text":"<p><code>pygerber.gerberx3.ast.nodes.math.operators.binary</code> package contains all the macro math expression binary operators.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/add.html","title":"add","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/add.html#pygerber.gerberx3.ast.nodes.math.operators.binary.add","title":"add","text":"<p><code>pygerber.nodes.math.operators.binary.Add</code> module contains definition of <code>Add</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/add.html#pygerber.gerberx3.ast.nodes.math.operators.binary.add.Add","title":"Add","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression addition operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>class Add(Expression):\n    \"\"\"Represents math expression addition operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Add:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_add(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Add]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_add\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/add.html#pygerber.gerberx3.ast.nodes.math.operators.binary.add.Add.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Add\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Add:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_add(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/add.html#pygerber.gerberx3.ast.nodes.math.operators.binary.add.Add.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Add]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/add.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Add]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_add\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/div.html","title":"div","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/div.html#pygerber.gerberx3.ast.nodes.math.operators.binary.div","title":"div","text":"<p><code>pygerber.nodes.math.operators.binary.Div</code> module contains definition of <code>Div</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/div.html#pygerber.gerberx3.ast.nodes.math.operators.binary.div.Div","title":"Div","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression division operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>class Div(Expression):\n    \"\"\"Represents math expression division operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Div:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_div(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Div]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_div\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/div.html#pygerber.gerberx3.ast.nodes.math.operators.binary.div.Div.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Div\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Div:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_div(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/div.html#pygerber.gerberx3.ast.nodes.math.operators.binary.div.Div.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Div]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/div.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Div]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_div\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.html","title":"mul","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.html#pygerber.gerberx3.ast.nodes.math.operators.binary.mul","title":"mul","text":"<p><code>pygerber.nodes.math.operators.binary.Mul</code> module contains definition of <code>Mul</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.html#pygerber.gerberx3.ast.nodes.math.operators.binary.mul.Mul","title":"Mul","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression multiplication operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>class Mul(Expression):\n    \"\"\"Represents math expression multiplication operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Mul:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mul(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Mul]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mul\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.html#pygerber.gerberx3.ast.nodes.math.operators.binary.mul.Mul.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Mul\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Mul:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mul(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.html#pygerber.gerberx3.ast.nodes.math.operators.binary.mul.Mul.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Mul]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/mul.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Mul]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mul\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.html","title":"sub","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.html#pygerber.gerberx3.ast.nodes.math.operators.binary.sub","title":"sub","text":"<p><code>pygerber.nodes.math.operators.binary.Sub</code> module contains definition of <code>Sub</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.html#pygerber.gerberx3.ast.nodes.math.operators.binary.sub.Sub","title":"Sub","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression subtraction operator.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>class Sub(Expression):\n    \"\"\"Represents math expression subtraction operator.\"\"\"\n\n    head: Expression\n    tail: List[Expression] = Field(min_length=1)\n\n    def visit(self, visitor: AstVisitor) -&gt; Sub:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sub(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Sub]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sub\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.html#pygerber.gerberx3.ast.nodes.math.operators.binary.sub.Sub.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Sub\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Sub:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sub(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.html#pygerber.gerberx3.ast.nodes.math.operators.binary.sub.Sub.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Sub]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/binary/sub.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Sub]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sub\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/__init__.html#pygerber.gerberx3.ast.nodes.math.operators.unary","title":"unary","text":"<p><code>pygerber.gerberx3.ast.nodes.math.operators.unary</code> package contains all the macro math expression unary operators.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.html","title":"neg","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.html#pygerber.gerberx3.ast.nodes.math.operators.unary.neg","title":"neg","text":"<p><code>pygerber.nodes.math.operators.unary.Neg</code> module contains definition of <code>Neg</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.html#pygerber.gerberx3.ast.nodes.math.operators.unary.neg.Neg","title":"Neg","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression neg.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>class Neg(Expression):\n    \"\"\"Represents math expression neg.\"\"\"\n\n    operand: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Neg:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_neg(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Neg]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_neg\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.html#pygerber.gerberx3.ast.nodes.math.operators.unary.neg.Neg.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Neg\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Neg:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_neg(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.html#pygerber.gerberx3.ast.nodes.math.operators.unary.neg.Neg.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Neg]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/neg.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Neg]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_neg\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.html","title":"pos","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.html#pygerber.gerberx3.ast.nodes.math.operators.unary.pos","title":"pos","text":"<p><code>pygerber.nodes.math.operators.unary.Pos</code> module contains definition of <code>Pos</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.html#pygerber.gerberx3.ast.nodes.math.operators.unary.pos.Pos","title":"Pos","text":"<p>             Bases: <code>Expression</code></p> <p>Represents math expression pos.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>class Pos(Expression):\n    \"\"\"Represents math expression pos.\"\"\"\n\n    operand: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Pos:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_pos(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Pos]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_pos\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.html#pygerber.gerberx3.ast.nodes.math.operators.unary.pos.Pos.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Pos\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Pos:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_pos(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.html#pygerber.gerberx3.ast.nodes.math.operators.unary.pos.Pos.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Pos]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/math/operators/unary/pos.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Pos]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_pos\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/other/__init__.html#pygerber.gerberx3.ast.nodes.other","title":"other","text":"<p><code>pygerber.gerberx3.ast.nodes.other</code> package contains all the nodes that don't fit in other categories.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html","title":"coordinate","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate","title":"coordinate","text":"<p><code>pygerber.nodes.other.Coordinate</code> module contains definition of <code>Coordinate</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.Coordinate","title":"Coordinate","text":"<p>             Bases: <code>Node</code></p> <p>Represents Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class Coordinate(Node):\n    \"\"\"Represents Coordinate node.\"\"\"\n\n    value: PackedCoordinateStr\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateX","title":"CoordinateX","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents X Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateX(Coordinate):\n    \"\"\"Represents X Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateX:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_x(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateX]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_x\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateX.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateX\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateX:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_x(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateX.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateX]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateX]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_x\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateY","title":"CoordinateY","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents Y Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateY(Coordinate):\n    \"\"\"Represents Y Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateY:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_y(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateY]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_y\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateY.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateY\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateY:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_y(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateY.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateY]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateY]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_y\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateI","title":"CoordinateI","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents I Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateI(Coordinate):\n    \"\"\"Represents I Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateI:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_i(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateI]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_i\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateI\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateI:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_i(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateI]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateI]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_i\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateJ","title":"CoordinateJ","text":"<p>             Bases: <code>Coordinate</code></p> <p>Represents J Coordinate node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>class CoordinateJ(Coordinate):\n    \"\"\"Represents J Coordinate node.\"\"\"\n\n    def visit(self, visitor: AstVisitor) -&gt; CoordinateJ:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_coordinate_j(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], CoordinateJ]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_coordinate_j\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateJ.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateJ\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; CoordinateJ:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_coordinate_j(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/other/coordinate.html#pygerber.gerberx3.ast.nodes.other.coordinate.CoordinateJ.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateJ]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/other/coordinate.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], CoordinateJ]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_coordinate_j\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/__init__.html#pygerber.gerberx3.ast.nodes.primitives","title":"primitives","text":"<p><code>pygerber.gerberx3.ast.nodes.primitives</code> package contains all the macro primitives nodes.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_0.html","title":"code_0","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_0.html#pygerber.gerberx3.ast.nodes.primitives.code_0","title":"code_0","text":"<p><code>pygerber.nodes.primitives.Code0</code> module contains definition of <code>Code0</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_0.html#pygerber.gerberx3.ast.nodes.primitives.code_0.Code0","title":"Code0","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 0 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>class Code0(Node):\n    \"\"\"Represents code 0 macro primitive.\"\"\"\n\n    string: str\n\n    def visit(self, visitor: AstVisitor) -&gt; Code0:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_0(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code0]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_0\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_0.html#pygerber.gerberx3.ast.nodes.primitives.code_0.Code0.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code0\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code0:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_0(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_0.html#pygerber.gerberx3.ast.nodes.primitives.code_0.Code0.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code0]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_0.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code0]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_0\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_1.html","title":"code_1","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_1.html#pygerber.gerberx3.ast.nodes.primitives.code_1","title":"code_1","text":"<p><code>pygerber.nodes.primitives.Code1</code> module contains definition of <code>Code1</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_1.html#pygerber.gerberx3.ast.nodes.primitives.code_1.Code1","title":"Code1","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 1 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>class Code1(Node):\n    \"\"\"Represents code 1 macro primitive.\"\"\"\n\n    exposure: Expression\n    diameter: Expression\n    center_x: Expression\n    center_y: Expression\n    rotation: Optional[Expression] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; Code1:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_1(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code1]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_1\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_1.html#pygerber.gerberx3.ast.nodes.primitives.code_1.Code1.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code1\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code1:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_1(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_1.html#pygerber.gerberx3.ast.nodes.primitives.code_1.Code1.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code1]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_1.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code1]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_1\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_2.html","title":"code_2","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_2.html#pygerber.gerberx3.ast.nodes.primitives.code_2","title":"code_2","text":"<p><code>pygerber.nodes.primitives.Code2</code> module contains definition of <code>Code2</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_2.html#pygerber.gerberx3.ast.nodes.primitives.code_2.Code2","title":"Code2","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 2 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>class Code2(Node):\n    \"\"\"Represents code 2 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    start_x: Expression\n    start_y: Expression\n    end_x: Expression\n    end_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code2:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_2(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code2]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_2.html#pygerber.gerberx3.ast.nodes.primitives.code_2.Code2.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code2\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code2:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_2(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_2.html#pygerber.gerberx3.ast.nodes.primitives.code_2.Code2.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code2]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_2.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code2]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_20.html","title":"code_20","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_20.html#pygerber.gerberx3.ast.nodes.primitives.code_20","title":"code_20","text":"<p><code>pygerber.nodes.primitives.Code20</code> module contains definition of <code>Code20</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_20.html#pygerber.gerberx3.ast.nodes.primitives.code_20.Code20","title":"Code20","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 20 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>class Code20(Node):\n    \"\"\"Represents code 20 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    start_x: Expression\n    start_y: Expression\n    end_x: Expression\n    end_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code20:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_20(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code20]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_20\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_20.html#pygerber.gerberx3.ast.nodes.primitives.code_20.Code20.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code20\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code20:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_20(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_20.html#pygerber.gerberx3.ast.nodes.primitives.code_20.Code20.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code20]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_20.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code20]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_20\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_21.html","title":"code_21","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_21.html#pygerber.gerberx3.ast.nodes.primitives.code_21","title":"code_21","text":"<p><code>pygerber.nodes.primitives.Code21</code> module contains definition of <code>Code21</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_21.html#pygerber.gerberx3.ast.nodes.primitives.code_21.Code21","title":"Code21","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 21 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>class Code21(Node):\n    \"\"\"Represents code 21 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    height: Expression\n    center_x: Expression\n    center_y: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code21:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_21(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code21]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_21\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_21.html#pygerber.gerberx3.ast.nodes.primitives.code_21.Code21.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code21\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code21:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_21(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_21.html#pygerber.gerberx3.ast.nodes.primitives.code_21.Code21.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code21]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_21.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code21]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_21\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_22.html","title":"code_22","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_22.html#pygerber.gerberx3.ast.nodes.primitives.code_22","title":"code_22","text":"<p><code>pygerber.nodes.primitives.Code22</code> module contains definition of <code>Code22</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_22.html#pygerber.gerberx3.ast.nodes.primitives.code_22.Code22","title":"Code22","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 22 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>class Code22(Node):\n    \"\"\"Represents code 22 macro primitive.\"\"\"\n\n    exposure: Expression\n    width: Expression\n    height: Expression\n    x_lower_left: Expression\n    y_lower_left: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code22:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_22(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code22]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_22\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_22.html#pygerber.gerberx3.ast.nodes.primitives.code_22.Code22.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code22\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code22:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_22(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_22.html#pygerber.gerberx3.ast.nodes.primitives.code_22.Code22.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code22]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_22.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code22]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_22\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_4.html","title":"code_4","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_4.html#pygerber.gerberx3.ast.nodes.primitives.code_4","title":"code_4","text":"<p><code>pygerber.nodes.primitives.Code4</code> module contains definition of <code>Code4</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_4.html#pygerber.gerberx3.ast.nodes.primitives.code_4.Code4","title":"Code4","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 4 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>class Code4(Node):\n    \"\"\"Represents code 4 macro primitive.\"\"\"\n\n    exposure: Expression\n    number_of_points: Expression\n    start_x: Expression\n    start_y: Expression\n    points: List[Point]\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code4:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_4(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code4]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_4\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_4.html#pygerber.gerberx3.ast.nodes.primitives.code_4.Code4.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code4\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code4:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_4(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_4.html#pygerber.gerberx3.ast.nodes.primitives.code_4.Code4.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code4]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_4.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code4]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_4\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_5.html","title":"code_5","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_5.html#pygerber.gerberx3.ast.nodes.primitives.code_5","title":"code_5","text":"<p><code>pygerber.nodes.primitives.Code5</code> module contains definition of <code>Code5</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_5.html#pygerber.gerberx3.ast.nodes.primitives.code_5.Code5","title":"Code5","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 5 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>class Code5(Node):\n    \"\"\"Represents code 5 macro primitive.\"\"\"\n\n    exposure: Expression\n    number_of_vertices: Expression\n    center_x: Expression\n    center_y: Expression\n    diameter: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code5:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_5(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code5]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_5.html#pygerber.gerberx3.ast.nodes.primitives.code_5.Code5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code5\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code5:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_5(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_5.html#pygerber.gerberx3.ast.nodes.primitives.code_5.Code5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code5]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_5.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code5]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_5\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_6.html","title":"code_6","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_6.html#pygerber.gerberx3.ast.nodes.primitives.code_6","title":"code_6","text":"<p><code>pygerber.nodes.primitives.Code6</code> module contains definition of <code>Code6</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_6.html#pygerber.gerberx3.ast.nodes.primitives.code_6.Code6","title":"Code6","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 6 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>class Code6(Node):\n    \"\"\"Represents code 6 macro primitive.\"\"\"\n\n    center_x: Expression\n    center_y: Expression\n    outer_diameter: Expression\n    ring_thickness: Expression\n    gap_between_rings: Expression\n    max_ring_count: Expression\n    crosshair_thickness: Expression\n    crosshair_length: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code6:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_6(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code6]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_6\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_6.html#pygerber.gerberx3.ast.nodes.primitives.code_6.Code6.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code6\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code6:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_6(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_6.html#pygerber.gerberx3.ast.nodes.primitives.code_6.Code6.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code6]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_6.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code6]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_6\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_7.html","title":"code_7","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_7.html#pygerber.gerberx3.ast.nodes.primitives.code_7","title":"code_7","text":"<p><code>pygerber.nodes.primitives.Code7</code> module contains definition of <code>Code7</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_7.html#pygerber.gerberx3.ast.nodes.primitives.code_7.Code7","title":"Code7","text":"<p>             Bases: <code>Node</code></p> <p>Represents code 7 macro primitive.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>class Code7(Node):\n    \"\"\"Represents code 7 macro primitive.\"\"\"\n\n    center_x: Expression\n    center_y: Expression\n    outer_diameter: Expression\n    inner_diameter: Expression\n    gap_thickness: Expression\n    rotation: Expression\n\n    def visit(self, visitor: AstVisitor) -&gt; Code7:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_code_7(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], Code7]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_code_7\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_7.html#pygerber.gerberx3.ast.nodes.primitives.code_7.Code7.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code7\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; Code7:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_code_7(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/primitives/code_7.html#pygerber.gerberx3.ast.nodes.primitives.code_7.Code7.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code7]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/primitives/code_7.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], Code7]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_code_7\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/AS.html","title":"AS","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/AS.html#pygerber.gerberx3.ast.nodes.properties.AS","title":"AS","text":"<p><code>pygerber.nodes.properties.AS</code> module contains definition of <code>AS</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/AS.html#pygerber.gerberx3.ast.nodes.properties.AS.AS","title":"AS","text":"<p>             Bases: <code>Node</code></p> <p>Represents AS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>class AS(Node):\n    \"\"\"Represents AS Gerber extended command.\"\"\"\n\n    correspondence: AxisCorrespondence\n\n    def visit(self, visitor: AstVisitor) -&gt; AS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_as(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], AS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_as\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/AS.html#pygerber.gerberx3.ast.nodes.properties.AS.AS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; AS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_as(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/AS.html#pygerber.gerberx3.ast.nodes.properties.AS.AS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/AS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], AS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_as\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/FS.html","title":"FS","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/FS.html#pygerber.gerberx3.ast.nodes.properties.FS","title":"FS","text":"<p><code>pygerber.nodes.properties.FS</code> module contains definition of <code>FS</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/FS.html#pygerber.gerberx3.ast.nodes.properties.FS.FS","title":"FS","text":"<p>             Bases: <code>Node</code></p> <p>Represents FS Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>class FS(Node):\n    \"\"\"Represents FS Gerber extended command.\"\"\"\n\n    zeros: Zeros\n    coordinate_mode: CoordinateNotation\n\n    x_integral: int\n    x_decimal: int\n\n    y_integral: int\n    y_decimal: int\n\n    def visit(self, visitor: AstVisitor) -&gt; FS:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_fs(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], FS]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_fs\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/FS.html#pygerber.gerberx3.ast.nodes.properties.FS.FS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; FS\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; FS:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_fs(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/FS.html#pygerber.gerberx3.ast.nodes.properties.FS.FS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], FS]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/FS.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], FS]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_fs\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IN.html","title":"IN","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IN.html#pygerber.gerberx3.ast.nodes.properties.IN","title":"IN","text":"<p><code>pygerber.nodes.properties.IN</code> module contains definition of <code>IN</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IN.html#pygerber.gerberx3.ast.nodes.properties.IN.IN","title":"IN","text":"<p>             Bases: <code>Node</code></p> <p>Represents IN Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>class IN(Node):\n    \"\"\"Represents IN Gerber extended command.\"\"\"\n\n    name: str = Field(default=\"\")\n\n    def visit(self, visitor: AstVisitor) -&gt; IN:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_in(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IN]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_in\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IN.html#pygerber.gerberx3.ast.nodes.properties.IN.IN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IN\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IN:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_in(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IN.html#pygerber.gerberx3.ast.nodes.properties.IN.IN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IN]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IN.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IN]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_in\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IP.html","title":"IP","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IP.html#pygerber.gerberx3.ast.nodes.properties.IP","title":"IP","text":"<p><code>pygerber.nodes.properties.IP</code> module contains definition of <code>IP</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IP.html#pygerber.gerberx3.ast.nodes.properties.IP.IP","title":"IP","text":"<p>             Bases: <code>Node</code></p> <p>Represents IP Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>class IP(Node):\n    \"\"\"Represents IP Gerber extended command.\"\"\"\n\n    polarity: ImagePolarity\n\n    def visit(self, visitor: AstVisitor) -&gt; IP:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ip(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IP]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ip\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IP.html#pygerber.gerberx3.ast.nodes.properties.IP.IP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IP\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IP:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ip(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IP.html#pygerber.gerberx3.ast.nodes.properties.IP.IP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IP]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IP.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IP]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ip\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IR.html","title":"IR","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IR.html#pygerber.gerberx3.ast.nodes.properties.IR","title":"IR","text":"<p><code>pygerber.nodes.properties.IR</code> module contains definition of <code>IR</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IR.html#pygerber.gerberx3.ast.nodes.properties.IR.IR","title":"IR","text":"<p>             Bases: <code>Node</code></p> <p>Represents IR Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>class IR(Node):\n    \"\"\"Represents IR Gerber extended command.\"\"\"\n\n    rotation_degrees: int\n\n    def visit(self, visitor: AstVisitor) -&gt; IR:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_ir(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], IR]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_ir\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IR.html#pygerber.gerberx3.ast.nodes.properties.IR.IR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IR\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; IR:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_ir(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/IR.html#pygerber.gerberx3.ast.nodes.properties.IR.IR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IR]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/IR.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], IR]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_ir\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MI.html","title":"MI","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MI.html#pygerber.gerberx3.ast.nodes.properties.MI","title":"MI","text":"<p><code>pygerber.nodes.properties.MI</code> module contains definition of <code>MI</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MI.html#pygerber.gerberx3.ast.nodes.properties.MI.MI","title":"MI","text":"<p>             Bases: <code>Node</code></p> <p>Represents MI Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>class MI(Node):\n    \"\"\"Represents MI Gerber extended command.\"\"\"\n\n    a_mirroring: int = Field(default=0)\n    b_mirroring: int = Field(default=0)\n\n    def visit(self, visitor: AstVisitor) -&gt; MI:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mi(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], MI]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mi\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MI.html#pygerber.gerberx3.ast.nodes.properties.MI.MI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MI\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; MI:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mi(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MI.html#pygerber.gerberx3.ast.nodes.properties.MI.MI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MI]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MI.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], MI]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mi\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MO.html","title":"MO","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MO.html#pygerber.gerberx3.ast.nodes.properties.MO","title":"MO","text":"<p><code>pygerber.nodes.properties.MO</code> module contains definition of <code>MO</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MO.html#pygerber.gerberx3.ast.nodes.properties.MO.MO","title":"MO","text":"<p>             Bases: <code>Node</code></p> <p>Represents MO Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>class MO(Node):\n    \"\"\"Represents MO Gerber extended command.\"\"\"\n\n    mode: UnitMode\n\n    def visit(self, visitor: AstVisitor) -&gt; MO:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_mo(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], MO]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_mo\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MO.html#pygerber.gerberx3.ast.nodes.properties.MO.MO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MO\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; MO:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_mo(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/MO.html#pygerber.gerberx3.ast.nodes.properties.MO.MO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MO]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/MO.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], MO]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_mo\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/OF.html","title":"OF","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/OF.html#pygerber.gerberx3.ast.nodes.properties.OF","title":"OF","text":"<p><code>pygerber.nodes.properties.OF</code> module contains definition of <code>OF</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/OF.html#pygerber.gerberx3.ast.nodes.properties.OF.OF","title":"OF","text":"<p>             Bases: <code>Node</code></p> <p>Represents OF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>class OF(Node):\n    \"\"\"Represents OF Gerber extended command.\"\"\"\n\n    a_offset: Optional[float] = Field(default=None)\n    b_offset: Optional[float] = Field(default=None)\n\n    def visit(self, visitor: AstVisitor) -&gt; OF:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_of(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], OF]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_of\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/OF.html#pygerber.gerberx3.ast.nodes.properties.OF.OF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; OF\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; OF:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_of(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/OF.html#pygerber.gerberx3.ast.nodes.properties.OF.OF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], OF]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/OF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], OF]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_of\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/SF.html","title":"SF","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/SF.html#pygerber.gerberx3.ast.nodes.properties.SF","title":"SF","text":"<p><code>pygerber.nodes.properties.SF</code> module contains definition of <code>SF</code> class.</p>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/SF.html#pygerber.gerberx3.ast.nodes.properties.SF.SF","title":"SF","text":"<p>             Bases: <code>Node</code></p> <p>Represents SF Gerber extended command.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>class SF(Node):\n    \"\"\"Represents SF Gerber extended command.\"\"\"\n\n    a_scale: Double = Field(default=1.0)\n    b_scale: Double = Field(default=1.0)\n\n    def visit(self, visitor: AstVisitor) -&gt; SF:\n        \"\"\"Handle visitor call.\"\"\"\n        return visitor.on_sf(self)\n\n    def get_visitor_callback_function(\n        self, visitor: AstVisitor\n    ) -&gt; Callable[[Self], SF]:\n        \"\"\"Get callback function for the node.\"\"\"\n        return visitor.on_sf\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/SF.html#pygerber.gerberx3.ast.nodes.properties.SF.SF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SF\n</code></pre> <p>Handle visitor call.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>def visit(self, visitor: AstVisitor) -&gt; SF:\n    \"\"\"Handle visitor call.\"\"\"\n    return visitor.on_sf(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/SF.html#pygerber.gerberx3.ast.nodes.properties.SF.SF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SF]\n</code></pre> <p>Get callback function for the node.</p> Source code in <code>src/pygerber/gerberx3/ast/nodes/properties/SF.py</code> <pre><code>def get_visitor_callback_function(\n    self, visitor: AstVisitor\n) -&gt; Callable[[Self], SF]:\n    \"\"\"Get callback function for the node.\"\"\"\n    return visitor.on_sf\n</code></pre>"},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/ast/nodes/properties/__init__.html#pygerber.gerberx3.ast.nodes.properties","title":"properties","text":"<p><code>pygerber.gerberx3.ast.nodes.properties</code> package contains all the nodes that set image properties.</p>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler","title":"compiler","text":"<p><code>compiler</code> module contains internals of Gerber X3 to RVMC compiler.</p>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler","title":"Compiler","text":"<p>             Bases: <code>StateTrackingVisitor</code></p> <p>Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM commands (RVMC).</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>class Compiler(StateTrackingVisitor):\n    \"\"\"Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM\n    commands (RVMC).\n    \"\"\"\n\n    MAIN_BUFFER_ID: ClassVar[str] = \"%main%\"\n\n    def __init__(self, *, ignore_program_stop: bool = False) -&gt; None:\n        super().__init__(ignore_program_stop=ignore_program_stop)\n        self._buffers: dict[str, CommandBuffer] = {}\n        self._buffer_stack: list[str] = []\n        self._contour_buffer: Optional[list[ShapeSegment]] = []\n        self._create_main_buffer()\n\n    def _set_buffer(self, buffer: CommandBuffer) -&gt; None:\n        \"\"\"Register buffer.\"\"\"\n        self._buffers[buffer.id_str] = buffer\n\n    def _get_buffer(self, id_: str) -&gt; CommandBuffer:\n        \"\"\"Get buffer by id.\"\"\"\n        return self._buffers[id_]\n\n    def _del_buffer(self, id_: str) -&gt; None:\n        \"\"\"Delete buffer by id.\"\"\"\n        del self._buffers[id_]\n\n    def _get_buffer_opt(self, id_: str) -&gt; Optional[CommandBuffer]:\n        \"\"\"Get buffer by id.\"\"\"\n        return self._buffers.get(id_)\n\n    def _get_current_buffer(self) -&gt; CommandBuffer:\n        return self._get_buffer(self._buffer_stack[-1])\n\n    def _append_shape_to_current_buffer(self, command: Shape) -&gt; None:\n        self._get_current_buffer().append_shape(command)\n\n    def _append_paste_to_current_buffer(self, command: PasteLayer) -&gt; None:\n        self._get_current_buffer().append_paste(command)\n\n    def _expand_buffer_to_current_buffer(self, buffer: CommandBuffer) -&gt; None:\n        for command in buffer.commands:\n            if isinstance(command, Shape):\n                self._append_shape_to_current_buffer(command)\n            elif isinstance(command, PasteLayer):\n                self._append_paste_to_current_buffer(command)\n            else:\n                raise NotImplementedError(type(command))\n\n    def _create_main_buffer(self) -&gt; CommandBuffer:\n        buffer = CommandBuffer(\n            self.MAIN_BUFFER_ID,\n            box=None,\n            origin=Vector(x=0, y=0),\n            commands=[],\n            depends_on=set(),\n            resolved_dependencies=[],\n        )\n        assert self.MAIN_BUFFER_ID not in self._buffers\n        self._set_buffer(buffer)\n        self._push_buffer(self.MAIN_BUFFER_ID)\n\n        return buffer\n\n    def _push_buffer(self, id_: str) -&gt; None:\n        self._buffer_stack.append(id_)\n\n    def _pop_buffer(self) -&gt; None:\n        self._buffer_stack.pop()\n\n    def _get_line_thickness(self, line_direction: Vector) -&gt; float:\n        current_aperture = self.state.current_aperture\n        if isinstance(current_aperture, ADC):\n            return current_aperture.diameter\n\n        if isinstance(current_aperture, (ADR, ADO)):\n            angle = line_direction.angle_between(Vector.unit.x)\n            sin_angle = sin(radians(-angle))\n            cos_angle = cos(radians(-angle))\n\n            return Vector(\n                x=current_aperture.width * cos_angle,\n                y=current_aperture.height * sin_angle,\n            ).length()\n\n        if isinstance(current_aperture, ADP):\n            return current_aperture.outer_diameter\n\n        raise NotImplementedError(type(current_aperture))\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` node.\"\"\"\n        aperture_buffer = self._create_aperture_buffer(node.open.aperture_id)\n        self._push_buffer(aperture_buffer.id_str)\n\n        super().on_ab(node)\n\n        self._pop_buffer()\n\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` node.\"\"\"\n        aperture_buffer = self._create_aperture_buffer(\n            ApertureIdStr(f\"%%SR%{id(node)}%{time.time():.0f}\")\n        )\n        self._push_buffer(aperture_buffer.id_str)\n\n        super().on_sr(node)\n\n        self._pop_buffer()\n\n        buffer = self._get_buffer(aperture_buffer.id_str)\n\n        x_delta = node.open.x_delta\n        y_delta = node.open.y_delta\n\n        for x in range(node.open.x_repeats):\n            for y in range(node.open.y_repeats):\n                x_coordinate = self.coordinate_x + (x * x_delta)\n                y_coordinate = self.coordinate_y + (y * y_delta)\n                tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n                    buffer, Matrix3x3.new_translate(x=x_coordinate, y=y_coordinate)\n                )\n\n                self._expand_buffer_to_current_buffer(tmp_buffer)\n\n        self._del_buffer(aperture_buffer.id_str)\n        return node\n\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                node.diameter,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.diameter),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def _create_aperture_buffer(self, aperture_id: ApertureIdStr) -&gt; CommandBuffer:\n        buffer = CommandBuffer(\n            aperture_id,\n            box=None,\n            origin=Vector(x=0, y=0),\n            commands=[],\n            depends_on=set(),\n            resolved_dependencies=[],\n        )\n        self._set_buffer(buffer)\n\n        return buffer\n\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_rectangle(\n                (0.0, 0.0),\n                node.width,\n                node.height,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.width, node.height),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_obround(\n                (0.0, 0.0),\n                node.width,\n                node.height,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.width, node.height),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_polygon(\n                (0.0, 0.0),\n                node.outer_diameter,\n                node.vertices,\n                node.rotation or 0.0,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.outer_diameter),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        if node.params is None:\n            scope = {}\n        else:\n            scope = {f\"${i + 1}\": param for i, param in enumerate(node.params)}\n\n        macro = self.state.apertures.macros.get(node.name)\n        if macro is None:\n            raise MacroNotDefinedError(node.name)\n\n        macro.visit(MacroEvalVisitor(self, aperture_buffer, scope))\n        return node\n\n    def on_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        thickness = self._get_line_thickness(\n            Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                start_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_line(\n                start_point,\n                end_point,\n                thickness=thickness,\n                is_negative=self.is_negative,\n            ),\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                end_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n\n    def on_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n        self._on_draw_arc_mq(Shape.new_cw_arc)\n\n    def _on_draw_arc_mq(self, factory_method: _ArcFactory) -&gt; None:\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        center_x = start_x + self.coordinate_i\n        center_y = start_y + self.coordinate_j\n        center = (center_x, center_y)\n\n        thickness = self._get_line_thickness(\n            Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n        )\n\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                start_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n        if start_point == end_point:\n            length = Vector(x=self.coordinate_i, y=self.coordinate_j).length()\n            start_point = (center_x - length, center_y)\n            end_point = (center_x + length, center_y)\n\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    start_point,\n                    end_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    end_point,\n                    start_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n\n        else:\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    start_point,\n                    end_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                end_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n\n    def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode.\n        \"\"\"\n        self._on_draw_arc_mq(Shape.new_ccw_arc)\n\n    def on_start_region(self) -&gt; None:\n        \"\"\"Handle start of region.\"\"\"\n        super().on_start_region()\n        self._contour_buffer = []\n\n    def on_in_region_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        self._contour_buffer.append(Line.from_tuples(start_point, end_point))\n\n    def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n        within region statement.\n        \"\"\"\n        self._on_in_region_draw_arc_mq(is_clockwise=True)\n\n    def _on_in_region_draw_arc_mq(self, *, is_clockwise: bool) -&gt; None:\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        center_x = start_x + self.coordinate_i\n        center_y = start_y + self.coordinate_j\n        center = (center_x, center_y)\n\n        if start_point == end_point:\n            end_point = (center_x + self.coordinate_i, center_y + self.coordinate_j)\n\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    start_point,\n                    end_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    end_point,\n                    start_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n\n        else:\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    start_point,\n                    end_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n\n    def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode within region statement.\n        \"\"\"\n        self._on_in_region_draw_arc_mq(is_clockwise=False)\n\n    def on_flush_region(self) -&gt; None:\n        \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        if len(self._contour_buffer) &gt; 0:\n            self._append_shape_to_current_buffer(\n                Shape(commands=self._contour_buffer, is_negative=self.is_negative)\n            )\n\n        self._contour_buffer = []\n\n    def on_end_region(self) -&gt; None:\n        \"\"\"Handle end of region.\"\"\"\n        super().on_end_region()\n        self._contour_buffer = None\n\n    def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def _on_flash_aperture(self, aperture_id: ApertureIdStr) -&gt; None:\n        buffer = self._get_aperture_buffer(aperture_id)\n\n        self._append_paste_to_current_buffer(\n            PasteLayer(\n                source_layer_id=buffer.layer_id,\n                center=Vector(x=self.coordinate_x, y=self.coordinate_y),\n                is_negative=self.is_negative,\n            ),\n        )\n\n    def _get_aperture_buffer(self, aperture_id: str) -&gt; CommandBuffer:\n        transform = self.state.transform\n\n        mirroring_matrix = Matrix3x3.new_reflect(**transform.mirroring.kwargs)\n        rotation_matrix = Matrix3x3.new_rotate(transform.rotation)\n        scale_matrix = Matrix3x3.new_scale(transform.scaling, transform.scaling)\n\n        transform_matrix = mirroring_matrix @ rotation_matrix @ scale_matrix\n\n        return self._get_buffer_with_transform(aperture_id, transform_matrix)\n\n    def _get_buffer_with_transform(\n        self, aperture_id: str, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        layer_id = f\"{aperture_id}%{transform_matrix.tag}\"\n        buffer = self._get_buffer_opt(layer_id)\n\n        if buffer is None:\n            aperture_base_buffer = self._get_buffer(aperture_id)\n            buffer = self._apply_transform_to_buffer(\n                aperture_base_buffer, layer_id, transform_matrix\n            )\n            assert buffer.id_str == layer_id\n            self._set_buffer(buffer)\n\n        return buffer\n\n    def _apply_transform_to_buffer(\n        self, buffer: CommandBuffer, layer_id: str, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        commands: list[DrawCmdT] = []\n        depends_on: set[str] = set()\n\n        for cmd in buffer.commands:\n            if isinstance(cmd, Shape):\n                commands.append(cmd.transform(transform_matrix))\n\n            elif isinstance(cmd, PasteLayer):\n                aperture_buffer = self._get_aperture_buffer(cmd.source_layer_id.id)\n                depends_on.add(aperture_buffer.id_str)\n                commands.append(\n                    PasteLayer(\n                        source_layer_id=LayerID(id=aperture_buffer.id_str),\n                        center=cmd.center.transform(transform_matrix),\n                        is_negative=cmd.is_negative,\n                    )\n                )\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return CommandBuffer(\n            layer_id,\n            None,\n            origin=buffer.origin,\n            commands=commands,\n            depends_on=depends_on,\n            resolved_dependencies=[],\n        )\n\n    def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_block(self, node: D03, aperture: AB) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n        aperture_id = aperture.open.aperture_id\n        buffer = self._get_aperture_buffer(aperture_id)\n        tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n            buffer, Matrix3x3.new_translate(x=self.coordinate_x, y=self.coordinate_y)\n        )\n\n        self._expand_buffer_to_current_buffer(tmp_buffer)\n\n    def _apply_transform_to_buffer_non_recursive_tmp(\n        self, buffer: CommandBuffer, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        commands: list[DrawCmdT] = []\n        depends_on: set[str] = set()\n\n        for cmd in buffer.commands:\n            if isinstance(cmd, Shape):\n                commands.append(cmd.transform(transform_matrix))\n\n            elif isinstance(cmd, PasteLayer):\n                depends_on.add(cmd.source_layer_id.id)\n                commands.append(\n                    PasteLayer(\n                        source_layer_id=cmd.source_layer_id,\n                        center=cmd.center.transform(transform_matrix),\n                        is_negative=cmd.is_negative,\n                    )\n                )\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return CommandBuffer(\n            \"%temporary%\",\n            None,\n            origin=buffer.origin,\n            commands=commands,\n            depends_on=depends_on,\n            resolved_dependencies=[],\n        )\n\n    def _resolve_buffer_submit_order(self) -&gt; list[CommandBuffer]:\n        buffer_submit_order: list[str] = []\n\n        def _(buffer: CommandBuffer) -&gt; None:\n            for dependency_id in buffer.depends_on:\n                dependency = self._get_buffer(dependency_id)\n                _(dependency)\n\n                if buffer.id_str in buffer_submit_order:\n                    raise CyclicBufferDependencyError(buffer, dependency)\n\n            buffer_submit_order.append(buffer.id_str)\n\n        _(self._get_buffer(self.MAIN_BUFFER_ID))\n\n        return [self._get_buffer(id_) for id_ in buffer_submit_order]\n\n    def _convert_buffers_to_rvmc(self) -&gt; RVMC:\n        commands: list[Command] = []\n        buffer_submit_order = self._resolve_buffer_submit_order()\n\n        for buffer in buffer_submit_order:\n            commands.append(StartLayer(id=LayerID(id=buffer.id_str), box=buffer.box))\n            commands.extend(buffer.commands)\n            commands.append(EndLayer())\n\n        return RVMC(commands=commands)\n\n    def compile(self, ast: File) -&gt; RVMC:\n        \"\"\"Compile Gerber AST to RVMC.\"\"\"\n        ast.visit(self)\n\n        return self._convert_buffers_to_rvmc()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` node.\"\"\"\n    aperture_buffer = self._create_aperture_buffer(node.open.aperture_id)\n    self._push_buffer(aperture_buffer.id_str)\n\n    super().on_ab(node)\n\n    self._pop_buffer()\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` node.\"\"\"\n    aperture_buffer = self._create_aperture_buffer(\n        ApertureIdStr(f\"%%SR%{id(node)}%{time.time():.0f}\")\n    )\n    self._push_buffer(aperture_buffer.id_str)\n\n    super().on_sr(node)\n\n    self._pop_buffer()\n\n    buffer = self._get_buffer(aperture_buffer.id_str)\n\n    x_delta = node.open.x_delta\n    y_delta = node.open.y_delta\n\n    for x in range(node.open.x_repeats):\n        for y in range(node.open.y_repeats):\n            x_coordinate = self.coordinate_x + (x * x_delta)\n            y_coordinate = self.coordinate_y + (y * y_delta)\n            tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n                buffer, Matrix3x3.new_translate(x=x_coordinate, y=y_coordinate)\n            )\n\n            self._expand_buffer_to_current_buffer(tmp_buffer)\n\n    self._del_buffer(aperture_buffer.id_str)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_circle(\n            (0.0, 0.0),\n            node.diameter,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.diameter),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_rectangle(\n            (0.0, 0.0),\n            node.width,\n            node.height,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.width, node.height),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_obround(\n            (0.0, 0.0),\n            node.width,\n            node.height,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.width, node.height),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_polygon(\n            (0.0, 0.0),\n            node.outer_diameter,\n            node.vertices,\n            node.rotation or 0.0,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.outer_diameter),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    if node.params is None:\n        scope = {}\n    else:\n        scope = {f\"${i + 1}\": param for i, param in enumerate(node.params)}\n\n    macro = self.state.apertures.macros.get(node.name)\n    if macro is None:\n        raise MacroNotDefinedError(node.name)\n\n    macro.visit(MacroEvalVisitor(self, aperture_buffer, scope))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n    start_x = self.state.current_x\n    start_y = self.state.current_y\n    start_point = (start_x, start_y)\n\n    end_x = self.coordinate_x\n    end_y = self.coordinate_y\n    end_point = (end_x, end_y)\n\n    thickness = self._get_line_thickness(\n        Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_circle(\n            start_point,\n            thickness,\n            is_negative=self.is_negative,\n        )\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_line(\n            start_point,\n            end_point,\n            thickness=thickness,\n            is_negative=self.is_negative,\n        ),\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_circle(\n            end_point,\n            thickness,\n            is_negative=self.is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n    self._on_draw_arc_mq(Shape.new_cw_arc)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode.\n    \"\"\"\n    self._on_draw_arc_mq(Shape.new_ccw_arc)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_start_region(self) -&gt; None:\n    \"\"\"Handle start of region.\"\"\"\n    super().on_start_region()\n    self._contour_buffer = []\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n    if self._contour_buffer is None:\n        raise ContourBufferNotSetError\n\n    start_x = self.state.current_x\n    start_y = self.state.current_y\n    start_point = (start_x, start_y)\n\n    end_x = self.coordinate_x\n    end_y = self.coordinate_y\n    end_point = (end_x, end_y)\n\n    self._contour_buffer.append(Line.from_tuples(start_point, end_point))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n    within region statement.\n    \"\"\"\n    self._on_in_region_draw_arc_mq(is_clockwise=True)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode within region statement.\n    \"\"\"\n    self._on_in_region_draw_arc_mq(is_clockwise=False)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flush_region(self) -&gt; None:\n    \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n    if self._contour_buffer is None:\n        raise ContourBufferNotSetError\n\n    if len(self._contour_buffer) &gt; 0:\n        self._append_shape_to_current_buffer(\n            Shape(commands=self._contour_buffer, is_negative=self.is_negative)\n        )\n\n    self._contour_buffer = []\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_end_region(self) -&gt; None:\n    \"\"\"Handle end of region.\"\"\"\n    super().on_end_region()\n    self._contour_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_block(self, node: D03, aperture: AB) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n    aperture_id = aperture.open.aperture_id\n    buffer = self._get_aperture_buffer(aperture_id)\n    tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n        buffer, Matrix3x3.new_translate(x=self.coordinate_x, y=self.coordinate_y)\n    )\n\n    self._expand_buffer_to_current_buffer(tmp_buffer)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.Compiler.compile","title":"compile","text":"<pre><code>compile(ast: File) -&gt; RVMC\n</code></pre> <p>Compile Gerber AST to RVMC.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def compile(self, ast: File) -&gt; RVMC:\n    \"\"\"Compile Gerber AST to RVMC.\"\"\"\n    ast.visit(self)\n\n    return self._convert_buffers_to_rvmc()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.CompilerError","title":"CompilerError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by Compiler class.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class CompilerError(Exception):\n    \"\"\"Base class for all exceptions raised by Compiler class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.CyclicBufferDependencyError","title":"CyclicBufferDependencyError","text":"<p>             Bases: <code>CompilerError</code></p> <p>Raised when cyclic dependency between buffers is detected.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class CyclicBufferDependencyError(CompilerError):\n    \"\"\"Raised when cyclic dependency between buffers is detected.\"\"\"\n\n    def __init__(\n        self, parent_buffer: CommandBuffer, child_buffer: CommandBuffer\n    ) -&gt; None:\n        super().__init__(\n            f\"Cyclic dependency between buffers {parent_buffer.id_str} and \"\n            f\"{child_buffer.id_str} detected. Cyclic dependencies are not allowed.\"\n        )\n        self.parent_buffer = parent_buffer\n        self.child_buffer = child_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/__init__.html#pygerber.gerberx3.compiler.compile","title":"compile","text":"<pre><code>compile(ast: Any, **options: Any) -&gt; RVMC\n</code></pre> <p>Compile GerberX3 AST to RVMC code.</p> Source code in <code>src/pygerber/gerberx3/compiler/__init__.py</code> <pre><code>def compile(ast: Any, **options: Any) -&gt; RVMC:  # noqa: A001\n    \"\"\"Compile GerberX3 AST to RVMC code.\"\"\"\n    return Compiler(**options).compile(ast)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html","title":"compiler","text":""},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler","title":"compiler","text":"<p><code>pygerber.gerberx3.compiler.compiler</code> module contains implementation of compiler for transforming Gerber (AST) to PyGerber rendering VM commands (RVMC).</p>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.CommandBuffer","title":"CommandBuffer","text":"<p>Container for commands and metadata about relations with other containers.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>class CommandBuffer:\n    \"\"\"Container for commands and metadata about relations with other containers.\"\"\"\n\n    def __init__(\n        self,\n        id_: str,\n        box: Optional[Box],\n        origin: Vector,\n        commands: list[DrawCmdT],\n        depends_on: set[str],\n        resolved_dependencies: list[CommandBuffer],\n    ) -&gt; None:\n        self.id_str = id_\n        self.commands = commands\n        self.box = box\n        self.origin = origin\n        self.depends_on = depends_on\n        self.resolved_dependencies = resolved_dependencies\n\n    @property\n    def layer_id(self) -&gt; LayerID:\n        \"\"\"Get layer id.\"\"\"\n        return LayerID(id=self.id_str)\n\n    def append_shape(self, command: Shape) -&gt; None:\n        \"\"\"Append command to buffer.\"\"\"\n        self.commands.append(command)\n\n    def append_paste(self, command: PasteLayer) -&gt; None:\n        \"\"\"Append command to buffer.\"\"\"\n        self.depends_on.add(command.source_layer_id.id)\n        self.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.CommandBuffer.layer_id","title":"layer_id  <code>property</code>","text":"<pre><code>layer_id: LayerID\n</code></pre> <p>Get layer id.</p>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.CommandBuffer.append_shape","title":"append_shape","text":"<pre><code>append_shape(command: Shape) -&gt; None\n</code></pre> <p>Append command to buffer.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def append_shape(self, command: Shape) -&gt; None:\n    \"\"\"Append command to buffer.\"\"\"\n    self.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.CommandBuffer.append_paste","title":"append_paste","text":"<pre><code>append_paste(command: PasteLayer) -&gt; None\n</code></pre> <p>Append command to buffer.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def append_paste(self, command: PasteLayer) -&gt; None:\n    \"\"\"Append command to buffer.\"\"\"\n    self.depends_on.add(command.source_layer_id.id)\n    self.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler","title":"Compiler","text":"<p>             Bases: <code>StateTrackingVisitor</code></p> <p>Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM commands (RVMC).</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>class Compiler(StateTrackingVisitor):\n    \"\"\"Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM\n    commands (RVMC).\n    \"\"\"\n\n    MAIN_BUFFER_ID: ClassVar[str] = \"%main%\"\n\n    def __init__(self, *, ignore_program_stop: bool = False) -&gt; None:\n        super().__init__(ignore_program_stop=ignore_program_stop)\n        self._buffers: dict[str, CommandBuffer] = {}\n        self._buffer_stack: list[str] = []\n        self._contour_buffer: Optional[list[ShapeSegment]] = []\n        self._create_main_buffer()\n\n    def _set_buffer(self, buffer: CommandBuffer) -&gt; None:\n        \"\"\"Register buffer.\"\"\"\n        self._buffers[buffer.id_str] = buffer\n\n    def _get_buffer(self, id_: str) -&gt; CommandBuffer:\n        \"\"\"Get buffer by id.\"\"\"\n        return self._buffers[id_]\n\n    def _del_buffer(self, id_: str) -&gt; None:\n        \"\"\"Delete buffer by id.\"\"\"\n        del self._buffers[id_]\n\n    def _get_buffer_opt(self, id_: str) -&gt; Optional[CommandBuffer]:\n        \"\"\"Get buffer by id.\"\"\"\n        return self._buffers.get(id_)\n\n    def _get_current_buffer(self) -&gt; CommandBuffer:\n        return self._get_buffer(self._buffer_stack[-1])\n\n    def _append_shape_to_current_buffer(self, command: Shape) -&gt; None:\n        self._get_current_buffer().append_shape(command)\n\n    def _append_paste_to_current_buffer(self, command: PasteLayer) -&gt; None:\n        self._get_current_buffer().append_paste(command)\n\n    def _expand_buffer_to_current_buffer(self, buffer: CommandBuffer) -&gt; None:\n        for command in buffer.commands:\n            if isinstance(command, Shape):\n                self._append_shape_to_current_buffer(command)\n            elif isinstance(command, PasteLayer):\n                self._append_paste_to_current_buffer(command)\n            else:\n                raise NotImplementedError(type(command))\n\n    def _create_main_buffer(self) -&gt; CommandBuffer:\n        buffer = CommandBuffer(\n            self.MAIN_BUFFER_ID,\n            box=None,\n            origin=Vector(x=0, y=0),\n            commands=[],\n            depends_on=set(),\n            resolved_dependencies=[],\n        )\n        assert self.MAIN_BUFFER_ID not in self._buffers\n        self._set_buffer(buffer)\n        self._push_buffer(self.MAIN_BUFFER_ID)\n\n        return buffer\n\n    def _push_buffer(self, id_: str) -&gt; None:\n        self._buffer_stack.append(id_)\n\n    def _pop_buffer(self) -&gt; None:\n        self._buffer_stack.pop()\n\n    def _get_line_thickness(self, line_direction: Vector) -&gt; float:\n        current_aperture = self.state.current_aperture\n        if isinstance(current_aperture, ADC):\n            return current_aperture.diameter\n\n        if isinstance(current_aperture, (ADR, ADO)):\n            angle = line_direction.angle_between(Vector.unit.x)\n            sin_angle = sin(radians(-angle))\n            cos_angle = cos(radians(-angle))\n\n            return Vector(\n                x=current_aperture.width * cos_angle,\n                y=current_aperture.height * sin_angle,\n            ).length()\n\n        if isinstance(current_aperture, ADP):\n            return current_aperture.outer_diameter\n\n        raise NotImplementedError(type(current_aperture))\n\n    def on_ab(self, node: AB) -&gt; AB:\n        \"\"\"Handle `AB` node.\"\"\"\n        aperture_buffer = self._create_aperture_buffer(node.open.aperture_id)\n        self._push_buffer(aperture_buffer.id_str)\n\n        super().on_ab(node)\n\n        self._pop_buffer()\n\n        return node\n\n    def on_sr(self, node: SR) -&gt; SR:\n        \"\"\"Handle `SR` node.\"\"\"\n        aperture_buffer = self._create_aperture_buffer(\n            ApertureIdStr(f\"%%SR%{id(node)}%{time.time():.0f}\")\n        )\n        self._push_buffer(aperture_buffer.id_str)\n\n        super().on_sr(node)\n\n        self._pop_buffer()\n\n        buffer = self._get_buffer(aperture_buffer.id_str)\n\n        x_delta = node.open.x_delta\n        y_delta = node.open.y_delta\n\n        for x in range(node.open.x_repeats):\n            for y in range(node.open.y_repeats):\n                x_coordinate = self.coordinate_x + (x * x_delta)\n                y_coordinate = self.coordinate_y + (y * y_delta)\n                tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n                    buffer, Matrix3x3.new_translate(x=x_coordinate, y=y_coordinate)\n                )\n\n                self._expand_buffer_to_current_buffer(tmp_buffer)\n\n        self._del_buffer(aperture_buffer.id_str)\n        return node\n\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                node.diameter,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.diameter),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def _create_aperture_buffer(self, aperture_id: ApertureIdStr) -&gt; CommandBuffer:\n        buffer = CommandBuffer(\n            aperture_id,\n            box=None,\n            origin=Vector(x=0, y=0),\n            commands=[],\n            depends_on=set(),\n            resolved_dependencies=[],\n        )\n        self._set_buffer(buffer)\n\n        return buffer\n\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_rectangle(\n                (0.0, 0.0),\n                node.width,\n                node.height,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.width, node.height),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_obround(\n                (0.0, 0.0),\n                node.width,\n                node.height,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.width, node.height),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        aperture_buffer.append_shape(\n            Shape.new_polygon(\n                (0.0, 0.0),\n                node.outer_diameter,\n                node.vertices,\n                node.rotation or 0.0,\n                is_negative=False,\n            )\n        )\n        if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n            aperture_buffer.append_shape(\n                Shape.new_circle(\n                    (0.0, 0.0),\n                    min(node.hole_diameter, node.outer_diameter),\n                    is_negative=True,\n                )\n            )\n        return node\n\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        self.on_ad(node)\n        aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n        if node.params is None:\n            scope = {}\n        else:\n            scope = {f\"${i + 1}\": param for i, param in enumerate(node.params)}\n\n        macro = self.state.apertures.macros.get(node.name)\n        if macro is None:\n            raise MacroNotDefinedError(node.name)\n\n        macro.visit(MacroEvalVisitor(self, aperture_buffer, scope))\n        return node\n\n    def on_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        thickness = self._get_line_thickness(\n            Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                start_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_line(\n                start_point,\n                end_point,\n                thickness=thickness,\n                is_negative=self.is_negative,\n            ),\n        )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                end_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n\n    def on_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n        self._on_draw_arc_mq(Shape.new_cw_arc)\n\n    def _on_draw_arc_mq(self, factory_method: _ArcFactory) -&gt; None:\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        center_x = start_x + self.coordinate_i\n        center_y = start_y + self.coordinate_j\n        center = (center_x, center_y)\n\n        thickness = self._get_line_thickness(\n            Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n        )\n\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                start_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n        if start_point == end_point:\n            length = Vector(x=self.coordinate_i, y=self.coordinate_j).length()\n            start_point = (center_x - length, center_y)\n            end_point = (center_x + length, center_y)\n\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    start_point,\n                    end_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    end_point,\n                    start_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n\n        else:\n            self._append_shape_to_current_buffer(\n                factory_method(\n                    start_point,\n                    end_point,\n                    center,\n                    thickness,\n                    is_negative=self.is_negative,\n                )\n            )\n        self._append_shape_to_current_buffer(\n            Shape.new_circle(\n                end_point,\n                thickness,\n                is_negative=self.is_negative,\n            )\n        )\n\n    def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode.\n        \"\"\"\n        self._on_draw_arc_mq(Shape.new_ccw_arc)\n\n    def on_start_region(self) -&gt; None:\n        \"\"\"Handle start of region.\"\"\"\n        super().on_start_region()\n        self._contour_buffer = []\n\n    def on_in_region_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        self._contour_buffer.append(Line.from_tuples(start_point, end_point))\n\n    def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n        within region statement.\n        \"\"\"\n        self._on_in_region_draw_arc_mq(is_clockwise=True)\n\n    def _on_in_region_draw_arc_mq(self, *, is_clockwise: bool) -&gt; None:\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        start_x = self.state.current_x\n        start_y = self.state.current_y\n        start_point = (start_x, start_y)\n\n        end_x = self.coordinate_x\n        end_y = self.coordinate_y\n        end_point = (end_x, end_y)\n\n        center_x = start_x + self.coordinate_i\n        center_y = start_y + self.coordinate_j\n        center = (center_x, center_y)\n\n        if start_point == end_point:\n            end_point = (center_x + self.coordinate_i, center_y + self.coordinate_j)\n\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    start_point,\n                    end_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    end_point,\n                    start_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n\n        else:\n            self._contour_buffer.append(\n                Arc.from_tuples(\n                    start_point,\n                    end_point,\n                    center,\n                    clockwise=is_clockwise,\n                )\n            )\n\n    def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n        mode within region statement.\n        \"\"\"\n        self._on_in_region_draw_arc_mq(is_clockwise=False)\n\n    def on_flush_region(self) -&gt; None:\n        \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n        if self._contour_buffer is None:\n            raise ContourBufferNotSetError\n\n        if len(self._contour_buffer) &gt; 0:\n            self._append_shape_to_current_buffer(\n                Shape(commands=self._contour_buffer, is_negative=self.is_negative)\n            )\n\n        self._contour_buffer = []\n\n    def on_end_region(self) -&gt; None:\n        \"\"\"Handle end of region.\"\"\"\n        super().on_end_region()\n        self._contour_buffer = None\n\n    def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def _on_flash_aperture(self, aperture_id: ApertureIdStr) -&gt; None:\n        buffer = self._get_aperture_buffer(aperture_id)\n\n        self._append_paste_to_current_buffer(\n            PasteLayer(\n                source_layer_id=buffer.layer_id,\n                center=Vector(x=self.coordinate_x, y=self.coordinate_y),\n                is_negative=self.is_negative,\n            ),\n        )\n\n    def _get_aperture_buffer(self, aperture_id: str) -&gt; CommandBuffer:\n        transform = self.state.transform\n\n        mirroring_matrix = Matrix3x3.new_reflect(**transform.mirroring.kwargs)\n        rotation_matrix = Matrix3x3.new_rotate(transform.rotation)\n        scale_matrix = Matrix3x3.new_scale(transform.scaling, transform.scaling)\n\n        transform_matrix = mirroring_matrix @ rotation_matrix @ scale_matrix\n\n        return self._get_buffer_with_transform(aperture_id, transform_matrix)\n\n    def _get_buffer_with_transform(\n        self, aperture_id: str, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        layer_id = f\"{aperture_id}%{transform_matrix.tag}\"\n        buffer = self._get_buffer_opt(layer_id)\n\n        if buffer is None:\n            aperture_base_buffer = self._get_buffer(aperture_id)\n            buffer = self._apply_transform_to_buffer(\n                aperture_base_buffer, layer_id, transform_matrix\n            )\n            assert buffer.id_str == layer_id\n            self._set_buffer(buffer)\n\n        return buffer\n\n    def _apply_transform_to_buffer(\n        self, buffer: CommandBuffer, layer_id: str, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        commands: list[DrawCmdT] = []\n        depends_on: set[str] = set()\n\n        for cmd in buffer.commands:\n            if isinstance(cmd, Shape):\n                commands.append(cmd.transform(transform_matrix))\n\n            elif isinstance(cmd, PasteLayer):\n                aperture_buffer = self._get_aperture_buffer(cmd.source_layer_id.id)\n                depends_on.add(aperture_buffer.id_str)\n                commands.append(\n                    PasteLayer(\n                        source_layer_id=LayerID(id=aperture_buffer.id_str),\n                        center=cmd.center.transform(transform_matrix),\n                        is_negative=cmd.is_negative,\n                    )\n                )\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return CommandBuffer(\n            layer_id,\n            None,\n            origin=buffer.origin,\n            commands=commands,\n            depends_on=depends_on,\n            resolved_dependencies=[],\n        )\n\n    def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n        self._on_flash_aperture(aperture.aperture_id)\n\n    def on_flash_block(self, node: D03, aperture: AB) -&gt; None:  # noqa: ARG002\n        \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n        aperture_id = aperture.open.aperture_id\n        buffer = self._get_aperture_buffer(aperture_id)\n        tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n            buffer, Matrix3x3.new_translate(x=self.coordinate_x, y=self.coordinate_y)\n        )\n\n        self._expand_buffer_to_current_buffer(tmp_buffer)\n\n    def _apply_transform_to_buffer_non_recursive_tmp(\n        self, buffer: CommandBuffer, transform_matrix: Matrix3x3\n    ) -&gt; CommandBuffer:\n        commands: list[DrawCmdT] = []\n        depends_on: set[str] = set()\n\n        for cmd in buffer.commands:\n            if isinstance(cmd, Shape):\n                commands.append(cmd.transform(transform_matrix))\n\n            elif isinstance(cmd, PasteLayer):\n                depends_on.add(cmd.source_layer_id.id)\n                commands.append(\n                    PasteLayer(\n                        source_layer_id=cmd.source_layer_id,\n                        center=cmd.center.transform(transform_matrix),\n                        is_negative=cmd.is_negative,\n                    )\n                )\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return CommandBuffer(\n            \"%temporary%\",\n            None,\n            origin=buffer.origin,\n            commands=commands,\n            depends_on=depends_on,\n            resolved_dependencies=[],\n        )\n\n    def _resolve_buffer_submit_order(self) -&gt; list[CommandBuffer]:\n        buffer_submit_order: list[str] = []\n\n        def _(buffer: CommandBuffer) -&gt; None:\n            for dependency_id in buffer.depends_on:\n                dependency = self._get_buffer(dependency_id)\n                _(dependency)\n\n                if buffer.id_str in buffer_submit_order:\n                    raise CyclicBufferDependencyError(buffer, dependency)\n\n            buffer_submit_order.append(buffer.id_str)\n\n        _(self._get_buffer(self.MAIN_BUFFER_ID))\n\n        return [self._get_buffer(id_) for id_ in buffer_submit_order]\n\n    def _convert_buffers_to_rvmc(self) -&gt; RVMC:\n        commands: list[Command] = []\n        buffer_submit_order = self._resolve_buffer_submit_order()\n\n        for buffer in buffer_submit_order:\n            commands.append(StartLayer(id=LayerID(id=buffer.id_str), box=buffer.box))\n            commands.extend(buffer.commands)\n            commands.append(EndLayer())\n\n        return RVMC(commands=commands)\n\n    def compile(self, ast: File) -&gt; RVMC:\n        \"\"\"Compile Gerber AST to RVMC.\"\"\"\n        ast.visit(self)\n\n        return self._convert_buffers_to_rvmc()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ab(self, node: AB) -&gt; AB:\n    \"\"\"Handle `AB` node.\"\"\"\n    aperture_buffer = self._create_aperture_buffer(node.open.aperture_id)\n    self._push_buffer(aperture_buffer.id_str)\n\n    super().on_ab(node)\n\n    self._pop_buffer()\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_sr(self, node: SR) -&gt; SR:\n    \"\"\"Handle `SR` node.\"\"\"\n    aperture_buffer = self._create_aperture_buffer(\n        ApertureIdStr(f\"%%SR%{id(node)}%{time.time():.0f}\")\n    )\n    self._push_buffer(aperture_buffer.id_str)\n\n    super().on_sr(node)\n\n    self._pop_buffer()\n\n    buffer = self._get_buffer(aperture_buffer.id_str)\n\n    x_delta = node.open.x_delta\n    y_delta = node.open.y_delta\n\n    for x in range(node.open.x_repeats):\n        for y in range(node.open.y_repeats):\n            x_coordinate = self.coordinate_x + (x * x_delta)\n            y_coordinate = self.coordinate_y + (y * y_delta)\n            tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n                buffer, Matrix3x3.new_translate(x=x_coordinate, y=y_coordinate)\n            )\n\n            self._expand_buffer_to_current_buffer(tmp_buffer)\n\n    self._del_buffer(aperture_buffer.id_str)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_circle(\n            (0.0, 0.0),\n            node.diameter,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.diameter),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_rectangle(\n            (0.0, 0.0),\n            node.width,\n            node.height,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.width, node.height),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_obround(\n            (0.0, 0.0),\n            node.width,\n            node.height,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.width, node.height),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    aperture_buffer.append_shape(\n        Shape.new_polygon(\n            (0.0, 0.0),\n            node.outer_diameter,\n            node.vertices,\n            node.rotation or 0.0,\n            is_negative=False,\n        )\n    )\n    if node.hole_diameter is not None and node.hole_diameter &gt; 0:\n        aperture_buffer.append_shape(\n            Shape.new_circle(\n                (0.0, 0.0),\n                min(node.hole_diameter, node.outer_diameter),\n                is_negative=True,\n            )\n        )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    self.on_ad(node)\n    aperture_buffer = self._create_aperture_buffer(node.aperture_id)\n\n    if node.params is None:\n        scope = {}\n    else:\n        scope = {f\"${i + 1}\": param for i, param in enumerate(node.params)}\n\n    macro = self.state.apertures.macros.get(node.name)\n    if macro is None:\n        raise MacroNotDefinedError(node.name)\n\n    macro.visit(MacroEvalVisitor(self, aperture_buffer, scope))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in linear interpolation mode.\"\"\"\n    start_x = self.state.current_x\n    start_y = self.state.current_y\n    start_point = (start_x, start_y)\n\n    end_x = self.coordinate_x\n    end_y = self.coordinate_y\n    end_point = (end_x, end_y)\n\n    thickness = self._get_line_thickness(\n        Vector.from_tuple((self.coordinate_x, self.coordinate_y))\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_circle(\n            start_point,\n            thickness,\n            is_negative=self.is_negative,\n        )\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_line(\n            start_point,\n            end_point,\n            thickness=thickness,\n            is_negative=self.is_negative,\n        ),\n    )\n    self._append_shape_to_current_buffer(\n        Shape.new_circle(\n            end_point,\n            thickness,\n            is_negative=self.is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode.\"\"\"\n    self._on_draw_arc_mq(Shape.new_cw_arc)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode.\n    \"\"\"\n    self._on_draw_arc_mq(Shape.new_ccw_arc)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_start_region(self) -&gt; None:\n    \"\"\"Handle start of region.\"\"\"\n    super().on_start_region()\n    self._contour_buffer = []\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_line(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in linear interpolation mode in region.\"\"\"\n    if self._contour_buffer is None:\n        raise ContourBufferNotSetError\n\n    start_x = self.state.current_x\n    start_y = self.state.current_y\n    start_point = (start_x, start_y)\n\n    end_x = self.coordinate_x\n    end_y = self.coordinate_y\n    end_point = (end_x, end_y)\n\n    self._contour_buffer.append(Line.from_tuples(start_point, end_point))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_cw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in clockwise circular interpolation multi quadrant mode\n    within region statement.\n    \"\"\"\n    self._on_in_region_draw_arc_mq(is_clockwise=True)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_in_region_draw_ccw_arc_mq(self, node: D01) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D01` node in counter-clockwise circular interpolation multi quadrant\n    mode within region statement.\n    \"\"\"\n    self._on_in_region_draw_arc_mq(is_clockwise=False)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flush_region(self) -&gt; None:\n    \"\"\"Handle flush region after D02 command or after G37.\"\"\"\n    if self._contour_buffer is None:\n        raise ContourBufferNotSetError\n\n    if len(self._contour_buffer) &gt; 0:\n        self._append_shape_to_current_buffer(\n            Shape(commands=self._contour_buffer, is_negative=self.is_negative)\n        )\n\n    self._contour_buffer = []\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_end_region(self) -&gt; None:\n    \"\"\"Handle end of region.\"\"\"\n    super().on_end_region()\n    self._contour_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_circle(self, node: D03, aperture: ADC) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_rectangle(self, node: D03, aperture: ADR) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADC` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_obround(self, node: D03, aperture: ADO) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADO` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_polygon(self, node: D03, aperture: ADP) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADP` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_macro(self, node: D03, aperture: ADmacro) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `ADM` aperture.\"\"\"\n    self._on_flash_aperture(aperture.aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_flash_block(self, node: D03, aperture: AB) -&gt; None:  # noqa: ARG002\n    \"\"\"Handle `D03` node with `AB` aperture.\"\"\"\n    aperture_id = aperture.open.aperture_id\n    buffer = self._get_aperture_buffer(aperture_id)\n    tmp_buffer = self._apply_transform_to_buffer_non_recursive_tmp(\n        buffer, Matrix3x3.new_translate(x=self.coordinate_x, y=self.coordinate_y)\n    )\n\n    self._expand_buffer_to_current_buffer(tmp_buffer)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.Compiler.compile","title":"compile","text":"<pre><code>compile(ast: File) -&gt; RVMC\n</code></pre> <p>Compile Gerber AST to RVMC.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def compile(self, ast: File) -&gt; RVMC:\n    \"\"\"Compile Gerber AST to RVMC.\"\"\"\n    ast.visit(self)\n\n    return self._convert_buffers_to_rvmc()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor","title":"MacroEvalVisitor","text":"<p>             Bases: <code>AstVisitor</code></p> <p>Visitor for evaluating macro primitives.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>class MacroEvalVisitor(AstVisitor):\n    \"\"\"Visitor for evaluating macro primitives.\"\"\"\n\n    def __init__(\n        self,\n        compiler: Compiler,\n        aperture_buffer: CommandBuffer,\n        scope: dict[str, Double],\n    ) -&gt; None:\n        self._compiler = compiler\n        self._aperture_buffer = aperture_buffer\n        self._scope = scope\n        self._expression_eval = ExpressionEvalVisitor(self._scope)\n\n    def _eval(self, node: Expression) -&gt; float:\n        return self._expression_eval.evaluate(node)\n\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        \"\"\"Handle `Code1` node.\"\"\"\n        exposure = self._eval(node.exposure)\n        diameter = self._eval(node.diameter)\n        center_x = self._eval(node.center_x)\n        center_y = self._eval(node.center_y)\n        rotation = self._eval(node.rotation) if node.rotation is not None else None\n\n        shape = Shape.new_circle(\n            (center_x, center_y),\n            diameter,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n        return node\n\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        \"\"\"Handle `Code2` node.\"\"\"\n        self._on_vector_line(node)\n        return node\n\n    def _on_vector_line(self, node: Code2 | Code20) -&gt; None:\n        exposure = self._eval(node.exposure)\n        width = self._eval(node.width)\n        start = (self._eval(node.start_x), self._eval(node.start_y))\n        end = (self._eval(node.end_x), self._eval(node.end_y))\n        rotation = self._eval(node.rotation)\n\n        shape = Shape.new_line(\n            start,\n            end,\n            thickness=width,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n\n    def on_code_4(self, node: Code4) -&gt; Code4:\n        \"\"\"Handle `Code4` node.\"\"\"\n        exposure = self._eval(node.exposure)\n        start = (self._eval(node.start_x), self._eval(node.start_y))\n        points = [(self._eval(point.x), self._eval(point.y)) for point in node.points]\n        rotation = self._eval(node.rotation)\n\n        shape = Shape.new_connected_points(\n            start,\n            *points,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n        return node\n\n    def on_code_5(self, node: Code5) -&gt; Code5:\n        \"\"\"Handle `Code5` node.\"\"\"\n        exposure = self._eval(node.exposure)\n        number_of_vertices = int(self._eval(node.number_of_vertices))\n        center_x = self._eval(node.center_x)\n        center_y = self._eval(node.center_y)\n        diameter = self._eval(node.diameter)\n        rotation = self._eval(node.rotation)\n\n        shape = Shape.new_polygon(\n            (center_x, center_y),\n            diameter,\n            number_of_vertices,\n            rotation,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n        return node\n\n    def on_code_6(self, node: Code6) -&gt; Code6:\n        \"\"\"Handle `Code6` node.\"\"\"\n        center_x = self._eval(node.center_x)\n        center_y = self._eval(node.center_y)\n        outer_diameter = self._eval(node.outer_diameter)\n        ring_thickness = self._eval(node.ring_thickness)\n        gap_between_rings = self._eval(node.gap_between_rings)\n        max_ring_count = self._eval(node.max_ring_count)\n        crosshair_thickness = self._eval(node.crosshair_thickness)\n        crosshair_length = self._eval(node.crosshair_length)\n        rotation = self._eval(node.rotation)\n\n        center = (center_x, center_y)\n\n        shapes: list[Shape] = []\n        half_crosshair_length = crosshair_length / 2\n\n        if crosshair_length &gt; 0 and crosshair_thickness &gt; 0:\n            shapes.append(\n                Shape.new_line(\n                    (center_x, center_y - half_crosshair_length),\n                    (center_x, center_y + half_crosshair_length),\n                    crosshair_thickness,\n                    is_negative=False,\n                )\n            )\n            shapes.append(\n                Shape.new_line(\n                    (center_x - half_crosshair_length, center_y),\n                    (center_x + half_crosshair_length, center_y),\n                    crosshair_thickness,\n                    is_negative=False,\n                )\n            )\n\n        if ring_thickness &gt; 0 and outer_diameter &gt; 0 and max_ring_count &gt; 0:\n            diameter_delta = (gap_between_rings * 2) + (ring_thickness * 2)\n\n            current_outer_diameter = outer_diameter\n            # Diameter is reduced from both sides, hence ring_thickness * 2.\n            current_inner_diameter = outer_diameter - (ring_thickness * 2)\n\n            for _ in range(int(max_ring_count)):\n                if current_outer_diameter &lt;= ring_thickness:\n                    shapes.append(\n                        Shape.new_circle(\n                            center, current_outer_diameter, is_negative=False\n                        )\n                    )\n                    break\n\n                shapes.extend(\n                    Shape.new_ring(\n                        center,\n                        current_outer_diameter,\n                        current_inner_diameter,\n                        is_negative=False,\n                    )\n                )\n                current_outer_diameter -= diameter_delta\n                current_inner_diameter -= diameter_delta\n\n        if rotation is not None:\n            matrix = Matrix3x3.new_rotate(rotation)\n            shapes = [shape.transform(matrix) for shape in shapes]\n\n        for shape in shapes:\n            self._aperture_buffer.append_shape(shape)\n\n        return node\n\n    def on_code_7(self, node: Code7) -&gt; Code7:\n        \"\"\"Handle `Code7` node.\"\"\"\n        center_x = self._eval(node.center_x)\n        center_y = self._eval(node.center_y)\n        outer_diameter = self._eval(node.outer_diameter)\n        inner_diameter = self._eval(node.inner_diameter)\n\n        if inner_diameter &gt;= outer_diameter:\n            return node\n\n        gap_thickness = self._eval(node.gap_thickness)\n        rotation = self._eval(node.rotation)\n\n        thickness = outer_diameter - inner_diameter\n\n        if gap_thickness * math.sqrt(2) &gt;= inner_diameter:\n            return node\n\n        if thickness &lt;= 0:\n            return node\n\n        aperture_id = ApertureIdStr(f\"%%Code7%{id(node)}%{time.time():.0f}\")\n        aperture_buffer = self._compiler._create_aperture_buffer(  # noqa: SLF001\n            aperture_id\n        )\n\n        shapes: list[Shape] = []\n        shapes.extend(\n            Shape.new_ring((0, 0), outer_diameter, inner_diameter, is_negative=False)\n        )\n\n        # Compensate rounding errors with rotation.\n        radius_delta = outer_diameter / 2 + thickness / 1.99\n        shapes.append(\n            Shape.new_line(\n                (0 - radius_delta, 0),\n                (0 + radius_delta, 0),\n                thickness=gap_thickness,\n                is_negative=True,\n            )\n        )\n        shapes.append(\n            Shape.new_line(\n                (0, 0 - radius_delta),\n                (0, 0 + radius_delta),\n                thickness=gap_thickness,\n                is_negative=True,\n            )\n        )\n\n        paste_center = Vector(x=center_x, y=center_y)\n\n        if rotation is not None:\n            matrix = Matrix3x3.new_rotate(rotation)\n            shapes = [shape.transform(matrix) for shape in shapes]\n            paste_center = paste_center.transform(matrix)\n\n        for shape in shapes:\n            aperture_buffer.append_shape(shape)\n\n        self._aperture_buffer.append_paste(\n            PasteLayer.new(\n                source_layer_id=aperture_id,\n                center=paste_center.xy,\n                is_negative=False,\n            )\n        )\n        return node\n\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        \"\"\"Handle `Code20` node.\"\"\"\n        self._on_vector_line(node)\n        return node\n\n    def on_code_21(self, node: Code21) -&gt; Code21:\n        \"\"\"Handle `Code21` node.\"\"\"\n        exposure = self._eval(node.exposure)\n        width = self._eval(node.width)\n        height = self._eval(node.height)\n        center_x = self._eval(node.center_x)\n        center_y = self._eval(node.center_y)\n        rotation = self._eval(node.rotation)\n\n        shape = Shape.new_rectangle(\n            (center_x, center_y),\n            width,\n            height,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n        return node\n\n    def on_code_22(self, node: Code22) -&gt; Code22:\n        \"\"\"Handle `Code22` node.\"\"\"\n        exposure = self._eval(node.exposure)\n        width = self._eval(node.width)\n        height = self._eval(node.height)\n        x_lower_left = self._eval(node.x_lower_left)\n        y_lower_left = self._eval(node.y_lower_left)\n        rotation = self._eval(node.rotation)\n\n        shape = Shape.new_rectangle(\n            (x_lower_left + (width / 2), y_lower_left + (height / 2)),\n            width,\n            height,\n            is_negative=(exposure == 0),\n        )\n        if rotation is not None:\n            shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n        self._aperture_buffer.append_shape(shape)\n        return node\n\n    def on_assignment(self, node: Assignment) -&gt; Assignment:\n        \"\"\"Handle `Assignment` node.\"\"\"\n        self._scope[node.variable.variable] = self._eval(node.expression)\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_1(self, node: Code1) -&gt; Code1:\n    \"\"\"Handle `Code1` node.\"\"\"\n    exposure = self._eval(node.exposure)\n    diameter = self._eval(node.diameter)\n    center_x = self._eval(node.center_x)\n    center_y = self._eval(node.center_y)\n    rotation = self._eval(node.rotation) if node.rotation is not None else None\n\n    shape = Shape.new_circle(\n        (center_x, center_y),\n        diameter,\n        is_negative=(exposure == 0),\n    )\n    if rotation is not None:\n        shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n    self._aperture_buffer.append_shape(shape)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_2(self, node: Code2) -&gt; Code2:\n    \"\"\"Handle `Code2` node.\"\"\"\n    self._on_vector_line(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_4(self, node: Code4) -&gt; Code4:\n    \"\"\"Handle `Code4` node.\"\"\"\n    exposure = self._eval(node.exposure)\n    start = (self._eval(node.start_x), self._eval(node.start_y))\n    points = [(self._eval(point.x), self._eval(point.y)) for point in node.points]\n    rotation = self._eval(node.rotation)\n\n    shape = Shape.new_connected_points(\n        start,\n        *points,\n        is_negative=(exposure == 0),\n    )\n    if rotation is not None:\n        shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n    self._aperture_buffer.append_shape(shape)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_5(self, node: Code5) -&gt; Code5:\n    \"\"\"Handle `Code5` node.\"\"\"\n    exposure = self._eval(node.exposure)\n    number_of_vertices = int(self._eval(node.number_of_vertices))\n    center_x = self._eval(node.center_x)\n    center_y = self._eval(node.center_y)\n    diameter = self._eval(node.diameter)\n    rotation = self._eval(node.rotation)\n\n    shape = Shape.new_polygon(\n        (center_x, center_y),\n        diameter,\n        number_of_vertices,\n        rotation,\n        is_negative=(exposure == 0),\n    )\n    if rotation is not None:\n        shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n    self._aperture_buffer.append_shape(shape)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_6(self, node: Code6) -&gt; Code6:\n    \"\"\"Handle `Code6` node.\"\"\"\n    center_x = self._eval(node.center_x)\n    center_y = self._eval(node.center_y)\n    outer_diameter = self._eval(node.outer_diameter)\n    ring_thickness = self._eval(node.ring_thickness)\n    gap_between_rings = self._eval(node.gap_between_rings)\n    max_ring_count = self._eval(node.max_ring_count)\n    crosshair_thickness = self._eval(node.crosshair_thickness)\n    crosshair_length = self._eval(node.crosshair_length)\n    rotation = self._eval(node.rotation)\n\n    center = (center_x, center_y)\n\n    shapes: list[Shape] = []\n    half_crosshair_length = crosshair_length / 2\n\n    if crosshair_length &gt; 0 and crosshair_thickness &gt; 0:\n        shapes.append(\n            Shape.new_line(\n                (center_x, center_y - half_crosshair_length),\n                (center_x, center_y + half_crosshair_length),\n                crosshair_thickness,\n                is_negative=False,\n            )\n        )\n        shapes.append(\n            Shape.new_line(\n                (center_x - half_crosshair_length, center_y),\n                (center_x + half_crosshair_length, center_y),\n                crosshair_thickness,\n                is_negative=False,\n            )\n        )\n\n    if ring_thickness &gt; 0 and outer_diameter &gt; 0 and max_ring_count &gt; 0:\n        diameter_delta = (gap_between_rings * 2) + (ring_thickness * 2)\n\n        current_outer_diameter = outer_diameter\n        # Diameter is reduced from both sides, hence ring_thickness * 2.\n        current_inner_diameter = outer_diameter - (ring_thickness * 2)\n\n        for _ in range(int(max_ring_count)):\n            if current_outer_diameter &lt;= ring_thickness:\n                shapes.append(\n                    Shape.new_circle(\n                        center, current_outer_diameter, is_negative=False\n                    )\n                )\n                break\n\n            shapes.extend(\n                Shape.new_ring(\n                    center,\n                    current_outer_diameter,\n                    current_inner_diameter,\n                    is_negative=False,\n                )\n            )\n            current_outer_diameter -= diameter_delta\n            current_inner_diameter -= diameter_delta\n\n    if rotation is not None:\n        matrix = Matrix3x3.new_rotate(rotation)\n        shapes = [shape.transform(matrix) for shape in shapes]\n\n    for shape in shapes:\n        self._aperture_buffer.append_shape(shape)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_7(self, node: Code7) -&gt; Code7:\n    \"\"\"Handle `Code7` node.\"\"\"\n    center_x = self._eval(node.center_x)\n    center_y = self._eval(node.center_y)\n    outer_diameter = self._eval(node.outer_diameter)\n    inner_diameter = self._eval(node.inner_diameter)\n\n    if inner_diameter &gt;= outer_diameter:\n        return node\n\n    gap_thickness = self._eval(node.gap_thickness)\n    rotation = self._eval(node.rotation)\n\n    thickness = outer_diameter - inner_diameter\n\n    if gap_thickness * math.sqrt(2) &gt;= inner_diameter:\n        return node\n\n    if thickness &lt;= 0:\n        return node\n\n    aperture_id = ApertureIdStr(f\"%%Code7%{id(node)}%{time.time():.0f}\")\n    aperture_buffer = self._compiler._create_aperture_buffer(  # noqa: SLF001\n        aperture_id\n    )\n\n    shapes: list[Shape] = []\n    shapes.extend(\n        Shape.new_ring((0, 0), outer_diameter, inner_diameter, is_negative=False)\n    )\n\n    # Compensate rounding errors with rotation.\n    radius_delta = outer_diameter / 2 + thickness / 1.99\n    shapes.append(\n        Shape.new_line(\n            (0 - radius_delta, 0),\n            (0 + radius_delta, 0),\n            thickness=gap_thickness,\n            is_negative=True,\n        )\n    )\n    shapes.append(\n        Shape.new_line(\n            (0, 0 - radius_delta),\n            (0, 0 + radius_delta),\n            thickness=gap_thickness,\n            is_negative=True,\n        )\n    )\n\n    paste_center = Vector(x=center_x, y=center_y)\n\n    if rotation is not None:\n        matrix = Matrix3x3.new_rotate(rotation)\n        shapes = [shape.transform(matrix) for shape in shapes]\n        paste_center = paste_center.transform(matrix)\n\n    for shape in shapes:\n        aperture_buffer.append_shape(shape)\n\n    self._aperture_buffer.append_paste(\n        PasteLayer.new(\n            source_layer_id=aperture_id,\n            center=paste_center.xy,\n            is_negative=False,\n        )\n    )\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_20(self, node: Code20) -&gt; Code20:\n    \"\"\"Handle `Code20` node.\"\"\"\n    self._on_vector_line(node)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_21(self, node: Code21) -&gt; Code21:\n    \"\"\"Handle `Code21` node.\"\"\"\n    exposure = self._eval(node.exposure)\n    width = self._eval(node.width)\n    height = self._eval(node.height)\n    center_x = self._eval(node.center_x)\n    center_y = self._eval(node.center_y)\n    rotation = self._eval(node.rotation)\n\n    shape = Shape.new_rectangle(\n        (center_x, center_y),\n        width,\n        height,\n        is_negative=(exposure == 0),\n    )\n    if rotation is not None:\n        shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n    self._aperture_buffer.append_shape(shape)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_code_22(self, node: Code22) -&gt; Code22:\n    \"\"\"Handle `Code22` node.\"\"\"\n    exposure = self._eval(node.exposure)\n    width = self._eval(node.width)\n    height = self._eval(node.height)\n    x_lower_left = self._eval(node.x_lower_left)\n    y_lower_left = self._eval(node.y_lower_left)\n    rotation = self._eval(node.rotation)\n\n    shape = Shape.new_rectangle(\n        (x_lower_left + (width / 2), y_lower_left + (height / 2)),\n        width,\n        height,\n        is_negative=(exposure == 0),\n    )\n    if rotation is not None:\n        shape = shape.transform(Matrix3x3.new_rotate(rotation))\n\n    self._aperture_buffer.append_shape(shape)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/compiler.html#pygerber.gerberx3.compiler.compiler.MacroEvalVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p> Source code in <code>src/pygerber/gerberx3/compiler/compiler.py</code> <pre><code>def on_assignment(self, node: Assignment) -&gt; Assignment:\n    \"\"\"Handle `Assignment` node.\"\"\"\n    self._scope[node.variable.variable] = self._eval(node.expression)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerberx3/compiler/errors.html#pygerber.gerberx3.compiler.errors","title":"errors","text":"<p><code>errors</code> module contains all error classes exclusively raised by Compiler class.</p>"},{"location":"reference/pygerber/gerberx3/compiler/errors.html#pygerber.gerberx3.compiler.errors.CompilerError","title":"CompilerError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by Compiler class.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class CompilerError(Exception):\n    \"\"\"Base class for all exceptions raised by Compiler class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/errors.html#pygerber.gerberx3.compiler.errors.CyclicBufferDependencyError","title":"CyclicBufferDependencyError","text":"<p>             Bases: <code>CompilerError</code></p> <p>Raised when cyclic dependency between buffers is detected.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class CyclicBufferDependencyError(CompilerError):\n    \"\"\"Raised when cyclic dependency between buffers is detected.\"\"\"\n\n    def __init__(\n        self, parent_buffer: CommandBuffer, child_buffer: CommandBuffer\n    ) -&gt; None:\n        super().__init__(\n            f\"Cyclic dependency between buffers {parent_buffer.id_str} and \"\n            f\"{child_buffer.id_str} detected. Cyclic dependencies are not allowed.\"\n        )\n        self.parent_buffer = parent_buffer\n        self.child_buffer = child_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/errors.html#pygerber.gerberx3.compiler.errors.MacroNotDefinedError","title":"MacroNotDefinedError","text":"<p>             Bases: <code>CompilerError</code></p> <p>Raised when macro is not defined in the macro registry.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class MacroNotDefinedError(CompilerError):\n    \"\"\"Raised when macro is not defined in the macro registry.\"\"\"\n\n    def __init__(self, macro_name: str) -&gt; None:\n        super().__init__(f\"Macro {macro_name} was not defined before instantiation.\")\n        self.macro_name = macro_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/compiler/errors.html#pygerber.gerberx3.compiler.errors.ContourBufferNotSetError","title":"ContourBufferNotSetError","text":"<p>             Bases: <code>CompilerError</code></p> <p>Raised when contour buffer is not set before flushing a contour buffer.</p> Source code in <code>src/pygerber/gerberx3/compiler/errors.py</code> <pre><code>class ContourBufferNotSetError(CompilerError):\n    \"\"\"Raised when contour buffer is not set before flushing a contour buffer.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"Contour buffer is not set. Set contour buffer before \"\n            \"flushing a contour buffer.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter","title":"formatter","text":"<p>The <code>formatter</code> package contains implementation of Gerber X3 formatter.</p>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter","title":"Formatter","text":"<p>             Bases: <code>AstVisitor</code></p> <p>Gerber X3 compatible formatter.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>class Formatter(AstVisitor):\n    \"\"\"Gerber X3 compatible formatter.\"\"\"\n\n    class MacroSplitMode(Enum):\n        \"\"\"Macro split mode.\"\"\"\n\n        NONE = \"none\"\n        PRIMITIVES = \"primitives\"\n        PARAMETERS = \"parameters\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        *,\n        indent_character: Literal[\" \", \"\\t\"] = \" \",\n        macro_body_indent: str | int = 0,\n        macro_param_indent: str | int = 0,\n        macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n        macro_end_in_new_line: bool = False,\n        block_aperture_body_indent: str | int = 0,\n        step_and_repeat_body_indent: str | int = 0,\n        float_decimal_places: int = -1,\n        float_trim_trailing_zeros: bool = True,\n        d01_indent: int | str = 0,\n        d02_indent: int | str = 0,\n        d03_indent: int | str = 0,\n        line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n        empty_line_before_polarity_switch: bool = False,\n        keep_non_standalone_codes: bool = True,\n        remove_g54: bool = False,\n        remove_g55: bool = False,\n        explicit_parenthesis: bool = False,\n        strip_whitespace: bool = False,\n    ) -&gt; None:\n        r\"\"\"Initialize Formatter instance.\n\n        Parameters\n        ----------\n        indent_character: Literal[\" \", \"\\t\"], optional\n            Character used for indentation, by default \" \"\n        macro_body_indent : str | int, optional\n            Indentation of macro body, by default 0\n        macro_param_indent: str | int, optional\n            Indentation of macro parameters, by default 0\n            This indentation is added on top of macro body indentation.\n            This has effect only when `macro_split_mode` is `PARAMETERS`.\n        macro_split_mode : `Formatter.MacroSplitMode`, optional\n            Changes how macro definitions are formatted, by default `NONE`\n            When `NONE` is selected, macro will be formatted as a single line.\n            ```gerber\n            %AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n            ```\n            When `PRIMITIVES` is selected, macro will be formatted with each primitive\n            on a new line.\n            ```gerber\n            %AMDonut*\n            1,1,$1,$2,$3*\n            $4=$1x0.75*\n            1,0,$4,$2,$3*%\n            ```\n            When `PARAMETERS` is selected, macro will be formatted with each primitive\n            on a new line and each parameter of a primitive on a new line.\n            ```gerber\n            %AMDonut*\n            1,\n            1,\n            $1,\n            $2,\n            $3*\n            $4=$1x0.75*\n            1,\n            0,\n            $4,\n            $2,\n            $3*%\n            ```\n            Use `macro_body_indent` and `macro_param_indent` to control indentation.\n        macro_end_in_new_line: bool, optional\n            Place % sign which marks the end of macro in new line, by default False\n        block_aperture_body_indent : str | int, optional\n            Indentation of block aperture definition body, by default 0\n            This indentations stacks for nested block apertures.\n        step_and_repeat_body_indent : str | int, optional\n            Indentation of step and repeat definition body, by default 0\n            This indentations stacks for nested step and repeat blocks.\n        float_decimal_places : int, optional\n            Limit number of decimal places shown for float values, by default -1\n            Negative values are interpreted as no limit.\n        float_trim_trailing_zeros : bool, optional\n            Remove trailing zeros from floats, by default True\n            When this is enabled, after floating point number is formatted with respect\n            to `float_decimal_places`, trailing zeros are removed. If all zeros after\n            decimal point are removed, decimal point is also removed.\n        d01_indent : str | int, optional\n            Custom indentation of D01 command, by default 0\n        d02_indent : str | int, optional\n            Custom indentation of D02 command, by default 0\n        d03_indent : str | int, optional\n            Custom indentation of D03 command, by default 0\n        line_end : Literal[\"\\n\", \"\\r\\n\"], optional\n            Line ending character, Unix or Windows style, by default \"\\n\" (Unix style)\n            If `strip_whitespace` is enabled, no line end will be used.\n        empty_line_before_polarity_switch : bool, optional\n            Add empty line before polarity switch, by default False\n            This enhances visibility of sequences of commands with different\n            polarities.\n        keep_non_standalone_codes: bool, optional\n            Keep non-standalone codes in the output, by default True\n            If this option is disabled, codes that are not standalone, ie. `G70D02*`\n            will be divided into two separate commands, `G70*` and `D02*`, otherwise\n            they will be kept as is.\n        remove_g54: bool, optional\n            Remove G54 code from output, by default False\n            G54 code has no effect on the output, it was used in legacy files to\n            prefix select aperture command.\n        remove_g55: bool, optional\n            Remove G55 code from output, by default False\n            G55 code has no effect on the output, it was used in legacy files to\n            prefix flash command.\n        explicit_parenthesis: bool, optional\n            Add explicit parenthesis around all mathematical\n            expressions within macro, by default False\n            When false, original parenthesis are kept.\n        strip_whitespace : bool, optional\n            Remove all semantically insignificant whitespace, by default False\n\n        \"\"\"\n        super().__init__()\n        self.indent_character = indent_character\n\n        if isinstance(macro_body_indent, int):\n            macro_body_indent = indent_character * macro_body_indent\n        self.macro_body_indent = macro_body_indent\n\n        if isinstance(macro_param_indent, int):\n            macro_param_indent = indent_character * macro_param_indent\n        self.macro_param_indent = macro_param_indent\n\n        self.macro_split_mode = macro_split_mode\n        self.macro_end_in_new_line = macro_end_in_new_line\n\n        if isinstance(block_aperture_body_indent, int):\n            block_aperture_body_indent = indent_character * block_aperture_body_indent\n        self.block_aperture_body_indent = block_aperture_body_indent\n\n        if isinstance(step_and_repeat_body_indent, int):\n            step_and_repeat_body_indent = indent_character * step_and_repeat_body_indent\n        self.step_and_repeat_body_indent = step_and_repeat_body_indent\n\n        self.float_decimal_places = float_decimal_places\n\n        self.float_trim_trailing_zeros = float_trim_trailing_zeros\n\n        if isinstance(d01_indent, int):\n            d01_indent = indent_character * d01_indent\n        self.d01_indent = d01_indent\n\n        if isinstance(d02_indent, int):\n            d02_indent = indent_character * d02_indent\n        self.d02_indent = d02_indent\n\n        if isinstance(d03_indent, int):\n            d03_indent = indent_character * d03_indent\n        self.d03_indent = d03_indent\n\n        self.lf = line_end\n        self.empty_line_before_polarity_switch = (\n            self.lf if empty_line_before_polarity_switch else \"\"\n        )\n        self.keep_non_standalone_codes = keep_non_standalone_codes\n        self.remove_g54 = remove_g54\n        self.remove_g55 = remove_g55\n        self.explicit_parenthesis = explicit_parenthesis\n        self.strip_whitespace = strip_whitespace\n\n        if self.strip_whitespace:\n            self.lf = \"\"  # type: ignore[assignment]\n            self.indent_character = \"\"  # type: ignore[assignment]\n            self.macro_body_indent = \"\"\n            self.macro_param_indent = \"\"\n            self.block_aperture_body_indent = \"\"\n            self.step_and_repeat_body_indent = \"\"\n            self.d01_indent = \"\"\n            self.d02_indent = \"\"\n            self.d03_indent = \"\"\n            self.empty_line_before_polarity_switch = \"\"\n\n        self._output: Optional[StringIO] = None\n        self._base_indent: str = \"\"\n\n    def format(self, source: File, output: StringIO) -&gt; None:\n        \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n        self._output = output\n        try:\n            self.on_file(source)\n        finally:\n            self._output = None\n            self._base_indent = \"\"\n\n    def formats(self, source: File) -&gt; str:\n        \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n        out = StringIO()\n        self.format(source, out)\n        return out.getvalue()\n\n    def format_node(self, node: Node, output: StringIO) -&gt; None:\n        \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n        self._output = output\n        try:\n            node.visit(self)\n        finally:\n            self._output = None\n            self._base_indent = \"\"\n\n    def formats_node(self, node: File) -&gt; str:\n        \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n        out = StringIO()\n        self.format_node(node, out)\n        return out.getvalue()\n\n    @property\n    def output(self) -&gt; StringIO:\n        \"\"\"Get output buffer.\"\"\"\n        if self._output is None:\n            msg = \"Output buffer is not set.\"\n            raise FormatterError(msg)\n\n        return self._output\n\n    def _fmt_double(self, value: Double) -&gt; str:\n        if self.float_decimal_places &lt; 0:\n            return str(value)\n        double = f\"{value:.{self.float_decimal_places}f}\"\n        if self.float_trim_trailing_zeros:\n            return double.rstrip(\"0\").rstrip(\".\")\n        return double\n\n    def _insert_base_indent(self) -&gt; None:\n        self._write(self._base_indent)\n\n    def _insert_extra_indent(self, value: str) -&gt; None:\n        self._write(value)\n\n    @contextmanager\n    def _command(\n        self, cmd: str, *, asterisk: bool = True, lf: bool = True\n    ) -&gt; Generator[None, None, None]:\n        self._write(cmd)\n        yield\n        if asterisk:\n            self._write(\"*\")\n        if lf:\n            self._write(self.lf)\n\n    @contextmanager\n    def _extended_command(self, cmd: str) -&gt; Generator[None, None, None]:\n        self._write(f\"%{cmd}\")\n        yield\n        self._write(f\"*%{self.lf}\")\n\n    def _write(self, value: str) -&gt; None:\n        self.output.write(value)\n\n    @_decrease_base_indent(\"block_aperture_body_indent\")\n    @_decorator_insert_base_indent\n    def on_ab_close(self, node: ABclose) -&gt; ABclose:\n        \"\"\"Handle `ABclose` node.\"\"\"\n        with self._extended_command(\"AB\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    @_increase_base_indent(\"block_aperture_body_indent\")\n    def on_ab_open(self, node: ABopen) -&gt; ABopen:\n        \"\"\"Handle `ABopen` node.\"\"\"\n        with self._extended_command(\"AB\"):\n            self._write(node.aperture_id)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}C,\"):\n            self._write(self._fmt_double(node.diameter))\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}R,\"):\n            self._write(self._fmt_double(node.width))\n            self._write(f\"X{self._fmt_double(node.height)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}O,\"):\n            self._write(self._fmt_double(node.width))\n            self._write(f\"X{self._fmt_double(node.height)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}P,\"):\n            self._write(self._fmt_double(node.outer_diameter))\n            self._write(f\"X{node.vertices}\")\n\n            if node.rotation is not None:\n                self._write(f\"X{self._fmt_double(node.rotation)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}{node.name}\"):\n            if node.params is not None:\n                first, *rest = node.params\n                self._write(f\",{first}\")\n                for param in rest:\n                    self._write(f\"X{param}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_am_close(self, node: AMclose) -&gt; AMclose:\n        \"\"\"Handle `AMclose` node.\"\"\"\n        super().on_am_close(node)\n        if self.macro_end_in_new_line:\n            self._write(f\"{self.lf}\")\n        self._write(f\"%{self.lf}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_am_open(self, node: AMopen) -&gt; AMopen:\n        \"\"\"Handle `AMopen` node.\"\"\"\n        super().on_am_open(node)\n        self._write(f\"%AM{node.name}*\")\n        return node\n\n    @_decrease_base_indent(\"step_and_repeat_body_indent\")\n    @_decorator_insert_base_indent\n    def on_sr_close(self, node: SRclose) -&gt; SRclose:\n        \"\"\"Handle `SRclose` node.\"\"\"\n        with self._extended_command(\"SR\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    @_increase_base_indent(\"step_and_repeat_body_indent\")\n    def on_sr_open(self, node: SRopen) -&gt; SRopen:\n        \"\"\"Handle `SRopen` node.\"\"\"\n        with self._extended_command(\"SR\"):\n            if node.x is not None:\n                self._write(f\"X{node.x}\")\n\n            if node.x is not None:\n                self._write(f\"Y{node.y}\")\n\n            if node.x is not None:\n                self._write(f\"I{node.i}\")\n\n            if node.x is not None:\n                self._write(f\"J{node.j}\")\n\n        return node\n\n    # Attribute\n\n    @_decorator_insert_base_indent\n    def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        with self._extended_command(f\"TA{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n        \"\"\"Handle `TA_AperFunction` node.\"\"\"\n        with self._extended_command(\"TA.AperFunction\"):\n            if node.function is not None:\n                self._write(\",\")\n                self._write(node.function.value)\n\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n        \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n        with self._extended_command(\"TA.DrillTolerance\"):\n            if node.plus_tolerance is not None:\n                self._write(\",\")\n                self._write(self._fmt_double(node.plus_tolerance))\n\n            if node.minus_tolerance is not None:\n                self._write(\",\")\n                self._write(self._fmt_double(node.minus_tolerance))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n        \"\"\"Handle `TA_FlashText` node.\"\"\"\n        with self._extended_command(\"TA.FlashText\"):\n            self._write(\",\")\n            self._write(node.string)\n\n            self._write(\",\")\n            self._write(node.mode)\n\n            self._write(\",\")\n            self._write(node.mirroring)\n\n            if len(node.comments) == 0:\n                if node.font is not None:\n                    self._write(\",\")\n                    self._write(node.font)\n\n                if node.size is not None:\n                    self._write(\",\")\n                    self._write(node.size)\n\n                for comment in node.comments:\n                    self._write(\",\")\n                    self._write(comment)\n            else:\n                self._write(\",\")\n                if node.font is not None:\n                    self._write(node.font)\n\n                self._write(\",\")\n                if node.size is not None:\n                    self._write(node.size)\n\n                for comment in node.comments:\n                    self._write(\",\")\n                    self._write(comment)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        with self._extended_command(\"TD\"):\n            if node.name is not None:\n                self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n        \"\"\"Handle `TF_UserName` node.\"\"\"\n        with self._extended_command(f\"TF{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n        \"\"\"Handle `TF_Part` node.\"\"\"\n        with self._extended_command(\"TF.Part,\"):\n            self._write(node.part.value)\n            if len(node.fields) != 0:\n                for field in node.fields:\n                    self._write(\",\")\n                    self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n        \"\"\"Handle `TF_FileFunction` node.\"\"\"\n        with self._extended_command(\"TF.FileFunction,\"):\n            self._write(node.file_function.value)\n            if len(node.fields) != 0:\n                for field in node.fields:\n                    self._write(\",\")\n                    self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n        \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n        with self._extended_command(\"TF.FilePolarity,\"):\n            self._write(node.polarity)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n        \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n        with self._extended_command(\"TF.SameCoordinates\"):\n            if node.identifier is not None:\n                self._write(\",\")\n                self._write(node.identifier)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n        \"\"\"Handle `TF_CreationDate` node.\"\"\"\n        with self._extended_command(\"TF.CreationDate\"):\n            if node.creation_date is not None:\n                self._write(\",\")\n                self._write(node.creation_date.isoformat())\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_generation_software(\n        self, node: TF_GenerationSoftware\n    ) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n        with self._extended_command(\"TF.GenerationSoftware\"):\n            self._write(\",\")\n            if node.vendor is not None:\n                self._write(node.vendor)\n\n            self._write(\",\")\n            if node.application is not None:\n                self._write(node.application)\n\n            self._write(\",\")\n            if node.version is not None:\n                self._write(node.version)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n        \"\"\"Handle `TF_ProjectId` node.\"\"\"\n        with self._extended_command(\"TF.ProjectId\"):\n            self._write(\",\")\n            if node.name is not None:\n                self._write(node.name)\n\n            self._write(\",\")\n            if node.guid is not None:\n                self._write(node.guid)\n\n            self._write(\",\")\n            if node.revision is not None:\n                self._write(node.revision)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n        \"\"\"Handle `TF_MD5` node.\"\"\"\n        with self._extended_command(\"TF.MD5\"):\n            self._write(\",\")\n            self._write(node.md5)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n        \"\"\"Handle `TO_UserName` node.\"\"\"\n        with self._extended_command(f\"TO{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_n(self, node: TO_N) -&gt; TO_N:\n        \"\"\"Handle `TO_N` node.\"\"\"\n        with self._extended_command(\"TO.N\"):\n            for field in node.net_names:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_p(self, node: TO_P) -&gt; TO_P:\n        \"\"\"Handle `TO_P` node`.\"\"\"\n        with self._extended_command(\"TO.P\"):\n            self._write(\",\")\n            self._write(node.refdes)\n            self._write(\",\")\n            self._write(node.number)\n            if node.function is not None:\n                self._write(\",\")\n                self._write(node.function)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_c(self, node: TO_C) -&gt; TO_C:\n        \"\"\"Handle `TO_C` node.\"\"\"\n        with self._extended_command(\"TO.C\"):\n            self._write(\",\")\n            self._write(node.refdes)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n        \"\"\"Handle `TO_CRot` node.\"\"\"\n        with self._extended_command(\"TO.CRot\"):\n            self._write(\",\")\n            self._write(self._fmt_double(node.angle))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n        \"\"\"Handle `TO_CMfr` node.\"\"\"\n        with self._extended_command(\"TO.CMfr\"):\n            self._write(\",\")\n            self._write(node.manufacturer)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n        \"\"\"Handle `TO_CMNP` node.\"\"\"\n        with self._extended_command(\"TO.CMPN\"):\n            self._write(\",\")\n            self._write(node.part_number)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        with self._extended_command(\"TO.CVal\"):\n            self._write(\",\")\n            self._write(node.value)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        with self._extended_command(\"TO.CMnt\"):\n            self._write(\",\")\n            self._write(node.mount.value)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n        \"\"\"Handle `TO_Cftp` node.\"\"\"\n        with self._extended_command(\"TO.CFtp\"):\n            self._write(\",\")\n            self._write(node.footprint)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n        \"\"\"Handle `TO_CPgN` node.\"\"\"\n        with self._extended_command(\"TO.CPgN\"):\n            self._write(\",\")\n            self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n        \"\"\"Handle `TO_CPgD` node.\"\"\"\n        with self._extended_command(\"TO.CPgD\"):\n            self._write(\",\")\n            self._write(node.description)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n        \"\"\"Handle `TO_CHgt` node.\"\"\"\n        with self._extended_command(\"TO.CHgt\"):\n            self._write(\",\")\n            self._write(self._fmt_double(node.height))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n        \"\"\"Handle `TO_CLbN` node.\"\"\"\n        with self._extended_command(\"TO.CLbn\"):\n            self._write(\",\")\n            self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n        \"\"\"Handle `TO_CLbD` node.\"\"\"\n        with self._extended_command(\"TO.CLbD\"):\n            self._write(\",\")\n            self._write(node.description)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n        \"\"\"Handle `TO_CSup` node.\"\"\"\n        with self._extended_command(\"TO.CSup\"):\n            self._write(\",\")\n            self._write(node.supplier)\n            self._write(\",\")\n            self._write(node.supplier_part)\n            for field in node.other_suppliers:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    # D codes\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d01_indent)\n\n        super().on_d01(node)\n        with self._command(\"D01\"):\n            pass\n\n        return node\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d02_indent)\n\n        super().on_d02(node)\n        with self._command(\"D02\"):\n            pass\n\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d03_indent)\n\n        super().on_d03(node)\n        with self._command(\"D03\"):\n            pass\n\n        return node\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n\n        with self._command(node.aperture_id):\n            pass\n\n        return node\n\n    # G codes\n\n    def _handle_g(self, node: G, cls: Type[G]) -&gt; None:\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            with self._command(cls.__qualname__):\n                pass\n            return\n\n        self._write(cls.__qualname__)\n\n    @_decorator_insert_base_indent\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        self._handle_g(node, G01)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        self._handle_g(node, G02)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        self._handle_g(node, G03)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g04(self, node: G04) -&gt; G04:\n        \"\"\"Handle `G04` node.\"\"\"\n        with self._command(f\"G04{node.string or ''}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        self._handle_g(node, G36)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        self._handle_g(node, G37)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g54(self, node: G54) -&gt; G54:\n        \"\"\"Handle `G54` node.\"\"\"\n        if self.remove_g54:\n            return node\n        self._handle_g(node, G54)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g55(self, node: G55) -&gt; G55:\n        \"\"\"Handle `G55` node.\"\"\"\n        if self.remove_g55:\n            return node\n        self._handle_g(node, G55)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        self._handle_g(node, G70)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        self._handle_g(node, G71)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        self._handle_g(node, G74)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        self._handle_g(node, G75)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        self._handle_g(node, G90)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        self._handle_g(node, G91)\n        return node\n\n    # Load\n\n    @_decorator_insert_base_indent\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        with self._extended_command(f\"LM{node.mirroring.value}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        with self._extended_command(f\"LN{node.name}\"):\n            pass\n        return node\n\n    @_insert_var(\"empty_line_before_polarity_switch\")\n    @_decorator_insert_base_indent\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        with self._extended_command(f\"LP{node.polarity.value}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        with self._extended_command(f\"LR{self._fmt_double(node.rotation)}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        with self._extended_command(f\"LS{self._fmt_double(node.scale)}\"):\n            pass\n        return node\n\n    # M Codes\n\n    @_decorator_insert_base_indent\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        with self._command(\"M00\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_m01(self, node: M01) -&gt; M01:\n        \"\"\"Handle `M01` node.\"\"\"\n        with self._command(\"M01\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        with self._command(\"M02\"):\n            pass\n        return node\n\n    # Math\n\n    # Math :: Operators :: Binary\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"+\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"/\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"x\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"-\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        self._write(\"-\")\n        node.operand.visit(self)\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        self._write(\"+\")\n        node.operand.visit(self)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_assignment(self, node: Assignment) -&gt; Assignment:\n        \"\"\"Handle `Assignment` node.\"\"\"\n        self._write(self._macro_primitive_lf)\n        node.variable.visit(self)\n        self._write(\"=\")\n        node.expression.visit(self)\n        self._write(\"*\")\n\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self._write(self._fmt_double(node.constant))\n        return node\n\n    def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n        \"\"\"Handle `Parenthesis` node.\"\"\"\n        if not self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.inner.visit(self)\n\n        if not self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_point(self, node: Point) -&gt; Point:\n        \"\"\"Handle `Point` node.\"\"\"\n        node.x.visit(self)\n        self._write(\",\")\n        node.y.visit(self)\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self._write(node.variable)\n        return node\n\n    # Other\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"X{node.value}\")\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"Y{node.value}\")\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"I{node.value}\")\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"J{node.value}\")\n        return node\n\n    # Primitives\n\n    @_decorator_insert_base_indent\n    def on_code_0(self, node: Code0) -&gt; Code0:\n        \"\"\"Handle `Code0` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}0{node.string}*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        \"\"\"Handle `Code1` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}1,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n\n        if node.rotation is not None:\n            self._write(f\",{self._macro_param_lf}\")\n            node.rotation.visit(self)\n\n        self._write(\"*\")\n        return node\n\n    @cached_property\n    def _macro_primitive_lf(self) -&gt; str:\n        if self.macro_split_mode == self.MacroSplitMode.NONE:\n            return \"\"\n\n        if self.macro_split_mode in (\n            self.MacroSplitMode.PRIMITIVES,\n            self.MacroSplitMode.PARAMETERS,\n        ):\n            return self.lf + self.macro_body_indent\n\n        msg = f\"Unsupported macro split mode: {self.macro_split_mode}\"\n        raise NotImplementedError(msg)\n\n    @cached_property\n    def _macro_param_lf(self) -&gt; str:\n        if self.macro_split_mode in (\n            self.MacroSplitMode.NONE,\n            self.MacroSplitMode.PRIMITIVES,\n        ):\n            return \"\"\n\n        if self.macro_split_mode == self.MacroSplitMode.PARAMETERS:\n            return self.lf + self.macro_param_indent + self.macro_body_indent\n\n        msg = f\"Unsupported macro split mode: {self.macro_split_mode}\"\n        raise NotImplementedError(msg)\n\n    @_decorator_insert_base_indent\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        \"\"\"Handle `Code2` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}2,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_4(self, node: Code4) -&gt; Code4:\n        \"\"\"Handle `Code4` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}4,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.number_of_points.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n\n        for point in node.points:\n            self._write(f\",{self._macro_param_lf}\")\n            point.visit(self)\n\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_5(self, node: Code5) -&gt; Code5:\n        \"\"\"Handle `Code5` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}5,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.number_of_vertices.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_6(self, node: Code6) -&gt; Code6:\n        \"\"\"Handle `Code6` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}6,{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.outer_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.ring_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.gap_between_rings.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.max_ring_count.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.crosshair_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.crosshair_length.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_7(self, node: Code7) -&gt; Code7:\n        \"\"\"Handle `Code7` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}7,{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.outer_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.inner_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.gap_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        \"\"\"Handle `Code20` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}20,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_21(self, node: Code21) -&gt; Code21:\n        \"\"\"Handle `Code21` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}21,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.height.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_22(self, node: Code22) -&gt; Code22:\n        \"\"\"Handle `Code22` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}22,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.height.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.x_lower_left.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.y_lower_left.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    # Properties\n\n    @_decorator_insert_base_indent\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        with self._extended_command(\"AS\"):\n            self._write(node.correspondence.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        with self._extended_command(\"FS\"):\n            self._write(node.zeros.value)\n            self._write(node.coordinate_mode.value)\n            self._write(f\"X{node.x_integral}{node.x_decimal}\")\n            self._write(f\"Y{node.y_integral}{node.y_decimal}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        with self._extended_command(\"IN\"):\n            self._write(node.name)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        with self._extended_command(\"IP\"):\n            self._write(node.polarity.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        with self._extended_command(\"IR\"):\n            self._write(self._fmt_double(node.rotation_degrees))\n        return node\n\n    @_decorator_insert_base_indent\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        with self._extended_command(\"MI\"):\n            self._write(f\"A{node.a_mirroring}\")\n            self._write(f\"B{node.b_mirroring}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        with self._extended_command(\"MO\"):\n            self._write(node.mode.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        with self._extended_command(\"OF\"):\n            if node.a_offset is not None:\n                self._write(f\"A{node.a_offset}\")\n            if node.b_offset is not None:\n                self._write(f\"B{node.b_offset}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        with self._extended_command(\"SF\"):\n            self._write(\"A\")\n            self._write(self._fmt_double(node.a_scale))\n            self._write(\"B\")\n            self._write(self._fmt_double(node.b_scale))\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.output","title":"output  <code>property</code>","text":"<pre><code>output: StringIO\n</code></pre> <p>Get output buffer.</p>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.MacroSplitMode","title":"MacroSplitMode","text":"<p>             Bases: <code>Enum</code></p> <p>Macro split mode.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>class MacroSplitMode(Enum):\n    \"\"\"Macro split mode.\"\"\"\n\n    NONE = \"none\"\n    PRIMITIVES = \"primitives\"\n    PARAMETERS = \"parameters\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    indent_character: Literal[\" \", \"\\t\"] = \" \",\n    macro_body_indent: str | int = 0,\n    macro_param_indent: str | int = 0,\n    macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n    macro_end_in_new_line: bool = False,\n    block_aperture_body_indent: str | int = 0,\n    step_and_repeat_body_indent: str | int = 0,\n    float_decimal_places: int = -1,\n    float_trim_trailing_zeros: bool = True,\n    d01_indent: int | str = 0,\n    d02_indent: int | str = 0,\n    d03_indent: int | str = 0,\n    line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n    empty_line_before_polarity_switch: bool = False,\n    keep_non_standalone_codes: bool = True,\n    remove_g54: bool = False,\n    remove_g55: bool = False,\n    explicit_parenthesis: bool = False,\n    strip_whitespace: bool = False\n) -&gt; None\n</code></pre> <p>Initialize Formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>indent_character</code> <code>Literal[' ', '\\t']</code> <p>Character used for indentation, by default \" \"</p> <code>' '</code> <code>macro_body_indent</code> <code>str | int</code> <p>Indentation of macro body, by default 0</p> <code>0</code> <code>macro_param_indent</code> <code>str | int</code> <p>Indentation of macro parameters, by default 0 This indentation is added on top of macro body indentation. This has effect only when <code>macro_split_mode</code> is <code>PARAMETERS</code>.</p> <code>0</code> <code>macro_split_mode</code> <code>`Formatter.MacroSplitMode`</code> <p>Changes how macro definitions are formatted, by default <code>NONE</code> When <code>NONE</code> is selected, macro will be formatted as a single line. <pre><code>%AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n</code></pre> When <code>PRIMITIVES</code> is selected, macro will be formatted with each primitive on a new line. <pre><code>%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*%\n</code></pre> When <code>PARAMETERS</code> is selected, macro will be formatted with each primitive on a new line and each parameter of a primitive on a new line. <pre><code>%AMDonut*\n1,\n1,\n$1,\n$2,\n$3*\n$4=$1x0.75*\n1,\n0,\n$4,\n$2,\n$3*%\n</code></pre> Use <code>macro_body_indent</code> and <code>macro_param_indent</code> to control indentation.</p> <code>PRIMITIVES</code> <code>macro_end_in_new_line</code> <code>bool</code> <p>Place % sign which marks the end of macro in new line, by default False</p> <code>False</code> <code>block_aperture_body_indent</code> <code>str | int</code> <p>Indentation of block aperture definition body, by default 0 This indentations stacks for nested block apertures.</p> <code>0</code> <code>step_and_repeat_body_indent</code> <code>str | int</code> <p>Indentation of step and repeat definition body, by default 0 This indentations stacks for nested step and repeat blocks.</p> <code>0</code> <code>float_decimal_places</code> <code>int</code> <p>Limit number of decimal places shown for float values, by default -1 Negative values are interpreted as no limit.</p> <code>-1</code> <code>float_trim_trailing_zeros</code> <code>bool</code> <p>Remove trailing zeros from floats, by default True When this is enabled, after floating point number is formatted with respect to <code>float_decimal_places</code>, trailing zeros are removed. If all zeros after decimal point are removed, decimal point is also removed.</p> <code>True</code> <code>d01_indent</code> <code>str | int</code> <p>Custom indentation of D01 command, by default 0</p> <code>0</code> <code>d02_indent</code> <code>str | int</code> <p>Custom indentation of D02 command, by default 0</p> <code>0</code> <code>d03_indent</code> <code>str | int</code> <p>Custom indentation of D03 command, by default 0</p> <code>0</code> <code>line_end</code> <code>Literal['\\n', '\\r\\n']</code> <p>Line ending character, Unix or Windows style, by default \"\\n\" (Unix style) If <code>strip_whitespace</code> is enabled, no line end will be used.</p> <code>'\\n'</code> <code>empty_line_before_polarity_switch</code> <code>bool</code> <p>Add empty line before polarity switch, by default False This enhances visibility of sequences of commands with different polarities.</p> <code>False</code> <code>keep_non_standalone_codes</code> <code>bool</code> <p>Keep non-standalone codes in the output, by default True If this option is disabled, codes that are not standalone, ie. <code>G70D02*</code> will be divided into two separate commands, <code>G70*</code> and <code>D02*</code>, otherwise they will be kept as is.</p> <code>True</code> <code>remove_g54</code> <code>bool</code> <p>Remove G54 code from output, by default False G54 code has no effect on the output, it was used in legacy files to prefix select aperture command.</p> <code>False</code> <code>remove_g55</code> <code>bool</code> <p>Remove G55 code from output, by default False G55 code has no effect on the output, it was used in legacy files to prefix flash command.</p> <code>False</code> <code>explicit_parenthesis</code> <code>bool</code> <p>Add explicit parenthesis around all mathematical expressions within macro, by default False When false, original parenthesis are kept.</p> <code>False</code> <code>strip_whitespace</code> <code>bool</code> <p>Remove all semantically insignificant whitespace, by default False</p> <code>False</code> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    *,\n    indent_character: Literal[\" \", \"\\t\"] = \" \",\n    macro_body_indent: str | int = 0,\n    macro_param_indent: str | int = 0,\n    macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n    macro_end_in_new_line: bool = False,\n    block_aperture_body_indent: str | int = 0,\n    step_and_repeat_body_indent: str | int = 0,\n    float_decimal_places: int = -1,\n    float_trim_trailing_zeros: bool = True,\n    d01_indent: int | str = 0,\n    d02_indent: int | str = 0,\n    d03_indent: int | str = 0,\n    line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n    empty_line_before_polarity_switch: bool = False,\n    keep_non_standalone_codes: bool = True,\n    remove_g54: bool = False,\n    remove_g55: bool = False,\n    explicit_parenthesis: bool = False,\n    strip_whitespace: bool = False,\n) -&gt; None:\n    r\"\"\"Initialize Formatter instance.\n\n    Parameters\n    ----------\n    indent_character: Literal[\" \", \"\\t\"], optional\n        Character used for indentation, by default \" \"\n    macro_body_indent : str | int, optional\n        Indentation of macro body, by default 0\n    macro_param_indent: str | int, optional\n        Indentation of macro parameters, by default 0\n        This indentation is added on top of macro body indentation.\n        This has effect only when `macro_split_mode` is `PARAMETERS`.\n    macro_split_mode : `Formatter.MacroSplitMode`, optional\n        Changes how macro definitions are formatted, by default `NONE`\n        When `NONE` is selected, macro will be formatted as a single line.\n        ```gerber\n        %AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n        ```\n        When `PRIMITIVES` is selected, macro will be formatted with each primitive\n        on a new line.\n        ```gerber\n        %AMDonut*\n        1,1,$1,$2,$3*\n        $4=$1x0.75*\n        1,0,$4,$2,$3*%\n        ```\n        When `PARAMETERS` is selected, macro will be formatted with each primitive\n        on a new line and each parameter of a primitive on a new line.\n        ```gerber\n        %AMDonut*\n        1,\n        1,\n        $1,\n        $2,\n        $3*\n        $4=$1x0.75*\n        1,\n        0,\n        $4,\n        $2,\n        $3*%\n        ```\n        Use `macro_body_indent` and `macro_param_indent` to control indentation.\n    macro_end_in_new_line: bool, optional\n        Place % sign which marks the end of macro in new line, by default False\n    block_aperture_body_indent : str | int, optional\n        Indentation of block aperture definition body, by default 0\n        This indentations stacks for nested block apertures.\n    step_and_repeat_body_indent : str | int, optional\n        Indentation of step and repeat definition body, by default 0\n        This indentations stacks for nested step and repeat blocks.\n    float_decimal_places : int, optional\n        Limit number of decimal places shown for float values, by default -1\n        Negative values are interpreted as no limit.\n    float_trim_trailing_zeros : bool, optional\n        Remove trailing zeros from floats, by default True\n        When this is enabled, after floating point number is formatted with respect\n        to `float_decimal_places`, trailing zeros are removed. If all zeros after\n        decimal point are removed, decimal point is also removed.\n    d01_indent : str | int, optional\n        Custom indentation of D01 command, by default 0\n    d02_indent : str | int, optional\n        Custom indentation of D02 command, by default 0\n    d03_indent : str | int, optional\n        Custom indentation of D03 command, by default 0\n    line_end : Literal[\"\\n\", \"\\r\\n\"], optional\n        Line ending character, Unix or Windows style, by default \"\\n\" (Unix style)\n        If `strip_whitespace` is enabled, no line end will be used.\n    empty_line_before_polarity_switch : bool, optional\n        Add empty line before polarity switch, by default False\n        This enhances visibility of sequences of commands with different\n        polarities.\n    keep_non_standalone_codes: bool, optional\n        Keep non-standalone codes in the output, by default True\n        If this option is disabled, codes that are not standalone, ie. `G70D02*`\n        will be divided into two separate commands, `G70*` and `D02*`, otherwise\n        they will be kept as is.\n    remove_g54: bool, optional\n        Remove G54 code from output, by default False\n        G54 code has no effect on the output, it was used in legacy files to\n        prefix select aperture command.\n    remove_g55: bool, optional\n        Remove G55 code from output, by default False\n        G55 code has no effect on the output, it was used in legacy files to\n        prefix flash command.\n    explicit_parenthesis: bool, optional\n        Add explicit parenthesis around all mathematical\n        expressions within macro, by default False\n        When false, original parenthesis are kept.\n    strip_whitespace : bool, optional\n        Remove all semantically insignificant whitespace, by default False\n\n    \"\"\"\n    super().__init__()\n    self.indent_character = indent_character\n\n    if isinstance(macro_body_indent, int):\n        macro_body_indent = indent_character * macro_body_indent\n    self.macro_body_indent = macro_body_indent\n\n    if isinstance(macro_param_indent, int):\n        macro_param_indent = indent_character * macro_param_indent\n    self.macro_param_indent = macro_param_indent\n\n    self.macro_split_mode = macro_split_mode\n    self.macro_end_in_new_line = macro_end_in_new_line\n\n    if isinstance(block_aperture_body_indent, int):\n        block_aperture_body_indent = indent_character * block_aperture_body_indent\n    self.block_aperture_body_indent = block_aperture_body_indent\n\n    if isinstance(step_and_repeat_body_indent, int):\n        step_and_repeat_body_indent = indent_character * step_and_repeat_body_indent\n    self.step_and_repeat_body_indent = step_and_repeat_body_indent\n\n    self.float_decimal_places = float_decimal_places\n\n    self.float_trim_trailing_zeros = float_trim_trailing_zeros\n\n    if isinstance(d01_indent, int):\n        d01_indent = indent_character * d01_indent\n    self.d01_indent = d01_indent\n\n    if isinstance(d02_indent, int):\n        d02_indent = indent_character * d02_indent\n    self.d02_indent = d02_indent\n\n    if isinstance(d03_indent, int):\n        d03_indent = indent_character * d03_indent\n    self.d03_indent = d03_indent\n\n    self.lf = line_end\n    self.empty_line_before_polarity_switch = (\n        self.lf if empty_line_before_polarity_switch else \"\"\n    )\n    self.keep_non_standalone_codes = keep_non_standalone_codes\n    self.remove_g54 = remove_g54\n    self.remove_g55 = remove_g55\n    self.explicit_parenthesis = explicit_parenthesis\n    self.strip_whitespace = strip_whitespace\n\n    if self.strip_whitespace:\n        self.lf = \"\"  # type: ignore[assignment]\n        self.indent_character = \"\"  # type: ignore[assignment]\n        self.macro_body_indent = \"\"\n        self.macro_param_indent = \"\"\n        self.block_aperture_body_indent = \"\"\n        self.step_and_repeat_body_indent = \"\"\n        self.d01_indent = \"\"\n        self.d02_indent = \"\"\n        self.d03_indent = \"\"\n        self.empty_line_before_polarity_switch = \"\"\n\n    self._output: Optional[StringIO] = None\n    self._base_indent: str = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.format","title":"format","text":"<pre><code>format(source: File, output: StringIO) -&gt; None\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def format(self, source: File, output: StringIO) -&gt; None:\n    \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n    self._output = output\n    try:\n        self.on_file(source)\n    finally:\n        self._output = None\n        self._base_indent = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.formats","title":"formats","text":"<pre><code>formats(source: File) -&gt; str\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def formats(self, source: File) -&gt; str:\n    \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n    out = StringIO()\n    self.format(source, out)\n    return out.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.format_node","title":"format_node","text":"<pre><code>format_node(node: Node, output: StringIO) -&gt; None\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def format_node(self, node: Node, output: StringIO) -&gt; None:\n    \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n    self._output = output\n    try:\n        node.visit(self)\n    finally:\n        self._output = None\n        self._base_indent = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.formats_node","title":"formats_node","text":"<pre><code>formats_node(node: File) -&gt; str\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def formats_node(self, node: File) -&gt; str:\n    \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n    out = StringIO()\n    self.format_node(node, out)\n    return out.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decrease_base_indent(\"block_aperture_body_indent\")\n@_decorator_insert_base_indent\ndef on_ab_close(self, node: ABclose) -&gt; ABclose:\n    \"\"\"Handle `ABclose` node.\"\"\"\n    with self._extended_command(\"AB\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\n@_increase_base_indent(\"block_aperture_body_indent\")\ndef on_ab_open(self, node: ABopen) -&gt; ABopen:\n    \"\"\"Handle `ABopen` node.\"\"\"\n    with self._extended_command(\"AB\"):\n        self._write(node.aperture_id)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}C,\"):\n        self._write(self._fmt_double(node.diameter))\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}R,\"):\n        self._write(self._fmt_double(node.width))\n        self._write(f\"X{self._fmt_double(node.height)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}O,\"):\n        self._write(self._fmt_double(node.width))\n        self._write(f\"X{self._fmt_double(node.height)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}P,\"):\n        self._write(self._fmt_double(node.outer_diameter))\n        self._write(f\"X{node.vertices}\")\n\n        if node.rotation is not None:\n            self._write(f\"X{self._fmt_double(node.rotation)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}{node.name}\"):\n        if node.params is not None:\n            first, *rest = node.params\n            self._write(f\",{first}\")\n            for param in rest:\n                self._write(f\"X{param}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_am_close(self, node: AMclose) -&gt; AMclose:\n    \"\"\"Handle `AMclose` node.\"\"\"\n    super().on_am_close(node)\n    if self.macro_end_in_new_line:\n        self._write(f\"{self.lf}\")\n    self._write(f\"%{self.lf}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_am_open(self, node: AMopen) -&gt; AMopen:\n    \"\"\"Handle `AMopen` node.\"\"\"\n    super().on_am_open(node)\n    self._write(f\"%AM{node.name}*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decrease_base_indent(\"step_and_repeat_body_indent\")\n@_decorator_insert_base_indent\ndef on_sr_close(self, node: SRclose) -&gt; SRclose:\n    \"\"\"Handle `SRclose` node.\"\"\"\n    with self._extended_command(\"SR\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\n@_increase_base_indent(\"step_and_repeat_body_indent\")\ndef on_sr_open(self, node: SRopen) -&gt; SRopen:\n    \"\"\"Handle `SRopen` node.\"\"\"\n    with self._extended_command(\"SR\"):\n        if node.x is not None:\n            self._write(f\"X{node.x}\")\n\n        if node.x is not None:\n            self._write(f\"Y{node.y}\")\n\n        if node.x is not None:\n            self._write(f\"I{node.i}\")\n\n        if node.x is not None:\n            self._write(f\"J{node.j}\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    with self._extended_command(f\"TA{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n    \"\"\"Handle `TA_AperFunction` node.\"\"\"\n    with self._extended_command(\"TA.AperFunction\"):\n        if node.function is not None:\n            self._write(\",\")\n            self._write(node.function.value)\n\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n    \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n    with self._extended_command(\"TA.DrillTolerance\"):\n        if node.plus_tolerance is not None:\n            self._write(\",\")\n            self._write(self._fmt_double(node.plus_tolerance))\n\n        if node.minus_tolerance is not None:\n            self._write(\",\")\n            self._write(self._fmt_double(node.minus_tolerance))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n    \"\"\"Handle `TA_FlashText` node.\"\"\"\n    with self._extended_command(\"TA.FlashText\"):\n        self._write(\",\")\n        self._write(node.string)\n\n        self._write(\",\")\n        self._write(node.mode)\n\n        self._write(\",\")\n        self._write(node.mirroring)\n\n        if len(node.comments) == 0:\n            if node.font is not None:\n                self._write(\",\")\n                self._write(node.font)\n\n            if node.size is not None:\n                self._write(\",\")\n                self._write(node.size)\n\n            for comment in node.comments:\n                self._write(\",\")\n                self._write(comment)\n        else:\n            self._write(\",\")\n            if node.font is not None:\n                self._write(node.font)\n\n            self._write(\",\")\n            if node.size is not None:\n                self._write(node.size)\n\n            for comment in node.comments:\n                self._write(\",\")\n                self._write(comment)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    with self._extended_command(\"TD\"):\n        if node.name is not None:\n            self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n    \"\"\"Handle `TF_UserName` node.\"\"\"\n    with self._extended_command(f\"TF{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n    \"\"\"Handle `TF_Part` node.\"\"\"\n    with self._extended_command(\"TF.Part,\"):\n        self._write(node.part.value)\n        if len(node.fields) != 0:\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n    \"\"\"Handle `TF_FileFunction` node.\"\"\"\n    with self._extended_command(\"TF.FileFunction,\"):\n        self._write(node.file_function.value)\n        if len(node.fields) != 0:\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n    \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n    with self._extended_command(\"TF.FilePolarity,\"):\n        self._write(node.polarity)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n    \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n    with self._extended_command(\"TF.SameCoordinates\"):\n        if node.identifier is not None:\n            self._write(\",\")\n            self._write(node.identifier)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n    \"\"\"Handle `TF_CreationDate` node.\"\"\"\n    with self._extended_command(\"TF.CreationDate\"):\n        if node.creation_date is not None:\n            self._write(\",\")\n            self._write(node.creation_date.isoformat())\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_generation_software(\n    self, node: TF_GenerationSoftware\n) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n    with self._extended_command(\"TF.GenerationSoftware\"):\n        self._write(\",\")\n        if node.vendor is not None:\n            self._write(node.vendor)\n\n        self._write(\",\")\n        if node.application is not None:\n            self._write(node.application)\n\n        self._write(\",\")\n        if node.version is not None:\n            self._write(node.version)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n    \"\"\"Handle `TF_ProjectId` node.\"\"\"\n    with self._extended_command(\"TF.ProjectId\"):\n        self._write(\",\")\n        if node.name is not None:\n            self._write(node.name)\n\n        self._write(\",\")\n        if node.guid is not None:\n            self._write(node.guid)\n\n        self._write(\",\")\n        if node.revision is not None:\n            self._write(node.revision)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n    \"\"\"Handle `TF_MD5` node.\"\"\"\n    with self._extended_command(\"TF.MD5\"):\n        self._write(\",\")\n        self._write(node.md5)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n    \"\"\"Handle `TO_UserName` node.\"\"\"\n    with self._extended_command(f\"TO{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_n(self, node: TO_N) -&gt; TO_N:\n    \"\"\"Handle `TO_N` node.\"\"\"\n    with self._extended_command(\"TO.N\"):\n        for field in node.net_names:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_p(self, node: TO_P) -&gt; TO_P:\n    \"\"\"Handle `TO_P` node`.\"\"\"\n    with self._extended_command(\"TO.P\"):\n        self._write(\",\")\n        self._write(node.refdes)\n        self._write(\",\")\n        self._write(node.number)\n        if node.function is not None:\n            self._write(\",\")\n            self._write(node.function)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_c(self, node: TO_C) -&gt; TO_C:\n    \"\"\"Handle `TO_C` node.\"\"\"\n    with self._extended_command(\"TO.C\"):\n        self._write(\",\")\n        self._write(node.refdes)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n    \"\"\"Handle `TO_CRot` node.\"\"\"\n    with self._extended_command(\"TO.CRot\"):\n        self._write(\",\")\n        self._write(self._fmt_double(node.angle))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n    \"\"\"Handle `TO_CMfr` node.\"\"\"\n    with self._extended_command(\"TO.CMfr\"):\n        self._write(\",\")\n        self._write(node.manufacturer)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n    \"\"\"Handle `TO_CMNP` node.\"\"\"\n    with self._extended_command(\"TO.CMPN\"):\n        self._write(\",\")\n        self._write(node.part_number)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    with self._extended_command(\"TO.CVal\"):\n        self._write(\",\")\n        self._write(node.value)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    with self._extended_command(\"TO.CMnt\"):\n        self._write(\",\")\n        self._write(node.mount.value)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n    \"\"\"Handle `TO_Cftp` node.\"\"\"\n    with self._extended_command(\"TO.CFtp\"):\n        self._write(\",\")\n        self._write(node.footprint)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n    \"\"\"Handle `TO_CPgN` node.\"\"\"\n    with self._extended_command(\"TO.CPgN\"):\n        self._write(\",\")\n        self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n    \"\"\"Handle `TO_CPgD` node.\"\"\"\n    with self._extended_command(\"TO.CPgD\"):\n        self._write(\",\")\n        self._write(node.description)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n    \"\"\"Handle `TO_CHgt` node.\"\"\"\n    with self._extended_command(\"TO.CHgt\"):\n        self._write(\",\")\n        self._write(self._fmt_double(node.height))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n    \"\"\"Handle `TO_CLbN` node.\"\"\"\n    with self._extended_command(\"TO.CLbn\"):\n        self._write(\",\")\n        self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n    \"\"\"Handle `TO_CLbD` node.\"\"\"\n    with self._extended_command(\"TO.CLbD\"):\n        self._write(\",\")\n        self._write(node.description)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n    \"\"\"Handle `TO_CSup` node.\"\"\"\n    with self._extended_command(\"TO.CSup\"):\n        self._write(\",\")\n        self._write(node.supplier)\n        self._write(\",\")\n        self._write(node.supplier_part)\n        for field in node.other_suppliers:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d01_indent)\n\n    super().on_d01(node)\n    with self._command(\"D01\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d02_indent)\n\n    super().on_d02(node)\n    with self._command(\"D02\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d03_indent)\n\n    super().on_d03(node)\n    with self._command(\"D03\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n\n    with self._command(node.aperture_id):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    self._handle_g(node, G01)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    self._handle_g(node, G02)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    self._handle_g(node, G03)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g04(self, node: G04) -&gt; G04:\n    \"\"\"Handle `G04` node.\"\"\"\n    with self._command(f\"G04{node.string or ''}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    self._handle_g(node, G36)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    self._handle_g(node, G37)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g54(self, node: G54) -&gt; G54:\n    \"\"\"Handle `G54` node.\"\"\"\n    if self.remove_g54:\n        return node\n    self._handle_g(node, G54)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g55(self, node: G55) -&gt; G55:\n    \"\"\"Handle `G55` node.\"\"\"\n    if self.remove_g55:\n        return node\n    self._handle_g(node, G55)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    self._handle_g(node, G70)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    self._handle_g(node, G71)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    self._handle_g(node, G74)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    self._handle_g(node, G75)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    self._handle_g(node, G90)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    self._handle_g(node, G91)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    with self._extended_command(f\"LM{node.mirroring.value}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    with self._extended_command(f\"LN{node.name}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_insert_var(\"empty_line_before_polarity_switch\")\n@_decorator_insert_base_indent\ndef on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    with self._extended_command(f\"LP{node.polarity.value}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    with self._extended_command(f\"LR{self._fmt_double(node.rotation)}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    with self._extended_command(f\"LS{self._fmt_double(node.scale)}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    with self._command(\"M00\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m01(self, node: M01) -&gt; M01:\n    \"\"\"Handle `M01` node.\"\"\"\n    with self._command(\"M01\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    with self._command(\"M02\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"+\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"/\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"x\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"-\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    self._write(\"-\")\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    self._write(\"+\")\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_assignment(self, node: Assignment) -&gt; Assignment:\n    \"\"\"Handle `Assignment` node.\"\"\"\n    self._write(self._macro_primitive_lf)\n    node.variable.visit(self)\n    self._write(\"=\")\n    node.expression.visit(self)\n    self._write(\"*\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self._write(self._fmt_double(node.constant))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n    \"\"\"Handle `Parenthesis` node.\"\"\"\n    if not self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.inner.visit(self)\n\n    if not self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_point(self, node: Point) -&gt; Point:\n    \"\"\"Handle `Point` node.\"\"\"\n    node.x.visit(self)\n    self._write(\",\")\n    node.y.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self._write(node.variable)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"X{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"Y{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"I{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"J{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_0(self, node: Code0) -&gt; Code0:\n    \"\"\"Handle `Code0` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}0{node.string}*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_1(self, node: Code1) -&gt; Code1:\n    \"\"\"Handle `Code1` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}1,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n\n    if node.rotation is not None:\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_2(self, node: Code2) -&gt; Code2:\n    \"\"\"Handle `Code2` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}2,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_4(self, node: Code4) -&gt; Code4:\n    \"\"\"Handle `Code4` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}4,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.number_of_points.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n\n    for point in node.points:\n        self._write(f\",{self._macro_param_lf}\")\n        point.visit(self)\n\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_5(self, node: Code5) -&gt; Code5:\n    \"\"\"Handle `Code5` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}5,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.number_of_vertices.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_6(self, node: Code6) -&gt; Code6:\n    \"\"\"Handle `Code6` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}6,{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.outer_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.ring_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.gap_between_rings.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.max_ring_count.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.crosshair_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.crosshair_length.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_7(self, node: Code7) -&gt; Code7:\n    \"\"\"Handle `Code7` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}7,{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.outer_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.inner_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.gap_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_20(self, node: Code20) -&gt; Code20:\n    \"\"\"Handle `Code20` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}20,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_21(self, node: Code21) -&gt; Code21:\n    \"\"\"Handle `Code21` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}21,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.height.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_22(self, node: Code22) -&gt; Code22:\n    \"\"\"Handle `Code22` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}22,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.height.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.x_lower_left.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.y_lower_left.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    with self._extended_command(\"AS\"):\n        self._write(node.correspondence.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    with self._extended_command(\"FS\"):\n        self._write(node.zeros.value)\n        self._write(node.coordinate_mode.value)\n        self._write(f\"X{node.x_integral}{node.x_decimal}\")\n        self._write(f\"Y{node.y_integral}{node.y_decimal}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    with self._extended_command(\"IN\"):\n        self._write(node.name)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    with self._extended_command(\"IP\"):\n        self._write(node.polarity.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    with self._extended_command(\"IR\"):\n        self._write(self._fmt_double(node.rotation_degrees))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    with self._extended_command(\"MI\"):\n        self._write(f\"A{node.a_mirroring}\")\n        self._write(f\"B{node.b_mirroring}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    with self._extended_command(\"MO\"):\n        self._write(node.mode.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    with self._extended_command(\"OF\"):\n        if node.a_offset is not None:\n            self._write(f\"A{node.a_offset}\")\n        if node.b_offset is not None:\n            self._write(f\"B{node.b_offset}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/__init__.html#pygerber.gerberx3.formatter.Formatter.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    with self._extended_command(\"SF\"):\n        self._write(\"A\")\n        self._write(self._fmt_double(node.a_scale))\n        self._write(\"B\")\n        self._write(self._fmt_double(node.b_scale))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html","title":"formatter","text":""},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter","title":"formatter","text":"<p><code>pygerber.gerberx3.formatter</code> module contains implementation <code>Formatter</code> class which implements configurable Gerber code formatting.</p>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.FormatterError","title":"FormatterError","text":"<p>             Bases: <code>Exception</code></p> <p>Formatter error.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>class FormatterError(Exception):\n    \"\"\"Formatter error.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter","title":"Formatter","text":"<p>             Bases: <code>AstVisitor</code></p> <p>Gerber X3 compatible formatter.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>class Formatter(AstVisitor):\n    \"\"\"Gerber X3 compatible formatter.\"\"\"\n\n    class MacroSplitMode(Enum):\n        \"\"\"Macro split mode.\"\"\"\n\n        NONE = \"none\"\n        PRIMITIVES = \"primitives\"\n        PARAMETERS = \"parameters\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        *,\n        indent_character: Literal[\" \", \"\\t\"] = \" \",\n        macro_body_indent: str | int = 0,\n        macro_param_indent: str | int = 0,\n        macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n        macro_end_in_new_line: bool = False,\n        block_aperture_body_indent: str | int = 0,\n        step_and_repeat_body_indent: str | int = 0,\n        float_decimal_places: int = -1,\n        float_trim_trailing_zeros: bool = True,\n        d01_indent: int | str = 0,\n        d02_indent: int | str = 0,\n        d03_indent: int | str = 0,\n        line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n        empty_line_before_polarity_switch: bool = False,\n        keep_non_standalone_codes: bool = True,\n        remove_g54: bool = False,\n        remove_g55: bool = False,\n        explicit_parenthesis: bool = False,\n        strip_whitespace: bool = False,\n    ) -&gt; None:\n        r\"\"\"Initialize Formatter instance.\n\n        Parameters\n        ----------\n        indent_character: Literal[\" \", \"\\t\"], optional\n            Character used for indentation, by default \" \"\n        macro_body_indent : str | int, optional\n            Indentation of macro body, by default 0\n        macro_param_indent: str | int, optional\n            Indentation of macro parameters, by default 0\n            This indentation is added on top of macro body indentation.\n            This has effect only when `macro_split_mode` is `PARAMETERS`.\n        macro_split_mode : `Formatter.MacroSplitMode`, optional\n            Changes how macro definitions are formatted, by default `NONE`\n            When `NONE` is selected, macro will be formatted as a single line.\n            ```gerber\n            %AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n            ```\n            When `PRIMITIVES` is selected, macro will be formatted with each primitive\n            on a new line.\n            ```gerber\n            %AMDonut*\n            1,1,$1,$2,$3*\n            $4=$1x0.75*\n            1,0,$4,$2,$3*%\n            ```\n            When `PARAMETERS` is selected, macro will be formatted with each primitive\n            on a new line and each parameter of a primitive on a new line.\n            ```gerber\n            %AMDonut*\n            1,\n            1,\n            $1,\n            $2,\n            $3*\n            $4=$1x0.75*\n            1,\n            0,\n            $4,\n            $2,\n            $3*%\n            ```\n            Use `macro_body_indent` and `macro_param_indent` to control indentation.\n        macro_end_in_new_line: bool, optional\n            Place % sign which marks the end of macro in new line, by default False\n        block_aperture_body_indent : str | int, optional\n            Indentation of block aperture definition body, by default 0\n            This indentations stacks for nested block apertures.\n        step_and_repeat_body_indent : str | int, optional\n            Indentation of step and repeat definition body, by default 0\n            This indentations stacks for nested step and repeat blocks.\n        float_decimal_places : int, optional\n            Limit number of decimal places shown for float values, by default -1\n            Negative values are interpreted as no limit.\n        float_trim_trailing_zeros : bool, optional\n            Remove trailing zeros from floats, by default True\n            When this is enabled, after floating point number is formatted with respect\n            to `float_decimal_places`, trailing zeros are removed. If all zeros after\n            decimal point are removed, decimal point is also removed.\n        d01_indent : str | int, optional\n            Custom indentation of D01 command, by default 0\n        d02_indent : str | int, optional\n            Custom indentation of D02 command, by default 0\n        d03_indent : str | int, optional\n            Custom indentation of D03 command, by default 0\n        line_end : Literal[\"\\n\", \"\\r\\n\"], optional\n            Line ending character, Unix or Windows style, by default \"\\n\" (Unix style)\n            If `strip_whitespace` is enabled, no line end will be used.\n        empty_line_before_polarity_switch : bool, optional\n            Add empty line before polarity switch, by default False\n            This enhances visibility of sequences of commands with different\n            polarities.\n        keep_non_standalone_codes: bool, optional\n            Keep non-standalone codes in the output, by default True\n            If this option is disabled, codes that are not standalone, ie. `G70D02*`\n            will be divided into two separate commands, `G70*` and `D02*`, otherwise\n            they will be kept as is.\n        remove_g54: bool, optional\n            Remove G54 code from output, by default False\n            G54 code has no effect on the output, it was used in legacy files to\n            prefix select aperture command.\n        remove_g55: bool, optional\n            Remove G55 code from output, by default False\n            G55 code has no effect on the output, it was used in legacy files to\n            prefix flash command.\n        explicit_parenthesis: bool, optional\n            Add explicit parenthesis around all mathematical\n            expressions within macro, by default False\n            When false, original parenthesis are kept.\n        strip_whitespace : bool, optional\n            Remove all semantically insignificant whitespace, by default False\n\n        \"\"\"\n        super().__init__()\n        self.indent_character = indent_character\n\n        if isinstance(macro_body_indent, int):\n            macro_body_indent = indent_character * macro_body_indent\n        self.macro_body_indent = macro_body_indent\n\n        if isinstance(macro_param_indent, int):\n            macro_param_indent = indent_character * macro_param_indent\n        self.macro_param_indent = macro_param_indent\n\n        self.macro_split_mode = macro_split_mode\n        self.macro_end_in_new_line = macro_end_in_new_line\n\n        if isinstance(block_aperture_body_indent, int):\n            block_aperture_body_indent = indent_character * block_aperture_body_indent\n        self.block_aperture_body_indent = block_aperture_body_indent\n\n        if isinstance(step_and_repeat_body_indent, int):\n            step_and_repeat_body_indent = indent_character * step_and_repeat_body_indent\n        self.step_and_repeat_body_indent = step_and_repeat_body_indent\n\n        self.float_decimal_places = float_decimal_places\n\n        self.float_trim_trailing_zeros = float_trim_trailing_zeros\n\n        if isinstance(d01_indent, int):\n            d01_indent = indent_character * d01_indent\n        self.d01_indent = d01_indent\n\n        if isinstance(d02_indent, int):\n            d02_indent = indent_character * d02_indent\n        self.d02_indent = d02_indent\n\n        if isinstance(d03_indent, int):\n            d03_indent = indent_character * d03_indent\n        self.d03_indent = d03_indent\n\n        self.lf = line_end\n        self.empty_line_before_polarity_switch = (\n            self.lf if empty_line_before_polarity_switch else \"\"\n        )\n        self.keep_non_standalone_codes = keep_non_standalone_codes\n        self.remove_g54 = remove_g54\n        self.remove_g55 = remove_g55\n        self.explicit_parenthesis = explicit_parenthesis\n        self.strip_whitespace = strip_whitespace\n\n        if self.strip_whitespace:\n            self.lf = \"\"  # type: ignore[assignment]\n            self.indent_character = \"\"  # type: ignore[assignment]\n            self.macro_body_indent = \"\"\n            self.macro_param_indent = \"\"\n            self.block_aperture_body_indent = \"\"\n            self.step_and_repeat_body_indent = \"\"\n            self.d01_indent = \"\"\n            self.d02_indent = \"\"\n            self.d03_indent = \"\"\n            self.empty_line_before_polarity_switch = \"\"\n\n        self._output: Optional[StringIO] = None\n        self._base_indent: str = \"\"\n\n    def format(self, source: File, output: StringIO) -&gt; None:\n        \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n        self._output = output\n        try:\n            self.on_file(source)\n        finally:\n            self._output = None\n            self._base_indent = \"\"\n\n    def formats(self, source: File) -&gt; str:\n        \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n        out = StringIO()\n        self.format(source, out)\n        return out.getvalue()\n\n    def format_node(self, node: Node, output: StringIO) -&gt; None:\n        \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n        self._output = output\n        try:\n            node.visit(self)\n        finally:\n            self._output = None\n            self._base_indent = \"\"\n\n    def formats_node(self, node: File) -&gt; str:\n        \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n        out = StringIO()\n        self.format_node(node, out)\n        return out.getvalue()\n\n    @property\n    def output(self) -&gt; StringIO:\n        \"\"\"Get output buffer.\"\"\"\n        if self._output is None:\n            msg = \"Output buffer is not set.\"\n            raise FormatterError(msg)\n\n        return self._output\n\n    def _fmt_double(self, value: Double) -&gt; str:\n        if self.float_decimal_places &lt; 0:\n            return str(value)\n        double = f\"{value:.{self.float_decimal_places}f}\"\n        if self.float_trim_trailing_zeros:\n            return double.rstrip(\"0\").rstrip(\".\")\n        return double\n\n    def _insert_base_indent(self) -&gt; None:\n        self._write(self._base_indent)\n\n    def _insert_extra_indent(self, value: str) -&gt; None:\n        self._write(value)\n\n    @contextmanager\n    def _command(\n        self, cmd: str, *, asterisk: bool = True, lf: bool = True\n    ) -&gt; Generator[None, None, None]:\n        self._write(cmd)\n        yield\n        if asterisk:\n            self._write(\"*\")\n        if lf:\n            self._write(self.lf)\n\n    @contextmanager\n    def _extended_command(self, cmd: str) -&gt; Generator[None, None, None]:\n        self._write(f\"%{cmd}\")\n        yield\n        self._write(f\"*%{self.lf}\")\n\n    def _write(self, value: str) -&gt; None:\n        self.output.write(value)\n\n    @_decrease_base_indent(\"block_aperture_body_indent\")\n    @_decorator_insert_base_indent\n    def on_ab_close(self, node: ABclose) -&gt; ABclose:\n        \"\"\"Handle `ABclose` node.\"\"\"\n        with self._extended_command(\"AB\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    @_increase_base_indent(\"block_aperture_body_indent\")\n    def on_ab_open(self, node: ABopen) -&gt; ABopen:\n        \"\"\"Handle `ABopen` node.\"\"\"\n        with self._extended_command(\"AB\"):\n            self._write(node.aperture_id)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adc(self, node: ADC) -&gt; ADC:\n        \"\"\"Handle `AD` circle node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}C,\"):\n            self._write(self._fmt_double(node.diameter))\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adr(self, node: ADR) -&gt; ADR:\n        \"\"\"Handle `AD` rectangle node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}R,\"):\n            self._write(self._fmt_double(node.width))\n            self._write(f\"X{self._fmt_double(node.height)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ado(self, node: ADO) -&gt; ADO:\n        \"\"\"Handle `AD` obround node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}O,\"):\n            self._write(self._fmt_double(node.width))\n            self._write(f\"X{self._fmt_double(node.height)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_adp(self, node: ADP) -&gt; ADP:\n        \"\"\"Handle `AD` polygon node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}P,\"):\n            self._write(self._fmt_double(node.outer_diameter))\n            self._write(f\"X{node.vertices}\")\n\n            if node.rotation is not None:\n                self._write(f\"X{self._fmt_double(node.rotation)}\")\n\n            if node.hole_diameter is not None:\n                self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        \"\"\"Handle `AD` macro node.\"\"\"\n        with self._extended_command(f\"AD{node.aperture_id}{node.name}\"):\n            if node.params is not None:\n                first, *rest = node.params\n                self._write(f\",{first}\")\n                for param in rest:\n                    self._write(f\"X{param}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_am_close(self, node: AMclose) -&gt; AMclose:\n        \"\"\"Handle `AMclose` node.\"\"\"\n        super().on_am_close(node)\n        if self.macro_end_in_new_line:\n            self._write(f\"{self.lf}\")\n        self._write(f\"%{self.lf}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_am_open(self, node: AMopen) -&gt; AMopen:\n        \"\"\"Handle `AMopen` node.\"\"\"\n        super().on_am_open(node)\n        self._write(f\"%AM{node.name}*\")\n        return node\n\n    @_decrease_base_indent(\"step_and_repeat_body_indent\")\n    @_decorator_insert_base_indent\n    def on_sr_close(self, node: SRclose) -&gt; SRclose:\n        \"\"\"Handle `SRclose` node.\"\"\"\n        with self._extended_command(\"SR\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    @_increase_base_indent(\"step_and_repeat_body_indent\")\n    def on_sr_open(self, node: SRopen) -&gt; SRopen:\n        \"\"\"Handle `SRopen` node.\"\"\"\n        with self._extended_command(\"SR\"):\n            if node.x is not None:\n                self._write(f\"X{node.x}\")\n\n            if node.x is not None:\n                self._write(f\"Y{node.y}\")\n\n            if node.x is not None:\n                self._write(f\"I{node.i}\")\n\n            if node.x is not None:\n                self._write(f\"J{node.j}\")\n\n        return node\n\n    # Attribute\n\n    @_decorator_insert_base_indent\n    def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        with self._extended_command(f\"TA{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n        \"\"\"Handle `TA_AperFunction` node.\"\"\"\n        with self._extended_command(\"TA.AperFunction\"):\n            if node.function is not None:\n                self._write(\",\")\n                self._write(node.function.value)\n\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n        \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n        with self._extended_command(\"TA.DrillTolerance\"):\n            if node.plus_tolerance is not None:\n                self._write(\",\")\n                self._write(self._fmt_double(node.plus_tolerance))\n\n            if node.minus_tolerance is not None:\n                self._write(\",\")\n                self._write(self._fmt_double(node.minus_tolerance))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n        \"\"\"Handle `TA_FlashText` node.\"\"\"\n        with self._extended_command(\"TA.FlashText\"):\n            self._write(\",\")\n            self._write(node.string)\n\n            self._write(\",\")\n            self._write(node.mode)\n\n            self._write(\",\")\n            self._write(node.mirroring)\n\n            if len(node.comments) == 0:\n                if node.font is not None:\n                    self._write(\",\")\n                    self._write(node.font)\n\n                if node.size is not None:\n                    self._write(\",\")\n                    self._write(node.size)\n\n                for comment in node.comments:\n                    self._write(\",\")\n                    self._write(comment)\n            else:\n                self._write(\",\")\n                if node.font is not None:\n                    self._write(node.font)\n\n                self._write(\",\")\n                if node.size is not None:\n                    self._write(node.size)\n\n                for comment in node.comments:\n                    self._write(\",\")\n                    self._write(comment)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_td(self, node: TD) -&gt; TD:\n        \"\"\"Handle `TD` node.\"\"\"\n        with self._extended_command(\"TD\"):\n            if node.name is not None:\n                self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n        \"\"\"Handle `TF_UserName` node.\"\"\"\n        with self._extended_command(f\"TF{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n        \"\"\"Handle `TF_Part` node.\"\"\"\n        with self._extended_command(\"TF.Part,\"):\n            self._write(node.part.value)\n            if len(node.fields) != 0:\n                for field in node.fields:\n                    self._write(\",\")\n                    self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n        \"\"\"Handle `TF_FileFunction` node.\"\"\"\n        with self._extended_command(\"TF.FileFunction,\"):\n            self._write(node.file_function.value)\n            if len(node.fields) != 0:\n                for field in node.fields:\n                    self._write(\",\")\n                    self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n        \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n        with self._extended_command(\"TF.FilePolarity,\"):\n            self._write(node.polarity)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n        \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n        with self._extended_command(\"TF.SameCoordinates\"):\n            if node.identifier is not None:\n                self._write(\",\")\n                self._write(node.identifier)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n        \"\"\"Handle `TF_CreationDate` node.\"\"\"\n        with self._extended_command(\"TF.CreationDate\"):\n            if node.creation_date is not None:\n                self._write(\",\")\n                self._write(node.creation_date.isoformat())\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_generation_software(\n        self, node: TF_GenerationSoftware\n    ) -&gt; TF_GenerationSoftware:\n        \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n        with self._extended_command(\"TF.GenerationSoftware\"):\n            self._write(\",\")\n            if node.vendor is not None:\n                self._write(node.vendor)\n\n            self._write(\",\")\n            if node.application is not None:\n                self._write(node.application)\n\n            self._write(\",\")\n            if node.version is not None:\n                self._write(node.version)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n        \"\"\"Handle `TF_ProjectId` node.\"\"\"\n        with self._extended_command(\"TF.ProjectId\"):\n            self._write(\",\")\n            if node.name is not None:\n                self._write(node.name)\n\n            self._write(\",\")\n            if node.guid is not None:\n                self._write(node.guid)\n\n            self._write(\",\")\n            if node.revision is not None:\n                self._write(node.revision)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n        \"\"\"Handle `TF_MD5` node.\"\"\"\n        with self._extended_command(\"TF.MD5\"):\n            self._write(\",\")\n            self._write(node.md5)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n        \"\"\"Handle `TO_UserName` node.\"\"\"\n        with self._extended_command(f\"TO{node.user_name}\"):\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_n(self, node: TO_N) -&gt; TO_N:\n        \"\"\"Handle `TO_N` node.\"\"\"\n        with self._extended_command(\"TO.N\"):\n            for field in node.net_names:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_p(self, node: TO_P) -&gt; TO_P:\n        \"\"\"Handle `TO_P` node`.\"\"\"\n        with self._extended_command(\"TO.P\"):\n            self._write(\",\")\n            self._write(node.refdes)\n            self._write(\",\")\n            self._write(node.number)\n            if node.function is not None:\n                self._write(\",\")\n                self._write(node.function)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_c(self, node: TO_C) -&gt; TO_C:\n        \"\"\"Handle `TO_C` node.\"\"\"\n        with self._extended_command(\"TO.C\"):\n            self._write(\",\")\n            self._write(node.refdes)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n        \"\"\"Handle `TO_CRot` node.\"\"\"\n        with self._extended_command(\"TO.CRot\"):\n            self._write(\",\")\n            self._write(self._fmt_double(node.angle))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n        \"\"\"Handle `TO_CMfr` node.\"\"\"\n        with self._extended_command(\"TO.CMfr\"):\n            self._write(\",\")\n            self._write(node.manufacturer)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n        \"\"\"Handle `TO_CMNP` node.\"\"\"\n        with self._extended_command(\"TO.CMPN\"):\n            self._write(\",\")\n            self._write(node.part_number)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        with self._extended_command(\"TO.CVal\"):\n            self._write(\",\")\n            self._write(node.value)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        with self._extended_command(\"TO.CMnt\"):\n            self._write(\",\")\n            self._write(node.mount.value)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n        \"\"\"Handle `TO_Cftp` node.\"\"\"\n        with self._extended_command(\"TO.CFtp\"):\n            self._write(\",\")\n            self._write(node.footprint)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n        \"\"\"Handle `TO_CPgN` node.\"\"\"\n        with self._extended_command(\"TO.CPgN\"):\n            self._write(\",\")\n            self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n        \"\"\"Handle `TO_CPgD` node.\"\"\"\n        with self._extended_command(\"TO.CPgD\"):\n            self._write(\",\")\n            self._write(node.description)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n        \"\"\"Handle `TO_CHgt` node.\"\"\"\n        with self._extended_command(\"TO.CHgt\"):\n            self._write(\",\")\n            self._write(self._fmt_double(node.height))\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n        \"\"\"Handle `TO_CLbN` node.\"\"\"\n        with self._extended_command(\"TO.CLbn\"):\n            self._write(\",\")\n            self._write(node.name)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n        \"\"\"Handle `TO_CLbD` node.\"\"\"\n        with self._extended_command(\"TO.CLbD\"):\n            self._write(\",\")\n            self._write(node.description)\n\n        return node\n\n    @_decorator_insert_base_indent\n    def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n        \"\"\"Handle `TO_CSup` node.\"\"\"\n        with self._extended_command(\"TO.CSup\"):\n            self._write(\",\")\n            self._write(node.supplier)\n            self._write(\",\")\n            self._write(node.supplier_part)\n            for field in node.other_suppliers:\n                self._write(\",\")\n                self._write(field)\n\n        return node\n\n    # D codes\n\n    def on_d01(self, node: D01) -&gt; D01:\n        \"\"\"Handle `D01` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d01_indent)\n\n        super().on_d01(node)\n        with self._command(\"D01\"):\n            pass\n\n        return node\n\n    def on_d02(self, node: D02) -&gt; D02:\n        \"\"\"Handle `D02` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d02_indent)\n\n        super().on_d02(node)\n        with self._command(\"D02\"):\n            pass\n\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        \"\"\"Handle `D03` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n            self._insert_extra_indent(self.d03_indent)\n\n        super().on_d03(node)\n        with self._command(\"D03\"):\n            pass\n\n        return node\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        \"\"\"Handle `Dnn` node.\"\"\"\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            self._insert_base_indent()\n\n        with self._command(node.aperture_id):\n            pass\n\n        return node\n\n    # G codes\n\n    def _handle_g(self, node: G, cls: Type[G]) -&gt; None:\n        if node.is_standalone or not self.keep_non_standalone_codes:\n            with self._command(cls.__qualname__):\n                pass\n            return\n\n        self._write(cls.__qualname__)\n\n    @_decorator_insert_base_indent\n    def on_g01(self, node: G01) -&gt; G01:\n        \"\"\"Handle `G01` node.\"\"\"\n        self._handle_g(node, G01)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g02(self, node: G02) -&gt; G02:\n        \"\"\"Handle `G02` node.\"\"\"\n        self._handle_g(node, G02)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g03(self, node: G03) -&gt; G03:\n        \"\"\"Handle `G03` node.\"\"\"\n        self._handle_g(node, G03)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g04(self, node: G04) -&gt; G04:\n        \"\"\"Handle `G04` node.\"\"\"\n        with self._command(f\"G04{node.string or ''}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g36(self, node: G36) -&gt; G36:\n        \"\"\"Handle `G36` node.\"\"\"\n        self._handle_g(node, G36)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g37(self, node: G37) -&gt; G37:\n        \"\"\"Handle `G37` node.\"\"\"\n        self._handle_g(node, G37)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g54(self, node: G54) -&gt; G54:\n        \"\"\"Handle `G54` node.\"\"\"\n        if self.remove_g54:\n            return node\n        self._handle_g(node, G54)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g55(self, node: G55) -&gt; G55:\n        \"\"\"Handle `G55` node.\"\"\"\n        if self.remove_g55:\n            return node\n        self._handle_g(node, G55)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g70(self, node: G70) -&gt; G70:\n        \"\"\"Handle `G70` node.\"\"\"\n        self._handle_g(node, G70)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g71(self, node: G71) -&gt; G71:\n        \"\"\"Handle `G71` node.\"\"\"\n        self._handle_g(node, G71)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g74(self, node: G74) -&gt; G74:\n        \"\"\"Handle `G74` node.\"\"\"\n        self._handle_g(node, G74)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g75(self, node: G75) -&gt; G75:\n        \"\"\"Handle `G75` node.\"\"\"\n        self._handle_g(node, G75)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g90(self, node: G90) -&gt; G90:\n        \"\"\"Handle `G90` node.\"\"\"\n        self._handle_g(node, G90)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_g91(self, node: G91) -&gt; G91:\n        \"\"\"Handle `G91` node.\"\"\"\n        self._handle_g(node, G91)\n        return node\n\n    # Load\n\n    @_decorator_insert_base_indent\n    def on_lm(self, node: LM) -&gt; LM:\n        \"\"\"Handle `LM` node.\"\"\"\n        with self._extended_command(f\"LM{node.mirroring.value}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ln(self, node: LN) -&gt; LN:\n        \"\"\"Handle `LN` node.\"\"\"\n        with self._extended_command(f\"LN{node.name}\"):\n            pass\n        return node\n\n    @_insert_var(\"empty_line_before_polarity_switch\")\n    @_decorator_insert_base_indent\n    def on_lp(self, node: LP) -&gt; LP:\n        \"\"\"Handle `LP` node.\"\"\"\n        with self._extended_command(f\"LP{node.polarity.value}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_lr(self, node: LR) -&gt; LR:\n        \"\"\"Handle `LR` node.\"\"\"\n        with self._extended_command(f\"LR{self._fmt_double(node.rotation)}\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ls(self, node: LS) -&gt; LS:\n        \"\"\"Handle `LS` node.\"\"\"\n        with self._extended_command(f\"LS{self._fmt_double(node.scale)}\"):\n            pass\n        return node\n\n    # M Codes\n\n    @_decorator_insert_base_indent\n    def on_m00(self, node: M00) -&gt; M00:\n        \"\"\"Handle `M00` node.\"\"\"\n        with self._command(\"M00\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_m01(self, node: M01) -&gt; M01:\n        \"\"\"Handle `M01` node.\"\"\"\n        with self._command(\"M01\"):\n            pass\n        return node\n\n    @_decorator_insert_base_indent\n    def on_m02(self, node: M02) -&gt; M02:\n        \"\"\"Handle `M02` node.\"\"\"\n        with self._command(\"M02\"):\n            pass\n        return node\n\n    # Math\n\n    # Math :: Operators :: Binary\n    def on_add(self, node: Add) -&gt; Add:\n        \"\"\"Handle `Add` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"+\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_div(self, node: Div) -&gt; Div:\n        \"\"\"Handle `Div` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"/\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_mul(self, node: Mul) -&gt; Mul:\n        \"\"\"Handle `Mul` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"x\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_sub(self, node: Sub) -&gt; Sub:\n        \"\"\"Handle `Sub` node.\"\"\"\n        if self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.head.visit(self)\n\n        for operand in node.tail:\n            self._write(\"-\")\n            operand.visit(self)\n\n        if self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    # Math :: Operators :: Unary\n\n    def on_neg(self, node: Neg) -&gt; Neg:\n        \"\"\"Handle `Neg` node.\"\"\"\n        self._write(\"-\")\n        node.operand.visit(self)\n        return node\n\n    def on_pos(self, node: Pos) -&gt; Pos:\n        \"\"\"Handle `Pos` node.\"\"\"\n        self._write(\"+\")\n        node.operand.visit(self)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_assignment(self, node: Assignment) -&gt; Assignment:\n        \"\"\"Handle `Assignment` node.\"\"\"\n        self._write(self._macro_primitive_lf)\n        node.variable.visit(self)\n        self._write(\"=\")\n        node.expression.visit(self)\n        self._write(\"*\")\n\n        return node\n\n    def on_constant(self, node: Constant) -&gt; Constant:\n        \"\"\"Handle `Constant` node.\"\"\"\n        self._write(self._fmt_double(node.constant))\n        return node\n\n    def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n        \"\"\"Handle `Parenthesis` node.\"\"\"\n        if not self.explicit_parenthesis:\n            self._write(\"(\")\n\n        node.inner.visit(self)\n\n        if not self.explicit_parenthesis:\n            self._write(\")\")\n\n        return node\n\n    def on_point(self, node: Point) -&gt; Point:\n        \"\"\"Handle `Point` node.\"\"\"\n        node.x.visit(self)\n        self._write(\",\")\n        node.y.visit(self)\n        return node\n\n    def on_variable(self, node: Variable) -&gt; Variable:\n        \"\"\"Handle `Variable` node.\"\"\"\n        self._write(node.variable)\n        return node\n\n    # Other\n\n    def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"X{node.value}\")\n        return node\n\n    def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"Y{node.value}\")\n        return node\n\n    def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"I{node.value}\")\n        return node\n\n    def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n        \"\"\"Handle `Coordinate` node.\"\"\"\n        self._write(f\"J{node.value}\")\n        return node\n\n    # Primitives\n\n    @_decorator_insert_base_indent\n    def on_code_0(self, node: Code0) -&gt; Code0:\n        \"\"\"Handle `Code0` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}0{node.string}*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        \"\"\"Handle `Code1` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}1,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n\n        if node.rotation is not None:\n            self._write(f\",{self._macro_param_lf}\")\n            node.rotation.visit(self)\n\n        self._write(\"*\")\n        return node\n\n    @cached_property\n    def _macro_primitive_lf(self) -&gt; str:\n        if self.macro_split_mode == self.MacroSplitMode.NONE:\n            return \"\"\n\n        if self.macro_split_mode in (\n            self.MacroSplitMode.PRIMITIVES,\n            self.MacroSplitMode.PARAMETERS,\n        ):\n            return self.lf + self.macro_body_indent\n\n        msg = f\"Unsupported macro split mode: {self.macro_split_mode}\"\n        raise NotImplementedError(msg)\n\n    @cached_property\n    def _macro_param_lf(self) -&gt; str:\n        if self.macro_split_mode in (\n            self.MacroSplitMode.NONE,\n            self.MacroSplitMode.PRIMITIVES,\n        ):\n            return \"\"\n\n        if self.macro_split_mode == self.MacroSplitMode.PARAMETERS:\n            return self.lf + self.macro_param_indent + self.macro_body_indent\n\n        msg = f\"Unsupported macro split mode: {self.macro_split_mode}\"\n        raise NotImplementedError(msg)\n\n    @_decorator_insert_base_indent\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        \"\"\"Handle `Code2` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}2,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_4(self, node: Code4) -&gt; Code4:\n        \"\"\"Handle `Code4` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}4,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.number_of_points.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n\n        for point in node.points:\n            self._write(f\",{self._macro_param_lf}\")\n            point.visit(self)\n\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_5(self, node: Code5) -&gt; Code5:\n        \"\"\"Handle `Code5` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}5,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.number_of_vertices.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_6(self, node: Code6) -&gt; Code6:\n        \"\"\"Handle `Code6` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}6,{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.outer_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.ring_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.gap_between_rings.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.max_ring_count.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.crosshair_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.crosshair_length.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_7(self, node: Code7) -&gt; Code7:\n        \"\"\"Handle `Code7` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}7,{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.outer_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.inner_diameter.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.gap_thickness.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        \"\"\"Handle `Code20` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}20,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.start_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.end_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_21(self, node: Code21) -&gt; Code21:\n        \"\"\"Handle `Code21` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}21,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.height.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_x.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.center_y.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_code_22(self, node: Code22) -&gt; Code22:\n        \"\"\"Handle `Code22` node.\"\"\"\n        self._write(f\"{self._macro_primitive_lf}22,{self._macro_param_lf}\")\n        node.exposure.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.width.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.height.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.x_lower_left.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.y_lower_left.visit(self)\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n        self._write(\"*\")\n        return node\n\n    # Properties\n\n    @_decorator_insert_base_indent\n    def on_as(self, node: AS) -&gt; AS:\n        \"\"\"Handle `AS` node.\"\"\"\n        with self._extended_command(\"AS\"):\n            self._write(node.correspondence.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_fs(self, node: FS) -&gt; FS:\n        \"\"\"Handle `FS` node.\"\"\"\n        with self._extended_command(\"FS\"):\n            self._write(node.zeros.value)\n            self._write(node.coordinate_mode.value)\n            self._write(f\"X{node.x_integral}{node.x_decimal}\")\n            self._write(f\"Y{node.y_integral}{node.y_decimal}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_in(self, node: IN) -&gt; IN:\n        \"\"\"Handle `IN` node.\"\"\"\n        with self._extended_command(\"IN\"):\n            self._write(node.name)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ip(self, node: IP) -&gt; IP:\n        \"\"\"Handle `IP` node.\"\"\"\n        with self._extended_command(\"IP\"):\n            self._write(node.polarity.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_ir(self, node: IR) -&gt; IR:\n        \"\"\"Handle `IR` node.\"\"\"\n        with self._extended_command(\"IR\"):\n            self._write(self._fmt_double(node.rotation_degrees))\n        return node\n\n    @_decorator_insert_base_indent\n    def on_mi(self, node: MI) -&gt; MI:\n        \"\"\"Handle `MI` node.\"\"\"\n        with self._extended_command(\"MI\"):\n            self._write(f\"A{node.a_mirroring}\")\n            self._write(f\"B{node.b_mirroring}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_mo(self, node: MO) -&gt; MO:\n        \"\"\"Handle `MO` node.\"\"\"\n        with self._extended_command(\"MO\"):\n            self._write(node.mode.value)\n        return node\n\n    @_decorator_insert_base_indent\n    def on_of(self, node: OF) -&gt; OF:\n        \"\"\"Handle `OF` node.\"\"\"\n        with self._extended_command(\"OF\"):\n            if node.a_offset is not None:\n                self._write(f\"A{node.a_offset}\")\n            if node.b_offset is not None:\n                self._write(f\"B{node.b_offset}\")\n        return node\n\n    @_decorator_insert_base_indent\n    def on_sf(self, node: SF) -&gt; SF:\n        \"\"\"Handle `SF` node.\"\"\"\n        with self._extended_command(\"SF\"):\n            self._write(\"A\")\n            self._write(self._fmt_double(node.a_scale))\n            self._write(\"B\")\n            self._write(self._fmt_double(node.b_scale))\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.output","title":"output  <code>property</code>","text":"<pre><code>output: StringIO\n</code></pre> <p>Get output buffer.</p>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.MacroSplitMode","title":"MacroSplitMode","text":"<p>             Bases: <code>Enum</code></p> <p>Macro split mode.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>class MacroSplitMode(Enum):\n    \"\"\"Macro split mode.\"\"\"\n\n    NONE = \"none\"\n    PRIMITIVES = \"primitives\"\n    PARAMETERS = \"parameters\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    indent_character: Literal[\" \", \"\\t\"] = \" \",\n    macro_body_indent: str | int = 0,\n    macro_param_indent: str | int = 0,\n    macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n    macro_end_in_new_line: bool = False,\n    block_aperture_body_indent: str | int = 0,\n    step_and_repeat_body_indent: str | int = 0,\n    float_decimal_places: int = -1,\n    float_trim_trailing_zeros: bool = True,\n    d01_indent: int | str = 0,\n    d02_indent: int | str = 0,\n    d03_indent: int | str = 0,\n    line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n    empty_line_before_polarity_switch: bool = False,\n    keep_non_standalone_codes: bool = True,\n    remove_g54: bool = False,\n    remove_g55: bool = False,\n    explicit_parenthesis: bool = False,\n    strip_whitespace: bool = False\n) -&gt; None\n</code></pre> <p>Initialize Formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>indent_character</code> <code>Literal[' ', '\\t']</code> <p>Character used for indentation, by default \" \"</p> <code>' '</code> <code>macro_body_indent</code> <code>str | int</code> <p>Indentation of macro body, by default 0</p> <code>0</code> <code>macro_param_indent</code> <code>str | int</code> <p>Indentation of macro parameters, by default 0 This indentation is added on top of macro body indentation. This has effect only when <code>macro_split_mode</code> is <code>PARAMETERS</code>.</p> <code>0</code> <code>macro_split_mode</code> <code>`Formatter.MacroSplitMode`</code> <p>Changes how macro definitions are formatted, by default <code>NONE</code> When <code>NONE</code> is selected, macro will be formatted as a single line. <pre><code>%AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n</code></pre> When <code>PRIMITIVES</code> is selected, macro will be formatted with each primitive on a new line. <pre><code>%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*%\n</code></pre> When <code>PARAMETERS</code> is selected, macro will be formatted with each primitive on a new line and each parameter of a primitive on a new line. <pre><code>%AMDonut*\n1,\n1,\n$1,\n$2,\n$3*\n$4=$1x0.75*\n1,\n0,\n$4,\n$2,\n$3*%\n</code></pre> Use <code>macro_body_indent</code> and <code>macro_param_indent</code> to control indentation.</p> <code>PRIMITIVES</code> <code>macro_end_in_new_line</code> <code>bool</code> <p>Place % sign which marks the end of macro in new line, by default False</p> <code>False</code> <code>block_aperture_body_indent</code> <code>str | int</code> <p>Indentation of block aperture definition body, by default 0 This indentations stacks for nested block apertures.</p> <code>0</code> <code>step_and_repeat_body_indent</code> <code>str | int</code> <p>Indentation of step and repeat definition body, by default 0 This indentations stacks for nested step and repeat blocks.</p> <code>0</code> <code>float_decimal_places</code> <code>int</code> <p>Limit number of decimal places shown for float values, by default -1 Negative values are interpreted as no limit.</p> <code>-1</code> <code>float_trim_trailing_zeros</code> <code>bool</code> <p>Remove trailing zeros from floats, by default True When this is enabled, after floating point number is formatted with respect to <code>float_decimal_places</code>, trailing zeros are removed. If all zeros after decimal point are removed, decimal point is also removed.</p> <code>True</code> <code>d01_indent</code> <code>str | int</code> <p>Custom indentation of D01 command, by default 0</p> <code>0</code> <code>d02_indent</code> <code>str | int</code> <p>Custom indentation of D02 command, by default 0</p> <code>0</code> <code>d03_indent</code> <code>str | int</code> <p>Custom indentation of D03 command, by default 0</p> <code>0</code> <code>line_end</code> <code>Literal['\\n', '\\r\\n']</code> <p>Line ending character, Unix or Windows style, by default \"\\n\" (Unix style) If <code>strip_whitespace</code> is enabled, no line end will be used.</p> <code>'\\n'</code> <code>empty_line_before_polarity_switch</code> <code>bool</code> <p>Add empty line before polarity switch, by default False This enhances visibility of sequences of commands with different polarities.</p> <code>False</code> <code>keep_non_standalone_codes</code> <code>bool</code> <p>Keep non-standalone codes in the output, by default True If this option is disabled, codes that are not standalone, ie. <code>G70D02*</code> will be divided into two separate commands, <code>G70*</code> and <code>D02*</code>, otherwise they will be kept as is.</p> <code>True</code> <code>remove_g54</code> <code>bool</code> <p>Remove G54 code from output, by default False G54 code has no effect on the output, it was used in legacy files to prefix select aperture command.</p> <code>False</code> <code>remove_g55</code> <code>bool</code> <p>Remove G55 code from output, by default False G55 code has no effect on the output, it was used in legacy files to prefix flash command.</p> <code>False</code> <code>explicit_parenthesis</code> <code>bool</code> <p>Add explicit parenthesis around all mathematical expressions within macro, by default False When false, original parenthesis are kept.</p> <code>False</code> <code>strip_whitespace</code> <code>bool</code> <p>Remove all semantically insignificant whitespace, by default False</p> <code>False</code> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def __init__(  # noqa: PLR0913\n    self,\n    *,\n    indent_character: Literal[\" \", \"\\t\"] = \" \",\n    macro_body_indent: str | int = 0,\n    macro_param_indent: str | int = 0,\n    macro_split_mode: MacroSplitMode = MacroSplitMode.PRIMITIVES,\n    macro_end_in_new_line: bool = False,\n    block_aperture_body_indent: str | int = 0,\n    step_and_repeat_body_indent: str | int = 0,\n    float_decimal_places: int = -1,\n    float_trim_trailing_zeros: bool = True,\n    d01_indent: int | str = 0,\n    d02_indent: int | str = 0,\n    d03_indent: int | str = 0,\n    line_end: Literal[\"\\n\", \"\\r\\n\"] = \"\\n\",\n    empty_line_before_polarity_switch: bool = False,\n    keep_non_standalone_codes: bool = True,\n    remove_g54: bool = False,\n    remove_g55: bool = False,\n    explicit_parenthesis: bool = False,\n    strip_whitespace: bool = False,\n) -&gt; None:\n    r\"\"\"Initialize Formatter instance.\n\n    Parameters\n    ----------\n    indent_character: Literal[\" \", \"\\t\"], optional\n        Character used for indentation, by default \" \"\n    macro_body_indent : str | int, optional\n        Indentation of macro body, by default 0\n    macro_param_indent: str | int, optional\n        Indentation of macro parameters, by default 0\n        This indentation is added on top of macro body indentation.\n        This has effect only when `macro_split_mode` is `PARAMETERS`.\n    macro_split_mode : `Formatter.MacroSplitMode`, optional\n        Changes how macro definitions are formatted, by default `NONE`\n        When `NONE` is selected, macro will be formatted as a single line.\n        ```gerber\n        %AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n        ```\n        When `PRIMITIVES` is selected, macro will be formatted with each primitive\n        on a new line.\n        ```gerber\n        %AMDonut*\n        1,1,$1,$2,$3*\n        $4=$1x0.75*\n        1,0,$4,$2,$3*%\n        ```\n        When `PARAMETERS` is selected, macro will be formatted with each primitive\n        on a new line and each parameter of a primitive on a new line.\n        ```gerber\n        %AMDonut*\n        1,\n        1,\n        $1,\n        $2,\n        $3*\n        $4=$1x0.75*\n        1,\n        0,\n        $4,\n        $2,\n        $3*%\n        ```\n        Use `macro_body_indent` and `macro_param_indent` to control indentation.\n    macro_end_in_new_line: bool, optional\n        Place % sign which marks the end of macro in new line, by default False\n    block_aperture_body_indent : str | int, optional\n        Indentation of block aperture definition body, by default 0\n        This indentations stacks for nested block apertures.\n    step_and_repeat_body_indent : str | int, optional\n        Indentation of step and repeat definition body, by default 0\n        This indentations stacks for nested step and repeat blocks.\n    float_decimal_places : int, optional\n        Limit number of decimal places shown for float values, by default -1\n        Negative values are interpreted as no limit.\n    float_trim_trailing_zeros : bool, optional\n        Remove trailing zeros from floats, by default True\n        When this is enabled, after floating point number is formatted with respect\n        to `float_decimal_places`, trailing zeros are removed. If all zeros after\n        decimal point are removed, decimal point is also removed.\n    d01_indent : str | int, optional\n        Custom indentation of D01 command, by default 0\n    d02_indent : str | int, optional\n        Custom indentation of D02 command, by default 0\n    d03_indent : str | int, optional\n        Custom indentation of D03 command, by default 0\n    line_end : Literal[\"\\n\", \"\\r\\n\"], optional\n        Line ending character, Unix or Windows style, by default \"\\n\" (Unix style)\n        If `strip_whitespace` is enabled, no line end will be used.\n    empty_line_before_polarity_switch : bool, optional\n        Add empty line before polarity switch, by default False\n        This enhances visibility of sequences of commands with different\n        polarities.\n    keep_non_standalone_codes: bool, optional\n        Keep non-standalone codes in the output, by default True\n        If this option is disabled, codes that are not standalone, ie. `G70D02*`\n        will be divided into two separate commands, `G70*` and `D02*`, otherwise\n        they will be kept as is.\n    remove_g54: bool, optional\n        Remove G54 code from output, by default False\n        G54 code has no effect on the output, it was used in legacy files to\n        prefix select aperture command.\n    remove_g55: bool, optional\n        Remove G55 code from output, by default False\n        G55 code has no effect on the output, it was used in legacy files to\n        prefix flash command.\n    explicit_parenthesis: bool, optional\n        Add explicit parenthesis around all mathematical\n        expressions within macro, by default False\n        When false, original parenthesis are kept.\n    strip_whitespace : bool, optional\n        Remove all semantically insignificant whitespace, by default False\n\n    \"\"\"\n    super().__init__()\n    self.indent_character = indent_character\n\n    if isinstance(macro_body_indent, int):\n        macro_body_indent = indent_character * macro_body_indent\n    self.macro_body_indent = macro_body_indent\n\n    if isinstance(macro_param_indent, int):\n        macro_param_indent = indent_character * macro_param_indent\n    self.macro_param_indent = macro_param_indent\n\n    self.macro_split_mode = macro_split_mode\n    self.macro_end_in_new_line = macro_end_in_new_line\n\n    if isinstance(block_aperture_body_indent, int):\n        block_aperture_body_indent = indent_character * block_aperture_body_indent\n    self.block_aperture_body_indent = block_aperture_body_indent\n\n    if isinstance(step_and_repeat_body_indent, int):\n        step_and_repeat_body_indent = indent_character * step_and_repeat_body_indent\n    self.step_and_repeat_body_indent = step_and_repeat_body_indent\n\n    self.float_decimal_places = float_decimal_places\n\n    self.float_trim_trailing_zeros = float_trim_trailing_zeros\n\n    if isinstance(d01_indent, int):\n        d01_indent = indent_character * d01_indent\n    self.d01_indent = d01_indent\n\n    if isinstance(d02_indent, int):\n        d02_indent = indent_character * d02_indent\n    self.d02_indent = d02_indent\n\n    if isinstance(d03_indent, int):\n        d03_indent = indent_character * d03_indent\n    self.d03_indent = d03_indent\n\n    self.lf = line_end\n    self.empty_line_before_polarity_switch = (\n        self.lf if empty_line_before_polarity_switch else \"\"\n    )\n    self.keep_non_standalone_codes = keep_non_standalone_codes\n    self.remove_g54 = remove_g54\n    self.remove_g55 = remove_g55\n    self.explicit_parenthesis = explicit_parenthesis\n    self.strip_whitespace = strip_whitespace\n\n    if self.strip_whitespace:\n        self.lf = \"\"  # type: ignore[assignment]\n        self.indent_character = \"\"  # type: ignore[assignment]\n        self.macro_body_indent = \"\"\n        self.macro_param_indent = \"\"\n        self.block_aperture_body_indent = \"\"\n        self.step_and_repeat_body_indent = \"\"\n        self.d01_indent = \"\"\n        self.d02_indent = \"\"\n        self.d03_indent = \"\"\n        self.empty_line_before_polarity_switch = \"\"\n\n    self._output: Optional[StringIO] = None\n    self._base_indent: str = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.format","title":"format","text":"<pre><code>format(source: File, output: StringIO) -&gt; None\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def format(self, source: File, output: StringIO) -&gt; None:\n    \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n    self._output = output\n    try:\n        self.on_file(source)\n    finally:\n        self._output = None\n        self._base_indent = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.formats","title":"formats","text":"<pre><code>formats(source: File) -&gt; str\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def formats(self, source: File) -&gt; str:\n    \"\"\"Format Gerber AST according to rules specified in Formatter constructor.\"\"\"\n    out = StringIO()\n    self.format(source, out)\n    return out.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.format_node","title":"format_node","text":"<pre><code>format_node(node: Node, output: StringIO) -&gt; None\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def format_node(self, node: Node, output: StringIO) -&gt; None:\n    \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n    self._output = output\n    try:\n        node.visit(self)\n    finally:\n        self._output = None\n        self._base_indent = \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.formats_node","title":"formats_node","text":"<pre><code>formats_node(node: File) -&gt; str\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def formats_node(self, node: File) -&gt; str:\n    \"\"\"Format single node according to rules specified in Formatter constructor.\"\"\"\n    out = StringIO()\n    self.format_node(node, out)\n    return out.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decrease_base_indent(\"block_aperture_body_indent\")\n@_decorator_insert_base_indent\ndef on_ab_close(self, node: ABclose) -&gt; ABclose:\n    \"\"\"Handle `ABclose` node.\"\"\"\n    with self._extended_command(\"AB\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\n@_increase_base_indent(\"block_aperture_body_indent\")\ndef on_ab_open(self, node: ABopen) -&gt; ABopen:\n    \"\"\"Handle `ABopen` node.\"\"\"\n    with self._extended_command(\"AB\"):\n        self._write(node.aperture_id)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adc(self, node: ADC) -&gt; ADC:\n    \"\"\"Handle `AD` circle node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}C,\"):\n        self._write(self._fmt_double(node.diameter))\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adr(self, node: ADR) -&gt; ADR:\n    \"\"\"Handle `AD` rectangle node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}R,\"):\n        self._write(self._fmt_double(node.width))\n        self._write(f\"X{self._fmt_double(node.height)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ado(self, node: ADO) -&gt; ADO:\n    \"\"\"Handle `AD` obround node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}O,\"):\n        self._write(self._fmt_double(node.width))\n        self._write(f\"X{self._fmt_double(node.height)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_adp(self, node: ADP) -&gt; ADP:\n    \"\"\"Handle `AD` polygon node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}P,\"):\n        self._write(self._fmt_double(node.outer_diameter))\n        self._write(f\"X{node.vertices}\")\n\n        if node.rotation is not None:\n            self._write(f\"X{self._fmt_double(node.rotation)}\")\n\n        if node.hole_diameter is not None:\n            self._write(f\"X{self._fmt_double(node.hole_diameter)}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n    \"\"\"Handle `AD` macro node.\"\"\"\n    with self._extended_command(f\"AD{node.aperture_id}{node.name}\"):\n        if node.params is not None:\n            first, *rest = node.params\n            self._write(f\",{first}\")\n            for param in rest:\n                self._write(f\"X{param}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_am_close(self, node: AMclose) -&gt; AMclose:\n    \"\"\"Handle `AMclose` node.\"\"\"\n    super().on_am_close(node)\n    if self.macro_end_in_new_line:\n        self._write(f\"{self.lf}\")\n    self._write(f\"%{self.lf}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_am_open(self, node: AMopen) -&gt; AMopen:\n    \"\"\"Handle `AMopen` node.\"\"\"\n    super().on_am_open(node)\n    self._write(f\"%AM{node.name}*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decrease_base_indent(\"step_and_repeat_body_indent\")\n@_decorator_insert_base_indent\ndef on_sr_close(self, node: SRclose) -&gt; SRclose:\n    \"\"\"Handle `SRclose` node.\"\"\"\n    with self._extended_command(\"SR\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\n@_increase_base_indent(\"step_and_repeat_body_indent\")\ndef on_sr_open(self, node: SRopen) -&gt; SRopen:\n    \"\"\"Handle `SRopen` node.\"\"\"\n    with self._extended_command(\"SR\"):\n        if node.x is not None:\n            self._write(f\"X{node.x}\")\n\n        if node.x is not None:\n            self._write(f\"Y{node.y}\")\n\n        if node.x is not None:\n            self._write(f\"I{node.i}\")\n\n        if node.x is not None:\n            self._write(f\"J{node.j}\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    with self._extended_command(f\"TA{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n    \"\"\"Handle `TA_AperFunction` node.\"\"\"\n    with self._extended_command(\"TA.AperFunction\"):\n        if node.function is not None:\n            self._write(\",\")\n            self._write(node.function.value)\n\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n    \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n    with self._extended_command(\"TA.DrillTolerance\"):\n        if node.plus_tolerance is not None:\n            self._write(\",\")\n            self._write(self._fmt_double(node.plus_tolerance))\n\n        if node.minus_tolerance is not None:\n            self._write(\",\")\n            self._write(self._fmt_double(node.minus_tolerance))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n    \"\"\"Handle `TA_FlashText` node.\"\"\"\n    with self._extended_command(\"TA.FlashText\"):\n        self._write(\",\")\n        self._write(node.string)\n\n        self._write(\",\")\n        self._write(node.mode)\n\n        self._write(\",\")\n        self._write(node.mirroring)\n\n        if len(node.comments) == 0:\n            if node.font is not None:\n                self._write(\",\")\n                self._write(node.font)\n\n            if node.size is not None:\n                self._write(\",\")\n                self._write(node.size)\n\n            for comment in node.comments:\n                self._write(\",\")\n                self._write(comment)\n        else:\n            self._write(\",\")\n            if node.font is not None:\n                self._write(node.font)\n\n            self._write(\",\")\n            if node.size is not None:\n                self._write(node.size)\n\n            for comment in node.comments:\n                self._write(\",\")\n                self._write(comment)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_td(self, node: TD) -&gt; TD:\n    \"\"\"Handle `TD` node.\"\"\"\n    with self._extended_command(\"TD\"):\n        if node.name is not None:\n            self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_user_name(self, node: TF_UserName) -&gt; TF_UserName:\n    \"\"\"Handle `TF_UserName` node.\"\"\"\n    with self._extended_command(f\"TF{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_part(self, node: TF_Part) -&gt; TF_Part:\n    \"\"\"Handle `TF_Part` node.\"\"\"\n    with self._extended_command(\"TF.Part,\"):\n        self._write(node.part.value)\n        if len(node.fields) != 0:\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_file_function(self, node: TF_FileFunction) -&gt; TF_FileFunction:\n    \"\"\"Handle `TF_FileFunction` node.\"\"\"\n    with self._extended_command(\"TF.FileFunction,\"):\n        self._write(node.file_function.value)\n        if len(node.fields) != 0:\n            for field in node.fields:\n                self._write(\",\")\n                self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_file_polarity(self, node: TF_FilePolarity) -&gt; TF_FilePolarity:\n    \"\"\"Handle `TF_FilePolarity` node.\"\"\"\n    with self._extended_command(\"TF.FilePolarity,\"):\n        self._write(node.polarity)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_same_coordinates(self, node: TF_SameCoordinates) -&gt; TF_SameCoordinates:\n    \"\"\"Handle `TF_SameCoordinates` node.\"\"\"\n    with self._extended_command(\"TF.SameCoordinates\"):\n        if node.identifier is not None:\n            self._write(\",\")\n            self._write(node.identifier)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_creation_date(self, node: TF_CreationDate) -&gt; TF_CreationDate:\n    \"\"\"Handle `TF_CreationDate` node.\"\"\"\n    with self._extended_command(\"TF.CreationDate\"):\n        if node.creation_date is not None:\n            self._write(\",\")\n            self._write(node.creation_date.isoformat())\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_generation_software(\n    self, node: TF_GenerationSoftware\n) -&gt; TF_GenerationSoftware:\n    \"\"\"Handle `TF_GenerationSoftware` node.\"\"\"\n    with self._extended_command(\"TF.GenerationSoftware\"):\n        self._write(\",\")\n        if node.vendor is not None:\n            self._write(node.vendor)\n\n        self._write(\",\")\n        if node.application is not None:\n            self._write(node.application)\n\n        self._write(\",\")\n        if node.version is not None:\n            self._write(node.version)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_project_id(self, node: TF_ProjectId) -&gt; TF_ProjectId:\n    \"\"\"Handle `TF_ProjectId` node.\"\"\"\n    with self._extended_command(\"TF.ProjectId\"):\n        self._write(\",\")\n        if node.name is not None:\n            self._write(node.name)\n\n        self._write(\",\")\n        if node.guid is not None:\n            self._write(node.guid)\n\n        self._write(\",\")\n        if node.revision is not None:\n            self._write(node.revision)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_tf_md5(self, node: TF_MD5) -&gt; TF_MD5:\n    \"\"\"Handle `TF_MD5` node.\"\"\"\n    with self._extended_command(\"TF.MD5\"):\n        self._write(\",\")\n        self._write(node.md5)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n    \"\"\"Handle `TO_UserName` node.\"\"\"\n    with self._extended_command(f\"TO{node.user_name}\"):\n        for field in node.fields:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_n(self, node: TO_N) -&gt; TO_N:\n    \"\"\"Handle `TO_N` node.\"\"\"\n    with self._extended_command(\"TO.N\"):\n        for field in node.net_names:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_p(self, node: TO_P) -&gt; TO_P:\n    \"\"\"Handle `TO_P` node`.\"\"\"\n    with self._extended_command(\"TO.P\"):\n        self._write(\",\")\n        self._write(node.refdes)\n        self._write(\",\")\n        self._write(node.number)\n        if node.function is not None:\n            self._write(\",\")\n            self._write(node.function)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_c(self, node: TO_C) -&gt; TO_C:\n    \"\"\"Handle `TO_C` node.\"\"\"\n    with self._extended_command(\"TO.C\"):\n        self._write(\",\")\n        self._write(node.refdes)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n    \"\"\"Handle `TO_CRot` node.\"\"\"\n    with self._extended_command(\"TO.CRot\"):\n        self._write(\",\")\n        self._write(self._fmt_double(node.angle))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n    \"\"\"Handle `TO_CMfr` node.\"\"\"\n    with self._extended_command(\"TO.CMfr\"):\n        self._write(\",\")\n        self._write(node.manufacturer)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n    \"\"\"Handle `TO_CMNP` node.\"\"\"\n    with self._extended_command(\"TO.CMPN\"):\n        self._write(\",\")\n        self._write(node.part_number)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    with self._extended_command(\"TO.CVal\"):\n        self._write(\",\")\n        self._write(node.value)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    with self._extended_command(\"TO.CMnt\"):\n        self._write(\",\")\n        self._write(node.mount.value)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n    \"\"\"Handle `TO_Cftp` node.\"\"\"\n    with self._extended_command(\"TO.CFtp\"):\n        self._write(\",\")\n        self._write(node.footprint)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n    \"\"\"Handle `TO_CPgN` node.\"\"\"\n    with self._extended_command(\"TO.CPgN\"):\n        self._write(\",\")\n        self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n    \"\"\"Handle `TO_CPgD` node.\"\"\"\n    with self._extended_command(\"TO.CPgD\"):\n        self._write(\",\")\n        self._write(node.description)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n    \"\"\"Handle `TO_CHgt` node.\"\"\"\n    with self._extended_command(\"TO.CHgt\"):\n        self._write(\",\")\n        self._write(self._fmt_double(node.height))\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n    \"\"\"Handle `TO_CLbN` node.\"\"\"\n    with self._extended_command(\"TO.CLbn\"):\n        self._write(\",\")\n        self._write(node.name)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n    \"\"\"Handle `TO_CLbD` node.\"\"\"\n    with self._extended_command(\"TO.CLbD\"):\n        self._write(\",\")\n        self._write(node.description)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n    \"\"\"Handle `TO_CSup` node.\"\"\"\n    with self._extended_command(\"TO.CSup\"):\n        self._write(\",\")\n        self._write(node.supplier)\n        self._write(\",\")\n        self._write(node.supplier_part)\n        for field in node.other_suppliers:\n            self._write(\",\")\n            self._write(field)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d01(self, node: D01) -&gt; D01:\n    \"\"\"Handle `D01` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d01_indent)\n\n    super().on_d01(node)\n    with self._command(\"D01\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d02(self, node: D02) -&gt; D02:\n    \"\"\"Handle `D02` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d02_indent)\n\n    super().on_d02(node)\n    with self._command(\"D02\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_d03(self, node: D03) -&gt; D03:\n    \"\"\"Handle `D03` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n        self._insert_extra_indent(self.d03_indent)\n\n    super().on_d03(node)\n    with self._command(\"D03\"):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_dnn(self, node: Dnn) -&gt; Dnn:\n    \"\"\"Handle `Dnn` node.\"\"\"\n    if node.is_standalone or not self.keep_non_standalone_codes:\n        self._insert_base_indent()\n\n    with self._command(node.aperture_id):\n        pass\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g01(self, node: G01) -&gt; G01:\n    \"\"\"Handle `G01` node.\"\"\"\n    self._handle_g(node, G01)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g02(self, node: G02) -&gt; G02:\n    \"\"\"Handle `G02` node.\"\"\"\n    self._handle_g(node, G02)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g03(self, node: G03) -&gt; G03:\n    \"\"\"Handle `G03` node.\"\"\"\n    self._handle_g(node, G03)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g04(self, node: G04) -&gt; G04:\n    \"\"\"Handle `G04` node.\"\"\"\n    with self._command(f\"G04{node.string or ''}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g36(self, node: G36) -&gt; G36:\n    \"\"\"Handle `G36` node.\"\"\"\n    self._handle_g(node, G36)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g37(self, node: G37) -&gt; G37:\n    \"\"\"Handle `G37` node.\"\"\"\n    self._handle_g(node, G37)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g54(self, node: G54) -&gt; G54:\n    \"\"\"Handle `G54` node.\"\"\"\n    if self.remove_g54:\n        return node\n    self._handle_g(node, G54)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g55(self, node: G55) -&gt; G55:\n    \"\"\"Handle `G55` node.\"\"\"\n    if self.remove_g55:\n        return node\n    self._handle_g(node, G55)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g70(self, node: G70) -&gt; G70:\n    \"\"\"Handle `G70` node.\"\"\"\n    self._handle_g(node, G70)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g71(self, node: G71) -&gt; G71:\n    \"\"\"Handle `G71` node.\"\"\"\n    self._handle_g(node, G71)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g74(self, node: G74) -&gt; G74:\n    \"\"\"Handle `G74` node.\"\"\"\n    self._handle_g(node, G74)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g75(self, node: G75) -&gt; G75:\n    \"\"\"Handle `G75` node.\"\"\"\n    self._handle_g(node, G75)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g90(self, node: G90) -&gt; G90:\n    \"\"\"Handle `G90` node.\"\"\"\n    self._handle_g(node, G90)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_g91(self, node: G91) -&gt; G91:\n    \"\"\"Handle `G91` node.\"\"\"\n    self._handle_g(node, G91)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_lm(self, node: LM) -&gt; LM:\n    \"\"\"Handle `LM` node.\"\"\"\n    with self._extended_command(f\"LM{node.mirroring.value}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ln(self, node: LN) -&gt; LN:\n    \"\"\"Handle `LN` node.\"\"\"\n    with self._extended_command(f\"LN{node.name}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_insert_var(\"empty_line_before_polarity_switch\")\n@_decorator_insert_base_indent\ndef on_lp(self, node: LP) -&gt; LP:\n    \"\"\"Handle `LP` node.\"\"\"\n    with self._extended_command(f\"LP{node.polarity.value}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_lr(self, node: LR) -&gt; LR:\n    \"\"\"Handle `LR` node.\"\"\"\n    with self._extended_command(f\"LR{self._fmt_double(node.rotation)}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ls(self, node: LS) -&gt; LS:\n    \"\"\"Handle `LS` node.\"\"\"\n    with self._extended_command(f\"LS{self._fmt_double(node.scale)}\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m00(self, node: M00) -&gt; M00:\n    \"\"\"Handle `M00` node.\"\"\"\n    with self._command(\"M00\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m01(self, node: M01) -&gt; M01:\n    \"\"\"Handle `M01` node.\"\"\"\n    with self._command(\"M01\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_m02(self, node: M02) -&gt; M02:\n    \"\"\"Handle `M02` node.\"\"\"\n    with self._command(\"M02\"):\n        pass\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_add(self, node: Add) -&gt; Add:\n    \"\"\"Handle `Add` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"+\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_div(self, node: Div) -&gt; Div:\n    \"\"\"Handle `Div` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"/\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_mul(self, node: Mul) -&gt; Mul:\n    \"\"\"Handle `Mul` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"x\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_sub(self, node: Sub) -&gt; Sub:\n    \"\"\"Handle `Sub` node.\"\"\"\n    if self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.head.visit(self)\n\n    for operand in node.tail:\n        self._write(\"-\")\n        operand.visit(self)\n\n    if self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_neg(self, node: Neg) -&gt; Neg:\n    \"\"\"Handle `Neg` node.\"\"\"\n    self._write(\"-\")\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_pos(self, node: Pos) -&gt; Pos:\n    \"\"\"Handle `Pos` node.\"\"\"\n    self._write(\"+\")\n    node.operand.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_assignment(self, node: Assignment) -&gt; Assignment:\n    \"\"\"Handle `Assignment` node.\"\"\"\n    self._write(self._macro_primitive_lf)\n    node.variable.visit(self)\n    self._write(\"=\")\n    node.expression.visit(self)\n    self._write(\"*\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_constant(self, node: Constant) -&gt; Constant:\n    \"\"\"Handle `Constant` node.\"\"\"\n    self._write(self._fmt_double(node.constant))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_parenthesis(self, node: Parenthesis) -&gt; Parenthesis:\n    \"\"\"Handle `Parenthesis` node.\"\"\"\n    if not self.explicit_parenthesis:\n        self._write(\"(\")\n\n    node.inner.visit(self)\n\n    if not self.explicit_parenthesis:\n        self._write(\")\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_point(self, node: Point) -&gt; Point:\n    \"\"\"Handle `Point` node.\"\"\"\n    node.x.visit(self)\n    self._write(\",\")\n    node.y.visit(self)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_variable(self, node: Variable) -&gt; Variable:\n    \"\"\"Handle `Variable` node.\"\"\"\n    self._write(node.variable)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_x(self, node: CoordinateX) -&gt; CoordinateX:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"X{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_y(self, node: CoordinateY) -&gt; CoordinateY:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"Y{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_i(self, node: CoordinateI) -&gt; CoordinateI:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"I{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>def on_coordinate_j(self, node: CoordinateJ) -&gt; CoordinateJ:\n    \"\"\"Handle `Coordinate` node.\"\"\"\n    self._write(f\"J{node.value}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_0(self, node: Code0) -&gt; Code0:\n    \"\"\"Handle `Code0` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}0{node.string}*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_1(self, node: Code1) -&gt; Code1:\n    \"\"\"Handle `Code1` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}1,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n\n    if node.rotation is not None:\n        self._write(f\",{self._macro_param_lf}\")\n        node.rotation.visit(self)\n\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_2(self, node: Code2) -&gt; Code2:\n    \"\"\"Handle `Code2` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}2,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_4(self, node: Code4) -&gt; Code4:\n    \"\"\"Handle `Code4` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}4,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.number_of_points.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n\n    for point in node.points:\n        self._write(f\",{self._macro_param_lf}\")\n        point.visit(self)\n\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_5(self, node: Code5) -&gt; Code5:\n    \"\"\"Handle `Code5` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}5,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.number_of_vertices.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_6(self, node: Code6) -&gt; Code6:\n    \"\"\"Handle `Code6` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}6,{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.outer_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.ring_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.gap_between_rings.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.max_ring_count.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.crosshair_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.crosshair_length.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_7(self, node: Code7) -&gt; Code7:\n    \"\"\"Handle `Code7` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}7,{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.outer_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.inner_diameter.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.gap_thickness.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_20(self, node: Code20) -&gt; Code20:\n    \"\"\"Handle `Code20` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}20,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.start_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.end_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_21(self, node: Code21) -&gt; Code21:\n    \"\"\"Handle `Code21` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}21,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.height.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_x.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.center_y.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_code_22(self, node: Code22) -&gt; Code22:\n    \"\"\"Handle `Code22` node.\"\"\"\n    self._write(f\"{self._macro_primitive_lf}22,{self._macro_param_lf}\")\n    node.exposure.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.width.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.height.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.x_lower_left.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.y_lower_left.visit(self)\n    self._write(f\",{self._macro_param_lf}\")\n    node.rotation.visit(self)\n    self._write(\"*\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_as(self, node: AS) -&gt; AS:\n    \"\"\"Handle `AS` node.\"\"\"\n    with self._extended_command(\"AS\"):\n        self._write(node.correspondence.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_fs(self, node: FS) -&gt; FS:\n    \"\"\"Handle `FS` node.\"\"\"\n    with self._extended_command(\"FS\"):\n        self._write(node.zeros.value)\n        self._write(node.coordinate_mode.value)\n        self._write(f\"X{node.x_integral}{node.x_decimal}\")\n        self._write(f\"Y{node.y_integral}{node.y_decimal}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_in(self, node: IN) -&gt; IN:\n    \"\"\"Handle `IN` node.\"\"\"\n    with self._extended_command(\"IN\"):\n        self._write(node.name)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ip(self, node: IP) -&gt; IP:\n    \"\"\"Handle `IP` node.\"\"\"\n    with self._extended_command(\"IP\"):\n        self._write(node.polarity.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_ir(self, node: IR) -&gt; IR:\n    \"\"\"Handle `IR` node.\"\"\"\n    with self._extended_command(\"IR\"):\n        self._write(self._fmt_double(node.rotation_degrees))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_mi(self, node: MI) -&gt; MI:\n    \"\"\"Handle `MI` node.\"\"\"\n    with self._extended_command(\"MI\"):\n        self._write(f\"A{node.a_mirroring}\")\n        self._write(f\"B{node.b_mirroring}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_mo(self, node: MO) -&gt; MO:\n    \"\"\"Handle `MO` node.\"\"\"\n    with self._extended_command(\"MO\"):\n        self._write(node.mode.value)\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_of(self, node: OF) -&gt; OF:\n    \"\"\"Handle `OF` node.\"\"\"\n    with self._extended_command(\"OF\"):\n        if node.a_offset is not None:\n            self._write(f\"A{node.a_offset}\")\n        if node.b_offset is not None:\n            self._write(f\"B{node.b_offset}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/formatter.html#pygerber.gerberx3.formatter.formatter.Formatter.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p> Source code in <code>src/pygerber/gerberx3/formatter/formatter.py</code> <pre><code>@_decorator_insert_base_indent\ndef on_sf(self, node: SF) -&gt; SF:\n    \"\"\"Handle `SF` node.\"\"\"\n    with self._extended_command(\"SF\"):\n        self._write(\"A\")\n        self._write(self._fmt_double(node.a_scale))\n        self._write(\"B\")\n        self._write(self._fmt_double(node.b_scale))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/formatter/presets.html","title":"presets","text":""},{"location":"reference/pygerber/gerberx3/formatter/presets.html#pygerber.gerberx3.formatter.presets","title":"presets","text":"<p><code>pygerber.gerberx3.formatter_presets</code> module contains named predefined formatter configurations.</p>"},{"location":"reference/pygerber/gerberx3/language_server/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/language_server/__init__.html#pygerber.gerberx3.language_server","title":"language_server","text":"<p>PyGerber's Gerber language server implementation.</p>"},{"location":"reference/pygerber/gerberx3/language_server/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerberx3/language_server/errors.html#pygerber.gerberx3.language_server.errors","title":"errors","text":"<p>The <code>errors</code> module provides error classes for the language server feature.</p>"},{"location":"reference/pygerber/gerberx3/language_server/errors.html#pygerber.gerberx3.language_server.errors.LanguageServerError","title":"LanguageServerError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for language server errors.</p> Source code in <code>src/pygerber/gerberx3/language_server/errors.py</code> <pre><code>class LanguageServerError(Exception):\n    \"\"\"Base class for language server errors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/errors.html#pygerber.gerberx3.language_server.errors.LanguageServerNotAvailableError","title":"LanguageServerNotAvailableError","text":"<p>             Bases: <code>LanguageServerError</code></p> <p>Language server feature requires pygerber[language-server] extras.</p> Source code in <code>src/pygerber/gerberx3/language_server/errors.py</code> <pre><code>class LanguageServerNotAvailableError(LanguageServerError):\n    \"\"\"Language server feature requires pygerber[language-server] extras.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/status.html","title":"status","text":""},{"location":"reference/pygerber/gerberx3/language_server/status.html#pygerber.gerberx3.language_server.status","title":"status","text":"<p>The <code>is_server_available</code> module provides a boolean flag to check if the language server feature is available.</p>"},{"location":"reference/pygerber/gerberx3/language_server/status.html#pygerber.gerberx3.language_server.status.is_language_server_available","title":"is_language_server_available","text":"<pre><code>is_language_server_available() -&gt; bool\n</code></pre> <p>Check if the language server feature is available.</p> Source code in <code>src/pygerber/gerberx3/language_server/status.py</code> <pre><code>def is_language_server_available() -&gt; bool:\n    \"\"\"Check if the language server feature is available.\"\"\"\n    global _IS_LANGUAGE_SERVER_AVAILABLE  # noqa: PLW0603\n\n    if _IS_LANGUAGE_SERVER_AVAILABLE is None:\n        try:\n            _spec_pygls = importlib.util.find_spec(\"pygls\")\n            _spec_lsprotocol = importlib.util.find_spec(\"lsprotocol\")\n\n        except (ImportError, ValueError):\n            return False\n\n        else:\n            _IS_LANGUAGE_SERVER_AVAILABLE = (_spec_pygls is not None) and (\n                _spec_lsprotocol is not None\n            )\n\n    return _IS_LANGUAGE_SERVER_AVAILABLE\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/status.html#pygerber.gerberx3.language_server.status.throw_if_server_not_available","title":"throw_if_server_not_available","text":"<pre><code>throw_if_server_not_available() -&gt; None\n</code></pre> <p>Raise an error if the language server feature is not available.</p> Source code in <code>src/pygerber/gerberx3/language_server/status.py</code> <pre><code>def throw_if_server_not_available() -&gt; None:\n    \"\"\"Raise an error if the language server feature is not available.\"\"\"\n    if not is_language_server_available():\n        raise LanguageServerNotAvailableError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/__init__.html#pygerber.gerberx3.language_server._server","title":"_server","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/document_cache.html","title":"document_cache","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/document_cache.html#pygerber.gerberx3.language_server._server.document_cache","title":"document_cache","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/server.html","title":"server","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/server.html#pygerber.gerberx3.language_server._server.server","title":"server","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/server.html#pygerber.gerberx3.language_server._server.server.get_server","title":"get_server","text":"<pre><code>get_server() -&gt; LanguageServer\n</code></pre> <p>Get the language server instance.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/server.py</code> <pre><code>def get_server() -&gt; LanguageServer:  # noqa: PLR0915, C901\n    \"\"\"Get the language server instance.\"\"\"\n    throw_if_server_not_available()\n\n    import lsprotocol.types as lspt\n    import pygls.server as pygls_server\n\n    gls = pygls_server.LanguageServer(\n        \"pygerber.gerberx3.language_server\",\n        pygerber.__version__,\n        max_workers=4,\n    )\n    init_params: lspt.InitializeParams = MagicMock()\n    open_documents = DocumentCache()\n\n    async def get_document(uri: str) -&gt; Document:\n        document = open_documents.get(uri)\n        if document is not None:\n            return document\n\n        wrapped_uri = Path(uri)\n        if wrapped_uri.match(\"*.g*\"):\n            document = GerberDocument(gls)\n\n        else:\n            msg = f\"Unsupported document type: {uri!r}\"\n            raise NotImplementedError(msg)\n\n        async with document:\n            open_documents.set(uri, document)\n\n        return document\n\n    @gls.feature(lspt.INITIALIZE)\n    async def _(params: lspt.InitializeParams) -&gt; None:\n        nonlocal init_params\n        init_params = params\n\n        if client_info := params.client_info:\n            client_name = client_info.name\n            client_version = client_info.version\n        else:\n            client_name = \"Unknown\"\n            client_version = \"Unknown\"\n\n        gls.show_message_log(\n            \"Started PyGerber's Gerber Language Server version \"\n            f\"{pygerber.__version__} for {client_name} {client_version}.\",\n            lspt.MessageType.Info,\n        )\n\n    @gls.feature(lspt.TEXT_DOCUMENT_DID_OPEN)\n    async def _(params: lspt.DidOpenTextDocumentParams) -&gt; None:\n        async with open_documents:\n            document = await get_document(params.text_document.uri)\n            await document.acquire()\n\n        try:\n            await document.on_open(params)\n\n        finally:\n            await document.release()\n\n    @gls.feature(lspt.TEXT_DOCUMENT_DID_CLOSE)\n    async def _(params: lspt.DidCloseTextDocumentParams) -&gt; None:\n        async with open_documents:\n            document = await get_document(params.text_document.uri)\n            await document.acquire()\n\n            try:\n                await document.on_close(params)\n\n            finally:\n                await document.release()\n\n            open_documents.delete(params.text_document.uri)\n\n    @gls.feature(lspt.TEXT_DOCUMENT_DID_CHANGE)\n    async def _(params: lspt.DidChangeTextDocumentParams) -&gt; None:\n        async with open_documents:\n            document = await get_document(params.text_document.uri)\n            await document.acquire()\n\n        try:\n            await document.on_change(params)\n\n        finally:\n            await document.release()\n\n    @gls.feature(lspt.TEXT_DOCUMENT_HOVER)\n    async def _(params: lspt.HoverParams) -&gt; lspt.Hover | None:\n        async with open_documents:\n            document = await get_document(params.text_document.uri)\n            await document.acquire()\n\n        try:\n            hover = await document.on_hover(params)\n\n        finally:\n            await document.release()\n\n        return hover\n\n    @gls.feature(\n        lspt.TEXT_DOCUMENT_COMPLETION,\n        lspt.CompletionOptions(trigger_characters=[\"G\", \"D\", \"%\"]),\n    )\n    async def _(params: lspt.CompletionParams) -&gt; lspt.CompletionList | None:\n        async with open_documents:\n            document = await get_document(params.text_document.uri)\n            await document.acquire()\n\n        try:\n            return await document.on_completion(params)\n\n        finally:\n            await document.release()\n\n    return gls\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/__init__.html#pygerber.gerberx3.language_server._server.documents","title":"documents","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html","title":"document","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document","title":"document","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document","title":"Document","text":"<p>The <code>Document</code> class represents a single document.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>class Document:\n    \"\"\"The `Document` class represents a single document.\"\"\"\n\n    def __init__(self, gls: LanguageServer) -&gt; None:\n        self.gls = gls\n        self.async_lock = asyncio.Lock()\n        self.thread_lock = threading.Lock()\n\n    async def on_open(self, params: lspt.DidOpenTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document open event.\"\"\"\n\n    async def on_close(self, params: lspt.DidCloseTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document close event.\"\"\"\n\n    async def on_change(self, params: lspt.DidChangeTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document change event.\"\"\"\n\n    async def on_hover(self, params: lspt.HoverParams) -&gt; lspt.Hover | None:\n        \"\"\"Handle the hover event.\"\"\"\n\n    async def on_completion(\n        self, params: lspt.CompletionParams\n    ) -&gt; lspt.CompletionList | None:\n        \"\"\"Handle the completion event.\"\"\"\n\n    def log_info(self, msg: Any) -&gt; None:\n        \"\"\"Log an informational message to server log.\"\"\"\n        self.gls.show_message_log(str(msg), lspt.MessageType.Info)\n\n    async def __aenter__(self) -&gt; Self:\n        await self.acquire()\n        return self\n\n    async def acquire(self) -&gt; None:\n        try:\n            self.thread_lock.acquire()\n            await self.async_lock.acquire()\n\n        except Exception:\n            with suppress(Exception):\n                self.thread_lock.release()\n\n            with suppress(Exception):\n                self.async_lock.release()\n\n            raise\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[type[BaseException]],\n        exc_value: Optional[BaseException],\n        traceback: Optional[TracebackType],\n    ) -&gt; None:\n        await self.release()\n\n    async def release(self) -&gt; None:\n        with suppress(Exception):\n            self.async_lock.release()\n\n        with suppress(Exception):\n            self.thread_lock.release()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.on_open","title":"on_open  <code>async</code>","text":"<pre><code>on_open(params: lspt.DidOpenTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document open event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>async def on_open(self, params: lspt.DidOpenTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document open event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.on_close","title":"on_close  <code>async</code>","text":"<pre><code>on_close(params: lspt.DidCloseTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document close event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>async def on_close(self, params: lspt.DidCloseTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document close event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.on_change","title":"on_change  <code>async</code>","text":"<pre><code>on_change(params: lspt.DidChangeTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document change event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>async def on_change(self, params: lspt.DidChangeTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document change event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.on_hover","title":"on_hover  <code>async</code>","text":"<pre><code>on_hover(params: lspt.HoverParams) -&gt; lspt.Hover | None\n</code></pre> <p>Handle the hover event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>async def on_hover(self, params: lspt.HoverParams) -&gt; lspt.Hover | None:\n    \"\"\"Handle the hover event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.on_completion","title":"on_completion  <code>async</code>","text":"<pre><code>on_completion(\n    params: lspt.CompletionParams,\n) -&gt; lspt.CompletionList | None\n</code></pre> <p>Handle the completion event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>async def on_completion(\n    self, params: lspt.CompletionParams\n) -&gt; lspt.CompletionList | None:\n    \"\"\"Handle the completion event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/document.html#pygerber.gerberx3.language_server._server.documents.document.Document.log_info","title":"log_info","text":"<pre><code>log_info(msg: Any) -&gt; None\n</code></pre> <p>Log an informational message to server log.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/document.py</code> <pre><code>def log_info(self, msg: Any) -&gt; None:\n    \"\"\"Log an informational message to server log.\"\"\"\n    self.gls.show_message_log(str(msg), lspt.MessageType.Info)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber","title":"gerber","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument","title":"GerberDocument","text":"<p>             Bases: <code>Document</code></p> <p>The <code>GerberDocument</code> class represents a single Gerber X3 document.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>class GerberDocument(Document):\n    \"\"\"The `GerberDocument` class represents a single Gerber X3 document.\"\"\"\n\n    def __init__(self, gls: LanguageServer) -&gt; None:\n        super().__init__(gls)\n        self.flush_cached_values()\n\n    def flush_cached_values(self) -&gt; None:\n        self.parser = Parser(resilient=True)\n        self.ast: Optional[File] = None\n        self.state: Optional[State] = None\n        self.source_hash = sha256(\"\")\n        self.uri = \"\"\n        self.cached_aperture_completion: Optional[lspt.CompletionList] = None\n\n    def load_ast_from_uri(self, uri: str) -&gt; File:\n        \"\"\"Parse the input.\"\"\"\n        code = self.gls.workspace.get_document(uri)\n        return self.load_ast_from_code(code.source)\n\n    def load_ast_from_code(self, code: str) -&gt; File:\n        \"\"\"Parse the input.\"\"\"\n        code_hash = sha256(code)\n\n        if code_hash == self.source_hash and self.ast is not None:\n            return self.ast\n\n        self.ast = self.parser.parse(code)\n        self.source_hash = sha256(code)\n\n        self.log_info(f\"Parsed AST for {self.uri} (sha256: {self.source_hash})\")\n        return self.ast\n\n    async def on_open(self, params: lspt.DidOpenTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document open event.\"\"\"\n        self.flush_cached_values()\n        self.uri = params.text_document.uri\n        self.load_ast_from_code(params.text_document.text)\n\n    async def on_close(self, params: lspt.DidCloseTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document close event.\"\"\"\n\n    async def on_change(self, params: lspt.DidChangeTextDocumentParams) -&gt; None:\n        \"\"\"Handle the document change event.\"\"\"\n        self.flush_cached_values()\n        self.load_ast_from_uri(params.text_document.uri)\n\n    async def on_hover(self, params: lspt.HoverParams) -&gt; lspt.Hover | None:\n        \"\"\"Handle the hover event.\"\"\"\n        position = ZeroBasedPosition(\n            line=params.position.line, column=params.position.character\n        ).to_one_based()\n\n        if self.ast is None:\n            return None\n\n        node = NodeFinder(self.ast).find_node(position)\n\n        if node is None:\n            return None\n\n        message = GerberHoverCreator(self.ast).create_hover_markdown(node)\n\n        source_info = node.source_info\n        if source_info is None:\n            return None\n\n        return lspt.Hover(\n            contents=lspt.MarkupContent(value=message, kind=lspt.MarkupKind.Markdown),\n            range=lspt.Range(\n                start=lspt.Position(source_info.line - 1, source_info.column - 1),\n                end=lspt.Position(source_info.end_line - 1, source_info.end_column - 1),\n            ),\n        )\n\n    async def on_completion(\n        self, params: lspt.CompletionParams\n    ) -&gt; lspt.CompletionList | None:\n        \"\"\"Handle the completion event.\"\"\"\n        if self.ast is None:\n            return None\n\n        position = ZeroBasedPosition(\n            line=params.position.line, column=params.position.character\n        ).to_one_based()\n        node = NodeFinder(self.ast).find_node(position)\n        self.gls.show_message_log(str(node))\n\n        if not isinstance(node, Invalid) or len(node.string) == 0:\n            return None\n\n        if re.match(r\"G\\d*\", node.string):\n            return self.get_completion_g_codes()\n\n        if re.match(r\"D\\d*\", node.string):\n            return self.get_completion_apertures()\n\n        if re.match(r\"%\", node.string):\n            return self.get_completion_extended_command()\n\n        self.gls.show_message_log(\"No completion handler found.\")\n        return lspt.CompletionList(is_incomplete=False, items=[])\n\n    def get_completion_apertures(self) -&gt; lspt.CompletionList | None:\n        \"\"\"Get the list of apertures.\"\"\"\n        if self.cached_aperture_completion is not None:\n            return self.cached_aperture_completion\n\n        state = self.get_gerber_state()\n        if state is None:\n            return None\n\n        aperture_completion = []\n\n        formatter = Formatter()\n\n        for name, node in state.apertures.apertures.items():\n            out = StringIO()\n            formatter.format(File(nodes=[node]), out)\n\n            aperture_completion.append(\n                lspt.CompletionItem(\n                    label=name,\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=out.getvalue(),\n                )\n            )\n\n        for name, node in state.apertures.blocks.items():\n            out = StringIO()\n            formatter.format(File(nodes=[node.open]), out)\n\n            aperture_completion.append(\n                lspt.CompletionItem(\n                    label=name,\n                    kind=lspt.CompletionItemKind.Method,\n                    detail=out.getvalue(),\n                )\n            )\n\n        self.cached_aperture_completion = lspt.CompletionList(\n            is_incomplete=False, items=aperture_completion\n        )\n\n        return self.cached_aperture_completion\n\n    def get_gerber_state(self) -&gt; Optional[State]:\n        \"\"\"Get the state of the document.\"\"\"\n        if self.state is None:\n            visitor = StateTrackingVisitor(ignore_program_stop=True)\n            if self.ast is None:\n                return None\n\n            self.ast.visit(visitor)\n            self.state = visitor.state\n\n        return self.state\n\n    def get_completion_g_codes(self) -&gt; lspt.CompletionList | None:\n        \"\"\"Get the list of G-codes.\"\"\"\n        return lspt.CompletionList(\n            is_incomplete=False,\n            items=[\n                lspt.CompletionItem(\n                    label=\"G01*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Set linear plot mode.\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G02*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Set clockwise circular plot mode\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G03*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Set counterclockwise circular plot mode\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G04${1:comment}*\",\n                    kind=lspt.CompletionItemKind.Text,\n                    detail=\"Add comment\",\n                    insert_text=\"G04${1:comment}*\",\n                    insert_text_format=lspt.InsertTextFormat.Snippet,\n                ),\n                lspt.CompletionItem(\n                    label=\"G36*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Open region statement\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G37*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Close region statement\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G54\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"(Deprecated) Select aperture prefix\",\n                    deprecated=True,\n                ),\n                lspt.CompletionItem(\n                    label=\"G55\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"(Deprecated) Prepare for flash\",\n                    deprecated=True,\n                ),\n                lspt.CompletionItem(\n                    label=\"G74\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"(Deprecated) Set single quadrant mode\",\n                    deprecated=True,\n                ),\n                lspt.CompletionItem(\n                    label=\"G75\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"Set multi quadrant mode\",\n                ),\n                lspt.CompletionItem(\n                    label=\"G90\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"(Deprecated) Set the `Coordinate format` to `Absolute notation`\",\n                    deprecated=True,\n                ),\n                lspt.CompletionItem(\n                    label=\"G91\",\n                    kind=lspt.CompletionItemKind.Function,\n                    detail=\"(Deprecated) Set the `Coordinate format` to `Incremental notation`\",\n                    deprecated=True,\n                ),\n            ],\n        )\n\n    def get_completion_extended_command(self) -&gt; lspt.CompletionList | None:\n        \"\"\"Get the list of extended commands.\"\"\"\n        return lspt.CompletionList(\n            is_incomplete=False,\n            items=[\n                *self._get_completion_ad_commands(),\n                lspt.CompletionItem(\n                    label=\"FSLAX46Y46*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    documentation=\"\",\n                    insert_text=\"FSLAX${1:4}${2:6}Y${1:4}${2:6}*\",\n                    insert_text_format=lspt.InsertTextFormat.Snippet,\n                ),\n                lspt.CompletionItem(\n                    label=\"MOMM*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    documentation=\"\",\n                    insert_text=\"MO${1:MM}*\",\n                    insert_text_format=lspt.InsertTextFormat.Snippet,\n                ),\n                lspt.CompletionItem(\n                    label=\"LPD*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    documentation=\"\",\n                    insert_text=\"LP${1:D}*\",\n                    insert_text_format=lspt.InsertTextFormat.Snippet,\n                ),\n                lspt.CompletionItem(\n                    label=\"LPC*\",\n                    kind=lspt.CompletionItemKind.Function,\n                    documentation=\"\",\n                    insert_text=\"LP${1:C}*\",\n                    insert_text_format=lspt.InsertTextFormat.Snippet,\n                ),\n            ],\n        )\n\n    def _get_completion_ad_commands(self) -&gt; list[lspt.CompletionItem]:\n        \"\"\"Get the list of AD commands.\"\"\"\n        state = self.get_gerber_state()\n        if state is None:\n            return []\n\n        next_code = state.apertures.get_next_free_aperture_code()\n\n        return [\n            lspt.CompletionItem(\n                label=string,\n                kind=lspt.CompletionItemKind.Constructor,\n                documentation=doc,\n                insert_text=string,\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            )\n            for string, doc in [\n                (\n                    f\"ADD{next_code}C,${{1:diameter}}*\",\n                    \"Add circle aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}C,${{1:diameter}}X${{2:hole_diameter}}*\",\n                    \"Add circle aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}R,${{1:width}}X${{2:height}}*\",\n                    \"Add rectangle aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}R,${{1:width}}X${{2:height}}X${{3:hole_diameter}}*\",\n                    \"Add rectangle aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}O,${{1:width}}X${{2:height}}*\",\n                    \"Add obround aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}O,${{1:width}}X${{2:height}}X${{3:hole_diameter}}*\",\n                    \"Add obround aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}P,${{1:outer_diameter}}X${{2:vertices}}X${{3:rotation}}*\",\n                    \"Add polygon aperture definition\",\n                ),\n                (\n                    f\"ADD{next_code}P,${{1:outer_diameter}}X${{2:vertices}}X${{3:rotation}}X${{4:hole_diameter}}*\",\n                    \"Add polygon aperture definition\",\n                ),\n            ]\n        ]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.load_ast_from_uri","title":"load_ast_from_uri","text":"<pre><code>load_ast_from_uri(uri: str) -&gt; File\n</code></pre> <p>Parse the input.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def load_ast_from_uri(self, uri: str) -&gt; File:\n    \"\"\"Parse the input.\"\"\"\n    code = self.gls.workspace.get_document(uri)\n    return self.load_ast_from_code(code.source)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.load_ast_from_code","title":"load_ast_from_code","text":"<pre><code>load_ast_from_code(code: str) -&gt; File\n</code></pre> <p>Parse the input.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def load_ast_from_code(self, code: str) -&gt; File:\n    \"\"\"Parse the input.\"\"\"\n    code_hash = sha256(code)\n\n    if code_hash == self.source_hash and self.ast is not None:\n        return self.ast\n\n    self.ast = self.parser.parse(code)\n    self.source_hash = sha256(code)\n\n    self.log_info(f\"Parsed AST for {self.uri} (sha256: {self.source_hash})\")\n    return self.ast\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.on_open","title":"on_open  <code>async</code>","text":"<pre><code>on_open(params: lspt.DidOpenTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document open event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>async def on_open(self, params: lspt.DidOpenTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document open event.\"\"\"\n    self.flush_cached_values()\n    self.uri = params.text_document.uri\n    self.load_ast_from_code(params.text_document.text)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.on_close","title":"on_close  <code>async</code>","text":"<pre><code>on_close(params: lspt.DidCloseTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document close event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>async def on_close(self, params: lspt.DidCloseTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document close event.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.on_change","title":"on_change  <code>async</code>","text":"<pre><code>on_change(params: lspt.DidChangeTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document change event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>async def on_change(self, params: lspt.DidChangeTextDocumentParams) -&gt; None:\n    \"\"\"Handle the document change event.\"\"\"\n    self.flush_cached_values()\n    self.load_ast_from_uri(params.text_document.uri)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.on_hover","title":"on_hover  <code>async</code>","text":"<pre><code>on_hover(params: lspt.HoverParams) -&gt; lspt.Hover | None\n</code></pre> <p>Handle the hover event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>async def on_hover(self, params: lspt.HoverParams) -&gt; lspt.Hover | None:\n    \"\"\"Handle the hover event.\"\"\"\n    position = ZeroBasedPosition(\n        line=params.position.line, column=params.position.character\n    ).to_one_based()\n\n    if self.ast is None:\n        return None\n\n    node = NodeFinder(self.ast).find_node(position)\n\n    if node is None:\n        return None\n\n    message = GerberHoverCreator(self.ast).create_hover_markdown(node)\n\n    source_info = node.source_info\n    if source_info is None:\n        return None\n\n    return lspt.Hover(\n        contents=lspt.MarkupContent(value=message, kind=lspt.MarkupKind.Markdown),\n        range=lspt.Range(\n            start=lspt.Position(source_info.line - 1, source_info.column - 1),\n            end=lspt.Position(source_info.end_line - 1, source_info.end_column - 1),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.on_completion","title":"on_completion  <code>async</code>","text":"<pre><code>on_completion(\n    params: lspt.CompletionParams,\n) -&gt; lspt.CompletionList | None\n</code></pre> <p>Handle the completion event.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>async def on_completion(\n    self, params: lspt.CompletionParams\n) -&gt; lspt.CompletionList | None:\n    \"\"\"Handle the completion event.\"\"\"\n    if self.ast is None:\n        return None\n\n    position = ZeroBasedPosition(\n        line=params.position.line, column=params.position.character\n    ).to_one_based()\n    node = NodeFinder(self.ast).find_node(position)\n    self.gls.show_message_log(str(node))\n\n    if not isinstance(node, Invalid) or len(node.string) == 0:\n        return None\n\n    if re.match(r\"G\\d*\", node.string):\n        return self.get_completion_g_codes()\n\n    if re.match(r\"D\\d*\", node.string):\n        return self.get_completion_apertures()\n\n    if re.match(r\"%\", node.string):\n        return self.get_completion_extended_command()\n\n    self.gls.show_message_log(\"No completion handler found.\")\n    return lspt.CompletionList(is_incomplete=False, items=[])\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.get_completion_apertures","title":"get_completion_apertures","text":"<pre><code>get_completion_apertures() -&gt; lspt.CompletionList | None\n</code></pre> <p>Get the list of apertures.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def get_completion_apertures(self) -&gt; lspt.CompletionList | None:\n    \"\"\"Get the list of apertures.\"\"\"\n    if self.cached_aperture_completion is not None:\n        return self.cached_aperture_completion\n\n    state = self.get_gerber_state()\n    if state is None:\n        return None\n\n    aperture_completion = []\n\n    formatter = Formatter()\n\n    for name, node in state.apertures.apertures.items():\n        out = StringIO()\n        formatter.format(File(nodes=[node]), out)\n\n        aperture_completion.append(\n            lspt.CompletionItem(\n                label=name,\n                kind=lspt.CompletionItemKind.Function,\n                detail=out.getvalue(),\n            )\n        )\n\n    for name, node in state.apertures.blocks.items():\n        out = StringIO()\n        formatter.format(File(nodes=[node.open]), out)\n\n        aperture_completion.append(\n            lspt.CompletionItem(\n                label=name,\n                kind=lspt.CompletionItemKind.Method,\n                detail=out.getvalue(),\n            )\n        )\n\n    self.cached_aperture_completion = lspt.CompletionList(\n        is_incomplete=False, items=aperture_completion\n    )\n\n    return self.cached_aperture_completion\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.get_gerber_state","title":"get_gerber_state","text":"<pre><code>get_gerber_state() -&gt; Optional[State]\n</code></pre> <p>Get the state of the document.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def get_gerber_state(self) -&gt; Optional[State]:\n    \"\"\"Get the state of the document.\"\"\"\n    if self.state is None:\n        visitor = StateTrackingVisitor(ignore_program_stop=True)\n        if self.ast is None:\n            return None\n\n        self.ast.visit(visitor)\n        self.state = visitor.state\n\n    return self.state\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.get_completion_g_codes","title":"get_completion_g_codes","text":"<pre><code>get_completion_g_codes() -&gt; lspt.CompletionList | None\n</code></pre> <p>Get the list of G-codes.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def get_completion_g_codes(self) -&gt; lspt.CompletionList | None:\n    \"\"\"Get the list of G-codes.\"\"\"\n    return lspt.CompletionList(\n        is_incomplete=False,\n        items=[\n            lspt.CompletionItem(\n                label=\"G01*\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Set linear plot mode.\",\n            ),\n            lspt.CompletionItem(\n                label=\"G02*\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Set clockwise circular plot mode\",\n            ),\n            lspt.CompletionItem(\n                label=\"G03*\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Set counterclockwise circular plot mode\",\n            ),\n            lspt.CompletionItem(\n                label=\"G04${1:comment}*\",\n                kind=lspt.CompletionItemKind.Text,\n                detail=\"Add comment\",\n                insert_text=\"G04${1:comment}*\",\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            ),\n            lspt.CompletionItem(\n                label=\"G36*\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Open region statement\",\n            ),\n            lspt.CompletionItem(\n                label=\"G37*\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Close region statement\",\n            ),\n            lspt.CompletionItem(\n                label=\"G54\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"(Deprecated) Select aperture prefix\",\n                deprecated=True,\n            ),\n            lspt.CompletionItem(\n                label=\"G55\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"(Deprecated) Prepare for flash\",\n                deprecated=True,\n            ),\n            lspt.CompletionItem(\n                label=\"G74\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"(Deprecated) Set single quadrant mode\",\n                deprecated=True,\n            ),\n            lspt.CompletionItem(\n                label=\"G75\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"Set multi quadrant mode\",\n            ),\n            lspt.CompletionItem(\n                label=\"G90\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"(Deprecated) Set the `Coordinate format` to `Absolute notation`\",\n                deprecated=True,\n            ),\n            lspt.CompletionItem(\n                label=\"G91\",\n                kind=lspt.CompletionItemKind.Function,\n                detail=\"(Deprecated) Set the `Coordinate format` to `Incremental notation`\",\n                deprecated=True,\n            ),\n        ],\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.GerberDocument.get_completion_extended_command","title":"get_completion_extended_command","text":"<pre><code>get_completion_extended_command() -&gt; (\n    lspt.CompletionList | None\n)\n</code></pre> <p>Get the list of extended commands.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def get_completion_extended_command(self) -&gt; lspt.CompletionList | None:\n    \"\"\"Get the list of extended commands.\"\"\"\n    return lspt.CompletionList(\n        is_incomplete=False,\n        items=[\n            *self._get_completion_ad_commands(),\n            lspt.CompletionItem(\n                label=\"FSLAX46Y46*\",\n                kind=lspt.CompletionItemKind.Function,\n                documentation=\"\",\n                insert_text=\"FSLAX${1:4}${2:6}Y${1:4}${2:6}*\",\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            ),\n            lspt.CompletionItem(\n                label=\"MOMM*\",\n                kind=lspt.CompletionItemKind.Function,\n                documentation=\"\",\n                insert_text=\"MO${1:MM}*\",\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            ),\n            lspt.CompletionItem(\n                label=\"LPD*\",\n                kind=lspt.CompletionItemKind.Function,\n                documentation=\"\",\n                insert_text=\"LP${1:D}*\",\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            ),\n            lspt.CompletionItem(\n                label=\"LPC*\",\n                kind=lspt.CompletionItemKind.Function,\n                documentation=\"\",\n                insert_text=\"LP${1:C}*\",\n                insert_text_format=lspt.InsertTextFormat.Snippet,\n            ),\n        ],\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/documents/gerber.html#pygerber.gerberx3.language_server._server.documents.gerber.sha256","title":"sha256","text":"<pre><code>sha256(s: str) -&gt; str\n</code></pre> <p>Calculate SHA256 hash of the input.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/documents/gerber.py</code> <pre><code>def sha256(s: str) -&gt; str:\n    \"\"\"Calculate SHA256 hash of the input.\"\"\"\n    return hashlib.sha256(s.encode(\"utf-8\")).hexdigest()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/__init__.html#pygerber.gerberx3.language_server._server.hover","title":"hover","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber","title":"gerber","text":""},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.LimitedStateTrackingVisitor","title":"LimitedStateTrackingVisitor","text":"<p>             Bases: <code>StateTrackingVisitor</code></p> <p>The <code>LimitedStateTrackingVisitor</code> class which stops AST walk before particular location in source.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>class LimitedStateTrackingVisitor(StateTrackingVisitor):\n    \"\"\"The `LimitedStateTrackingVisitor` class which stops AST walk before particular\n    location in source.\n    \"\"\"\n\n    def __init__(self, max_location: int) -&gt; None:\n        super().__init__()\n        self.max_location = max_location\n\n    def on_file(self, node: File) -&gt; File:\n        \"\"\"Handle `File` node.\"\"\"\n        with suppress(ProgramStop):\n            try:\n                for command in node.nodes:\n                    source_info = command.source_info\n                    assert source_info is not None\n\n                    if source_info.end_location &gt; self.max_location:\n                        raise ProgramStop(M02())\n\n                    try:\n                        command.visit(self)\n                    except Exception as e:\n                        if self.on_exception(command, e):\n                            raise\n            finally:\n                self.on_end_of_file(node)\n\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.LimitedStateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_file(self, node: File) -&gt; File:\n    \"\"\"Handle `File` node.\"\"\"\n    with suppress(ProgramStop):\n        try:\n            for command in node.nodes:\n                source_info = command.source_info\n                assert source_info is not None\n\n                if source_info.end_location &gt; self.max_location:\n                    raise ProgramStop(M02())\n\n                try:\n                    command.visit(self)\n                except Exception as e:\n                    if self.on_exception(command, e):\n                        raise\n        finally:\n            self.on_end_of_file(node)\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown","title":"ToMarkdown","text":"<p>             Bases: <code>AstVisitor</code></p> <p>Convert Gerber Node to markdown.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>class ToMarkdown(AstVisitor):\n    \"\"\"Convert Gerber Node to markdown.\"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.markdown: StringIO\n\n    def to_markdown(self, node: Node) -&gt; str:\n        \"\"\"Convert Gerber Node to markdown.\"\"\"\n        self.markdown = StringIO()\n        node.visit(self)\n        return self.markdown.getvalue()\n\n    def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n        \"\"\"Handle `TA_UserName` node.\"\"\"\n        fields_md = \", \".join(f\"`{f}`\" for f in node.fields)\n        self.markdown.write(f\"`{node.attribute_name}`: {fields_md}\")\n        return node\n\n    def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n        \"\"\"Handle `TA_AperFunction` node.\"\"\"\n        function = node.function.value if node.function else \"&lt;missing&gt;\"\n        fields_md = \", \".join(f\"`{f}`\" for f in node.fields)\n        self.markdown.write(f\"`{node.attribute_name}`: `{function}`\")\n        if node.fields:\n            self.markdown.write(f\", ({fields_md})\")\n\n        return node\n\n    def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n        \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n        self.markdown.write(\n            f\"`{node.attribute_name}`: `+{node.plus_tolerance}` /\"\n            f\" -`{node.minus_tolerance}`\"\n        )\n\n        return node\n\n    def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n        \"\"\"Handle `TA_FlashText` node.\"\"\"\n        string = node.string.replace(\"`\", \"'\")\n        self.markdown.write(f\"`{node.attribute_name}`: `{string}`\")\n        return node\n\n    def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n        \"\"\"Handle `TO_UserName` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(\", \".join(f\"`{f}`\" for f in node.fields))\n        return node\n\n    def on_to_n(self, node: TO_N) -&gt; TO_N:\n        \"\"\"Handle `TO_N` node.\"\"\"\n        self.markdown.write(f\"`CAD net name` (`{node.attribute_name}`): \")\n        self.markdown.write(\", \".join(f\"`{f}`\" for f in node.net_names))\n        return node\n\n    def on_to_p(self, node: TO_P) -&gt; TO_P:\n        \"\"\"Handle `TO_P` node`.\"\"\"\n        self.markdown.write(f\"`Pin number` (`{node.attribute_name}`): \")\n        self.markdown.write(f\"`{node.refdes}`, `{node.number}`, `{node.function}`\")\n        return node\n\n    def on_to_c(self, node: TO_C) -&gt; TO_C:\n        \"\"\"Handle `TO_C` node.\"\"\"\n        self.markdown.write(\n            f\"`Component reference designator({node.attribute_name}`): \"\n        )\n        self.markdown.write(f\"`{node.refdes}`\")\n        return node\n\n    def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n        \"\"\"Handle `TO_CRot` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.angle}\u00b0`\")\n        return node\n\n    def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n        \"\"\"Handle `TO_CMfr` node.\"\"\"\n        self.markdown.write(f\"`Supplier` (`{node.attribute_name}`): \")\n        self.markdown.write(f\"`{node.manufacturer}`\")\n        return node\n\n    def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n        \"\"\"Handle `TO_CMNP` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.part_number}`\")\n        return node\n\n    def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.value}`\")\n        return node\n\n    def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n        \"\"\"Handle `TO_CVal` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.mount.name}`\")\n        return node\n\n    def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n        \"\"\"Handle `TO_Cftp` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.footprint}`\")\n        return node\n\n    def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n        \"\"\"Handle `TO_CPgN` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.name}`\")\n        return node\n\n    def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n        \"\"\"Handle `TO_CPgD` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.description}`\")\n        return node\n\n    def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n        \"\"\"Handle `TO_CHgt` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.height}`\")\n        return node\n\n    def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n        \"\"\"Handle `TO_CLbN` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.name}`\")\n        return node\n\n    def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n        \"\"\"Handle `TO_CLbD` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.description}`\")\n        return node\n\n    def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n        \"\"\"Handle `TO_CSup` node.\"\"\"\n        self.markdown.write(f\"`{node.attribute_name}`: \")\n        self.markdown.write(f\"`{node.supplier}`, \")\n        self.markdown.write(f\"`{node.supplier_part}`\")\n        if node.other_suppliers:\n            self.markdown.write(\", \")\n            self.markdown.write(\", \".join(f\"`{f}`\" for f in node.other_suppliers))\n        return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.to_markdown","title":"to_markdown","text":"<pre><code>to_markdown(node: Node) -&gt; str\n</code></pre> <p>Convert Gerber Node to markdown.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def to_markdown(self, node: Node) -&gt; str:\n    \"\"\"Convert Gerber Node to markdown.\"\"\"\n    self.markdown = StringIO()\n    node.visit(self)\n    return self.markdown.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_ta_user_name(self, node: TA_UserName) -&gt; TA_UserName:\n    \"\"\"Handle `TA_UserName` node.\"\"\"\n    fields_md = \", \".join(f\"`{f}`\" for f in node.fields)\n    self.markdown.write(f\"`{node.attribute_name}`: {fields_md}\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_ta_aper_function(self, node: TA_AperFunction) -&gt; TA_AperFunction:\n    \"\"\"Handle `TA_AperFunction` node.\"\"\"\n    function = node.function.value if node.function else \"&lt;missing&gt;\"\n    fields_md = \", \".join(f\"`{f}`\" for f in node.fields)\n    self.markdown.write(f\"`{node.attribute_name}`: `{function}`\")\n    if node.fields:\n        self.markdown.write(f\", ({fields_md})\")\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_ta_drill_tolerance(self, node: TA_DrillTolerance) -&gt; TA_DrillTolerance:\n    \"\"\"Handle `TA_DrillTolerance` node.\"\"\"\n    self.markdown.write(\n        f\"`{node.attribute_name}`: `+{node.plus_tolerance}` /\"\n        f\" -`{node.minus_tolerance}`\"\n    )\n\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_ta_flash_text(self, node: TA_FlashText) -&gt; TA_FlashText:\n    \"\"\"Handle `TA_FlashText` node.\"\"\"\n    string = node.string.replace(\"`\", \"'\")\n    self.markdown.write(f\"`{node.attribute_name}`: `{string}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_user_name(self, node: TO_UserName) -&gt; TO_UserName:\n    \"\"\"Handle `TO_UserName` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(\", \".join(f\"`{f}`\" for f in node.fields))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_n(self, node: TO_N) -&gt; TO_N:\n    \"\"\"Handle `TO_N` node.\"\"\"\n    self.markdown.write(f\"`CAD net name` (`{node.attribute_name}`): \")\n    self.markdown.write(\", \".join(f\"`{f}`\" for f in node.net_names))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_p(self, node: TO_P) -&gt; TO_P:\n    \"\"\"Handle `TO_P` node`.\"\"\"\n    self.markdown.write(f\"`Pin number` (`{node.attribute_name}`): \")\n    self.markdown.write(f\"`{node.refdes}`, `{node.number}`, `{node.function}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_c(self, node: TO_C) -&gt; TO_C:\n    \"\"\"Handle `TO_C` node.\"\"\"\n    self.markdown.write(\n        f\"`Component reference designator({node.attribute_name}`): \"\n    )\n    self.markdown.write(f\"`{node.refdes}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_crot(self, node: TO_CRot) -&gt; TO_CRot:\n    \"\"\"Handle `TO_CRot` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.angle}\u00b0`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cmfr(self, node: TO_CMfr) -&gt; TO_CMfr:\n    \"\"\"Handle `TO_CMfr` node.\"\"\"\n    self.markdown.write(f\"`Supplier` (`{node.attribute_name}`): \")\n    self.markdown.write(f\"`{node.manufacturer}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cmnp(self, node: TO_CMNP) -&gt; TO_CMNP:\n    \"\"\"Handle `TO_CMNP` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.part_number}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cval(self, node: TO_CVal) -&gt; TO_CVal:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.value}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cmnt(self, node: TO_CMnt) -&gt; TO_CMnt:\n    \"\"\"Handle `TO_CVal` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.mount.name}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cftp(self, node: TO_CFtp) -&gt; TO_CFtp:\n    \"\"\"Handle `TO_Cftp` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.footprint}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cpgn(self, node: TO_CPgN) -&gt; TO_CPgN:\n    \"\"\"Handle `TO_CPgN` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.name}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_cpgd(self, node: TO_CPgD) -&gt; TO_CPgD:\n    \"\"\"Handle `TO_CPgD` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.description}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_chgt(self, node: TO_CHgt) -&gt; TO_CHgt:\n    \"\"\"Handle `TO_CHgt` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.height}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_clbn(self, node: TO_CLbN) -&gt; TO_CLbN:\n    \"\"\"Handle `TO_CLbN` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.name}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_clbd(self, node: TO_CLbD) -&gt; TO_CLbD:\n    \"\"\"Handle `TO_CLbD` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.description}`\")\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.ToMarkdown.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def on_to_csup(self, node: TO_CSup) -&gt; TO_CSup:\n    \"\"\"Handle `TO_CSup` node.\"\"\"\n    self.markdown.write(f\"`{node.attribute_name}`: \")\n    self.markdown.write(f\"`{node.supplier}`, \")\n    self.markdown.write(f\"`{node.supplier_part}`\")\n    if node.other_suppliers:\n        self.markdown.write(\", \")\n        self.markdown.write(\", \".join(f\"`{f}`\" for f in node.other_suppliers))\n    return node\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.GerberHoverCreator","title":"GerberHoverCreator","text":"<p>             Bases: <code>AstVisitor</code></p> <p>The <code>GerberHoverCreator</code> class generates hover information for Gerber AST node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>class GerberHoverCreator(AstVisitor):\n    \"\"\"The `GerberHoverCreator` class generates hover information for Gerber AST\n    node.\n    \"\"\"\n\n    def __init__(self, ast: File) -&gt; None:\n        super().__init__()\n        self.ast = ast\n        self.hover_markdown: StringIO\n\n    def create_hover_markdown(self, node: Node) -&gt; str:\n        \"\"\"Get hover markdown for the given node.\"\"\"\n        self.hover_markdown = StringIO()\n\n        source_info = node.source_info\n        assert source_info is not None\n\n        visitor = LimitedStateTrackingVisitor(source_info.location)\n        self.ast.visit(visitor)\n\n        self.state = visitor.state\n\n        node.visit(self)\n\n        return self.hover_markdown.getvalue()\n\n    def _sep(self) -&gt; None:\n        self.hover_markdown.write(\"\\n---\\n\")\n\n    @contextmanager\n    def _code_block(self, language: str) -&gt; Generator[None, None, None]:\n        self.hover_markdown.write(f\"```{language}\\n\")\n        yield\n        self.hover_markdown.write(\"```\\n\")\n\n    def _print(self, text: str) -&gt; None:\n        self.hover_markdown.write(text + \" \")\n\n    def _print_line(self, text: str = \"\", end: str = \"\\n\") -&gt; None:\n        self.hover_markdown.write(text + end)\n\n    def _single_break(self) -&gt; None:\n        self._print_line(\"&lt;br/&gt;\\n\")\n\n    def _double_break(self) -&gt; None:\n        self._print_line(\"&lt;br/&gt;&lt;br/&gt;\\n\")\n\n    def _append_current_xy(self, message: str = \"Starts at:\") -&gt; None:\n        self._sep()\n        self._print_line(\n            f\"{message} &amp;nbsp; _x =_ `{self.state.current_x}` \"\n            f\"_y =_ `{self.state.current_y}`\"\n        )\n\n    def _append_xy(\n        self,\n        message: str,\n        x: Optional[Coordinate],\n        y: Optional[Coordinate],\n        default_x: float = 0.0,\n        default_y: float = 0.0,\n    ) -&gt; None:\n        fmt = self.state.coordinate_format\n        if fmt is None:\n            return\n\n        x_value = fmt.unpack_x(x.value) if x else default_x\n        y_value = fmt.unpack_y(y.value) if y else default_y\n\n        self._sep()\n        self._print_line(\n            f\"{message} &amp;nbsp;&amp;nbsp;&amp;nbsp; _x =_ `{x_value}` _y =_ `{y_value}`\"\n        )\n\n    def _current_aperture(self) -&gt; None:\n        self._print(f\"`Aperture: {self.state.current_aperture_id}`\")\n\n    def _arc_interpolation_mode(self) -&gt; None:\n        if self.state.plot_mode != PlotMode.LINEAR:\n            self._print(\n                {\n                    ArcInterpolation.MULTI_QUADRANT: \"`Multi-quadrant`\",\n                    ArcInterpolation.SINGLE_QUADRANT: \"`Single-quadrant`\",\n                }[self.state.arc_interpolation]\n            )\n\n    def _plot_mode(self) -&gt; None:\n        self._print(\n            {\n                PlotMode.LINEAR: \"`Linear`\",\n                PlotMode.ARC: \"`Clockwise Arc`\",\n                PlotMode.CCW_ARC: \"`Counter-clockwise Arc`\",\n            }[self.state.plot_mode]\n        )\n\n    def _polarity(self) -&gt; None:\n        self._print(\n            {Polarity.Dark: \"`Dark polarity`\", Polarity.Clear: \"`Clear polarity`\"}[\n                self.state.transform.polarity\n            ]\n        )\n\n    def _transform(self) -&gt; None:\n        self._print(\n            {\n                Mirroring.NONE: \"`No Mirroring`\",\n                Mirroring.X: \"`Mirroring X`\",\n                Mirroring.Y: \"`Mirroring Y`\",\n                Mirroring.XY: \"`Mirroring X and Y`\",\n            }[self.state.transform.mirroring]\n        )\n        self._print(f\"`Rotation: {self.state.transform.rotation}`\u00b0\")\n        self._print_line(f\"`Scale: {self.state.transform.scaling}`\")\n\n    def _aperture_attributes(self, aperture_id: str) -&gt; None:\n        attributes = self.state.apertures.per_aperture_attributes.get(aperture_id, {})\n\n        if len(attributes) == 0:\n            return\n\n        self._sep()\n        self._print_line(f\"### Aperture attributes (`{aperture_id}`)\")\n\n        serializer = ToMarkdown()\n\n        for attr in attributes.values():\n            self._print(\"-\")\n            self._print_line(serializer.to_markdown(attr))\n\n        self._print_line()\n\n    def _object_attributes(self) -&gt; None:\n        attributes = self.state.attributes.object_attributes\n\n        if len(attributes) == 0:\n            return\n\n        self._sep()\n        self._print_line(\"### Object attributes\")\n\n        serializer = ToMarkdown()\n\n        for attr in attributes.values():\n            self._print(\"-\")\n            self._print_line(serializer.to_markdown(attr))\n\n        self._print_line()\n\n    def _base64_image_tag(self, image: Image.Image) -&gt; str:\n        buffered = io.BytesIO()\n        image.save(buffered, format=\"JPEG\")\n        image_bytes = buffered.getvalue()\n        encoded_image = base64.b64encode(image_bytes).decode(\"utf-8\")\n        return f'&lt;p align=\"center\"&gt;&lt;img src=\"data:image/jpeg;base64,{encoded_image}\" alt=\"Embedded Image\" /&gt;&lt;/p&gt;'\n\n    def _visualize_draw_op(self, extra_commands: list[Node]) -&gt; None:\n        nodes: list[Node] = []\n        assert self.state.coordinate_format is not None\n\n        nodes.append(\n            FS(\n                zeros=self.state.coordinate_format.zeros,\n                coordinate_mode=self.state.coordinate_format.coordinate_mode,\n                x_integral=self.state.coordinate_format.x_integral,\n                x_decimal=self.state.coordinate_format.x_decimal,\n                y_integral=self.state.coordinate_format.y_integral,\n                y_decimal=self.state.coordinate_format.y_decimal,\n            )\n        )\n\n        nodes.append(MO(mode=self.state.unit_mode))\n        nodes.append(\n            D02(\n                x=CoordinateX(\n                    value=self.state.coordinate_format.pack_x(self.state.current_x)\n                ),\n                y=CoordinateY(\n                    value=self.state.coordinate_format.pack_y(self.state.current_y)\n                ),\n            )\n        )\n        nodes.extend(self.state.apertures.macros.values())\n        nodes.extend(self.state.apertures.apertures.values())\n        nodes.extend(self.state.apertures.macros.values())\n\n        nodes.append(\n            {\n                PlotMode.LINEAR: G01(),\n                PlotMode.ARC: G02(),\n                PlotMode.CCW_ARC: G02(),\n            }[self.state.plot_mode]\n        )\n        nodes.append(\n            {\n                ArcInterpolation.MULTI_QUADRANT: G75(),\n                ArcInterpolation.SINGLE_QUADRANT: G74(),\n            }[self.state.arc_interpolation]\n        )\n        nodes.append(LM(mirroring=self.state.transform.mirroring))\n        nodes.append(LS(scale=self.state.transform.scaling))\n        nodes.append(LR(rotation=self.state.transform.rotation))\n\n        if self.state.current_aperture_id is not None:\n            nodes.append(\n                Dnn(\n                    aperture_id=self.state.current_aperture_id,\n                )\n            )\n        nodes.extend(extra_commands)\n\n        rvmc = compile(File(nodes=nodes))\n        result = render(rvmc, dpmm=100)\n        assert isinstance(result, PillowResult)\n\n        tag = self._base64_image_tag(result.get_image())\n\n        self._print_line(tag)\n\n    def _spec_ref(self, bullets: str) -&gt; None:\n        self._sep()\n        self._single_break()\n        self._print_line(spec.spec_title())\n        self._print_line(bullets)\n        self._single_break()\n\n    def on_d01(self, node: D01) -&gt; D01:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._append_current_xy()\n        self._append_xy(\n            \"Ends at:\", node.x, node.y, self.state.current_x, self.state.current_y\n        )\n\n        if self.state.plot_mode != PlotMode.LINEAR:\n            self._append_xy(\"Arc center at:\", node.i, node.j)\n\n        self._sep()\n        self._current_aperture()\n        self._arc_interpolation_mode()\n        self._plot_mode()\n        self._polarity()\n        self._transform()\n\n        if self.state.current_aperture_id:\n            self._aperture_attributes(self.state.current_aperture_id)\n\n        self._object_attributes()\n\n        self._sep()\n        self._print_line(\"### Visualization\")\n        self._single_break()\n        self._visualize_draw_op([node])\n        self._single_break()\n\n        self._spec_ref(spec.d01())\n\n        return node\n\n    def on_d02(self, node: D02) -&gt; D02:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._append_xy(\n            \"Relocate to:\", node.x, node.y, self.state.current_x, self.state.current_y\n        )\n\n        self._spec_ref(spec.d02())\n\n        return node\n\n    def on_d03(self, node: D03) -&gt; D03:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._append_xy(\n            \"Flash at:\", node.x, node.y, self.state.current_x, self.state.current_y\n        )\n\n        self._sep()\n        self._current_aperture()\n        self._arc_interpolation_mode()\n        self._plot_mode()\n        self._polarity()\n        self._transform()\n\n        if self.state.current_aperture_id:\n            self._aperture_attributes(self.state.current_aperture_id)\n\n        self._object_attributes()\n\n        self._sep()\n        self._print_line(\"### Visualization\")\n        self._single_break()\n        self._visualize_draw_op([node])\n        self._single_break()\n\n        self._spec_ref(spec.d03())\n\n        return node\n\n    def on_to(self, node: TO) -&gt; None:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._spec_ref(spec.to())\n\n    def on_ta(self, node: TA) -&gt; None:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._spec_ref(spec.ta())\n\n    def on_tf(self, node: TF) -&gt; None:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._spec_ref(spec.tf())\n\n    def on_td(self, node: TD) -&gt; TD:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._spec_ref(spec.td())\n\n        return node\n\n    def on_dnn(self, node: Dnn) -&gt; Dnn:\n        with self._code_block(\"gerber\"):\n            Formatter().format(File(nodes=[node]), self.hover_markdown)\n\n        self._aperture_attributes(node.aperture_id)\n\n        self._object_attributes()\n\n        if self.state.coordinate_format is not None:\n            self._sep()\n            self._print_line(\"### Visualization\")\n            self._single_break()\n            self._visualize_draw_op(\n                cast(\n                    \"list[Node]\",\n                    [\n                        node,\n                        D03(\n                            x=CoordinateX(\n                                value=self.state.coordinate_format.pack_x(0.0)\n                            ),\n                            y=CoordinateY(\n                                value=self.state.coordinate_format.pack_y(0.0)\n                            ),\n                        ),\n                    ],\n                )\n            )\n            self._single_break()\n\n        self._spec_ref(spec.dnn())\n        return node\n\n    def on_ad(self, node: AD) -&gt; None:\n        self._add_code_block_format_node(node)\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n    def _add_code_block_format_node(self, node: Node) -&gt; None:\n        with self._code_block(\"gerber\"):\n            Formatter().format_node(node, self.hover_markdown)\n\n    def _visualize_aperture_definition(self, node: AD) -&gt; None:\n        if self.state.coordinate_format is not None:\n            self._sep()\n            self._print_line(\"### Visualization\")\n            self._single_break()\n            self._visualize_draw_op(\n                cast(\n                    \"list[Node]\",\n                    [\n                        node,\n                        Dnn(aperture_id=node.aperture_id),\n                        D03(\n                            x=CoordinateX(\n                                value=self.state.coordinate_format.pack_x(0.0)\n                            ),\n                            y=CoordinateY(\n                                value=self.state.coordinate_format.pack_y(0.0)\n                            ),\n                        ),\n                    ],\n                )\n            )\n            self._single_break()\n\n    def on_adc(self, node: ADC) -&gt; ADC:\n        self._add_code_block_format_node(node)\n\n        self._print(\"\\n - standard template: `Circle`\")\n        self._print(f\"\\n - diameter: `{node.diameter}`\")\n        self._print(f\"\\n - hole_diameter: `{node.hole_diameter}`\")\n\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n        self._spec_ref(spec.adc())\n\n        return node\n\n    def on_adr(self, node: ADR) -&gt; ADR:\n        self._add_code_block_format_node(node)\n\n        self._print(\"\\n - standard template: `Rectangle`\")\n        self._print(f\"\\n - width: `{node.width}`\")\n        self._print(f\"\\n - height: `{node.height}`\")\n        self._print(f\"\\n - hole_diameter: `{node.hole_diameter}`\")\n\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n        self._spec_ref(spec.adr())\n\n        return node\n\n    def on_ado(self, node: ADO) -&gt; ADO:\n        self._add_code_block_format_node(node)\n\n        self._print(\"\\n - standard template: `Obround`\")\n        self._print(f\"\\n - width: `{node.width}`\")\n        self._print(f\"\\n - height: `{node.height}`\")\n        self._print(f\"\\n - hole_diameter: `{node.hole_diameter}`\")\n\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n        self._spec_ref(spec.ado())\n\n        return node\n\n    def on_adp(self, node: ADP) -&gt; ADP:\n        self._add_code_block_format_node(node)\n\n        self._print(\"\\n - standard template: `Polygon`\")\n        self._print(f\"\\n - outer diameter: `{node.outer_diameter}`\")\n        self._print(f\"\\n - vertex count: `{node.vertices}`\")\n        self._print(f\"\\n - rotation: `{node.rotation or 0.0}\u00b0`\")\n        self._print(f\"\\n - hole_diameter: `{node.hole_diameter}`\")\n\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n        self._spec_ref(spec.adp())\n\n        return node\n\n    def on_ad_macro(self, node: ADmacro) -&gt; ADmacro:\n        self._add_code_block_format_node(node)\n\n        self._print(f\"\\n - macro name: `{node.name}`\")\n        if node.params:\n            for i, param in enumerate(node.params, start=1):\n                self._print(f\"\\n - parameter `${i}`: `{param}`\")\n\n        self._aperture_attributes(node.aperture_id)\n        self._visualize_aperture_definition(node)\n\n        self._spec_ref(spec.ad_macro())\n\n        return node\n\n    def on_code_1(self, node: Code1) -&gt; Code1:\n        formatter = Formatter(macro_split_mode=Formatter.MacroSplitMode.NONE)\n\n        with self._code_block(\"gerber\"):\n            formatter.format_node(node, self.hover_markdown)\n            self._print_line()\n\n        self._print(\"\\n - exposure: `\")\n        formatter.format_node(node.exposure, self.hover_markdown)\n\n        self._print(\"`\\n - diameter: `\")\n        formatter.format_node(node.diameter, self.hover_markdown)\n\n        self._print(\"`\\n - center_x: `\")\n        formatter.format_node(node.center_x, self.hover_markdown)\n\n        self._print(\"`\\n - center_y: `\")\n        formatter.format_node(node.center_y, self.hover_markdown)\n\n        self._print(\"`\\n - rotation: `\")\n        if node.rotation is not None:\n            formatter.format_node(node.rotation, self.hover_markdown)\n            self._print(\"\u00b0`\\n\")\n        else:\n            self._print_line(\"None`\")\n\n        self._spec_ref(spec.code_1())\n\n        return node\n\n    def on_code_2(self, node: Code2) -&gt; Code2:\n        formatter = Formatter(macro_split_mode=Formatter.MacroSplitMode.NONE)\n\n        with self._code_block(\"gerber\"):\n            formatter.format_node(node, self.hover_markdown)\n            self._print_line()\n\n        self._print(\"\\n - exposure: `\")\n        formatter.format_node(node.exposure, self.hover_markdown)\n\n        self._print(\"`\\n - width: `\")\n        formatter.format_node(node.width, self.hover_markdown)\n\n        self._print(\"`\\n - start_x: `\")\n        formatter.format_node(node.start_x, self.hover_markdown)\n\n        self._print(\"`\\n - start_y: `\")\n        formatter.format_node(node.start_y, self.hover_markdown)\n\n        self._print(\"`\\n - end_x: `\")\n        formatter.format_node(node.end_x, self.hover_markdown)\n\n        self._print(\"`\\n - end_y: `\")\n        formatter.format_node(node.end_y, self.hover_markdown)\n\n        self._print(\"`\\n - rotation: `\")\n        formatter.format_node(node.rotation, self.hover_markdown)\n        self._print(\"\u00b0`\\n\")\n\n        self._spec_ref(spec.code_1())\n\n        return node\n\n    def on_code_20(self, node: Code20) -&gt; Code20:\n        return super().on_code_20(node)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/language_server/_server/hover/gerber.html#pygerber.gerberx3.language_server._server.hover.gerber.GerberHoverCreator.create_hover_markdown","title":"create_hover_markdown","text":"<pre><code>create_hover_markdown(node: Node) -&gt; str\n</code></pre> <p>Get hover markdown for the given node.</p> Source code in <code>src/pygerber/gerberx3/language_server/_server/hover/gerber.py</code> <pre><code>def create_hover_markdown(self, node: Node) -&gt; str:\n    \"\"\"Get hover markdown for the given node.\"\"\"\n    self.hover_markdown = StringIO()\n\n    source_info = node.source_info\n    assert source_info is not None\n\n    visitor = LimitedStateTrackingVisitor(source_info.location)\n    self.ast.visit(visitor)\n\n    self.state = visitor.state\n\n    node.visit(self)\n\n    return self.hover_markdown.getvalue()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/linter/__init__.html#pygerber.gerberx3.linter","title":"linter","text":"<p>Code diagnostic logic.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html","title":"diagnostic","text":""},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic","title":"diagnostic","text":"<p>Container for diagnostic info.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Location","title":"Location","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Represents a location inside a resource, such as a line inside a text file.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>class Location(FrozenGeneralModel):\n    \"\"\"Represents a location inside a resource, such as a line\n    inside a text file.\n    \"\"\"\n\n    uri: str\n\n    range: Range\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.uri}:{self.range!r}\"\n\n    def to_lspt(self) -&gt; lspt.Location:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.Location(uri=self.uri, range=self.range.to_lspt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Location.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.Location\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.Location:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.Location(uri=self.uri, range=self.range.to_lspt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticRelatedInformation","title":"DiagnosticRelatedInformation","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Represents a related message and source code location for a diagnostic. This should be used to point to code locations that cause or related to a diagnostics, e.g when duplicating a symbol in a scope.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>class DiagnosticRelatedInformation(FrozenGeneralModel):\n    \"\"\"Represents a related message and source code location for a diagnostic. This\n    should be used to point to code locations that cause or related to a diagnostics,\n    e.g when duplicating a symbol in a scope.\n    \"\"\"\n\n    location: Location\n    \"\"\"The location of this related diagnostic information.\"\"\"\n\n    message: str\n    \"\"\"The message of this related diagnostic information.\"\"\"\n\n    def to_lspt(self) -&gt; lspt.DiagnosticRelatedInformation:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.DiagnosticRelatedInformation(\n            location=self.location.to_lspt(),\n            message=self.message,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticRelatedInformation.location","title":"location  <code>instance-attribute</code>","text":"<pre><code>location: Location\n</code></pre> <p>The location of this related diagnostic information.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticRelatedInformation.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The message of this related diagnostic information.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticRelatedInformation.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.DiagnosticRelatedInformation\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.DiagnosticRelatedInformation:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.DiagnosticRelatedInformation(\n        location=self.location.to_lspt(),\n        message=self.message,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.CodeDescription","title":"CodeDescription","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Structure to capture a description for an error code.</p> <p>@since 3.16.0</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>class CodeDescription(FrozenGeneralModel):\n    \"\"\"Structure to capture a description for an error code.\n\n    @since 3.16.0\n    \"\"\"\n\n    # Since: 3.16.0\n\n    href: str\n    \"\"\"An URI to open with more information about the diagnostic error.\"\"\"\n\n    def to_lspt(self) -&gt; lspt.CodeDescription:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.CodeDescription(href=self.href)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.CodeDescription.href","title":"href  <code>instance-attribute</code>","text":"<pre><code>href: str\n</code></pre> <p>An URI to open with more information about the diagnostic error.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.CodeDescription.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.CodeDescription\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.CodeDescription:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.CodeDescription(href=self.href)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity","title":"DiagnosticSeverity","text":"<p>             Bases: <code>int</code>, <code>Enum</code></p> <p>The diagnostic's severity.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>@enum.unique\nclass DiagnosticSeverity(int, enum.Enum):\n    \"\"\"The diagnostic's severity.\"\"\"\n\n    Error = 1\n    \"\"\"Reports an error.\"\"\"\n    Warning = 2\n    \"\"\"Reports a warning.\"\"\"\n    Information = 3\n    \"\"\"Reports an information.\"\"\"\n    Hint = 4\n    \"\"\"Reports a hint.\"\"\"\n\n    def to_lspt(self) -&gt; lspt.DiagnosticSeverity:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.DiagnosticSeverity(self.value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity.Error","title":"Error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Error = 1\n</code></pre> <p>Reports an error.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity.Warning","title":"Warning  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warning = 2\n</code></pre> <p>Reports a warning.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity.Information","title":"Information  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Information = 3\n</code></pre> <p>Reports an information.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity.Hint","title":"Hint  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Hint = 4\n</code></pre> <p>Reports a hint.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticSeverity.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.DiagnosticSeverity\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.DiagnosticSeverity:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.DiagnosticSeverity(self.value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Range","title":"Range","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>A range in a text document expressed as (zero-based) start and end positions.</p> <p>If you want to specify a range that contains a line including the line ending character(s) then use an end position denoting the start of the next line. For example: <pre><code>{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n</code></pre></p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>class Range(FrozenGeneralModel):\n    \"\"\"A range in a text document expressed as (zero-based) start and end positions.\n\n    If you want to specify a range that contains a line including the line ending\n    character(s) then use an end position denoting the start of the next line.\n    For example:\n    ```ts\n    {\n        start: { line: 5, character: 23 }\n        end : { line 6, character : 0 }\n    }\n    ```\n    \"\"\"\n\n    start: Position\n    \"\"\"The range's start position.\"\"\"\n\n    end: Position\n    \"\"\"The range's end position.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.start!r}-{self.end!r}\"\n\n    def to_lspt(self) -&gt; lspt.Range:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.Range(start=self.start.to_lspt(), end=self.end.to_lspt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Range.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: Position\n</code></pre> <p>The range's start position.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Range.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end: Position\n</code></pre> <p>The range's end position.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Range.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.Range\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.Range:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.Range(start=self.start.to_lspt(), end=self.end.to_lspt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticTag","title":"DiagnosticTag","text":"<p>             Bases: <code>int</code>, <code>Enum</code></p> <p>The diagnostic tags.</p> <p>@since 3.15.0</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>@enum.unique\nclass DiagnosticTag(int, enum.Enum):\n    \"\"\"The diagnostic tags.\n\n    @since 3.15.0\n    \"\"\"\n\n    # Since: 3.15.0\n    Unnecessary = 1\n    \"\"\"Unused or unnecessary code.\n\n    Clients are allowed to render diagnostics with this tag faded out instead of having\n    an error squiggle.\"\"\"\n    Deprecated = 2\n    \"\"\"Deprecated or obsolete code.\n\n    Clients are allowed to rendered diagnostics with this tag strike through.\"\"\"\n\n    def to_lspt(self) -&gt; lspt.DiagnosticTag:\n        \"\"\"Convert to corresponding language server protocol type.\"\"\"\n        return lspt.DiagnosticTag(self.value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticTag.Unnecessary","title":"Unnecessary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Unnecessary = 1\n</code></pre> <p>Unused or unnecessary code.</p> <p>Clients are allowed to render diagnostics with this tag faded out instead of having an error squiggle.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticTag.Deprecated","title":"Deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Deprecated = 2\n</code></pre> <p>Deprecated or obsolete code.</p> <p>Clients are allowed to rendered diagnostics with this tag strike through.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.DiagnosticTag.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.DiagnosticTag\n</code></pre> <p>Convert to corresponding language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.DiagnosticTag:\n    \"\"\"Convert to corresponding language server protocol type.\"\"\"\n    return lspt.DiagnosticTag(self.value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic","title":"Diagnostic","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Represents a diagnostic, such as a compiler error or warning. Diagnostic objects are only valid in the scope of a resource.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>class Diagnostic(FrozenGeneralModel):\n    \"\"\"Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\n    are only valid in the scope of a resource.\n    \"\"\"\n\n    range: Range\n    \"\"\"The range at which the message applies\"\"\"\n\n    message: str\n    \"\"\"The diagnostic's message. It usually appears in the user interface\"\"\"\n\n    severity: Optional[DiagnosticSeverity] = Field(default=None)\n    \"\"\"The diagnostic's severity. Can be omitted. If omitted it is up to the\n    client to interpret diagnostics as error, warning, info or hint.\"\"\"\n\n    code: Optional[Union[int, str]] = Field(default=None)\n    \"\"\"The diagnostic's code, which usually appear in the user interface.\"\"\"\n\n    code_description: Optional[CodeDescription] = Field(default=None)\n    \"\"\"An optional property to describe the error code.\n    Requires the code field (above) to be present/not null.\n\n    @since 3.16.0\"\"\"\n    # Since: 3.16.0\n\n    source: Optional[str] = Field(default=None)\n    \"\"\"A human-readable string describing the source of this\n    diagnostic, e.g. 'typescript' or 'super lint'. It usually\n    appears in the user interface.\"\"\"\n\n    tags: Optional[List[DiagnosticTag]] = Field(default=None)\n    \"\"\"Additional metadata about the diagnostic.\n\n    @since 3.15.0\"\"\"\n    # Since: 3.15.0\n\n    related_information: Optional[List[DiagnosticRelatedInformation]] = Field(\n        default=None,\n    )\n    \"\"\"An array of related diagnostic information, e.g. when symbol-names within\n    a scope collide all definitions can be marked via this property.\"\"\"\n\n    data: Optional[Any] = Field(default=None)\n    \"\"\"A data entry field that is preserved between a `textDocument/publishDiagnostics`\n    notification and `textDocument/codeAction` request.\n\n    @since 3.16.0\"\"\"\n\n    def to_lspt(self) -&gt; lspt.Diagnostic:\n        \"\"\"Repack into language server protocol type.\"\"\"\n        return lspt.Diagnostic(\n            range=self.range.to_lspt(),\n            message=self.message,\n            severity=(\n                lspt.DiagnosticSeverity(self.severity.value) if self.severity else None\n            ),\n            code=self.code,\n            code_description=(\n                self.code_description.to_lspt() if self.code_description else None\n            ),\n            source=self.source,\n            tags=[t.to_lspt() for t in self.tags] if self.tags is not None else None,\n            related_information=(\n                [i.to_lspt() for i in self.related_information]\n                if self.related_information is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.range","title":"range  <code>instance-attribute</code>","text":"<pre><code>range: Range\n</code></pre> <p>The range at which the message applies</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The diagnostic's message. It usually appears in the user interface</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.severity","title":"severity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>severity: Optional[DiagnosticSeverity] = Field(default=None)\n</code></pre> <p>The diagnostic's severity. Can be omitted. If omitted it is up to the client to interpret diagnostics as error, warning, info or hint.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: Optional[Union[int, str]] = Field(default=None)\n</code></pre> <p>The diagnostic's code, which usually appear in the user interface.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.code_description","title":"code_description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code_description: Optional[CodeDescription] = Field(\n    default=None\n)\n</code></pre> <p>An optional property to describe the error code. Requires the code field (above) to be present/not null.</p> <p>@since 3.16.0</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.source","title":"source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source: Optional[str] = Field(default=None)\n</code></pre> <p>A human-readable string describing the source of this diagnostic, e.g. 'typescript' or 'super lint'. It usually appears in the user interface.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: Optional[List[DiagnosticTag]] = Field(default=None)\n</code></pre> <p>Additional metadata about the diagnostic.</p> <p>@since 3.15.0</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.related_information","title":"related_information  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>related_information: Optional[\n    List[DiagnosticRelatedInformation]\n] = Field(default=None)\n</code></pre> <p>An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property.</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Optional[Any] = Field(default=None)\n</code></pre> <p>A data entry field that is preserved between a <code>textDocument/publishDiagnostics</code> notification and <code>textDocument/codeAction</code> request.</p> <p>@since 3.16.0</p>"},{"location":"reference/pygerber/gerberx3/linter/diagnostic.html#pygerber.gerberx3.linter.diagnostic.Diagnostic.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; lspt.Diagnostic\n</code></pre> <p>Repack into language server protocol type.</p> Source code in <code>src/pygerber/gerberx3/linter/diagnostic.py</code> <pre><code>def to_lspt(self) -&gt; lspt.Diagnostic:\n    \"\"\"Repack into language server protocol type.\"\"\"\n    return lspt.Diagnostic(\n        range=self.range.to_lspt(),\n        message=self.message,\n        severity=(\n            lspt.DiagnosticSeverity(self.severity.value) if self.severity else None\n        ),\n        code=self.code,\n        code_description=(\n            self.code_description.to_lspt() if self.code_description else None\n        ),\n        source=self.source,\n        tags=[t.to_lspt() for t in self.tags] if self.tags is not None else None,\n        related_information=(\n            [i.to_lspt() for i in self.related_information]\n            if self.related_information is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/math/__init__.html#pygerber.gerberx3.math","title":"math","text":"<p>Module containing math utilities.</p>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html","title":"bounding_box","text":""},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box","title":"bounding_box","text":"<p>Utility class for calculating bounding boxes of drawing elements.</p>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox","title":"BoundingBox","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Class for calculating bounding boxes.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>class BoundingBox(FrozenGeneralModel):\n    \"\"\"Class for calculating bounding boxes.\"\"\"\n\n    NULL: ClassVar[BoundingBox]\n\n    max_x: Offset = Field(default=Offset.NULL)\n    max_y: Offset = Field(default=Offset.NULL)\n\n    min_x: Offset = Field(default=Offset.NULL)\n    min_y: Offset = Field(default=Offset.NULL)\n\n    @classmethod\n    def from_diameter(cls, diameter: Offset) -&gt; BoundingBox:\n        \"\"\"Create a bounding box from a given diameter.\"\"\"\n        half_diameter = diameter / 2\n        return cls(\n            max_x=half_diameter,\n            max_y=half_diameter,\n            min_x=-half_diameter,\n            min_y=-half_diameter,\n        )\n\n    @classmethod\n    def from_rectangle(cls, x_size: Offset, y_size: Offset) -&gt; BoundingBox:\n        \"\"\"Create a bounding box from a given diameter.\"\"\"\n        half_x = x_size / 2\n        half_y = y_size / 2\n        return cls(\n            max_x=half_x,\n            max_y=half_y,\n            min_x=-half_x,\n            min_y=-half_y,\n        )\n\n    @property\n    def width(self) -&gt; Offset:\n        \"\"\"Return width of the bounding box.\"\"\"\n        return self.max_x - self.min_x\n\n    @property\n    def height(self) -&gt; Offset:\n        \"\"\"Return height of the bounding box.\"\"\"\n        return self.max_y - self.min_y\n\n    def get_size(self) -&gt; Vector2D:\n        \"\"\"Get bounding box size.\"\"\"\n        return Vector2D(x=self.width, y=self.height)\n\n    @property\n    def center(self) -&gt; Vector2D:\n        \"\"\"Return current center of the bounding box.\"\"\"\n        center_x = (self.max_x + self.min_x) / Offset(value=Decimal(2))\n        center_y = (self.max_y + self.min_y) / Offset(value=Decimal(2))\n        return Vector2D(x=center_x, y=center_y)\n\n    def get_min_vector(self) -&gt; Vector2D:\n        \"\"\"Return Vector2D of min_x and min_y.\"\"\"\n        return Vector2D(x=self.min_x, y=self.min_y)\n\n    def get_max_vector(self) -&gt; Vector2D:\n        \"\"\"Return Vector2D of min_x and min_y.\"\"\"\n        return Vector2D(x=self.max_x, y=self.max_y)\n\n    def as_pixel_box(\n        self,\n        dpi: int,\n        *,\n        dx_max: int = 0,\n        dy_max: int = 0,\n        dx_min: int = 0,\n        dy_min: int = 0,\n    ) -&gt; PixelBox:\n        \"\"\"Return box as tuple of ints with order.\n\n        [x0, y0, x1, y1], where x1 &gt;= x0 and y1 &gt;= y0\n        \"\"\"\n        return PixelBox(\n            (\n                self.min_x.as_pixels(dpi) + dx_min,\n                self.min_y.as_pixels(dpi) + dy_min,\n                self.max_x.as_pixels(dpi) + dx_max,\n                self.max_y.as_pixels(dpi) + dy_max,\n            ),\n        )\n\n    def _operator(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; BoundingBox:\n        if isinstance(other, Vector2D):\n            return BoundingBox(\n                max_x=op(self.max_x, other.x),\n                max_y=op(self.max_y, other.y),\n                min_x=op(self.min_x, other.x),\n                min_y=op(self.min_y, other.y),\n            )\n        if isinstance(other, (Offset, Decimal, int, float)):\n            return BoundingBox(\n                max_x=op(self.max_x, other),\n                max_y=op(self.max_y, other),\n                min_x=op(self.min_x, -other),\n                min_y=op(self.min_y, -other),\n            )\n        return NotImplemented\n\n    def __add__(self, other: object) -&gt; BoundingBox:\n        if isinstance(other, BoundingBox):\n            return BoundingBox(\n                max_x=max(self.max_x, other.max_x),\n                max_y=max(self.max_y, other.max_y),\n                min_x=min(self.min_x, other.min_x),\n                min_y=min(self.min_y, other.min_y),\n            )\n        return self._operator(other, operator.add)\n\n    def __sub__(self, other: object) -&gt; BoundingBox:\n        return self._operator(other, operator.sub)\n\n    def __mul__(self, other: object) -&gt; BoundingBox:\n        return self._operator(other, operator.mul)\n\n    def __truediv__(self, other: object) -&gt; BoundingBox:\n        return self._operator(other, operator.truediv)\n\n    def __str__(self) -&gt; str:\n        return (\n            f\"{self.__class__.__qualname__}(max_x={self.max_x}, max_y={self.max_y}, \"\n            f\"min_x={self.min_x}, min_y={self.min_y})\"\n        )\n\n    def include_point(self, point: Vector2D) -&gt; BoundingBox:\n        \"\"\"Include point in bounding box by extending bounding box overt the point.\"\"\"\n        # Check for the x-coordinate\n        new_max_x = max(self.max_x, point.x)\n        new_min_x = min(self.min_x, point.x)\n\n        # Check for the y-coordinate\n        new_max_y = max(self.max_y, point.y)\n        new_min_y = min(self.min_y, point.y)\n\n        return BoundingBox(\n            max_x=new_max_x,\n            max_y=new_max_y,\n            min_x=new_min_x,\n            min_y=new_min_y,\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; BoundingBox:\n        \"\"\"Return bounding box rotated around (0, 0).\"\"\"\n        v_x_max = Vector2D(x=self.max_x, y=Offset.new(0)).get_rotated(-angle)\n        v_y_max = Vector2D(x=Offset.new(0), y=self.max_y).get_rotated(-angle)\n\n        v_new_max_0 = v_x_max + v_y_max\n        v_new_max_1 = v_x_max - v_y_max\n\n        v_x_min = Vector2D(x=self.min_x, y=Offset.new(0)).get_rotated(-angle)\n        v_y_min = Vector2D(x=Offset.new(0), y=self.min_y).get_rotated(-angle)\n\n        v_new_min_0 = v_x_min + v_y_min\n        v_new_min_1 = v_x_min - v_y_min\n\n        return BoundingBox(\n            max_x=max(v_new_max_0.x, v_new_max_1.x, v_new_min_0.x, v_new_min_1.x),\n            max_y=max(v_new_max_0.y, v_new_max_1.y, v_new_min_0.y, v_new_min_1.y),\n            min_x=min(v_new_max_0.x, v_new_max_1.x, v_new_min_0.x, v_new_min_1.x),\n            min_y=min(v_new_max_0.y, v_new_max_1.y, v_new_min_0.y, v_new_min_1.y),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.width","title":"width  <code>property</code>","text":"<pre><code>width: Offset\n</code></pre> <p>Return width of the bounding box.</p>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.height","title":"height  <code>property</code>","text":"<pre><code>height: Offset\n</code></pre> <p>Return height of the bounding box.</p>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.center","title":"center  <code>property</code>","text":"<pre><code>center: Vector2D\n</code></pre> <p>Return current center of the bounding box.</p>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.from_diameter","title":"from_diameter  <code>classmethod</code>","text":"<pre><code>from_diameter(diameter: Offset) -&gt; BoundingBox\n</code></pre> <p>Create a bounding box from a given diameter.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>@classmethod\ndef from_diameter(cls, diameter: Offset) -&gt; BoundingBox:\n    \"\"\"Create a bounding box from a given diameter.\"\"\"\n    half_diameter = diameter / 2\n    return cls(\n        max_x=half_diameter,\n        max_y=half_diameter,\n        min_x=-half_diameter,\n        min_y=-half_diameter,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.from_rectangle","title":"from_rectangle  <code>classmethod</code>","text":"<pre><code>from_rectangle(\n    x_size: Offset, y_size: Offset\n) -&gt; BoundingBox\n</code></pre> <p>Create a bounding box from a given diameter.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>@classmethod\ndef from_rectangle(cls, x_size: Offset, y_size: Offset) -&gt; BoundingBox:\n    \"\"\"Create a bounding box from a given diameter.\"\"\"\n    half_x = x_size / 2\n    half_y = y_size / 2\n    return cls(\n        max_x=half_x,\n        max_y=half_y,\n        min_x=-half_x,\n        min_y=-half_y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.get_size","title":"get_size","text":"<pre><code>get_size() -&gt; Vector2D\n</code></pre> <p>Get bounding box size.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def get_size(self) -&gt; Vector2D:\n    \"\"\"Get bounding box size.\"\"\"\n    return Vector2D(x=self.width, y=self.height)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.get_min_vector","title":"get_min_vector","text":"<pre><code>get_min_vector() -&gt; Vector2D\n</code></pre> <p>Return Vector2D of min_x and min_y.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def get_min_vector(self) -&gt; Vector2D:\n    \"\"\"Return Vector2D of min_x and min_y.\"\"\"\n    return Vector2D(x=self.min_x, y=self.min_y)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.get_max_vector","title":"get_max_vector","text":"<pre><code>get_max_vector() -&gt; Vector2D\n</code></pre> <p>Return Vector2D of min_x and min_y.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def get_max_vector(self) -&gt; Vector2D:\n    \"\"\"Return Vector2D of min_x and min_y.\"\"\"\n    return Vector2D(x=self.max_x, y=self.max_y)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.as_pixel_box","title":"as_pixel_box","text":"<pre><code>as_pixel_box(\n    dpi: int,\n    *,\n    dx_max: int = 0,\n    dy_max: int = 0,\n    dx_min: int = 0,\n    dy_min: int = 0\n) -&gt; PixelBox\n</code></pre> <p>Return box as tuple of ints with order.</p> <p>[x0, y0, x1, y1], where x1 &gt;= x0 and y1 &gt;= y0</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def as_pixel_box(\n    self,\n    dpi: int,\n    *,\n    dx_max: int = 0,\n    dy_max: int = 0,\n    dx_min: int = 0,\n    dy_min: int = 0,\n) -&gt; PixelBox:\n    \"\"\"Return box as tuple of ints with order.\n\n    [x0, y0, x1, y1], where x1 &gt;= x0 and y1 &gt;= y0\n    \"\"\"\n    return PixelBox(\n        (\n            self.min_x.as_pixels(dpi) + dx_min,\n            self.min_y.as_pixels(dpi) + dy_min,\n            self.max_x.as_pixels(dpi) + dx_max,\n            self.max_y.as_pixels(dpi) + dy_max,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.include_point","title":"include_point","text":"<pre><code>include_point(point: Vector2D) -&gt; BoundingBox\n</code></pre> <p>Include point in bounding box by extending bounding box overt the point.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def include_point(self, point: Vector2D) -&gt; BoundingBox:\n    \"\"\"Include point in bounding box by extending bounding box overt the point.\"\"\"\n    # Check for the x-coordinate\n    new_max_x = max(self.max_x, point.x)\n    new_min_x = min(self.min_x, point.x)\n\n    # Check for the y-coordinate\n    new_max_y = max(self.max_y, point.y)\n    new_min_y = min(self.min_y, point.y)\n\n    return BoundingBox(\n        max_x=new_max_x,\n        max_y=new_max_y,\n        min_x=new_min_x,\n        min_y=new_min_y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.BoundingBox.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; BoundingBox\n</code></pre> <p>Return bounding box rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; BoundingBox:\n    \"\"\"Return bounding box rotated around (0, 0).\"\"\"\n    v_x_max = Vector2D(x=self.max_x, y=Offset.new(0)).get_rotated(-angle)\n    v_y_max = Vector2D(x=Offset.new(0), y=self.max_y).get_rotated(-angle)\n\n    v_new_max_0 = v_x_max + v_y_max\n    v_new_max_1 = v_x_max - v_y_max\n\n    v_x_min = Vector2D(x=self.min_x, y=Offset.new(0)).get_rotated(-angle)\n    v_y_min = Vector2D(x=Offset.new(0), y=self.min_y).get_rotated(-angle)\n\n    v_new_min_0 = v_x_min + v_y_min\n    v_new_min_1 = v_x_min - v_y_min\n\n    return BoundingBox(\n        max_x=max(v_new_max_0.x, v_new_max_1.x, v_new_min_0.x, v_new_min_1.x),\n        max_y=max(v_new_max_0.y, v_new_max_1.y, v_new_min_0.y, v_new_min_1.y),\n        min_x=min(v_new_max_0.x, v_new_max_1.x, v_new_min_0.x, v_new_min_1.x),\n        min_y=min(v_new_max_0.y, v_new_max_1.y, v_new_min_0.y, v_new_min_1.y),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/bounding_box.html#pygerber.gerberx3.math.bounding_box.PixelBox","title":"PixelBox","text":"<p>             Bases: <code>Tuple[int, int, int, int]</code></p> <p>Custom class for representing pixel boxes.</p> Source code in <code>src/pygerber/gerberx3/math/bounding_box.py</code> <pre><code>class PixelBox(Tuple[int, int, int, int]):\n    \"\"\"Custom class for representing pixel boxes.\"\"\"\n\n    __slots__ = ()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html","title":"offset","text":""},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset","title":"offset","text":"<p>Offset representation used by drawing backend.</p>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset","title":"Offset","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Class representing offset in 2D space.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>class Offset(FrozenGeneralModel):\n    \"\"\"Class representing offset in 2D space.\"\"\"\n\n    NULL: ClassVar[Offset]\n\n    value: Decimal\n\n    @classmethod\n    def new(\n        cls,\n        value: Decimal | float | str | tuple[int, Sequence[int], int],\n        unit: Unit = Unit.Millimeters,\n    ) -&gt; Self:\n        \"\"\"Initialize offset with value.\"\"\"\n        # Gerber spec recommends using millimeters as unit, so they are used here too.\n        if unit == Unit.Millimeters:\n            value = Decimal(value)\n        else:\n            value = Decimal(value) * INCH_TO_MM_MULTIPLIER\n\n        return cls(value=value)\n\n    @classmethod\n    def from_pixels(\n        cls,\n        value: Decimal | float | str | tuple[int, Sequence[int], int],\n        dpi: int,\n    ) -&gt; Self:\n        \"\"\"Initialize offset with value.\"\"\"\n        # Gerber spec recommends using millimeters as unit, so they are used here too.\n        value = (Decimal(value) / dpi) * INCH_TO_MM_MULTIPLIER\n        return cls(value=value)\n\n    def as_millimeters(self) -&gt; Decimal:\n        \"\"\"Offset in millimeters.\"\"\"\n        return self.value\n\n    def as_inches(self) -&gt; Decimal:\n        \"\"\"Offset in millimeters.\"\"\"\n        return self.value * MM_TO_INCH_MULTIPLIER\n\n    def as_unit(self, unit: Unit) -&gt; Decimal:\n        \"\"\"Offset in specified unit.\"\"\"\n        if unit == Unit.Inches:\n            return self.as_inches()\n\n        return self.as_millimeters()\n\n    def as_pixels(self, dpi: int | Decimal) -&gt; int:\n        \"\"\"Offset in pixels with respect to drawing DPI.\"\"\"\n        return int(self.as_inches() * dpi)\n\n    def sqrt(self) -&gt; Offset:\n        \"\"\"Return square root of the offset.\"\"\"\n        return Offset(value=self.value.sqrt())\n\n    def _compare(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; bool:\n        if isinstance(other, Offset):\n            return op(self.value, other.value)  # type: ignore[no-any-return]\n        if isinstance(other, (Decimal, int, float, str)):\n            return op(self.value, Decimal(other))  # type: ignore[no-any-return]\n        return NotImplemented\n\n    def __eq__(self, other: object) -&gt; bool:\n        return self._compare(other, operator.eq)\n\n    def __lt__(self, other: object) -&gt; bool:\n        return self._compare(other, operator.lt)\n\n    def __le__(self, other: object) -&gt; bool:\n        return self._compare(other, operator.le)\n\n    def __gt__(self, other: object) -&gt; bool:\n        return self._compare(other, operator.gt)\n\n    def __ge__(self, other: object) -&gt; bool:\n        return self._compare(other, operator.ge)\n\n    def _operator(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; Offset:\n        if isinstance(other, Offset):\n            return Offset(value=op(self.value, other.value))\n        if isinstance(other, (Decimal, int, float, str)):\n            return Offset(value=op(self.value, Decimal(other)))\n        return NotImplemented\n\n    def __add__(self, other: object) -&gt; Offset:\n        return self._operator(other, operator.add)\n\n    def __sub__(self, other: object) -&gt; Offset:\n        return self._operator(other, operator.sub)\n\n    def __mul__(self, other: object) -&gt; Offset:\n        return self._operator(other, operator.mul)\n\n    def __truediv__(self, other: object) -&gt; Offset:\n        return self._operator(other, operator.truediv)\n\n    def __neg__(self) -&gt; Offset:\n        return Offset(value=-self.value)\n\n    def __pow__(self, other: object) -&gt; Offset:\n        return self._operator(other, operator.pow)\n\n    def _i_operator(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; Self:\n        if isinstance(other, Offset):\n            return self.model_copy(\n                update={\n                    \"value\": op(self.value, other.value),\n                },\n            )\n        if isinstance(other, (Decimal, int, float, str)):\n            return self.model_copy(\n                update={\n                    \"value\": op(self.value, Decimal(other)),\n                },\n            )\n        return NotImplemented\n\n    def __iadd__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.add)\n\n    def __isub__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.sub)\n\n    def __imul__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.mul)\n\n    def __itruediv__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.truediv)\n\n    def __str__(self) -&gt; str:\n        return f\"Offset({float(self.value)})\"\n\n    __repr__ = __str__\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    value: (\n        Decimal\n        | float\n        | str\n        | tuple[int, Sequence[int], int]\n    ),\n    unit: Unit = Unit.Millimeters,\n) -&gt; Self\n</code></pre> <p>Initialize offset with value.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    value: Decimal | float | str | tuple[int, Sequence[int], int],\n    unit: Unit = Unit.Millimeters,\n) -&gt; Self:\n    \"\"\"Initialize offset with value.\"\"\"\n    # Gerber spec recommends using millimeters as unit, so they are used here too.\n    if unit == Unit.Millimeters:\n        value = Decimal(value)\n    else:\n        value = Decimal(value) * INCH_TO_MM_MULTIPLIER\n\n    return cls(value=value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.from_pixels","title":"from_pixels  <code>classmethod</code>","text":"<pre><code>from_pixels(\n    value: (\n        Decimal\n        | float\n        | str\n        | tuple[int, Sequence[int], int]\n    ),\n    dpi: int,\n) -&gt; Self\n</code></pre> <p>Initialize offset with value.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>@classmethod\ndef from_pixels(\n    cls,\n    value: Decimal | float | str | tuple[int, Sequence[int], int],\n    dpi: int,\n) -&gt; Self:\n    \"\"\"Initialize offset with value.\"\"\"\n    # Gerber spec recommends using millimeters as unit, so they are used here too.\n    value = (Decimal(value) / dpi) * INCH_TO_MM_MULTIPLIER\n    return cls(value=value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.as_millimeters","title":"as_millimeters","text":"<pre><code>as_millimeters() -&gt; Decimal\n</code></pre> <p>Offset in millimeters.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>def as_millimeters(self) -&gt; Decimal:\n    \"\"\"Offset in millimeters.\"\"\"\n    return self.value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.as_inches","title":"as_inches","text":"<pre><code>as_inches() -&gt; Decimal\n</code></pre> <p>Offset in millimeters.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>def as_inches(self) -&gt; Decimal:\n    \"\"\"Offset in millimeters.\"\"\"\n    return self.value * MM_TO_INCH_MULTIPLIER\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.as_unit","title":"as_unit","text":"<pre><code>as_unit(unit: Unit) -&gt; Decimal\n</code></pre> <p>Offset in specified unit.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>def as_unit(self, unit: Unit) -&gt; Decimal:\n    \"\"\"Offset in specified unit.\"\"\"\n    if unit == Unit.Inches:\n        return self.as_inches()\n\n    return self.as_millimeters()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.as_pixels","title":"as_pixels","text":"<pre><code>as_pixels(dpi: int | Decimal) -&gt; int\n</code></pre> <p>Offset in pixels with respect to drawing DPI.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>def as_pixels(self, dpi: int | Decimal) -&gt; int:\n    \"\"\"Offset in pixels with respect to drawing DPI.\"\"\"\n    return int(self.as_inches() * dpi)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/offset.html#pygerber.gerberx3.math.offset.Offset.sqrt","title":"sqrt","text":"<pre><code>sqrt() -&gt; Offset\n</code></pre> <p>Return square root of the offset.</p> Source code in <code>src/pygerber/gerberx3/math/offset.py</code> <pre><code>def sqrt(self) -&gt; Offset:\n    \"\"\"Return square root of the offset.\"\"\"\n    return Offset(value=self.value.sqrt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/rotate_point.html","title":"rotate_point","text":""},{"location":"reference/pygerber/gerberx3/math/rotate_point.html#pygerber.gerberx3.math.rotate_point","title":"rotate_point","text":"<p>Tool for rotating point around center.</p>"},{"location":"reference/pygerber/gerberx3/math/rotate_point.html#pygerber.gerberx3.math.rotate_point.rotate_point","title":"rotate_point","text":"<pre><code>rotate_point(\n    center: Vector2D,\n    angle: Decimal | float,\n    point: Vector2D,\n) -&gt; Vector2D\n</code></pre> <p>Rotate point around center by given angle.</p> Source code in <code>src/pygerber/gerberx3/math/rotate_point.py</code> <pre><code>def rotate_point(center: Vector2D, angle: Decimal | float, point: Vector2D) -&gt; Vector2D:\n    \"\"\"Rotate point around center by given angle.\"\"\"\n    s = sin(angle)\n    c = cos(angle)\n\n    # Translate point back to origin\n    x, y = point.x, point.y\n    x -= center.x\n    y -= center.y\n\n    # Rotate point\n    x_new = x * c - y * s\n    y_new = x * s + y * c\n\n    # Translate point back\n    x = x_new + center.x\n    y = y_new + center.y\n\n    return Vector2D(x=x, y=y)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html","title":"vector_2d","text":""},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d","title":"vector_2d","text":"<p>Simple of 2D vector container class.</p>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D","title":"Vector2D","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Tuple wrapper for representing size with custom accessors.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>class Vector2D(FrozenGeneralModel):\n    \"\"\"Tuple wrapper for representing size with custom accessors.\"\"\"\n\n    NULL: ClassVar[Vector2D]\n    UNIT_X: ClassVar[Vector2D]\n    UNIT_Y: ClassVar[Vector2D]\n\n    x: Offset\n    y: Offset\n\n    @classmethod\n    def new(\n        cls,\n        x: float | str | Decimal,\n        y: float | str | Decimal,\n        unit: Unit = Unit.Millimeters,\n    ) -&gt; Self:\n        \"\"\"Create new vector with default Offset constructor.\"\"\"\n        return cls(\n            x=Offset.new(Decimal(x), unit=unit),\n            y=Offset.new(Decimal(y), unit=unit),\n        )\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored vector.\"\"\"\n        return self._GET_MIRRORED_DISPATCH_TABLE[mirror](self)\n\n    def _get_mirrored_x(self) -&gt; Self:\n        return self.model_copy(\n            update={\n                \"x\": -self.x,\n            },\n        )\n\n    def _get_mirrored_y(self) -&gt; Self:\n        return self.model_copy(\n            update={\n                \"y\": -self.y,\n            },\n        )\n\n    def _get_mirrored_xy(self) -&gt; Self:\n        return self.model_copy(\n            update={\n                \"x\": -self.x,\n                \"y\": -self.y,\n            },\n        )\n\n    _GET_MIRRORED_DISPATCH_TABLE: ClassVar[dict[Mirroring, Callable[[Self], Self]]] = {\n        Mirroring.NoMirroring: lambda s: s,\n        Mirroring.X: _get_mirrored_x,\n        Mirroring.Y: _get_mirrored_y,\n        Mirroring.XY: _get_mirrored_xy,\n    }\n\n    def get_rotated(self, angle: float | Decimal) -&gt; Self:\n        \"\"\"Get copy of this vector rotated around (0, 0).\n\n        Angle is in degrees.\n        \"\"\"\n        if angle == Decimal(\"0.0\"):\n            return self\n        return self.rotate_around_origin(angle)\n\n    def get_scaled(self, scale: Decimal) -&gt; Vector2D:\n        \"\"\"Get copy of this vector scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self * scale\n\n    def as_pixels(self, dpi: int) -&gt; tuple[int, int]:\n        \"\"\"Return size as pixels using given DPI for conversion.\"\"\"\n        return (self.x.as_pixels(dpi), self.y.as_pixels(dpi))\n\n    def __eq__(self, other: object) -&gt; bool:\n        if isinstance(other, Vector2D):\n            return self.x == other.x and self.y == other.y\n        return NotImplemented\n\n    def _operator(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; Vector2D:\n        if isinstance(other, Offset):\n            return Vector2D(\n                x=op(self.x, other),\n                y=op(self.y, other),\n            )\n        if isinstance(other, Vector2D):\n            return Vector2D(\n                x=op(self.x, other.x),\n                y=op(self.y, other.y),\n            )\n\n        if isinstance(other, (Decimal, int, float, str)):\n            return Vector2D(\n                x=op(self.x, Decimal(other)),\n                y=op(self.y, Decimal(other)),\n            )\n        return NotImplemented\n\n    def __add__(self, other: object) -&gt; Vector2D:\n        return self._operator(other, operator.add)\n\n    def __sub__(self, other: object) -&gt; Vector2D:\n        return self._operator(other, operator.sub)\n\n    def __mul__(self, other: object) -&gt; Vector2D:\n        return self._operator(other, operator.mul)\n\n    def __truediv__(self, other: object) -&gt; Vector2D:\n        return self._operator(other, operator.truediv)\n\n    def __neg__(self) -&gt; Vector2D:\n        return Vector2D(x=-self.x, y=-self.y)\n\n    def _i_operator(\n        self,\n        other: object,\n        op: Callable,\n    ) -&gt; Self:\n        if isinstance(other, Vector2D):\n            return self.model_copy(\n                update={\n                    \"x\": op(self.x, other.x),\n                    \"y\": op(self.y, other.y),\n                },\n            )\n        if isinstance(other, Offset):\n            return self.model_copy(\n                update={\n                    \"x\": op(self.x, other),\n                    \"y\": op(self.y, other),\n                },\n            )\n        if isinstance(other, (Decimal, int, float, str)):\n            return self.model_copy(\n                update={\n                    \"x\": op(self.x, Decimal(other)),\n                    \"y\": op(self.y, Decimal(other)),\n                },\n            )\n        return NotImplemented\n\n    def __iadd__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.add)\n\n    def __isub__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.sub)\n\n    def __imul__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.mul)\n\n    def __itruediv__(self, other: object) -&gt; Self:\n        return self._i_operator(other, operator.truediv)\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__qualname__}(x={self.x}, y={self.y})\"\n\n    def length(self) -&gt; Offset:\n        \"\"\"Return length of vector.\"\"\"\n        return Offset(value=((self.x * self.x).value + (self.y * self.y).value).sqrt())\n\n    def angle_between_clockwise(self, other: Vector2D) -&gt; float:\n        \"\"\"Calculate angle between two vectors in degrees clockwise.\n\n        (Bugged?)\n        \"\"\"\n        self_norm = self / self.length()\n        other_norm = other / other.length()\n\n        dot = other_norm.dot(self_norm)\n        determinant = self_norm.determinant(other_norm)\n\n        theta = math.atan2(float(dot.value), float(determinant.value))\n\n        return math.degrees(theta)\n\n    def angle_between(self, other: Vector2D) -&gt; float:\n        \"\"\"Calculate clockwise angle between two vectors in degrees clockwise.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n        \"\"\"\n        return 360 - self.angle_between_cc(other)\n\n    def angle_between_cc(self, other: Vector2D) -&gt; float:\n        \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n        \"\"\"\n        v0 = self.normalize()\n        v1 = other.normalize()\n        angle_radians = math.atan2(\n            ((v0.x * v1.y) - (v1.x * v0.y)).value,  # determinant\n            ((v0.x * v1.x) + (v0.y * v1.y)).value,  # dot product\n        )\n        angle_degrees = math.degrees(angle_radians)\n        return angle_degrees + (360 * (angle_degrees &lt; 0))\n\n    def dot(self, other: Vector2D) -&gt; Offset:\n        \"\"\"Calculate dot product of two vectors.\"\"\"\n        return self.x * other.x + self.y * other.y\n\n    def determinant(self, other: Vector2D) -&gt; Offset:\n        \"\"\"Calculate determinant of matrix constructed from self and other.\"\"\"\n        return self.x * other.y - self.y * other.x\n\n    def perpendicular(self) -&gt; Vector2D:\n        \"\"\"Return perpendicular vector to self.\"\"\"\n        return Vector2D(x=self.y, y=-self.x)\n\n    def normalize(self) -&gt; Vector2D:\n        \"\"\"Return normalized (unit length) vector.\"\"\"\n        if self == Vector2D.NULL:\n            return Vector2D.UNIT_X\n\n        return self / self.length()\n\n    def as_float_tuple(self) -&gt; tuple[float, float]:\n        \"\"\"Return x, y Offset as tuple.\"\"\"\n        return (float(self.x.value), float(self.y.value))\n\n    def rotate_around_origin(self, angle_degrees: float | Decimal) -&gt; Self:\n        \"\"\"Return vector rotated x degrees around origin.\"\"\"\n        angle_radians = math.radians(angle_degrees)\n        return self.__class__(\n            x=self.x * math.cos(angle_radians) - self.y * math.sin(angle_radians),\n            y=self.x * math.sin(angle_radians) + self.y * math.cos(angle_radians),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    x: float | str | Decimal,\n    y: float | str | Decimal,\n    unit: Unit = Unit.Millimeters,\n) -&gt; Self\n</code></pre> <p>Create new vector with default Offset constructor.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    x: float | str | Decimal,\n    y: float | str | Decimal,\n    unit: Unit = Unit.Millimeters,\n) -&gt; Self:\n    \"\"\"Create new vector with default Offset constructor.\"\"\"\n    return cls(\n        x=Offset.new(Decimal(x), unit=unit),\n        y=Offset.new(Decimal(y), unit=unit),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored vector.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored vector.\"\"\"\n    return self._GET_MIRRORED_DISPATCH_TABLE[mirror](self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: float | Decimal) -&gt; Self\n</code></pre> <p>Get copy of this vector rotated around (0, 0).</p> <p>Angle is in degrees.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def get_rotated(self, angle: float | Decimal) -&gt; Self:\n    \"\"\"Get copy of this vector rotated around (0, 0).\n\n    Angle is in degrees.\n    \"\"\"\n    if angle == Decimal(\"0.0\"):\n        return self\n    return self.rotate_around_origin(angle)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Vector2D\n</code></pre> <p>Get copy of this vector scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Vector2D:\n    \"\"\"Get copy of this vector scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self * scale\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.as_pixels","title":"as_pixels","text":"<pre><code>as_pixels(dpi: int) -&gt; tuple[int, int]\n</code></pre> <p>Return size as pixels using given DPI for conversion.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def as_pixels(self, dpi: int) -&gt; tuple[int, int]:\n    \"\"\"Return size as pixels using given DPI for conversion.\"\"\"\n    return (self.x.as_pixels(dpi), self.y.as_pixels(dpi))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.length","title":"length","text":"<pre><code>length() -&gt; Offset\n</code></pre> <p>Return length of vector.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def length(self) -&gt; Offset:\n    \"\"\"Return length of vector.\"\"\"\n    return Offset(value=((self.x * self.x).value + (self.y * self.y).value).sqrt())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.angle_between_clockwise","title":"angle_between_clockwise","text":"<pre><code>angle_between_clockwise(other: Vector2D) -&gt; float\n</code></pre> <p>Calculate angle between two vectors in degrees clockwise.</p> <p>(Bugged?)</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def angle_between_clockwise(self, other: Vector2D) -&gt; float:\n    \"\"\"Calculate angle between two vectors in degrees clockwise.\n\n    (Bugged?)\n    \"\"\"\n    self_norm = self / self.length()\n    other_norm = other / other.length()\n\n    dot = other_norm.dot(self_norm)\n    determinant = self_norm.determinant(other_norm)\n\n    theta = math.atan2(float(dot.value), float(determinant.value))\n\n    return math.degrees(theta)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.angle_between","title":"angle_between","text":"<pre><code>angle_between(other: Vector2D) -&gt; float\n</code></pre> <p>Calculate clockwise angle between two vectors in degrees clockwise.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def angle_between(self, other: Vector2D) -&gt; float:\n    \"\"\"Calculate clockwise angle between two vectors in degrees clockwise.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n    \"\"\"\n    return 360 - self.angle_between_cc(other)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.angle_between_cc","title":"angle_between_cc","text":"<pre><code>angle_between_cc(other: Vector2D) -&gt; float\n</code></pre> <p>Calculate counter clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def angle_between_cc(self, other: Vector2D) -&gt; float:\n    \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n    \"\"\"\n    v0 = self.normalize()\n    v1 = other.normalize()\n    angle_radians = math.atan2(\n        ((v0.x * v1.y) - (v1.x * v0.y)).value,  # determinant\n        ((v0.x * v1.x) + (v0.y * v1.y)).value,  # dot product\n    )\n    angle_degrees = math.degrees(angle_radians)\n    return angle_degrees + (360 * (angle_degrees &lt; 0))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.dot","title":"dot","text":"<pre><code>dot(other: Vector2D) -&gt; Offset\n</code></pre> <p>Calculate dot product of two vectors.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def dot(self, other: Vector2D) -&gt; Offset:\n    \"\"\"Calculate dot product of two vectors.\"\"\"\n    return self.x * other.x + self.y * other.y\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.determinant","title":"determinant","text":"<pre><code>determinant(other: Vector2D) -&gt; Offset\n</code></pre> <p>Calculate determinant of matrix constructed from self and other.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def determinant(self, other: Vector2D) -&gt; Offset:\n    \"\"\"Calculate determinant of matrix constructed from self and other.\"\"\"\n    return self.x * other.y - self.y * other.x\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.perpendicular","title":"perpendicular","text":"<pre><code>perpendicular() -&gt; Vector2D\n</code></pre> <p>Return perpendicular vector to self.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def perpendicular(self) -&gt; Vector2D:\n    \"\"\"Return perpendicular vector to self.\"\"\"\n    return Vector2D(x=self.y, y=-self.x)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.normalize","title":"normalize","text":"<pre><code>normalize() -&gt; Vector2D\n</code></pre> <p>Return normalized (unit length) vector.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def normalize(self) -&gt; Vector2D:\n    \"\"\"Return normalized (unit length) vector.\"\"\"\n    if self == Vector2D.NULL:\n        return Vector2D.UNIT_X\n\n    return self / self.length()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.as_float_tuple","title":"as_float_tuple","text":"<pre><code>as_float_tuple() -&gt; tuple[float, float]\n</code></pre> <p>Return x, y Offset as tuple.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def as_float_tuple(self) -&gt; tuple[float, float]:\n    \"\"\"Return x, y Offset as tuple.\"\"\"\n    return (float(self.x.value), float(self.y.value))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/math/vector_2d.html#pygerber.gerberx3.math.vector_2d.Vector2D.rotate_around_origin","title":"rotate_around_origin","text":"<pre><code>rotate_around_origin(\n    angle_degrees: float | Decimal,\n) -&gt; Self\n</code></pre> <p>Return vector rotated x degrees around origin.</p> Source code in <code>src/pygerber/gerberx3/math/vector_2d.py</code> <pre><code>def rotate_around_origin(self, angle_degrees: float | Decimal) -&gt; Self:\n    \"\"\"Return vector rotated x degrees around origin.\"\"\"\n    angle_radians = math.radians(angle_degrees)\n    return self.__class__(\n        x=self.x * math.cos(angle_radians) - self.y * math.sin(angle_radians),\n        y=self.x * math.sin(angle_radians) + self.y * math.cos(angle_radians),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/optimizer/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/optimizer/__init__.html#pygerber.gerberx3.optimizer","title":"optimizer","text":"<p>Gerber code optimizer.</p>"},{"location":"reference/pygerber/gerberx3/optimizer/optimizer_pass/__init__.html","title":"optimizer_pass","text":""},{"location":"reference/pygerber/gerberx3/optimizer/optimizer_pass/__init__.html#pygerber.gerberx3.optimizer.optimizer_pass","title":"optimizer_pass","text":"<p>Namespace for optimizer passes.</p>"},{"location":"reference/pygerber/gerberx3/parser/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser/__init__.html#pygerber.gerberx3.parser","title":"parser","text":"<p><code>pygerber.gerberx3.parser</code> package contains Gerber X3 parser implementations.</p>"},{"location":"reference/pygerber/gerberx3/parser/__init__.html#pygerber.gerberx3.parser.ParserProtocol","title":"ParserProtocol","text":"<p>             Bases: <code>Protocol</code></p> <p>Parser protocol.</p> Source code in <code>src/pygerber/gerberx3/parser/__init__.py</code> <pre><code>class ParserProtocol(Protocol):\n    \"\"\"Parser protocol.\"\"\"\n\n    def parse(self, code: str, *, strict: bool = True) -&gt; Any:\n        \"\"\"Parse the input.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/__init__.html#pygerber.gerberx3.parser.ParserProtocol.parse","title":"parse","text":"<pre><code>parse(code: str, *, strict: bool = True) -&gt; Any\n</code></pre> <p>Parse the input.</p> Source code in <code>src/pygerber/gerberx3/parser/__init__.py</code> <pre><code>def parse(self, code: str, *, strict: bool = True) -&gt; Any:\n    \"\"\"Parse the input.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/__init__.html#pygerber.gerberx3.parser.parse","title":"parse","text":"<pre><code>parse(\n    code: str,\n    *,\n    strict: bool = True,\n    parser: Literal[\"pyparsing\"] = \"pyparsing\",\n    **options: Any\n) -&gt; File\n</code></pre> <p>Parse GerberX3 file source code and construct AST from it.</p> Source code in <code>src/pygerber/gerberx3/parser/__init__.py</code> <pre><code>def parse(\n    code: str,\n    *,\n    strict: bool = True,\n    parser: Literal[\"pyparsing\"] = \"pyparsing\",\n    **options: Any,\n) -&gt; File:\n    \"\"\"Parse GerberX3 file source code and construct AST from it.\"\"\"\n    if parser == \"pyparsing\":\n        from pygerber.gerberx3.parser.pyparsing.parser import Parser\n\n        return Parser(**options).parse(code, strict=strict)\n\n    msg = f\"Parser '{parser}' is not supported.\"  # type: ignore[unreachable]\n    raise NotImplementedError(msg)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/native/__init__.html","title":"native","text":""},{"location":"reference/pygerber/gerberx3/parser/native/__init__.html#pygerber.gerberx3.parser.native","title":"native","text":"<p><code>pygerber.gerberx3.parser.native</code> package will contain C++/Rust implementation of Gerber X3 parser.</p>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser/pyparsing/__init__.html#pygerber.gerberx3.parser.pyparsing","title":"pyparsing","text":"<p><code>pygerber.gerberx3.parser.pyparsing</code> package contains Gerber X3 parser implementation based on pyparsing library.</p>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html","title":"grammar","text":""},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar","title":"grammar","text":"<p><code>pygerber.gerberx3.parser.pyparsing.grammar</code> module contains the Gerber X3 grammar implemented using the pyparsing library.</p>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Optimization","title":"Optimization","text":"<p>             Bases: <code>IntFlag</code></p> <p>Namespace class holding optimization level constants.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>class Optimization(IntFlag):\n    \"\"\"Namespace class holding optimization level constants.\"\"\"\n\n    DISCARD_COMMENTS = 0b0000_0010\n    DISCARD_ATTRIBUTES = 0b0000_0100\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar","title":"Grammar","text":"<p>Internal representation of the Gerber X3 grammar.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>class Grammar:\n    \"\"\"Internal representation of the Gerber X3 grammar.\"\"\"\n\n    def __init__(\n        self,\n        ast_node_class_overrides: dict[str, Type[Node]],\n        *,\n        enable_packrat: bool = False,\n        packrat_cache_size: int = 128,\n        enable_debug: bool = False,\n        optimization: int = 0,\n    ) -&gt; None:\n        self.ast_node_class_overrides = ast_node_class_overrides\n        self.enable_packrat = enable_packrat\n        self.packrat_cache_size = packrat_cache_size\n        self.enable_debug = enable_debug\n        self.optimization = optimization\n\n        self.step_repeat_forward = pp.Forward()\n        self.aperture_block_forward = pp.Forward()\n\n    def build(self) -&gt; pp.ParserElement:\n        \"\"\"Build the grammar.\"\"\"\n\n        def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; File:\n            return self.get_cls(File)(\n                source_info=SourceInfo(source=s, location=loc, length=len(s) - loc),\n                nodes=tokens.as_list(),\n            )\n\n        root = (\n            pp.OneOrMore(\n                pp.MatchFirst(\n                    [\n                        self.d_codes_standalone,\n                        self.g_codes,\n                        self.load_commands,\n                        self.aperture(),\n                        self.attribute,\n                        self.properties,\n                        self.m_codes,\n                    ]\n                )\n            )\n            .set_results_name(\"root_node\")\n            .set_parse_action(_)\n        )\n\n        if self.enable_packrat:\n            root.enable_packrat(cache_size_limit=self.packrat_cache_size)\n\n        if self.enable_debug:\n            root.set_debug()\n\n        return root\n\n    def build_resilient(self) -&gt; pp.ParserElement:\n        \"\"\"Build the grammar.\"\"\"\n\n        def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; File:\n            return self.get_cls(File)(\n                source_info=SourceInfo(source=s, location=loc, length=len(s) - loc),\n                nodes=tokens.as_list(),\n            )\n\n        root = (\n            pp.OneOrMore(\n                pp.MatchFirst(\n                    [\n                        self.d_codes_standalone,\n                        self.g_codes,\n                        self.load_commands,\n                        self.aperture(),\n                        self.attribute,\n                        self.properties,\n                        self.m_codes,\n                        self._invalid_token,\n                    ]\n                )\n            )\n            .set_results_name(\"root_node\")\n            .set_parse_action(_)\n        )\n\n        if self.enable_packrat:\n            root.enable_packrat(cache_size_limit=self.packrat_cache_size)\n\n        if self.enable_debug:\n            root.set_debug()\n\n        return root\n\n    @pp.cached_property\n    def _asterisk(self) -&gt; pp.ParserElement:\n        return pp.Literal(r\"*\").set_name(\"*\")\n\n    @pp.cached_property\n    def _extended(self) -&gt; pp.ParserElement:\n        return pp.Literal(r\"%\").set_name(\"%\")\n\n    def _command(self, inner: pp.ParserElement) -&gt; pp.ParserElement:\n        return inner + self._asterisk\n\n    def _extended_command(self, inner: pp.ParserElement) -&gt; pp.ParserElement:\n        return self._extended + inner + self._asterisk + self._extended\n\n    def get_cls(self, node_cls: Type[T]) -&gt; Type[T]:\n        \"\"\"Get the class of the node.\"\"\"\n        return self.ast_node_class_overrides.get(node_cls.__qualname__, node_cls)  # type: ignore[return-value]\n\n    @pp.cached_property\n    def string(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing strings.\"\"\"\n        return pp.CharsNotIn(\"%*\").set_results_name(\"string\")\n\n    @pp.cached_property\n    def comma(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing commas.\"\"\"\n        return pp.Literal(\",\").set_name(\",\")\n\n    @pp.cached_property\n    def name(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing names.\"\"\"\n        return pp.Regex(r\"[._a-zA-Z$][._a-zA-Z0-9]*\").set_results_name(\"name\")\n\n    @pp.cached_property\n    def user_name(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing user attribute names.\"\"\"\n        return pp.Regex(r\"[_a-zA-Z$][._a-zA-Z0-9]*\").set_results_name(\"user_name\")\n\n    @pp.cached_property\n    def field(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing user attribute names.\"\"\"\n        return pp.Regex(r\"[^%*,]*\").set_results_name(\"field\")\n\n    @pp.cached_property\n    def double(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing doubles.\"\"\"\n        return pp.Regex(r\"[+-]?(([0-9]+(\\.[0-9]+)?)|(\\.[0-9]+))\").set_results_name(\n            \"double\"\n        )\n\n    @pp.cached_property\n    def integer(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing integers.\"\"\"\n        return pp.Regex(r\"[+-]?[0-9]+\").set_results_name(\"integer\")\n\n    @pp.cached_property\n    def boolean(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing integers.\"\"\"\n        return pp.one_of((\"0\", \"1\")).set_results_name(\"boolean\")\n\n    @pp.cached_property\n    def aperture_id(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing aperture identifiers.\"\"\"\n        return pp.Regex(r\"D[0]*[1-9][0-9]+\").set_results_name(\"aperture_id\")\n\n    def make_unpack_callback(\n        self,\n        node_type: Type[Node],\n        **kwargs: Any,\n    ) -&gt; Callable[[str, int, pp.ParseResults], Node]:\n        \"\"\"Create a callback for unpacking the results of the parser.\"\"\"\n\n        def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; Node:\n            return self.get_cls(node_type)(\n                source_info=SourceInfo(\n                    source=s, location=loc, length=sum(len(t) for t in tokens.as_list())\n                ),\n                **tokens.as_dict(),\n                **kwargs,\n            )\n\n        return _\n\n    #  \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588    \u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\n    # \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588      \u2588\u2588   \u2588\u2588    \u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\n    # \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    def aperture(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing apertures.\"\"\"\n        return pp.MatchFirst(\n            [\n                self.aperture_block,\n                self.macro,\n                self.step_repeat,\n                self.add_aperture,\n            ]\n        )\n\n    @pp.cached_property\n    def aperture_block(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing aperture blocks.\"\"\"\n        self.aperture_block_forward = pp.Forward()\n\n        self.aperture_block_forward &lt;&lt;= (\n            (\n                self.ab_open.set_results_name(\"open\")\n                + pp.ZeroOrMore(\n                    pp.MatchFirst(\n                        [\n                            self.d_codes_standalone,\n                            self.g_codes,\n                            self.load_commands,\n                            self.properties,\n                            self.attribute,\n                            self.add_aperture,\n                            self.step_repeat_forward,\n                            self.aperture_block_forward,\n                            self.macro,\n                            # Technically not valid according to standard.\n                            self.m_codes,\n                        ]\n                    )\n                ).set_results_name(\"nodes\")\n                + self.ab_close.set_results_name(\"close\")\n            )\n            .set_name(\"ApertureBlock\")\n            .set_parse_action(self.make_unpack_callback(AB))\n        )\n\n        return self.aperture_block_forward\n\n    @pp.cached_property\n    def ab_open(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing AB-open.\"\"\"\n        return (\n            self._extended_command(pp.Literal(\"AB\") + self.aperture_id)\n            .set_name(\"ABopen\")\n            .set_parse_action(self.make_unpack_callback(ABopen))\n        )\n\n    @pp.cached_property\n    def ab_close(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing AB-close.\"\"\"\n        return (\n            self._extended_command(pp.Literal(\"AB\"))\n            .set_name(\"ABclose\")\n            .set_parse_action(self.make_unpack_callback(ABclose))\n        )\n\n    @pp.cached_property\n    def macro(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing macros.\"\"\"\n        return (\n            (\n                self.am_open.set_results_name(\"open\")\n                + self.primitives.set_results_name(\"primitives\")\n                + self.am_close.set_results_name(\"close\")\n            )\n            .set_name(\"MacroDefinition\")\n            .set_parse_action(self.make_unpack_callback(AM))\n        )\n\n    @pp.cached_property\n    def am_open(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing AM-open.\"\"\"\n        return (\n            (self._extended + pp.Literal(\"AM\") + self.name + self._asterisk)\n            .set_name(\"AMopen\")\n            .set_parse_action(self.make_unpack_callback(AMopen))\n        )\n\n    @pp.cached_property\n    def am_close(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing AM-close.\"\"\"\n        return (\n            self._extended.copy()\n            .set_name(\"AM_close\")\n            .set_parse_action(self.make_unpack_callback(AMclose))\n        )\n\n    @pp.cached_property\n    def step_repeat(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing step repeats.\"\"\"\n        self.step_and_repeat_block_forward = pp.Forward()\n\n        self.step_and_repeat_block_forward &lt;&lt;= (\n            (\n                self.sr_open.set_results_name(\"open\")\n                + pp.ZeroOrMore(\n                    pp.MatchFirst(\n                        [\n                            self.d_codes_standalone,\n                            self.g_codes,\n                            self.load_commands,\n                            self.properties,\n                            self.attribute,\n                            self.add_aperture,\n                            self.step_repeat_forward,\n                            self.aperture_block_forward,\n                            self.macro,\n                            # Technically not valid according to standard.\n                            self.m_codes,\n                        ]\n                    )\n                ).set_results_name(\"nodes\")\n                + self.sr_close.set_results_name(\"close\")\n            )\n            .set_name(\"StepAndRepeatBlock\")\n            .set_parse_action(self.make_unpack_callback(SR))\n        )\n\n        return self.step_and_repeat_block_forward\n\n    @pp.cached_property\n    def sr_open(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing SR-open.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"SR\")\n                + pp.Opt(pp.Literal(\"X\") + self.double.set_results_name(\"x\"))\n                + pp.Opt(pp.Literal(\"Y\") + self.double.set_results_name(\"y\"))\n                + pp.Opt(pp.Literal(\"I\") + self.double.set_results_name(\"i\"))\n                + pp.Opt(pp.Literal(\"J\") + self.double.set_results_name(\"j\"))\n            )\n            .set_name(\"SRopen\")\n            .set_parse_action(self.make_unpack_callback(SRopen))\n        )\n\n    @pp.cached_property\n    def sr_close(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing SR-close.\"\"\"\n        return (\n            self._extended_command(pp.Literal(\"SR\"))\n            .set_name(\"SRclose\")\n            .set_parse_action(self.make_unpack_callback(SRclose))\n        )\n\n    @pp.cached_property\n    def add_aperture(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing add-aperture commands.\"\"\"\n        return pp.MatchFirst(\n            [\n                self.add_aperture_circle(),\n                self.add_aperture_rectangle(\"R\", ADR),\n                self.add_aperture_rectangle(\"O\", ADO),\n                self.add_aperture_polygon(),\n                self.add_aperture_macro(),\n            ]\n        )\n\n    def add_aperture_circle(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing add-aperture-circle commands.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"AD\")\n                + self.aperture_id\n                + pp.Literal(\"C,\")\n                + self.double.set_results_name(\"diameter\")\n                + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n            )\n            .set_name(\"ADC\")\n            .set_parse_action(self.make_unpack_callback(ADC))\n        )\n\n    def add_aperture_rectangle(\n        self, symbol: Literal[\"R\", \"O\"], cls: Type[Node]\n    ) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing add-aperture-rectangle\n        commands.\n        \"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"AD\")\n                + self.aperture_id\n                + pp.Literal(f\"{symbol},\")\n                + self.double.set_results_name(\"width\")\n                + self._x\n                + self.double.set_results_name(\"height\")\n                + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n            )\n            .set_name(f\"AD{symbol}\")\n            .set_parse_action(self.make_unpack_callback(cls))\n        )\n\n    def add_aperture_polygon(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing add-aperture-polygon\n        commands.\n        \"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"AD\")\n                + self.aperture_id\n                + pp.Literal(\"P,\")\n                + self.double.set_results_name(\"outer_diameter\")\n                + self._x\n                + self.double.set_results_name(\"vertices\")\n                + pp.Opt(self._x + self.double.set_results_name(\"rotation\"))\n                + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n            )\n            .set_name(\"ADP\")\n            .set_parse_action(self.make_unpack_callback(ADP))\n        )\n\n    def add_aperture_macro(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing add-aperture-polygon\n        commands.\n        \"\"\"\n        param = self.double.set_results_name(\"params\", list_all_matches=True)\n\n        return (\n            self._extended_command(\n                pp.Literal(\"AD\")\n                + self.aperture_id\n                + self.name.set_results_name(\"name\")\n                + pp.Opt(self.comma + param + pp.ZeroOrMore(self._x + param))\n            )\n            .set_name(\"ADmacro\")\n            .set_parse_action(self.make_unpack_callback(ADmacro))\n        )\n\n    @pp.cached_property\n    def _x(self) -&gt; pp.ParserElement:\n        return pp.Literal(\"X\").set_name(\"X\")\n\n    #  \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588       \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588    \u2588\u2588\n    # \u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588       \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588    \u2588\u2588    \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588       \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588    \u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588       \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def attribute(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing attributes.\"\"\"\n        return pp.MatchFirst(\n            [\n                self.ta(),\n                self.td(),\n                self.tf(),\n                self.to(),\n            ]\n        )\n\n    def ta(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing TA attributes.\"\"\"\n        return pp.MatchFirst(\n            [\n                self._ta_user_name,\n                self._ta_aper_function,\n                self._ta_drill_tolerance,\n                self._ta_flash_text,\n            ]\n        )\n\n    @pp.cached_property\n    def _ta_user_name(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._ta\n                + self.user_name\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TA&lt;UserName&gt;\")\n            .set_parse_action(self.make_unpack_callback(TA_UserName))\n        )\n\n    @pp.cached_property\n    def _ta_aper_function(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._ta\n                + pp.Literal(\".AperFunction\")\n                + pp.Optional(\n                    self.comma\n                    + pp.one_of([v.value for v in AperFunction]).set_results_name(\n                        \"function\"\n                    )\n                )\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TA.AperFunction\")\n            .set_parse_action(self.make_unpack_callback(TA_AperFunction))\n        )\n\n    @pp.cached_property\n    def _ta_drill_tolerance(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._ta\n                + pp.Literal(\".DrillTolerance\")\n                + pp.Optional(\n                    self.comma\n                    + self.double.set_results_name(\"plus_tolerance\")\n                    + pp.Optional(\n                        self.comma + self.double.set_results_name(\"minus_tolerance\")\n                    )\n                )\n            )\n            .set_name(\"TA.DrillTolerance\")\n            .set_parse_action(self.make_unpack_callback(TA_DrillTolerance))\n        )\n\n    @pp.cached_property\n    def _ta_flash_text(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._ta\n                + pp.Literal(\".FlashText\")\n                + self.comma\n                + self.field.set_results_name(\"string\")\n                + self.comma\n                + pp.one_of(list(\"BC\")).set_results_name(\"mode\")\n                + self.comma\n                + pp.Opt(pp.one_of(list(\"RM\")).set_results_name(\"mirroring\"))\n                + self.comma\n                + pp.Opt(self.field).set_results_name(\"font\")\n                + self.comma\n                + pp.Opt(self.field).set_results_name(\"size\")\n                + pp.ZeroOrMore(\n                    self.comma\n                    + pp.Opt(self.field).set_results_name(\n                        \"comments\", list_all_matches=True\n                    )\n                )\n            )\n            .set_name(\"TA.FlashText\")\n            .set_parse_action(self.make_unpack_callback(TA_FlashText))\n        )\n\n    @pp.cached_property\n    def _ta(self) -&gt; pp.ParserElement:\n        return pp.Literal(\"TA\")\n\n    def td(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing TD attributes.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"TD\") + pp.Opt(self.string.set_results_name(\"name\"))\n            )\n            .set_name(\"TD\")\n            .set_parse_action(self.make_unpack_callback(TD))\n        )\n\n    def tf(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing TF attributes.\"\"\"\n        return pp.MatchFirst(\n            [\n                self._tf_user_name,\n                self._tf_part,\n                self._tf_file_function,\n                self._tf_file_polarity,\n                self._tf_same_coordinates,\n                self._tf_creation_date,\n                self._tf_generation_software,\n                self._tf_project_id,\n                self._tf_md5,\n            ]\n        )\n\n    @pp.cached_property\n    def _tf_user_name(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + self.user_name\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TF&lt;UserName&gt;\")\n            .set_parse_action(self.make_unpack_callback(TF_UserName))\n        )\n\n    @pp.cached_property\n    def _tf_part(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".Part\")\n                + self.comma\n                + self.field.set_results_name(\"part\")\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TF.Part\")\n            .set_parse_action(self.make_unpack_callback(TF_Part))\n        )\n\n    @pp.cached_property\n    def _tf_file_function(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".FileFunction\")\n                + self.comma\n                + self.field.set_results_name(\"file_function\")\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TF.FileFunction\")\n            .set_parse_action(self.make_unpack_callback(TF_FileFunction))\n        )\n\n    @pp.cached_property\n    def _tf_file_polarity(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".FilePolarity\")\n                + self.comma\n                + self.field.set_results_name(\"polarity\")\n            )\n            .set_name(\"TF.FilePolarity\")\n            .set_parse_action(self.make_unpack_callback(TF_FilePolarity))\n        )\n\n    @pp.cached_property\n    def _tf_same_coordinates(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".SameCoordinates\")\n                + pp.Opt(self.comma + self.field.set_results_name(\"identifier\"))\n            )\n            .set_name(\"TF.SameCoordinates\")\n            .set_parse_action(self.make_unpack_callback(TF_SameCoordinates))\n        )\n\n    @pp.cached_property\n    def _tf_creation_date(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".CreationDate\")\n                + self.comma\n                + self.field.set_results_name(\"creation_date\")\n            )\n            .set_name(\"TF.CreationDate\")\n            .set_parse_action(self.make_unpack_callback(TF_CreationDate))\n        )\n\n    @pp.cached_property\n    def _tf_generation_software(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".GenerationSoftware\")\n                + pp.Opt(\n                    self.comma\n                    + self.field.set_results_name(\"vendor\")\n                    + pp.Opt(\n                        self.comma\n                        + self.field.set_results_name(\"application\")\n                        + pp.Opt(self.comma + self.field.set_results_name(\"version\"))\n                    )\n                )\n            )\n            .set_name(\"TF.GenerationSoftware\")\n            .set_parse_action(self.make_unpack_callback(TF_GenerationSoftware))\n        )\n\n    @pp.cached_property\n    def _tf_project_id(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".ProjectId\")\n                + pp.Opt(\n                    self.comma\n                    + self.field.set_results_name(\"name\")\n                    + pp.Opt(\n                        self.comma\n                        + self.field.set_results_name(\"guid\")\n                        + pp.Opt(self.comma + self.field.set_results_name(\"revision\"))\n                    )\n                )\n            )\n            .set_name(\"TF.ProjectId\")\n            .set_parse_action(self.make_unpack_callback(TF_ProjectId))\n        )\n\n    @pp.cached_property\n    def _tf_md5(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._tf\n                + pp.CaselessLiteral(\".MD5\")\n                + self.comma\n                + self.field.set_results_name(\"md5\")\n            )\n            .set_name(\"TF.MD5\")\n            .set_parse_action(self.make_unpack_callback(TF_MD5))\n        )\n\n    @pp.cached_property\n    def _tf(self) -&gt; pp.ParserElement:\n        return pp.Literal(\"TF\")\n\n    def to(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing TO attributes.\"\"\"\n        return pp.MatchFirst(\n            [\n                self._to_user_name,\n                self._to_n,\n                self._to_p,\n                self._to_c,\n                self._to_crot,\n                self._to_cmfr,\n                self._to_cmpn,\n                self._to_cval,\n                self._to_cmnt,\n                self._to_cftp,\n                self._to_cpgn,\n                self._to_cpgd,\n                self._to_chgt,\n                self._to_clbn,\n                self._to_clbd,\n                self._to_csup,\n            ]\n        )\n\n    @pp.cached_property\n    def _to_user_name(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + self.user_name\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"fields\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TO&lt;UserName&gt;\")\n            .set_parse_action(self.make_unpack_callback(TO_UserName))\n        )\n\n    @pp.cached_property\n    def _to_n(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".N\")\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\"net_names\", list_all_matches=True)\n                )\n            )\n            .set_name(\"TO.N\")\n            .set_parse_action(self.make_unpack_callback(TO_N))\n        )\n\n    @pp.cached_property\n    def _to_p(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".P\")\n                + self.comma\n                + self.field.set_results_name(\"refdes\")\n                + self.comma\n                + self.field.set_results_name(\"number\")\n                + pp.Opt(self.comma + self.field.set_results_name(\"function\"))\n            )\n            .set_name(\"TO.P\")\n            .set_parse_action(self.make_unpack_callback(TO_P))\n        )\n\n    @pp.cached_property\n    def _to_c(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".C\")\n                + self.comma\n                + self.field.set_results_name(\"refdes\")\n            )\n            .set_name(\"TO.C\")\n            .set_parse_action(self.make_unpack_callback(TO_C))\n        )\n\n    @pp.cached_property\n    def _to_crot(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CRot\")\n                + self.comma\n                + self.field.set_results_name(\"angle\")\n            )\n            .set_name(\"TO.CRot\")\n            .set_parse_action(self.make_unpack_callback(TO_CRot))\n        )\n\n    @pp.cached_property\n    def _to_cmfr(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CMfr\")\n                + self.comma\n                + self.field.set_results_name(\"manufacturer\")\n            )\n            .set_name(\"TO.CMfr\")\n            .set_parse_action(self.make_unpack_callback(TO_CMfr))\n        )\n\n    @pp.cached_property\n    def _to_cmpn(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CMPN\")\n                + self.comma\n                + self.field.set_results_name(\"part_number\")\n            )\n            .set_name(\"TO.CMPN\")\n            .set_parse_action(self.make_unpack_callback(TO_CMNP))\n        )\n\n    @pp.cached_property\n    def _to_cval(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CVal\")\n                + self.comma\n                + self.field.set_results_name(\"value\")\n            )\n            .set_name(\"TO.CVal\")\n            .set_parse_action(self.make_unpack_callback(TO_CVal))\n        )\n\n    @pp.cached_property\n    def _to_cmnt(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CMnt\")\n                + self.comma\n                + self.field.set_results_name(\"mount\")\n            )\n            .set_name(\"TO.CMnt\")\n            .set_parse_action(self.make_unpack_callback(TO_CMnt))\n        )\n\n    @pp.cached_property\n    def _to_cftp(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CFtp\")\n                + self.comma\n                + self.field.set_results_name(\"footprint\")\n            )\n            .set_name(\"TO.CFtp\")\n            .set_parse_action(self.make_unpack_callback(TO_CFtp))\n        )\n\n    @pp.cached_property\n    def _to_cpgn(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CPgN\")\n                + self.comma\n                + self.field.set_results_name(\"name\")\n            )\n            .set_name(\"TO.CPgN\")\n            .set_parse_action(self.make_unpack_callback(TO_CPgN))\n        )\n\n    @pp.cached_property\n    def _to_cpgd(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CPgD\")\n                + self.comma\n                + self.field.set_results_name(\"description\")\n            )\n            .set_name(\"TO.CPgD\")\n            .set_parse_action(self.make_unpack_callback(TO_CPgD))\n        )\n\n    @pp.cached_property\n    def _to_chgt(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CHgt\")\n                + self.comma\n                + self.field.set_results_name(\"height\")\n            )\n            .set_name(\"TO.CHgt\")\n            .set_parse_action(self.make_unpack_callback(TO_CHgt))\n        )\n\n    @pp.cached_property\n    def _to_clbn(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CLbn\")\n                + self.comma\n                + self.field.set_results_name(\"name\")\n            )\n            .set_name(\"TO.CLbn\")\n            .set_parse_action(self.make_unpack_callback(TO_CLbN))\n        )\n\n    @pp.cached_property\n    def _to_clbd(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CLbD\")\n                + self.comma\n                + self.field.set_results_name(\"description\")\n            )\n            .set_name(\"TO.CLbD\")\n            .set_parse_action(self.make_unpack_callback(TO_CLbD))\n        )\n\n    @pp.cached_property\n    def _to_csup(self) -&gt; pp.ParserElement:\n        return (\n            self._extended_command(\n                self._to\n                + pp.CaselessLiteral(\".CSup\")\n                + self.comma\n                + self.field.set_results_name(\"supplier\")\n                + self.comma\n                + self.field.set_results_name(\"supplier_part\")\n                + pp.ZeroOrMore(\n                    self.comma\n                    + self.field.set_results_name(\n                        \"other_suppliers\", list_all_matches=True\n                    )\n                )\n            )\n            .set_name(\"TO.CSup\")\n            .set_parse_action(self.make_unpack_callback(TO_CSup))\n        )\n\n    @pp.cached_property\n    def _to(self) -&gt; pp.ParserElement:\n        return pp.Literal(\"TO\")\n\n    # \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588           \u2588\u2588\n    # \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def d_codes_standalone(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing standalone D-codes.\"\"\"\n        return self._d_codes(is_standalone=True)\n\n    @pp.cached_property\n    def d_codes_non_standalone(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing standalone D-codes.\"\"\"\n        return self._d_codes(is_standalone=False)\n\n    def _d_codes(self, *, is_standalone: bool) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing D-codes.\n\n        `is_standalone` parameter is used to determine if the D-code is standalone, ie.\n        not prefixed by a G-code with no asterisk at the end. See `D.is_standalone` or\n        `G.is_standalone` for more information.\n        \"\"\"\n        return pp.MatchFirst(\n            [\n                self._dnn(is_standalone=is_standalone),\n                self._d01(is_standalone=is_standalone),\n                self._d02(is_standalone=is_standalone),\n                self._d03(is_standalone=is_standalone),\n            ]\n        )\n\n    def _dnn(self, *, is_standalone: bool) -&gt; pp.ParserElement:\n        return (\n            self._command(self.aperture_id.set_results_name(\"aperture_id\"))\n            .set_parse_action(\n                self.make_unpack_callback(Dnn, is_standalone=is_standalone)\n            )\n            .set_name(\"Dnn\")\n        )\n\n    def _d01(self, *, is_standalone: bool) -&gt; pp.ParserElement:\n        return (\n            self._command(\n                pp.Opt(self._coordinate_x.set_results_name(\"x\"))\n                + pp.Opt(self._coordinate_y.set_results_name(\"y\"))\n                + pp.Opt(self._coordinate_i.set_results_name(\"i\"))\n                + pp.Opt(self._coordinate_j.set_results_name(\"j\"))\n                + pp.Regex(r\"D0*1\")\n            )\n            .set_parse_action(\n                self.make_unpack_callback(D01, is_standalone=is_standalone)\n            )\n            .set_name(\"D01\")\n        )\n\n    def _d02(self, *, is_standalone: bool) -&gt; pp.ParserElement:\n        return (\n            self._command(\n                pp.Opt(self._coordinate_x.set_results_name(\"x\"))\n                + pp.Opt(self._coordinate_y.set_results_name(\"y\"))\n                + pp.Regex(r\"D0*2\")\n            )\n            .set_parse_action(\n                self.make_unpack_callback(D02, is_standalone=is_standalone)\n            )\n            .set_name(\"D02\")\n        )\n\n    def _d03(self, *, is_standalone: bool) -&gt; pp.ParserElement:\n        return (\n            self._command(\n                pp.Opt(self._coordinate_x.set_results_name(\"x\"))\n                + pp.Opt(self._coordinate_y.set_results_name(\"y\"))\n                + pp.Regex(r\"D0*3\")\n            )\n            .set_parse_action(\n                self.make_unpack_callback(D03, is_standalone=is_standalone)\n            )\n            .set_name(\"D03\")\n        )\n\n    #  \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588          \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588\n    # \u2588\u2588   \u2588\u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588    \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588           \u2588\u2588\n    #  \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def g_codes(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing G-codes.\"\"\"\n        g04_comment = self._command(\n            pp.Regex(r\"G0*4\") + pp.Opt(self.string),\n        ).set_name(\"G04\")\n\n        if self.optimization &amp; Optimization.DISCARD_COMMENTS:\n            g04_comment = pp.Suppress(g04_comment)\n        else:\n            g04_comment = g04_comment.set_parse_action(self.make_unpack_callback(G04))\n\n        def _standalone(cls: Type[Node]) -&gt; pp.ParserElement:\n            code = int(cls.__qualname__.lstrip(\"G\"))\n            return (\n                self._command(pp.Regex(f\"G0*{code}\"))\n                .set_name(cls.__qualname__)\n                .set_parse_action(self.make_unpack_callback(cls, is_standalone=True))\n            )\n\n        def _non_standalone(cls: Type[Node]) -&gt; pp.ParserElement:\n            # We have to account for legacy cases like `G70D02*`, see\n            # `G.is_standalone` docstring for more information.\n            code = int(cls.__qualname__.lstrip(\"G\"))\n            return (\n                (\n                    pp.Regex(f\"G0*{code}\")\n                    + pp.FollowedBy(pp.one_of([\"D\", \"X\", \"Y\", \"I\", \"J\"]))\n                )\n                .set_name(cls.__qualname__)\n                .set_parse_action(self.make_unpack_callback(cls, is_standalone=False))\n            ) + self.d_codes_non_standalone\n\n        return pp.MatchFirst(\n            [\n                g04_comment,\n                *(\n                    _standalone(cast(Type[Node], cls))\n                    for cls in reversed(\n                        (\n                            G01,\n                            G02,\n                            G03,\n                            G36,\n                            G37,\n                            G54,\n                            G55,\n                            G70,\n                            G71,\n                            G74,\n                            G75,\n                            G90,\n                            G91,\n                        )\n                    )\n                ),\n                *(\n                    _non_standalone(cast(Type[Node], cls))\n                    for cls in reversed(\n                        (\n                            G01,\n                            G02,\n                            G03,\n                            G36,\n                            G37,\n                            G54,\n                            G55,\n                            G70,\n                            G71,\n                            G74,\n                            G75,\n                            G90,\n                            G91,\n                        )\n                    )\n                ),\n            ]\n        )\n\n    # \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 # noqa: E501\n    # \u2588\u2588     \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      # noqa: E501\n    # \u2588\u2588     \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 # noqa: E501\n    # \u2588\u2588     \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588  \u2588\u2588  \u2588\u2588 \u2588\u2588  \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 # noqa: E501\n    # \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588      \u2588\u2588 \u2588\u2588      \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 # noqa: E501\n\n    @pp.cached_property\n    def load_commands(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing Load-commands.\"\"\"\n        return pp.MatchFirst([self.ln(), self.lp(), self.lr(), self.ls(), self.lm()])\n\n    def ln(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the LN command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"LN\") + self.string.set_results_name(\"name\")\n            )\n            .set_parse_action(self.make_unpack_callback(LN))\n            .set_name(\"LN\")\n        )\n\n    def lp(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the LP command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"LP\") + pp.one_of([\"C\", \"D\"]).set_results_name(\"polarity\")\n            )\n            .set_parse_action(self.make_unpack_callback(LP))\n            .set_name(\"LP\")\n        )\n\n    def lr(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the LR command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"LR\") + self.double.set_results_name(\"rotation\")\n            )\n            .set_parse_action(self.make_unpack_callback(LR))\n            .set_name(\"LR\")\n        )\n\n    def ls(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the LS command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"LS\") + self.double.set_results_name(\"scale\")\n            )\n            .set_parse_action(self.make_unpack_callback(LS))\n            .set_name(\"LS\")\n        )\n\n    def lm(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the LM command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"LM\")\n                + pp.one_of([\"N\", \"XY\", \"X\", \"Y\"]).set_results_name(\"mirroring\")\n            )\n            .set_parse_action(self.make_unpack_callback(LM))\n            .set_name(\"LM\")\n        )\n\n    # \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588\n    # \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588  \u2588\u2588  \u2588\u2588    \u2588\u2588     \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588           \u2588\u2588\n    # \u2588\u2588      \u2588\u2588     \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def m_codes(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing M-codes.\"\"\"\n        return pp.MatchFirst(\n            [\n                self.m(\n                    value,\n                    self.get_cls(cls),  # type: ignore[arg-type, type-abstract]\n                )\n                for (value, cls) in (\n                    (2, M02),\n                    (1, M01),\n                    (0, M00),\n                )\n            ]\n        )\n\n    def m(self, value: int, cls: Type[Node]) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing particular D-code.\"\"\"\n        return (\n            self._command(pp.Regex(r\"M0*\" + str(value)))\n            .set_name(f\"M{value}\")\n            .set_parse_action(self.make_unpack_callback(cls))\n        )\n\n    # \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588\n    # \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588\n    # \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588  \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588\n    # \u2588\u2588      \u2588\u2588 \u2588\u2588   \u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588\n\n    def _cb(self, element: pp.ParserElement, cls: Type[Node]) -&gt; pp.ParserElement:\n        return element.set_parse_action(self.make_unpack_callback(cls))\n\n    @pp.cached_property\n    def expression(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing expressions.\"\"\"\n        expr = pp.Forward()\n        factor = (\n            self.variable\n            | self.constant\n            | self._cb(pp.Literal(\"(\") + expr(\"inner\") + pp.Literal(\")\"), Parenthesis)\n        )(\"factor\")\n\n        last_expr = factor\n        # Unary - operator\n        op_expr = pp.Literal(\"-\")\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(op_expr + this_expr) + (\n            op_expr + this_expr(\"operand\")\n        ).set_parse_action(self.make_unpack_callback(Neg))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        # Unary + operator\n        op_expr = pp.Literal(\"+\")\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(op_expr + this_expr) + (\n            op_expr + this_expr(\"operand\")\n        ).set_parse_action(self.make_unpack_callback(Pos))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        # Binary / operator\n        op_expr = pp.Literal(\"/\")\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n            last_expr(\"head\")\n            + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n                1, ...\n            ]\n        ).set_parse_action(self.make_unpack_callback(Div))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        # Binary x|X operator\n        op_expr = pp.one_of([\"x\", \"X\"])\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n            last_expr(\"head\")\n            + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n                1, ...\n            ]\n        ).set_parse_action(self.make_unpack_callback(Mul))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        # Binary - operator\n        op_expr = pp.Literal(\"-\")\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n            last_expr(\"head\")\n            + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n                1, ...\n            ]\n        ).set_parse_action(self.make_unpack_callback(Sub))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        # Binary - operator\n        op_expr = pp.Literal(\"+\")\n\n        this_expr = pp.Forward()\n        match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n            last_expr(\"head\")\n            + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n                1, ...\n            ]\n        ).set_parse_action(self.make_unpack_callback(Add))\n        this_expr &lt;&lt;= match_expr | last_expr\n        last_expr = this_expr\n\n        expr &lt;&lt;= last_expr\n\n        return take_only(expr(\"expression\"), \"expression\")\n\n    @pp.cached_property\n    def constant(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing constants.\"\"\"\n        return self.double.set_results_name(\"constant\").set_parse_action(\n            self.make_unpack_callback(Constant)\n        )\n\n    @pp.cached_property\n    def variable(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing variables.\"\"\"\n        return (\n            pp.Regex(r\"\\$[0-9]+\")\n            .set_results_name(\"variable\")\n            .set_parse_action(self.make_unpack_callback(Variable))\n        )\n\n    @pp.cached_property\n    def assignment(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing assignments.\"\"\"\n        return (\n            self._command(self.variable + \"=\" + self.expression)\n            .set_results_name(\"assignment\")\n            .set_parse_action(self.make_unpack_callback(Assignment))\n        )\n\n    #  \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588\n    # \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588\n    #  \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588\n\n    @pp.cached_property\n    def _coordinate_x(self) -&gt; pp.ParserElement:\n        return (\n            (pp.CaselessLiteral(\"X\") + self.integer.set_results_name(\"value\"))\n            .set_parse_action(self.make_unpack_callback(CoordinateX))\n            .set_name(\"coordinate.x\")\n        )\n\n    @pp.cached_property\n    def _coordinate_y(self) -&gt; pp.ParserElement:\n        return (\n            (pp.CaselessLiteral(\"Y\") + self.integer.set_results_name(\"value\"))\n            .set_parse_action(self.make_unpack_callback(CoordinateY))\n            .set_name(\"coordinate.y\")\n        )\n\n    @pp.cached_property\n    def _coordinate_i(self) -&gt; pp.ParserElement:\n        return (\n            (pp.CaselessLiteral(\"I\") + self.integer.set_results_name(\"value\"))\n            .set_parse_action(self.make_unpack_callback(CoordinateI))\n            .set_name(\"coordinate.i\")\n        )\n\n    @pp.cached_property\n    def _coordinate_j(self) -&gt; pp.ParserElement:\n        return (\n            (pp.CaselessLiteral(\"J\") + self.integer.set_results_name(\"value\"))\n            .set_parse_action(self.make_unpack_callback(CoordinateJ))\n            .set_name(\"coordinate.j\")\n        )\n\n    # \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588\n    # \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588  \u2588\u2588  \u2588\u2588  \u2588\u2588           \u2588\u2588\n    # \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588 \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def primitives(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing macro primitives.\"\"\"\n        cs = self.comma\n\n        return pp.ZeroOrMore(\n            pp.MatchFirst(\n                [\n                    self.assignment,\n                    self.primitive(Code0, 0, self.string),\n                    self.primitive(\n                        Code1,\n                        1,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"diameter\")\n                        + cs\n                        + self.expression.set_results_name(\"center_x\")\n                        + cs\n                        + self.expression.set_results_name(\"center_y\")\n                        + pp.Opt(cs + self.expression.set_results_name(\"rotation\")),\n                    ),\n                    self.primitive(\n                        Code2,\n                        2,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"width\")\n                        + cs\n                        + self.expression.set_results_name(\"start_x\")\n                        + cs\n                        + self.expression.set_results_name(\"start_y\")\n                        + cs\n                        + self.expression.set_results_name(\"end_x\")\n                        + cs\n                        + self.expression.set_results_name(\"end_y\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code4,\n                        4,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"number_of_points\")\n                        + cs\n                        + self.expression.set_results_name(\"start_x\")\n                        + cs\n                        + self.expression.set_results_name(\"start_y\")\n                        + pp.OneOrMore(\n                            (\n                                cs\n                                + self.expression.set_results_name(\"x\")\n                                + cs\n                                + self.expression.set_results_name(\"y\")\n                            )\n                            .set_results_name(\"points\", list_all_matches=True)\n                            .set_parse_action(self.make_unpack_callback(Point)),\n                        )\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code5,\n                        5,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"number_of_vertices\")\n                        + cs\n                        + self.expression.set_results_name(\"center_x\")\n                        + cs\n                        + self.expression.set_results_name(\"center_y\")\n                        + cs\n                        + self.expression.set_results_name(\"diameter\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code6,\n                        6,\n                        cs\n                        + self.expression.set_results_name(\"center_x\")\n                        + cs\n                        + self.expression.set_results_name(\"center_y\")\n                        + cs\n                        + self.expression.set_results_name(\"outer_diameter\")\n                        + cs\n                        + self.expression.set_results_name(\"ring_thickness\")\n                        + cs\n                        + self.expression.set_results_name(\"gap_between_rings\")\n                        + cs\n                        + self.expression.set_results_name(\"max_ring_count\")\n                        + cs\n                        + self.expression.set_results_name(\"crosshair_thickness\")\n                        + cs\n                        + self.expression.set_results_name(\"crosshair_length\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code7,\n                        7,\n                        cs\n                        + self.expression.set_results_name(\"center_x\")\n                        + cs\n                        + self.expression.set_results_name(\"center_y\")\n                        + cs\n                        + self.expression.set_results_name(\"outer_diameter\")\n                        + cs\n                        + self.expression.set_results_name(\"inner_diameter\")\n                        + cs\n                        + self.expression.set_results_name(\"gap_thickness\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code20,\n                        20,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"width\")\n                        + cs\n                        + self.expression.set_results_name(\"start_x\")\n                        + cs\n                        + self.expression.set_results_name(\"start_y\")\n                        + cs\n                        + self.expression.set_results_name(\"end_x\")\n                        + cs\n                        + self.expression.set_results_name(\"end_y\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code21,\n                        21,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"width\")\n                        + cs\n                        + self.expression.set_results_name(\"height\")\n                        + cs\n                        + self.expression.set_results_name(\"center_x\")\n                        + cs\n                        + self.expression.set_results_name(\"center_y\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                    self.primitive(\n                        Code22,\n                        22,\n                        cs\n                        + self.expression.set_results_name(\"exposure\")\n                        + cs\n                        + self.expression.set_results_name(\"width\")\n                        + cs\n                        + self.expression.set_results_name(\"height\")\n                        + cs\n                        + self.expression.set_results_name(\"x_lower_left\")\n                        + cs\n                        + self.expression.set_results_name(\"y_lower_left\")\n                        + cs\n                        + self.expression.set_results_name(\"rotation\"),\n                    ),\n                ]\n            )\n        )\n\n    def primitive(\n        self, cls: Type[Node], code: int, fields: pp.ParserElement\n    ) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing a primitive.\"\"\"\n        return (\n            self._command(pp.Literal(str(code)) + fields)\n            .set_name(f\"primitive-{code}\")\n            .set_parse_action(self.make_unpack_callback(cls))\n        )\n\n    # \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588\n    # \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    # \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588      \u2588\u2588   \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588           \u2588\u2588\n    # \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    @pp.cached_property\n    def properties(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing Properties-commands.\"\"\"\n        return pp.MatchFirst(\n            [\n                self.fs(),\n                self.mo(),\n                self.ip(),\n                self.ir(),\n                self.of(),\n                self.as_(),\n                self.mi(),\n                self.in_(),\n                self.sf(),\n            ]\n        )\n\n    def fs(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the FS command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"FS\")\n                + pp.one_of((\"L\", \"T\")).set_results_name(\"zeros\")\n                + pp.one_of((\"I\", \"A\")).set_results_name(\"coordinate_mode\")\n                + pp.CaselessLiteral(\"X\")\n                + pp.Regex(r\"[0-9]\").set_results_name(\"x_integral\")\n                + pp.Regex(r\"[0-9]\").set_results_name(\"x_decimal\")\n                + pp.CaselessLiteral(\"Y\")\n                + pp.Regex(r\"[0-9]\").set_results_name(\"y_integral\")\n                + pp.Regex(r\"[0-9]\").set_results_name(\"y_decimal\")\n            )\n            .set_parse_action(self.make_unpack_callback(FS))\n            .set_name(\"FS\")\n        )\n\n    def ip(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the IP command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"IP\")\n                + pp.one_of((\"POS\", \"NEG\")).set_results_name(\"polarity\")\n            )\n            .set_parse_action(self.make_unpack_callback(IP))\n            .set_name(\"IP\")\n        )\n\n    def ir(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the IR command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"IR\") + self.double.set_results_name(\"rotation_degrees\")\n            )\n            .set_parse_action(self.make_unpack_callback(IR))\n            .set_name(\"IR\")\n        )\n\n    def mo(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the MO command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"MO\") + pp.one_of([\"IN\", \"MM\"]).set_results_name(\"mode\")\n            )\n            .set_parse_action(self.make_unpack_callback(MO))\n            .set_name(\"MO\")\n        )\n\n    def of(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the MO command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"OF\")\n                + pp.Opt(pp.Literal(\"A\") + self.double.set_results_name(\"a_offset\"))\n                + pp.Opt(pp.Literal(\"B\") + self.double.set_results_name(\"b_offset\"))\n            )\n            .set_parse_action(self.make_unpack_callback(OF))\n            .set_name(\"OF\")\n        )\n\n    def as_(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser element capable of parsing AS-commands.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"AS\")\n                + pp.one_of([\"AXBY\", \"AYBX\"]).set_results_name(\"correspondence\")\n            )\n            .set_parse_action(self.make_unpack_callback(AS))\n            .set_name(\"OF\")\n        )\n\n    def mi(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the MI command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"MI\")\n                + pp.Opt(pp.Literal(\"A\") + self.boolean.set_results_name(\"a_mirroring\"))\n                + pp.Opt(pp.Literal(\"B\") + self.boolean.set_results_name(\"b_mirroring\"))\n            )\n            .set_parse_action(self.make_unpack_callback(MI))\n            .set_name(\"MI\")\n        )\n\n    def in_(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the IN command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"IN\") + self.string.set_results_name(\"name\")\n            )\n            .set_parse_action(self.make_unpack_callback(IN))\n            .set_name(\"IN\")\n        )\n\n    def sf(self) -&gt; pp.ParserElement:\n        \"\"\"Create a parser for the SF command.\"\"\"\n        return (\n            self._extended_command(\n                pp.Literal(\"SF\")\n                + pp.Opt(pp.Literal(\"A\") + self.double.set_results_name(\"a_scale\"))\n                + pp.Opt(pp.Literal(\"B\") + self.double.set_results_name(\"b_scale\"))\n            )\n            .set_parse_action(self.make_unpack_callback(SF))\n            .set_name(\"SF\")\n        )\n\n    @pp.cached_property\n    def _invalid_token(self) -&gt; pp.ParserElement:\n        syntax = pp.Combine(pp.Regex(r\".+\"))\n        return (\n            syntax.set_results_name(\"string\")\n            .set_name(\"Invalid\")\n            .set_parse_action(self.make_unpack_callback(Invalid))\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.build","title":"build","text":"<pre><code>build() -&gt; pp.ParserElement\n</code></pre> <p>Build the grammar.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def build(self) -&gt; pp.ParserElement:\n    \"\"\"Build the grammar.\"\"\"\n\n    def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; File:\n        return self.get_cls(File)(\n            source_info=SourceInfo(source=s, location=loc, length=len(s) - loc),\n            nodes=tokens.as_list(),\n        )\n\n    root = (\n        pp.OneOrMore(\n            pp.MatchFirst(\n                [\n                    self.d_codes_standalone,\n                    self.g_codes,\n                    self.load_commands,\n                    self.aperture(),\n                    self.attribute,\n                    self.properties,\n                    self.m_codes,\n                ]\n            )\n        )\n        .set_results_name(\"root_node\")\n        .set_parse_action(_)\n    )\n\n    if self.enable_packrat:\n        root.enable_packrat(cache_size_limit=self.packrat_cache_size)\n\n    if self.enable_debug:\n        root.set_debug()\n\n    return root\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.build_resilient","title":"build_resilient","text":"<pre><code>build_resilient() -&gt; pp.ParserElement\n</code></pre> <p>Build the grammar.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def build_resilient(self) -&gt; pp.ParserElement:\n    \"\"\"Build the grammar.\"\"\"\n\n    def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; File:\n        return self.get_cls(File)(\n            source_info=SourceInfo(source=s, location=loc, length=len(s) - loc),\n            nodes=tokens.as_list(),\n        )\n\n    root = (\n        pp.OneOrMore(\n            pp.MatchFirst(\n                [\n                    self.d_codes_standalone,\n                    self.g_codes,\n                    self.load_commands,\n                    self.aperture(),\n                    self.attribute,\n                    self.properties,\n                    self.m_codes,\n                    self._invalid_token,\n                ]\n            )\n        )\n        .set_results_name(\"root_node\")\n        .set_parse_action(_)\n    )\n\n    if self.enable_packrat:\n        root.enable_packrat(cache_size_limit=self.packrat_cache_size)\n\n    if self.enable_debug:\n        root.set_debug()\n\n    return root\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.get_cls","title":"get_cls","text":"<pre><code>get_cls(node_cls: Type[T]) -&gt; Type[T]\n</code></pre> <p>Get the class of the node.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def get_cls(self, node_cls: Type[T]) -&gt; Type[T]:\n    \"\"\"Get the class of the node.\"\"\"\n    return self.ast_node_class_overrides.get(node_cls.__qualname__, node_cls)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.string","title":"string","text":"<pre><code>string() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing strings.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef string(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing strings.\"\"\"\n    return pp.CharsNotIn(\"%*\").set_results_name(\"string\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.comma","title":"comma","text":"<pre><code>comma() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing commas.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef comma(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing commas.\"\"\"\n    return pp.Literal(\",\").set_name(\",\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.name","title":"name","text":"<pre><code>name() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing names.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef name(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing names.\"\"\"\n    return pp.Regex(r\"[._a-zA-Z$][._a-zA-Z0-9]*\").set_results_name(\"name\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.user_name","title":"user_name","text":"<pre><code>user_name() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing user attribute names.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef user_name(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing user attribute names.\"\"\"\n    return pp.Regex(r\"[_a-zA-Z$][._a-zA-Z0-9]*\").set_results_name(\"user_name\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.field","title":"field","text":"<pre><code>field() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing user attribute names.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef field(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing user attribute names.\"\"\"\n    return pp.Regex(r\"[^%*,]*\").set_results_name(\"field\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.double","title":"double","text":"<pre><code>double() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing doubles.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef double(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing doubles.\"\"\"\n    return pp.Regex(r\"[+-]?(([0-9]+(\\.[0-9]+)?)|(\\.[0-9]+))\").set_results_name(\n        \"double\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.integer","title":"integer","text":"<pre><code>integer() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing integers.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef integer(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing integers.\"\"\"\n    return pp.Regex(r\"[+-]?[0-9]+\").set_results_name(\"integer\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.boolean","title":"boolean","text":"<pre><code>boolean() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing integers.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef boolean(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing integers.\"\"\"\n    return pp.one_of((\"0\", \"1\")).set_results_name(\"boolean\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.aperture_id","title":"aperture_id","text":"<pre><code>aperture_id() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing aperture identifiers.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef aperture_id(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing aperture identifiers.\"\"\"\n    return pp.Regex(r\"D[0]*[1-9][0-9]+\").set_results_name(\"aperture_id\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.make_unpack_callback","title":"make_unpack_callback","text":"<pre><code>make_unpack_callback(\n    node_type: Type[Node], **kwargs: Any\n) -&gt; Callable[[str, int, pp.ParseResults], Node]\n</code></pre> <p>Create a callback for unpacking the results of the parser.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def make_unpack_callback(\n    self,\n    node_type: Type[Node],\n    **kwargs: Any,\n) -&gt; Callable[[str, int, pp.ParseResults], Node]:\n    \"\"\"Create a callback for unpacking the results of the parser.\"\"\"\n\n    def _(s: str, loc: int, tokens: pp.ParseResults) -&gt; Node:\n        return self.get_cls(node_type)(\n            source_info=SourceInfo(\n                source=s, location=loc, length=sum(len(t) for t in tokens.as_list())\n            ),\n            **tokens.as_dict(),\n            **kwargs,\n        )\n\n    return _\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.aperture","title":"aperture","text":"<pre><code>aperture() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing apertures.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def aperture(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing apertures.\"\"\"\n    return pp.MatchFirst(\n        [\n            self.aperture_block,\n            self.macro,\n            self.step_repeat,\n            self.add_aperture,\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.aperture_block","title":"aperture_block","text":"<pre><code>aperture_block() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing aperture blocks.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef aperture_block(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing aperture blocks.\"\"\"\n    self.aperture_block_forward = pp.Forward()\n\n    self.aperture_block_forward &lt;&lt;= (\n        (\n            self.ab_open.set_results_name(\"open\")\n            + pp.ZeroOrMore(\n                pp.MatchFirst(\n                    [\n                        self.d_codes_standalone,\n                        self.g_codes,\n                        self.load_commands,\n                        self.properties,\n                        self.attribute,\n                        self.add_aperture,\n                        self.step_repeat_forward,\n                        self.aperture_block_forward,\n                        self.macro,\n                        # Technically not valid according to standard.\n                        self.m_codes,\n                    ]\n                )\n            ).set_results_name(\"nodes\")\n            + self.ab_close.set_results_name(\"close\")\n        )\n        .set_name(\"ApertureBlock\")\n        .set_parse_action(self.make_unpack_callback(AB))\n    )\n\n    return self.aperture_block_forward\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ab_open","title":"ab_open","text":"<pre><code>ab_open() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing AB-open.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef ab_open(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing AB-open.\"\"\"\n    return (\n        self._extended_command(pp.Literal(\"AB\") + self.aperture_id)\n        .set_name(\"ABopen\")\n        .set_parse_action(self.make_unpack_callback(ABopen))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ab_close","title":"ab_close","text":"<pre><code>ab_close() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing AB-close.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef ab_close(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing AB-close.\"\"\"\n    return (\n        self._extended_command(pp.Literal(\"AB\"))\n        .set_name(\"ABclose\")\n        .set_parse_action(self.make_unpack_callback(ABclose))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.macro","title":"macro","text":"<pre><code>macro() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing macros.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef macro(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing macros.\"\"\"\n    return (\n        (\n            self.am_open.set_results_name(\"open\")\n            + self.primitives.set_results_name(\"primitives\")\n            + self.am_close.set_results_name(\"close\")\n        )\n        .set_name(\"MacroDefinition\")\n        .set_parse_action(self.make_unpack_callback(AM))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.am_open","title":"am_open","text":"<pre><code>am_open() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing AM-open.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef am_open(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing AM-open.\"\"\"\n    return (\n        (self._extended + pp.Literal(\"AM\") + self.name + self._asterisk)\n        .set_name(\"AMopen\")\n        .set_parse_action(self.make_unpack_callback(AMopen))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.am_close","title":"am_close","text":"<pre><code>am_close() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing AM-close.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef am_close(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing AM-close.\"\"\"\n    return (\n        self._extended.copy()\n        .set_name(\"AM_close\")\n        .set_parse_action(self.make_unpack_callback(AMclose))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.step_repeat","title":"step_repeat","text":"<pre><code>step_repeat() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing step repeats.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef step_repeat(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing step repeats.\"\"\"\n    self.step_and_repeat_block_forward = pp.Forward()\n\n    self.step_and_repeat_block_forward &lt;&lt;= (\n        (\n            self.sr_open.set_results_name(\"open\")\n            + pp.ZeroOrMore(\n                pp.MatchFirst(\n                    [\n                        self.d_codes_standalone,\n                        self.g_codes,\n                        self.load_commands,\n                        self.properties,\n                        self.attribute,\n                        self.add_aperture,\n                        self.step_repeat_forward,\n                        self.aperture_block_forward,\n                        self.macro,\n                        # Technically not valid according to standard.\n                        self.m_codes,\n                    ]\n                )\n            ).set_results_name(\"nodes\")\n            + self.sr_close.set_results_name(\"close\")\n        )\n        .set_name(\"StepAndRepeatBlock\")\n        .set_parse_action(self.make_unpack_callback(SR))\n    )\n\n    return self.step_and_repeat_block_forward\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.sr_open","title":"sr_open","text":"<pre><code>sr_open() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing SR-open.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef sr_open(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing SR-open.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"SR\")\n            + pp.Opt(pp.Literal(\"X\") + self.double.set_results_name(\"x\"))\n            + pp.Opt(pp.Literal(\"Y\") + self.double.set_results_name(\"y\"))\n            + pp.Opt(pp.Literal(\"I\") + self.double.set_results_name(\"i\"))\n            + pp.Opt(pp.Literal(\"J\") + self.double.set_results_name(\"j\"))\n        )\n        .set_name(\"SRopen\")\n        .set_parse_action(self.make_unpack_callback(SRopen))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.sr_close","title":"sr_close","text":"<pre><code>sr_close() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing SR-close.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef sr_close(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing SR-close.\"\"\"\n    return (\n        self._extended_command(pp.Literal(\"SR\"))\n        .set_name(\"SRclose\")\n        .set_parse_action(self.make_unpack_callback(SRclose))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.add_aperture","title":"add_aperture","text":"<pre><code>add_aperture() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef add_aperture(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing add-aperture commands.\"\"\"\n    return pp.MatchFirst(\n        [\n            self.add_aperture_circle(),\n            self.add_aperture_rectangle(\"R\", ADR),\n            self.add_aperture_rectangle(\"O\", ADO),\n            self.add_aperture_polygon(),\n            self.add_aperture_macro(),\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.add_aperture_circle","title":"add_aperture_circle","text":"<pre><code>add_aperture_circle() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-circle commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def add_aperture_circle(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing add-aperture-circle commands.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"AD\")\n            + self.aperture_id\n            + pp.Literal(\"C,\")\n            + self.double.set_results_name(\"diameter\")\n            + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n        )\n        .set_name(\"ADC\")\n        .set_parse_action(self.make_unpack_callback(ADC))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.add_aperture_rectangle","title":"add_aperture_rectangle","text":"<pre><code>add_aperture_rectangle(\n    symbol: Literal[\"R\", \"O\"], cls: Type[Node]\n) -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-rectangle commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def add_aperture_rectangle(\n    self, symbol: Literal[\"R\", \"O\"], cls: Type[Node]\n) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing add-aperture-rectangle\n    commands.\n    \"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"AD\")\n            + self.aperture_id\n            + pp.Literal(f\"{symbol},\")\n            + self.double.set_results_name(\"width\")\n            + self._x\n            + self.double.set_results_name(\"height\")\n            + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n        )\n        .set_name(f\"AD{symbol}\")\n        .set_parse_action(self.make_unpack_callback(cls))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.add_aperture_polygon","title":"add_aperture_polygon","text":"<pre><code>add_aperture_polygon() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-polygon commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def add_aperture_polygon(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing add-aperture-polygon\n    commands.\n    \"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"AD\")\n            + self.aperture_id\n            + pp.Literal(\"P,\")\n            + self.double.set_results_name(\"outer_diameter\")\n            + self._x\n            + self.double.set_results_name(\"vertices\")\n            + pp.Opt(self._x + self.double.set_results_name(\"rotation\"))\n            + pp.Opt(self._x + self.double.set_results_name(\"hole_diameter\"))\n        )\n        .set_name(\"ADP\")\n        .set_parse_action(self.make_unpack_callback(ADP))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.add_aperture_macro","title":"add_aperture_macro","text":"<pre><code>add_aperture_macro() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-polygon commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def add_aperture_macro(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing add-aperture-polygon\n    commands.\n    \"\"\"\n    param = self.double.set_results_name(\"params\", list_all_matches=True)\n\n    return (\n        self._extended_command(\n            pp.Literal(\"AD\")\n            + self.aperture_id\n            + self.name.set_results_name(\"name\")\n            + pp.Opt(self.comma + param + pp.ZeroOrMore(self._x + param))\n        )\n        .set_name(\"ADmacro\")\n        .set_parse_action(self.make_unpack_callback(ADmacro))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.attribute","title":"attribute","text":"<pre><code>attribute() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing attributes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef attribute(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing attributes.\"\"\"\n    return pp.MatchFirst(\n        [\n            self.ta(),\n            self.td(),\n            self.tf(),\n            self.to(),\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ta","title":"ta","text":"<pre><code>ta() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing TA attributes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def ta(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing TA attributes.\"\"\"\n    return pp.MatchFirst(\n        [\n            self._ta_user_name,\n            self._ta_aper_function,\n            self._ta_drill_tolerance,\n            self._ta_flash_text,\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.td","title":"td","text":"<pre><code>td() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing TD attributes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def td(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing TD attributes.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"TD\") + pp.Opt(self.string.set_results_name(\"name\"))\n        )\n        .set_name(\"TD\")\n        .set_parse_action(self.make_unpack_callback(TD))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.tf","title":"tf","text":"<pre><code>tf() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing TF attributes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def tf(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing TF attributes.\"\"\"\n    return pp.MatchFirst(\n        [\n            self._tf_user_name,\n            self._tf_part,\n            self._tf_file_function,\n            self._tf_file_polarity,\n            self._tf_same_coordinates,\n            self._tf_creation_date,\n            self._tf_generation_software,\n            self._tf_project_id,\n            self._tf_md5,\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.to","title":"to","text":"<pre><code>to() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing TO attributes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def to(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing TO attributes.\"\"\"\n    return pp.MatchFirst(\n        [\n            self._to_user_name,\n            self._to_n,\n            self._to_p,\n            self._to_c,\n            self._to_crot,\n            self._to_cmfr,\n            self._to_cmpn,\n            self._to_cval,\n            self._to_cmnt,\n            self._to_cftp,\n            self._to_cpgn,\n            self._to_cpgd,\n            self._to_chgt,\n            self._to_clbn,\n            self._to_clbd,\n            self._to_csup,\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.d_codes_standalone","title":"d_codes_standalone","text":"<pre><code>d_codes_standalone() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing standalone D-codes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef d_codes_standalone(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing standalone D-codes.\"\"\"\n    return self._d_codes(is_standalone=True)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.d_codes_non_standalone","title":"d_codes_non_standalone","text":"<pre><code>d_codes_non_standalone() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing standalone D-codes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef d_codes_non_standalone(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing standalone D-codes.\"\"\"\n    return self._d_codes(is_standalone=False)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.g_codes","title":"g_codes","text":"<pre><code>g_codes() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing G-codes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef g_codes(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing G-codes.\"\"\"\n    g04_comment = self._command(\n        pp.Regex(r\"G0*4\") + pp.Opt(self.string),\n    ).set_name(\"G04\")\n\n    if self.optimization &amp; Optimization.DISCARD_COMMENTS:\n        g04_comment = pp.Suppress(g04_comment)\n    else:\n        g04_comment = g04_comment.set_parse_action(self.make_unpack_callback(G04))\n\n    def _standalone(cls: Type[Node]) -&gt; pp.ParserElement:\n        code = int(cls.__qualname__.lstrip(\"G\"))\n        return (\n            self._command(pp.Regex(f\"G0*{code}\"))\n            .set_name(cls.__qualname__)\n            .set_parse_action(self.make_unpack_callback(cls, is_standalone=True))\n        )\n\n    def _non_standalone(cls: Type[Node]) -&gt; pp.ParserElement:\n        # We have to account for legacy cases like `G70D02*`, see\n        # `G.is_standalone` docstring for more information.\n        code = int(cls.__qualname__.lstrip(\"G\"))\n        return (\n            (\n                pp.Regex(f\"G0*{code}\")\n                + pp.FollowedBy(pp.one_of([\"D\", \"X\", \"Y\", \"I\", \"J\"]))\n            )\n            .set_name(cls.__qualname__)\n            .set_parse_action(self.make_unpack_callback(cls, is_standalone=False))\n        ) + self.d_codes_non_standalone\n\n    return pp.MatchFirst(\n        [\n            g04_comment,\n            *(\n                _standalone(cast(Type[Node], cls))\n                for cls in reversed(\n                    (\n                        G01,\n                        G02,\n                        G03,\n                        G36,\n                        G37,\n                        G54,\n                        G55,\n                        G70,\n                        G71,\n                        G74,\n                        G75,\n                        G90,\n                        G91,\n                    )\n                )\n            ),\n            *(\n                _non_standalone(cast(Type[Node], cls))\n                for cls in reversed(\n                    (\n                        G01,\n                        G02,\n                        G03,\n                        G36,\n                        G37,\n                        G54,\n                        G55,\n                        G70,\n                        G71,\n                        G74,\n                        G75,\n                        G90,\n                        G91,\n                    )\n                )\n            ),\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.load_commands","title":"load_commands","text":"<pre><code>load_commands() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing Load-commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef load_commands(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing Load-commands.\"\"\"\n    return pp.MatchFirst([self.ln(), self.lp(), self.lr(), self.ls(), self.lm()])\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ln","title":"ln","text":"<pre><code>ln() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the LN command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def ln(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the LN command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"LN\") + self.string.set_results_name(\"name\")\n        )\n        .set_parse_action(self.make_unpack_callback(LN))\n        .set_name(\"LN\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.lp","title":"lp","text":"<pre><code>lp() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the LP command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def lp(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the LP command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"LP\") + pp.one_of([\"C\", \"D\"]).set_results_name(\"polarity\")\n        )\n        .set_parse_action(self.make_unpack_callback(LP))\n        .set_name(\"LP\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.lr","title":"lr","text":"<pre><code>lr() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the LR command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def lr(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the LR command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"LR\") + self.double.set_results_name(\"rotation\")\n        )\n        .set_parse_action(self.make_unpack_callback(LR))\n        .set_name(\"LR\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ls","title":"ls","text":"<pre><code>ls() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the LS command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def ls(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the LS command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"LS\") + self.double.set_results_name(\"scale\")\n        )\n        .set_parse_action(self.make_unpack_callback(LS))\n        .set_name(\"LS\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.lm","title":"lm","text":"<pre><code>lm() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the LM command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def lm(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the LM command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"LM\")\n            + pp.one_of([\"N\", \"XY\", \"X\", \"Y\"]).set_results_name(\"mirroring\")\n        )\n        .set_parse_action(self.make_unpack_callback(LM))\n        .set_name(\"LM\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.m_codes","title":"m_codes","text":"<pre><code>m_codes() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing M-codes.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef m_codes(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing M-codes.\"\"\"\n    return pp.MatchFirst(\n        [\n            self.m(\n                value,\n                self.get_cls(cls),  # type: ignore[arg-type, type-abstract]\n            )\n            for (value, cls) in (\n                (2, M02),\n                (1, M01),\n                (0, M00),\n            )\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.m","title":"m","text":"<pre><code>m(value: int, cls: Type[Node]) -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing particular D-code.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def m(self, value: int, cls: Type[Node]) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing particular D-code.\"\"\"\n    return (\n        self._command(pp.Regex(r\"M0*\" + str(value)))\n        .set_name(f\"M{value}\")\n        .set_parse_action(self.make_unpack_callback(cls))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.expression","title":"expression","text":"<pre><code>expression() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing expressions.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef expression(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing expressions.\"\"\"\n    expr = pp.Forward()\n    factor = (\n        self.variable\n        | self.constant\n        | self._cb(pp.Literal(\"(\") + expr(\"inner\") + pp.Literal(\")\"), Parenthesis)\n    )(\"factor\")\n\n    last_expr = factor\n    # Unary - operator\n    op_expr = pp.Literal(\"-\")\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(op_expr + this_expr) + (\n        op_expr + this_expr(\"operand\")\n    ).set_parse_action(self.make_unpack_callback(Neg))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    # Unary + operator\n    op_expr = pp.Literal(\"+\")\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(op_expr + this_expr) + (\n        op_expr + this_expr(\"operand\")\n    ).set_parse_action(self.make_unpack_callback(Pos))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    # Binary / operator\n    op_expr = pp.Literal(\"/\")\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n        last_expr(\"head\")\n        + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n            1, ...\n        ]\n    ).set_parse_action(self.make_unpack_callback(Div))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    # Binary x|X operator\n    op_expr = pp.one_of([\"x\", \"X\"])\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n        last_expr(\"head\")\n        + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n            1, ...\n        ]\n    ).set_parse_action(self.make_unpack_callback(Mul))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    # Binary - operator\n    op_expr = pp.Literal(\"-\")\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n        last_expr(\"head\")\n        + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n            1, ...\n        ]\n    ).set_parse_action(self.make_unpack_callback(Sub))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    # Binary - operator\n    op_expr = pp.Literal(\"+\")\n\n    this_expr = pp.Forward()\n    match_expr = pp.FollowedBy(last_expr + op_expr + last_expr) + (\n        last_expr(\"head\")\n        + (op_expr + last_expr.set_results_name(\"tail\", list_all_matches=True))[\n            1, ...\n        ]\n    ).set_parse_action(self.make_unpack_callback(Add))\n    this_expr &lt;&lt;= match_expr | last_expr\n    last_expr = this_expr\n\n    expr &lt;&lt;= last_expr\n\n    return take_only(expr(\"expression\"), \"expression\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.constant","title":"constant","text":"<pre><code>constant() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing constants.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef constant(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing constants.\"\"\"\n    return self.double.set_results_name(\"constant\").set_parse_action(\n        self.make_unpack_callback(Constant)\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.variable","title":"variable","text":"<pre><code>variable() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing variables.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef variable(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing variables.\"\"\"\n    return (\n        pp.Regex(r\"\\$[0-9]+\")\n        .set_results_name(\"variable\")\n        .set_parse_action(self.make_unpack_callback(Variable))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.assignment","title":"assignment","text":"<pre><code>assignment() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing assignments.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef assignment(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing assignments.\"\"\"\n    return (\n        self._command(self.variable + \"=\" + self.expression)\n        .set_results_name(\"assignment\")\n        .set_parse_action(self.make_unpack_callback(Assignment))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.primitives","title":"primitives","text":"<pre><code>primitives() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing macro primitives.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef primitives(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing macro primitives.\"\"\"\n    cs = self.comma\n\n    return pp.ZeroOrMore(\n        pp.MatchFirst(\n            [\n                self.assignment,\n                self.primitive(Code0, 0, self.string),\n                self.primitive(\n                    Code1,\n                    1,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"diameter\")\n                    + cs\n                    + self.expression.set_results_name(\"center_x\")\n                    + cs\n                    + self.expression.set_results_name(\"center_y\")\n                    + pp.Opt(cs + self.expression.set_results_name(\"rotation\")),\n                ),\n                self.primitive(\n                    Code2,\n                    2,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"width\")\n                    + cs\n                    + self.expression.set_results_name(\"start_x\")\n                    + cs\n                    + self.expression.set_results_name(\"start_y\")\n                    + cs\n                    + self.expression.set_results_name(\"end_x\")\n                    + cs\n                    + self.expression.set_results_name(\"end_y\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code4,\n                    4,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"number_of_points\")\n                    + cs\n                    + self.expression.set_results_name(\"start_x\")\n                    + cs\n                    + self.expression.set_results_name(\"start_y\")\n                    + pp.OneOrMore(\n                        (\n                            cs\n                            + self.expression.set_results_name(\"x\")\n                            + cs\n                            + self.expression.set_results_name(\"y\")\n                        )\n                        .set_results_name(\"points\", list_all_matches=True)\n                        .set_parse_action(self.make_unpack_callback(Point)),\n                    )\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code5,\n                    5,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"number_of_vertices\")\n                    + cs\n                    + self.expression.set_results_name(\"center_x\")\n                    + cs\n                    + self.expression.set_results_name(\"center_y\")\n                    + cs\n                    + self.expression.set_results_name(\"diameter\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code6,\n                    6,\n                    cs\n                    + self.expression.set_results_name(\"center_x\")\n                    + cs\n                    + self.expression.set_results_name(\"center_y\")\n                    + cs\n                    + self.expression.set_results_name(\"outer_diameter\")\n                    + cs\n                    + self.expression.set_results_name(\"ring_thickness\")\n                    + cs\n                    + self.expression.set_results_name(\"gap_between_rings\")\n                    + cs\n                    + self.expression.set_results_name(\"max_ring_count\")\n                    + cs\n                    + self.expression.set_results_name(\"crosshair_thickness\")\n                    + cs\n                    + self.expression.set_results_name(\"crosshair_length\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code7,\n                    7,\n                    cs\n                    + self.expression.set_results_name(\"center_x\")\n                    + cs\n                    + self.expression.set_results_name(\"center_y\")\n                    + cs\n                    + self.expression.set_results_name(\"outer_diameter\")\n                    + cs\n                    + self.expression.set_results_name(\"inner_diameter\")\n                    + cs\n                    + self.expression.set_results_name(\"gap_thickness\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code20,\n                    20,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"width\")\n                    + cs\n                    + self.expression.set_results_name(\"start_x\")\n                    + cs\n                    + self.expression.set_results_name(\"start_y\")\n                    + cs\n                    + self.expression.set_results_name(\"end_x\")\n                    + cs\n                    + self.expression.set_results_name(\"end_y\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code21,\n                    21,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"width\")\n                    + cs\n                    + self.expression.set_results_name(\"height\")\n                    + cs\n                    + self.expression.set_results_name(\"center_x\")\n                    + cs\n                    + self.expression.set_results_name(\"center_y\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n                self.primitive(\n                    Code22,\n                    22,\n                    cs\n                    + self.expression.set_results_name(\"exposure\")\n                    + cs\n                    + self.expression.set_results_name(\"width\")\n                    + cs\n                    + self.expression.set_results_name(\"height\")\n                    + cs\n                    + self.expression.set_results_name(\"x_lower_left\")\n                    + cs\n                    + self.expression.set_results_name(\"y_lower_left\")\n                    + cs\n                    + self.expression.set_results_name(\"rotation\"),\n                ),\n            ]\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.primitive","title":"primitive","text":"<pre><code>primitive(\n    cls: Type[Node], code: int, fields: pp.ParserElement\n) -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing a primitive.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def primitive(\n    self, cls: Type[Node], code: int, fields: pp.ParserElement\n) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing a primitive.\"\"\"\n    return (\n        self._command(pp.Literal(str(code)) + fields)\n        .set_name(f\"primitive-{code}\")\n        .set_parse_action(self.make_unpack_callback(cls))\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.properties","title":"properties","text":"<pre><code>properties() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing Properties-commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>@pp.cached_property\ndef properties(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing Properties-commands.\"\"\"\n    return pp.MatchFirst(\n        [\n            self.fs(),\n            self.mo(),\n            self.ip(),\n            self.ir(),\n            self.of(),\n            self.as_(),\n            self.mi(),\n            self.in_(),\n            self.sf(),\n        ]\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.fs","title":"fs","text":"<pre><code>fs() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the FS command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def fs(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the FS command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"FS\")\n            + pp.one_of((\"L\", \"T\")).set_results_name(\"zeros\")\n            + pp.one_of((\"I\", \"A\")).set_results_name(\"coordinate_mode\")\n            + pp.CaselessLiteral(\"X\")\n            + pp.Regex(r\"[0-9]\").set_results_name(\"x_integral\")\n            + pp.Regex(r\"[0-9]\").set_results_name(\"x_decimal\")\n            + pp.CaselessLiteral(\"Y\")\n            + pp.Regex(r\"[0-9]\").set_results_name(\"y_integral\")\n            + pp.Regex(r\"[0-9]\").set_results_name(\"y_decimal\")\n        )\n        .set_parse_action(self.make_unpack_callback(FS))\n        .set_name(\"FS\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ip","title":"ip","text":"<pre><code>ip() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the IP command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def ip(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the IP command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"IP\")\n            + pp.one_of((\"POS\", \"NEG\")).set_results_name(\"polarity\")\n        )\n        .set_parse_action(self.make_unpack_callback(IP))\n        .set_name(\"IP\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.ir","title":"ir","text":"<pre><code>ir() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the IR command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def ir(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the IR command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"IR\") + self.double.set_results_name(\"rotation_degrees\")\n        )\n        .set_parse_action(self.make_unpack_callback(IR))\n        .set_name(\"IR\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.mo","title":"mo","text":"<pre><code>mo() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the MO command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def mo(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the MO command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"MO\") + pp.one_of([\"IN\", \"MM\"]).set_results_name(\"mode\")\n        )\n        .set_parse_action(self.make_unpack_callback(MO))\n        .set_name(\"MO\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.of","title":"of","text":"<pre><code>of() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the MO command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def of(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the MO command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"OF\")\n            + pp.Opt(pp.Literal(\"A\") + self.double.set_results_name(\"a_offset\"))\n            + pp.Opt(pp.Literal(\"B\") + self.double.set_results_name(\"b_offset\"))\n        )\n        .set_parse_action(self.make_unpack_callback(OF))\n        .set_name(\"OF\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.as_","title":"as_","text":"<pre><code>as_() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser element capable of parsing AS-commands.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def as_(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser element capable of parsing AS-commands.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"AS\")\n            + pp.one_of([\"AXBY\", \"AYBX\"]).set_results_name(\"correspondence\")\n        )\n        .set_parse_action(self.make_unpack_callback(AS))\n        .set_name(\"OF\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.mi","title":"mi","text":"<pre><code>mi() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the MI command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def mi(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the MI command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"MI\")\n            + pp.Opt(pp.Literal(\"A\") + self.boolean.set_results_name(\"a_mirroring\"))\n            + pp.Opt(pp.Literal(\"B\") + self.boolean.set_results_name(\"b_mirroring\"))\n        )\n        .set_parse_action(self.make_unpack_callback(MI))\n        .set_name(\"MI\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.in_","title":"in_","text":"<pre><code>in_() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the IN command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def in_(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the IN command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"IN\") + self.string.set_results_name(\"name\")\n        )\n        .set_parse_action(self.make_unpack_callback(IN))\n        .set_name(\"IN\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.Grammar.sf","title":"sf","text":"<pre><code>sf() -&gt; pp.ParserElement\n</code></pre> <p>Create a parser for the SF command.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def sf(self) -&gt; pp.ParserElement:\n    \"\"\"Create a parser for the SF command.\"\"\"\n    return (\n        self._extended_command(\n            pp.Literal(\"SF\")\n            + pp.Opt(pp.Literal(\"A\") + self.double.set_results_name(\"a_scale\"))\n            + pp.Opt(pp.Literal(\"B\") + self.double.set_results_name(\"b_scale\"))\n        )\n        .set_parse_action(self.make_unpack_callback(SF))\n        .set_name(\"SF\")\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/grammar.html#pygerber.gerberx3.parser.pyparsing.grammar.take_only","title":"take_only","text":"<pre><code>take_only(\n    expr: pp.ParserElement, name: str\n) -&gt; pp.ParserElement\n</code></pre> <p>Add parse action to extract single named parse result from a parse result.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/grammar.py</code> <pre><code>def take_only(expr: pp.ParserElement, name: str) -&gt; pp.ParserElement:\n    \"\"\"Add parse action to extract single named parse result from a parse result.\"\"\"\n    return pp.TokenConverter(expr).add_parse_action(lambda t: t.as_dict()[name])(name)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/parser.html","title":"parser","text":""},{"location":"reference/pygerber/gerberx3/parser/pyparsing/parser.html#pygerber.gerberx3.parser.pyparsing.parser","title":"parser","text":"<p><code>pygerber.gerberx3.parser.pyparsing.parser</code> module contains Gerber X3 parser implementation based on pyparsing library.</p>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/parser.html#pygerber.gerberx3.parser.pyparsing.parser.Parser","title":"Parser","text":"<p>Gerber X3 parser implementation.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/parser.py</code> <pre><code>class Parser:\n    \"\"\"Gerber X3 parser implementation.\"\"\"\n\n    def __init__(\n        self,\n        ast_node_class_overrides: Optional[dict[str, Type[Node]]] = None,\n        *,\n        resilient: bool = False,\n    ) -&gt; None:\n        builder = Grammar(ast_node_class_overrides or {})\n        if resilient:\n            self.grammar = builder.build_resilient()\n        else:\n            self.grammar = builder.build()\n\n    def parse(self, code: str, *, strict: bool = True) -&gt; File:\n        \"\"\"Parse the input.\"\"\"\n        parse_result = self.grammar.parseString(code, parse_all=strict).get(\"root_node\")\n        assert isinstance(parse_result, File)\n        return parse_result\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser/pyparsing/parser.html#pygerber.gerberx3.parser.pyparsing.parser.Parser.parse","title":"parse","text":"<pre><code>parse(code: str, *, strict: bool = True) -&gt; File\n</code></pre> <p>Parse the input.</p> Source code in <code>src/pygerber/gerberx3/parser/pyparsing/parser.py</code> <pre><code>def parse(self, code: str, *, strict: bool = True) -&gt; File:\n    \"\"\"Parse the input.\"\"\"\n    parse_result = self.grammar.parseString(code, parse_all=strict).get(\"root_node\")\n    assert isinstance(parse_result, File)\n    return parse_result\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/__init__.html#pygerber.gerberx3.parser2","title":"parser2","text":"<p>Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html","title":"attributes2","text":""},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2","title":"attributes2","text":"<p>Attribute dictionaries for Gerber X3 parser.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.AttributesDictionary","title":"AttributesDictionary","text":"<p>             Bases: <code>ImmutableMapping[str, Optional[str]]</code></p> <p>Base class for container holding attributes.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class AttributesDictionary(ImmutableMapping[str, Optional[str]]):\n    \"\"\"Base class for container holding attributes.\"\"\"\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__qualname__}({self.mapping})\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.StandardAttributeBase","title":"StandardAttributeBase","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Class for wrapping standard attribute content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class StandardAttributeBase(FrozenGeneralModel):\n    \"\"\"Class for wrapping standard attribute content.\"\"\"\n\n    @classmethod\n    def parse(cls, content: str) -&gt; Self:\n        \"\"\"Parse attribute content.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.StandardAttributeBase.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(content: str) -&gt; Self\n</code></pre> <p>Parse attribute content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>@classmethod\ndef parse(cls, content: str) -&gt; Self:\n    \"\"\"Parse attribute content.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.PartAttribute","title":"PartAttribute","text":"<p>             Bases: <code>StandardAttributeBase</code></p> <p>The value of the .Part file attribute identifies which part is described. The attribute - if present - must be defined in the header.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class PartAttribute(StandardAttributeBase):\n    \"\"\"The value of the .Part file attribute identifies which part is described. The\n    attribute - if present - must be defined in the header.\n    \"\"\"\n\n    class Part(Enum):\n        \"\"\"Enumerate supported part types.\"\"\"\n\n        Single = \"Single\"\n        Array = \"Array\"\n        FabricationPanel = \"FabricationPanel\"\n        Coupon = \"Coupon\"\n        Other = \"Other\"\n\n    part: PartAttribute.Part\n    field: str = Field(default=\"\")\n\n    @classmethod\n    def parse(cls, content: str) -&gt; Self:\n        \"\"\"Return original content.\"\"\"\n        parts = dict(enumerate(content.split(\",\", 1)))\n        return cls(\n            part=cls.Part(parts[0]),\n            field=parts.get(1, \"\"),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.PartAttribute.Part","title":"Part","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerate supported part types.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class Part(Enum):\n    \"\"\"Enumerate supported part types.\"\"\"\n\n    Single = \"Single\"\n    Array = \"Array\"\n    FabricationPanel = \"FabricationPanel\"\n    Coupon = \"Coupon\"\n    Other = \"Other\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.PartAttribute.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(content: str) -&gt; Self\n</code></pre> <p>Return original content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>@classmethod\ndef parse(cls, content: str) -&gt; Self:\n    \"\"\"Return original content.\"\"\"\n    parts = dict(enumerate(content.split(\",\", 1)))\n    return cls(\n        part=cls.Part(parts[0]),\n        field=parts.get(1, \"\"),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.GenerationSoftwareAttribute","title":"GenerationSoftwareAttribute","text":"<p>             Bases: <code>StandardAttributeBase</code></p> <p>Usually a Gerber file is part of a PCB project with a sequence of revisions. The purpose of the .ProjectId file attribute is to uniquely identify project and revision.This is especially important to check whether all files belong to the same revision. By its nature, these values can only be defined by the creator of the project and revision. The attribute - if present - must be defined in the header.</p> <p>The syntax is as follows:</p> <pre><code>%TF.ProjectId,&lt;Name&gt;,&lt;GUID&gt;,&lt;Revision&gt;*%\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class GenerationSoftwareAttribute(StandardAttributeBase):\n    \"\"\"Usually a Gerber file is part of a PCB project with a sequence of revisions.\n    The purpose of the .ProjectId file attribute is to uniquely identify project and\n    revision.This is especially important to check whether all files belong to the same\n    revision. By its nature, these values can only be defined by the creator of the\n    project and revision. The attribute - if present - must be defined in the header.\n\n    The syntax is as follows:\n\n    ```\n    %TF.ProjectId,&lt;Name&gt;,&lt;GUID&gt;,&lt;Revision&gt;*%\n    ```\n    \"\"\"\n\n    name: str\n    guid: str\n    revision: str\n\n    @classmethod\n    def parse(cls, content: str) -&gt; Self:\n        \"\"\"Return original content.\"\"\"\n        items = dict(enumerate(content.split(\",\")))\n\n        if (name := items.get(0)) is None:\n            msg = \"Missing name field for .GenerationSoftware attribute.\"\n            raise MissingGuidFieldError(msg)\n\n        if (guid := items.get(1)) is None:\n            msg = \"Missing guid field for .GenerationSoftware attribute.\"\n            raise MissingGuidFieldError(msg)\n\n        if (revision := items.get(2)) is None:\n            msg = \"Missing revision field for .GenerationSoftware attribute.\"\n            raise MissingGuidFieldError(msg)\n\n        return cls(\n            name=name,\n            guid=guid,\n            revision=revision,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.GenerationSoftwareAttribute.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(content: str) -&gt; Self\n</code></pre> <p>Return original content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>@classmethod\ndef parse(cls, content: str) -&gt; Self:\n    \"\"\"Return original content.\"\"\"\n    items = dict(enumerate(content.split(\",\")))\n\n    if (name := items.get(0)) is None:\n        msg = \"Missing name field for .GenerationSoftware attribute.\"\n        raise MissingGuidFieldError(msg)\n\n    if (guid := items.get(1)) is None:\n        msg = \"Missing guid field for .GenerationSoftware attribute.\"\n        raise MissingGuidFieldError(msg)\n\n    if (revision := items.get(2)) is None:\n        msg = \"Missing revision field for .GenerationSoftware attribute.\"\n        raise MissingGuidFieldError(msg)\n\n    return cls(\n        name=name,\n        guid=guid,\n        revision=revision,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes","title":"FileAttributes","text":"<p>             Bases: <code>AttributesDictionary</code></p> <p>File attributes.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class FileAttributes(AttributesDictionary):\n    \"\"\"File attributes.\"\"\"\n\n    @property\n    def Part(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Identifies the part the file represents, e.g. a single PCB.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".Part\")\n\n    @property\n    def FileFunction(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Identifies the file's function in the PCB, e.g. top copper layer.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".FileFunction\")\n\n    @property\n    def FilePolarity(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Positive or Negative. This defines whether the image represents the presence\n        or absence of material.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".FilePolarity\")\n\n    @property\n    def SameCoordinates(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"All files in a fabrication data set with this attribute use the same\n        coordinates. In other words, they align.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".SameCoordinates\")\n\n    @property\n    def CreationDate(self) -&gt; Optional[datetime.datetime]:  # noqa: N802\n        \"\"\"Defines the creation date and time of the file.\n\n        Standard file attribute.\n        \"\"\"\n        if (val := self.get(\".CreationDate\")) is not None:\n            return datetime.datetime.fromisoformat(val)\n        return None\n\n    @property\n    def GenerationSoftware(self) -&gt; Optional[GenerationSoftwareAttribute]:  # noqa: N802\n        \"\"\"Identifies the software creating the file.\n\n        Standard file attribute.\n        \"\"\"\n        if (val := self.get(\".GenerationSoftware\")) is not None:\n            return GenerationSoftwareAttribute.parse(val)\n        return None\n\n    @property\n    def ProjectId(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Defines project and revisions.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".ProjectId\")\n\n    @property\n    def MD5(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Sets the MD5 file signature or checksum.\n\n        Standard file attribute.\n        \"\"\"\n        return self.get(\".MD5\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.Part","title":"Part  <code>property</code>","text":"<pre><code>Part: Optional[str]\n</code></pre> <p>Identifies the part the file represents, e.g. a single PCB.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.FileFunction","title":"FileFunction  <code>property</code>","text":"<pre><code>FileFunction: Optional[str]\n</code></pre> <p>Identifies the file's function in the PCB, e.g. top copper layer.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.FilePolarity","title":"FilePolarity  <code>property</code>","text":"<pre><code>FilePolarity: Optional[str]\n</code></pre> <p>Positive or Negative. This defines whether the image represents the presence or absence of material.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.SameCoordinates","title":"SameCoordinates  <code>property</code>","text":"<pre><code>SameCoordinates: Optional[str]\n</code></pre> <p>All files in a fabrication data set with this attribute use the same coordinates. In other words, they align.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.CreationDate","title":"CreationDate  <code>property</code>","text":"<pre><code>CreationDate: Optional[datetime]\n</code></pre> <p>Defines the creation date and time of the file.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.GenerationSoftware","title":"GenerationSoftware  <code>property</code>","text":"<pre><code>GenerationSoftware: Optional[GenerationSoftwareAttribute]\n</code></pre> <p>Identifies the software creating the file.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.ProjectId","title":"ProjectId  <code>property</code>","text":"<pre><code>ProjectId: Optional[str]\n</code></pre> <p>Defines project and revisions.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.FileAttributes.MD5","title":"MD5  <code>property</code>","text":"<pre><code>MD5: Optional[str]\n</code></pre> <p>Sets the MD5 file signature or checksum.</p> <p>Standard file attribute.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.AperFunctionAttribute","title":"AperFunctionAttribute","text":"<p>             Bases: <code>StandardAttributeBase</code></p> <p>Function of objects created with the apertures, e.g. SMD pad.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class AperFunctionAttribute(StandardAttributeBase):\n    \"\"\"Function of objects created with the apertures, e.g. SMD pad.\"\"\"\n\n    class Function(Enum):\n        \"\"\"Type of drilling.\"\"\"\n\n        ViaDrill = \"ViaDrill\"\n        BackDrill = \"BackDrill\"\n        ComponentDrill = \"ComponentDrill\"\n        MechanicalDrill = \"MechanicalDrill\"\n        CastellatedDrill = \"CastellatedDrill\"\n        OtherDrill = \"OtherDrill\"\n        ComponentPad = \"ComponentPad\"\n        SMDPad = \"SMDPad\"\n        BGAPad = \"BGAPad\"\n        ConnectorPad = \"ConnectorPad\"\n        HeatsinkPad = \"HeatsinkPad\"\n        ViaPad = \"ViaPad\"\n        TestPad = \"TestPad\"\n        CastellatedPad = \"CastellatedPad\"\n        FiducialPad = \"FiducialPad\"\n        ThermalReliefPad = \"ThermalReliefPad\"\n        WasherPad = \"WasherPad\"\n        AntiPad = \"AntiPad\"\n        OtherPad = \"OtherPad\"\n        Conductor = \"Conductor\"\n        EtchedComponent = \"EtchedComponent\"\n        NonConductor = \"NonConductor\"\n        CopperBalancing = \"CopperBalancing\"\n        Border = \"Border\"\n        OtherCopper = \"OtherCopper\"\n        ComponentMain = \"ComponentMain\"\n        ComponentOutline = \"ComponentOutline\"\n        ComponentPin = \"ComponentPin\"\n        Profile = \"Profile\"\n        Material = \"Material\"\n        NonMaterial = \"NonMaterial\"\n        Other = \"Other\"\n\n    function: Optional[AperFunctionAttribute.Function]\n    field: str = Field(default=\"\")\n\n    @classmethod\n    def parse(cls, content: str) -&gt; Self:\n        \"\"\"Return original content.\"\"\"\n        parts = dict(enumerate(content.split(\",\", 1)))\n        return cls(\n            function=cls.Function(parts[0]),\n            field=parts.get(1, \"\"),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.AperFunctionAttribute.Function","title":"Function","text":"<p>             Bases: <code>Enum</code></p> <p>Type of drilling.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class Function(Enum):\n    \"\"\"Type of drilling.\"\"\"\n\n    ViaDrill = \"ViaDrill\"\n    BackDrill = \"BackDrill\"\n    ComponentDrill = \"ComponentDrill\"\n    MechanicalDrill = \"MechanicalDrill\"\n    CastellatedDrill = \"CastellatedDrill\"\n    OtherDrill = \"OtherDrill\"\n    ComponentPad = \"ComponentPad\"\n    SMDPad = \"SMDPad\"\n    BGAPad = \"BGAPad\"\n    ConnectorPad = \"ConnectorPad\"\n    HeatsinkPad = \"HeatsinkPad\"\n    ViaPad = \"ViaPad\"\n    TestPad = \"TestPad\"\n    CastellatedPad = \"CastellatedPad\"\n    FiducialPad = \"FiducialPad\"\n    ThermalReliefPad = \"ThermalReliefPad\"\n    WasherPad = \"WasherPad\"\n    AntiPad = \"AntiPad\"\n    OtherPad = \"OtherPad\"\n    Conductor = \"Conductor\"\n    EtchedComponent = \"EtchedComponent\"\n    NonConductor = \"NonConductor\"\n    CopperBalancing = \"CopperBalancing\"\n    Border = \"Border\"\n    OtherCopper = \"OtherCopper\"\n    ComponentMain = \"ComponentMain\"\n    ComponentOutline = \"ComponentOutline\"\n    ComponentPin = \"ComponentPin\"\n    Profile = \"Profile\"\n    Material = \"Material\"\n    NonMaterial = \"NonMaterial\"\n    Other = \"Other\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.AperFunctionAttribute.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(content: str) -&gt; Self\n</code></pre> <p>Return original content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>@classmethod\ndef parse(cls, content: str) -&gt; Self:\n    \"\"\"Return original content.\"\"\"\n    parts = dict(enumerate(content.split(\",\", 1)))\n    return cls(\n        function=cls.Function(parts[0]),\n        field=parts.get(1, \"\"),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ApertureAttributes","title":"ApertureAttributes","text":"<p>             Bases: <code>AttributesDictionary</code></p> <p>Aperture attributes.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class ApertureAttributes(AttributesDictionary):\n    \"\"\"Aperture attributes.\"\"\"\n\n    @property\n    def AperFunction(self) -&gt; Optional[AperFunctionAttribute]:  # noqa: N802\n        \"\"\"Function of objects created with the apertures, e.g. SMD pad.\"\"\"\n        if (val := self.get(\".AperFunction\")) is not None:\n            return AperFunctionAttribute.parse(val)\n        return None\n\n    @property\n    def DrillTolerance(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Tolerance of drill holes.\"\"\"\n        return self.get(\".DrillTolerance\")\n\n    @property\n    def FlashText(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"Provides the source text and font for flashes representing text.\"\"\"\n        return self.get(\".FlashText\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ApertureAttributes.AperFunction","title":"AperFunction  <code>property</code>","text":"<pre><code>AperFunction: Optional[AperFunctionAttribute]\n</code></pre> <p>Function of objects created with the apertures, e.g. SMD pad.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ApertureAttributes.DrillTolerance","title":"DrillTolerance  <code>property</code>","text":"<pre><code>DrillTolerance: Optional[str]\n</code></pre> <p>Tolerance of drill holes.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ApertureAttributes.FlashText","title":"FlashText  <code>property</code>","text":"<pre><code>FlashText: Optional[str]\n</code></pre> <p>Provides the source text and font for flashes representing text.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.PAttribute","title":"PAttribute","text":"<p>             Bases: <code>StandardAttributeBase</code></p> <p>The .P object attribute attaches the reference descriptor and pin number of a component pin to a pad on an outer copper layer or a ComponentPin in a component layer.</p> <p>The syntax is: <pre><code>&lt;.P Attribute&gt; = .P,&lt;refdes&gt;,&lt;number&gt;[,&lt;function&gt;]\n</code></pre></p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class PAttribute(StandardAttributeBase):\n    \"\"\"The .P object attribute attaches the reference descriptor and pin number of a\n    component pin to a pad on an outer copper layer or a ComponentPin in a component\n    layer.\n\n    The syntax is:\n    ```\n    &lt;.P Attribute&gt; = .P,&lt;refdes&gt;,&lt;number&gt;[,&lt;function&gt;]\n    ```\n    \"\"\"\n\n    refdes: str\n    number: str\n    function: Optional[str]\n\n    @classmethod\n    def parse(cls, content: str) -&gt; Self:\n        \"\"\"Return original content.\"\"\"\n        parts = dict(enumerate(content.split(\",\")))\n        return cls(refdes=parts[0], number=parts[1], function=parts.get(2))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.PAttribute.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(content: str) -&gt; Self\n</code></pre> <p>Return original content.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>@classmethod\ndef parse(cls, content: str) -&gt; Self:\n    \"\"\"Return original content.\"\"\"\n    parts = dict(enumerate(content.split(\",\")))\n    return cls(refdes=parts[0], number=parts[1], function=parts.get(2))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ObjectAttributes","title":"ObjectAttributes","text":"<p>             Bases: <code>AttributesDictionary</code></p> <p>Object attributes.</p> Source code in <code>src/pygerber/gerberx3/parser2/attributes2.py</code> <pre><code>class ObjectAttributes(AttributesDictionary):\n    \"\"\"Object attributes.\"\"\"\n\n    @property\n    def N(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"The CAD net name of a conducting object, e.g. Clk13.\"\"\"\n        return self.get(\".N\")\n\n    @property\n    def P(self) -&gt; Optional[PAttribute]:  # noqa: N802\n        \"\"\"The pin number (or name) and reference descriptor of a component pad on an\n        outer layer, e.g. IC3,7.\n        \"\"\"\n        if (val := self.get(\".P\")) is not None:\n            return PAttribute.parse(val)\n        return None\n\n    @property\n    def C(self) -&gt; Optional[str]:  # noqa: N802\n        \"\"\"The component reference designator linked to an object, e.g. C2.\"\"\"\n        return self.get(\".C\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ObjectAttributes.N","title":"N  <code>property</code>","text":"<pre><code>N: Optional[str]\n</code></pre> <p>The CAD net name of a conducting object, e.g. Clk13.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ObjectAttributes.P","title":"P  <code>property</code>","text":"<pre><code>P: Optional[PAttribute]\n</code></pre> <p>The pin number (or name) and reference descriptor of a component pad on an outer layer, e.g. IC3,7.</p>"},{"location":"reference/pygerber/gerberx3/parser2/attributes2.html#pygerber.gerberx3.parser2.attributes2.ObjectAttributes.C","title":"C  <code>property</code>","text":"<pre><code>C: Optional[str]\n</code></pre> <p>The component reference designator linked to an object, e.g. C2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html","title":"command_buffer2","text":""},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2","title":"command_buffer2","text":"<p>Module contains definition of class for buffering draw commands.</p>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2","title":"CommandBuffer2","text":"<p>Container for buffering draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>class CommandBuffer2:\n    \"\"\"Container for buffering draw commands.\"\"\"\n\n    def __init__(self, commands: Optional[list[Command2]] = None) -&gt; None:\n        self.commands: list[Command2] = [] if commands is None else commands\n\n    @classmethod\n    def factory(cls, context: Parser2Context) -&gt; Self:  # noqa: ARG003\n        \"\"\"CommandBuffer2 factory.\"\"\"\n        return cls(commands=[])\n\n    def add_command(self, __command: Command2) -&gt; None:\n        \"\"\"Add draw command to command buffer.\"\"\"\n        self.commands.append(__command)\n\n    def get_readonly(self) -&gt; ReadonlyCommandBuffer2:\n        \"\"\"Make buffer read-only.\"\"\"\n        return ReadonlyCommandBuffer2(commands=self.commands)\n\n    def copy(self) -&gt; CommandBuffer2:\n        \"\"\"Create copy of command buffer.\"\"\"\n        return CommandBuffer2(commands=self.commands.copy())\n\n    def __iter__(self) -&gt; Iterator[Command2]:\n        \"\"\"Iterate over buffered draw commands.\"\"\"\n        yield from self.commands\n\n    def __getitem__(self, index: int) -&gt; Command2:\n        \"\"\"Get item by index from commands.\"\"\"\n        return self.commands[index]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.factory","title":"factory  <code>classmethod</code>","text":"<pre><code>factory(context: Parser2Context) -&gt; Self\n</code></pre> <p>CommandBuffer2 factory.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>@classmethod\ndef factory(cls, context: Parser2Context) -&gt; Self:  # noqa: ARG003\n    \"\"\"CommandBuffer2 factory.\"\"\"\n    return cls(commands=[])\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.add_command","title":"add_command","text":"<pre><code>add_command(__command: Command2) -&gt; None\n</code></pre> <p>Add draw command to command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def add_command(self, __command: Command2) -&gt; None:\n    \"\"\"Add draw command to command buffer.\"\"\"\n    self.commands.append(__command)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.get_readonly","title":"get_readonly","text":"<pre><code>get_readonly() -&gt; ReadonlyCommandBuffer2\n</code></pre> <p>Make buffer read-only.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_readonly(self) -&gt; ReadonlyCommandBuffer2:\n    \"\"\"Make buffer read-only.\"\"\"\n    return ReadonlyCommandBuffer2(commands=self.commands)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.copy","title":"copy","text":"<pre><code>copy() -&gt; CommandBuffer2\n</code></pre> <p>Create copy of command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def copy(self) -&gt; CommandBuffer2:\n    \"\"\"Create copy of command buffer.\"\"\"\n    return CommandBuffer2(commands=self.commands.copy())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Command2]\n</code></pre> <p>Iterate over buffered draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def __iter__(self) -&gt; Iterator[Command2]:\n    \"\"\"Iterate over buffered draw commands.\"\"\"\n    yield from self.commands\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.CommandBuffer2.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: int) -&gt; Command2\n</code></pre> <p>Get item by index from commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def __getitem__(self, index: int) -&gt; Command2:\n    \"\"\"Get item by index from commands.\"\"\"\n    return self.commands[index]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2","title":"ReadonlyCommandBuffer2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Read only command buffer proxy.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>class ReadonlyCommandBuffer2(FrozenGeneralModel):\n    \"\"\"Read only command buffer proxy.\"\"\"\n\n    commands: List[Command2] = Field(default_factory=list)\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return length of buffered commands.\"\"\"\n        return len(self.commands)\n\n    def __iter__(self) -&gt; Iterator[Command2]:  # type: ignore[override]\n        \"\"\"Iterate over buffered draw commands.\"\"\"\n        yield from self.commands\n\n    def __getitem__(self, index: int) -&gt; Command2:\n        \"\"\"Get item by index from commands.\"\"\"\n        return self.commands[index]\n\n    def debug_buffer_to_json(self, indent: int = 4) -&gt; str:\n        \"\"\"Convert buffered draw commands to JSON.\"\"\"\n        command_chain = \",\\n\".join(c.command_to_json() for c in self)\n        return f\"[\\n{textwrap.indent(command_chain, ' ' * indent)}\\n]\"\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get new command buffer with all commands mirrored.\"\"\"\n        return self.model_copy(\n            update={\"commands\": [c.get_mirrored(mirror) for c in self.commands]},\n        )\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get new command buffer with all commands transposed.\"\"\"\n        return self.model_copy(\n            update={\"commands\": [c.get_transposed(vector) for c in self.commands]},\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\"commands\": [c.get_rotated(angle) for c in self.commands]},\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        return self.model_copy(\n            update={\"commands\": [c.get_scaled(scale) for c in self.commands]},\n        )\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Get bounding box of command buffer.\"\"\"\n        bbox: Optional[BoundingBox] = None\n\n        for command in self:\n            if bbox is None:\n                bbox = command.get_bounding_box()\n            else:\n                bbox += command.get_bounding_box()\n\n        return BoundingBox.NULL if bbox is None else bbox\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return length of buffered commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return length of buffered commands.\"\"\"\n    return len(self.commands)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Command2]\n</code></pre> <p>Iterate over buffered draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def __iter__(self) -&gt; Iterator[Command2]:  # type: ignore[override]\n    \"\"\"Iterate over buffered draw commands.\"\"\"\n    yield from self.commands\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: int) -&gt; Command2\n</code></pre> <p>Get item by index from commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def __getitem__(self, index: int) -&gt; Command2:\n    \"\"\"Get item by index from commands.\"\"\"\n    return self.commands[index]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.debug_buffer_to_json","title":"debug_buffer_to_json","text":"<pre><code>debug_buffer_to_json(indent: int = 4) -&gt; str\n</code></pre> <p>Convert buffered draw commands to JSON.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def debug_buffer_to_json(self, indent: int = 4) -&gt; str:\n    \"\"\"Convert buffered draw commands to JSON.\"\"\"\n    command_chain = \",\\n\".join(c.command_to_json() for c in self)\n    return f\"[\\n{textwrap.indent(command_chain, ' ' * indent)}\\n]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get new command buffer with all commands mirrored.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get new command buffer with all commands mirrored.\"\"\"\n    return self.model_copy(\n        update={\"commands\": [c.get_mirrored(mirror) for c in self.commands]},\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get new command buffer with all commands transposed.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get new command buffer with all commands transposed.\"\"\"\n    return self.model_copy(\n        update={\"commands\": [c.get_transposed(vector) for c in self.commands]},\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\"commands\": [c.get_rotated(angle) for c in self.commands]},\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    return self.model_copy(\n        update={\"commands\": [c.get_scaled(scale) for c in self.commands]},\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/command_buffer2.html#pygerber.gerberx3.parser2.command_buffer2.ReadonlyCommandBuffer2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Get bounding box of command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/command_buffer2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Get bounding box of command buffer.\"\"\"\n    bbox: Optional[BoundingBox] = None\n\n    for command in self:\n        if bbox is None:\n            bbox = command.get_bounding_box()\n        else:\n            bbox += command.get_bounding_box()\n\n    return BoundingBox.NULL if bbox is None else bbox\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html","title":"context2","text":""},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2","title":"context2","text":"<p>Gerber AST parser, version 2, parsing context.</p>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context","title":"Parser2Context","text":"<p>Context used by Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>class Parser2Context:\n    \"\"\"Context used by Gerber AST parser, version 2.\"\"\"\n\n    def __init__(self, options: Parser2ContextOptions | None = None) -&gt; None:\n        self.options = Parser2ContextOptions() if options is None else options\n        self.state: State2 = (\n            State2()\n            if self.options.initial_state is None\n            else self.options.initial_state\n        )\n        self.main_command_buffer: CommandBuffer2 = (\n            CommandBuffer2()\n            if self.options.initial_main_command_buffer is None\n            else self.options.initial_main_command_buffer\n        )\n        self.region_command_buffer: Optional[CommandBuffer2] = None\n        self.block_command_buffer_stack: list[CommandBuffer2] = []\n        self.block_state_stack: list[State2] = []\n        self.step_and_repeat_command_buffer: Optional[CommandBuffer2] = None\n        self.state_before_step_and_repeat: Optional[State2] = None\n        self.macro_statement_buffer: Optional[StatementBuffer2] = None\n        self.macro_eval_buffer: Optional[CommandBuffer2] = None\n        self.macro_variable_buffer: dict[str, Decimal] = {}\n        self.hooks: Parser2HooksBase = (\n            Parser2Hooks() if self.options.hooks is None else self.options.hooks\n        )\n        self.current_token: Optional[Token] = None\n        self.reached_program_stop: bool = False\n        self.reached_optional_stop: bool = False\n        self.reached_end_of_file: bool = False\n\n        self.file_attributes = FileAttributes()\n        self.aperture_attributes = ApertureAttributes()\n        self.object_attributes = ObjectAttributes()\n\n        self.macro_expressions = (\n            Parser2ContextMacroExpressionFactories()\n            if self.options.custom_macro_expression_factories is None\n            else self.options.custom_macro_expression_factories\n        )\n        self.apertures: dict[ApertureID, Aperture2] = {\n            REGION_OUTLINE_DEFAULT_APERTURE_ID: NoCircle2(\n                identifier=REGION_OUTLINE_DEFAULT_APERTURE_ID,\n                diameter=Offset.NULL,\n                hole_diameter=None,\n            ),\n        }\n\n    def push_block_command_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.block_command_buffer_stack.append(\n            CommandBuffer2()\n            if self.options.initial_block_command_buffer is None\n            else self.options.initial_block_command_buffer.copy(),\n        )\n\n    def pop_block_command_buffer(self) -&gt; CommandBuffer2:\n        \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n        if len(self.block_command_buffer_stack) == 0:\n            raise ReferencedNotInitializedBlockBufferError(self.current_token)\n        return self.block_command_buffer_stack.pop()\n\n    def first_block_command_buffer(self) -&gt; CommandBuffer2:\n        \"\"\"Return first (topmost) block aperture command buffer.\"\"\"\n        if len(self.block_command_buffer_stack) == 0:\n            raise ReferencedNotInitializedBlockBufferError(self.current_token)\n        return self.block_command_buffer_stack[-1]\n\n    def push_block_state(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.block_state_stack.append(self.state)\n\n    def pop_block_state(self) -&gt; State2:\n        \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n        if len(self.block_state_stack) == 0:\n            raise ReferencedNotInitializedBlockBufferError(self.current_token)\n        return self.block_state_stack.pop()\n\n    def set_region_command_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.region_command_buffer = (\n            CommandBuffer2()\n            if self.options.initial_region_command_buffer is None\n            else self.options.initial_region_command_buffer.copy()\n        )\n\n    def unset_region_command_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.region_command_buffer = None\n\n    def get_region_command_buffer(self) -&gt; CommandBuffer2:\n        \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n        if self.region_command_buffer is None:\n            raise RegionNotInitializedError(self.current_token)\n        return self.region_command_buffer\n\n    def set_step_and_repeat_command_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.step_and_repeat_command_buffer = (\n            CommandBuffer2()\n            if self.options.initial_region_command_buffer is None\n            else self.options.initial_region_command_buffer.copy()\n        )\n\n    def unset_step_and_repeat_command_buffer(self) -&gt; None:\n        \"\"\"Unset step and repeat command buffer.\"\"\"\n        self.step_and_repeat_command_buffer = None\n\n    def get_step_and_repeat_command_buffer(self) -&gt; CommandBuffer2:\n        \"\"\"Return step and repeat command buffer.\"\"\"\n        if self.step_and_repeat_command_buffer is None:\n            raise StepAndRepeatNotInitializedError(self.current_token)\n        return self.step_and_repeat_command_buffer\n\n    def get_state_before_step_and_repeat(self) -&gt; State2:\n        \"\"\"Return step and repeat command buffer.\"\"\"\n        if self.state_before_step_and_repeat is None:\n            raise StepAndRepeatNotInitializedError(self.current_token)\n        return self.state_before_step_and_repeat\n\n    def unset_state_before_step_and_repeat(self) -&gt; None:\n        \"\"\"Unset step and repeat command buffer.\"\"\"\n        self.state_before_step_and_repeat = None\n\n    def set_state_before_step_and_repeat(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.state_before_step_and_repeat = self.state\n\n    def reset_state_to_pre_step_and_repeat(self) -&gt; None:\n        \"\"\"Set state to state before step and repeat.\"\"\"\n        self.set_state(self.get_state_before_step_and_repeat())\n\n    def get_macro_statement_buffer(self) -&gt; StatementBuffer2:\n        \"\"\"Return macro statement buffer.\"\"\"\n        if self.macro_statement_buffer is None:\n            raise MacroNotInitializedError(self.current_token)\n        return self.macro_statement_buffer\n\n    def set_macro_statement_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.macro_statement_buffer = (\n            StatementBuffer2()\n            if self.options.initial_macro_statement_buffer is None\n            else self.options.initial_macro_statement_buffer\n        )\n\n    def unset_macro_statement_buffer(self) -&gt; None:\n        \"\"\"Unset step and repeat command buffer.\"\"\"\n        self.macro_statement_buffer = None\n\n    def get_macro_eval_buffer(self) -&gt; CommandBuffer2:\n        \"\"\"Return macro evaluation buffer.\"\"\"\n        if self.macro_eval_buffer is None:\n            raise MacroNotInitializedError(self.current_token)\n        return self.macro_eval_buffer\n\n    def set_macro_eval_buffer(self) -&gt; None:\n        \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n        self.macro_eval_buffer = (\n            CommandBuffer2()\n            if self.options.initial_macro_eval_buffer is None\n            else self.options.initial_macro_eval_buffer\n        )\n\n    def unset_macro_eval_buffer(self) -&gt; None:\n        \"\"\"Unset step and repeat command buffer.\"\"\"\n        self.macro_eval_buffer = None\n\n    def skip_token(self) -&gt; NoReturn:\n        \"\"\"Skip this token.\"\"\"\n        raise SkipTokenInterrupt\n\n    def halt_parser(self) -&gt; NoReturn:\n        \"\"\"Halt parsing process.\"\"\"\n        raise ExitParsingProcess2Interrupt\n\n    def get_hooks(self) -&gt; Parser2HooksBase:\n        \"\"\"Get hooks object.\"\"\"\n        return self.hooks\n\n    def get_current_token(self) -&gt; Optional[Token]:\n        \"\"\"Get current token object.\"\"\"\n        return self.current_token\n\n    def set_current_token(self, token: Token) -&gt; None:\n        \"\"\"Get current token object.\"\"\"\n        self.current_token = token\n\n    def set_state(self, state: State2) -&gt; None:\n        \"\"\"Set parser state.\"\"\"\n        self.state = state\n\n    def add_command(self, __command: Command2) -&gt; None:\n        \"\"\"Add draw command to command buffer.\"\"\"\n        if self.get_is_region():\n            self.get_region_command_buffer().add_command(__command)\n            return\n\n        if self.get_is_aperture_block():\n            self.first_block_command_buffer().add_command(__command)\n            return\n\n        if self.get_is_step_and_repeat():\n            self.get_step_and_repeat_command_buffer().add_command(__command)\n            return\n\n        self.main_command_buffer.add_command(__command)\n\n    def get_state(self) -&gt; State2:\n        \"\"\"Get parser state.\"\"\"\n        return self.state\n\n    def get_draw_units(self) -&gt; Unit:\n        \"\"\"Get draw_units property value.\"\"\"\n        return self.get_state().get_draw_units()\n\n    def set_draw_units(self, draw_units: Unit) -&gt; None:\n        \"\"\"Set the draw_units property value.\"\"\"\n        return self.set_state(self.get_state().set_draw_units(draw_units))\n\n    def get_coordinate_parser(self) -&gt; CoordinateParser:\n        \"\"\"Get coordinate_parser property value.\"\"\"\n        return self.get_state().get_coordinate_parser()\n\n    def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; None:\n        \"\"\"Set the coordinate_parser property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_coordinate_parser(coordinate_parser),\n        )\n\n    def get_polarity(self) -&gt; Polarity:\n        \"\"\"Get polarity property value.\"\"\"\n        return self.get_state().get_polarity()\n\n    def set_polarity(self, polarity: Polarity) -&gt; None:\n        \"\"\"Set the polarity property value.\"\"\"\n        return self.set_state(self.get_state().set_polarity(polarity))\n\n    def get_mirroring(self) -&gt; Mirroring:\n        \"\"\"Get mirroring property value.\"\"\"\n        return self.get_state().get_mirroring()\n\n    def set_mirroring(self, mirroring: Mirroring) -&gt; None:\n        \"\"\"Set the mirroring property value.\"\"\"\n        return self.set_state(self.get_state().set_mirroring(mirroring))\n\n    def get_rotation(self) -&gt; Decimal:\n        \"\"\"Get rotation property value.\"\"\"\n        return self.get_state().get_rotation()\n\n    def set_rotation(self, rotation: Decimal) -&gt; None:\n        \"\"\"Set the rotation property value.\"\"\"\n        return self.set_state(self.get_state().set_rotation(rotation))\n\n    def get_scaling(self) -&gt; Decimal:\n        \"\"\"Get scaling property value.\"\"\"\n        return self.get_state().get_scaling()\n\n    def set_scaling(self, scaling: Decimal) -&gt; None:\n        \"\"\"Set the scaling property value.\"\"\"\n        return self.set_state(self.get_state().set_scaling(scaling))\n\n    def get_is_output_image_negation_required(self) -&gt; bool:\n        \"\"\"Get is_output_image_negation_required property value.\"\"\"\n        return self.get_state().get_is_output_image_negation_required()\n\n    def set_is_output_image_negation_required(self, *, value: bool) -&gt; None:\n        \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_is_output_image_negation_required(value),\n        )\n\n    def get_image_name(self) -&gt; Optional[str]:\n        \"\"\"Get image_name property value.\"\"\"\n        return self.get_state().get_image_name()\n\n    def set_image_name(self, image_name: Optional[str]) -&gt; None:\n        \"\"\"Set the image_name property value.\"\"\"\n        return self.set_state(self.get_state().set_image_name(image_name))\n\n    def get_file_name(self) -&gt; Optional[str]:\n        \"\"\"Get file_name property value.\"\"\"\n        return self.get_state().get_file_name()\n\n    def set_file_name(self, file_name: Optional[str]) -&gt; None:\n        \"\"\"Set the file_name property value.\"\"\"\n        return self.set_state(self.get_state().set_file_name(file_name))\n\n    def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n        \"\"\"Get axis_correspondence property value.\"\"\"\n        return self.get_state().get_axis_correspondence()\n\n    def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; None:\n        \"\"\"Set the axis_correspondence property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_axis_correspondence(axis_correspondence),\n        )\n\n    def get_draw_mode(self) -&gt; DrawMode:\n        \"\"\"Get draw_mode property value.\"\"\"\n        return self.get_state().get_draw_mode()\n\n    def set_draw_mode(self, draw_mode: DrawMode) -&gt; None:\n        \"\"\"Set the draw_mode property value.\"\"\"\n        return self.set_state(self.get_state().set_draw_mode(draw_mode))\n\n    def get_is_region(self) -&gt; bool:\n        \"\"\"Get is_region property value.\"\"\"\n        return self.get_state().get_is_region()\n\n    def set_is_region(self, is_region: bool) -&gt; None:  # noqa: FBT001\n        \"\"\"Set the is_region property value.\"\"\"\n        return self.set_state(self.get_state().set_is_region(is_region))\n\n    def get_is_aperture_block(self) -&gt; bool:\n        \"\"\"Get is_aperture_block property value.\"\"\"\n        return self.get_state().get_is_aperture_block()\n\n    def set_is_aperture_block(self, is_aperture_block: bool) -&gt; None:  # noqa: FBT001\n        \"\"\"Set the is_aperture_block property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_is_aperture_block(is_aperture_block),\n        )\n\n    def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n        \"\"\"Get is_aperture_block property value.\"\"\"\n        return self.get_state().get_aperture_block_id()\n\n    def set_aperture_block_id(self, aperture_block_id: Optional[ApertureID]) -&gt; None:\n        \"\"\"Set the is_aperture_block property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_aperture_block_id(aperture_block_id),\n        )\n\n    def get_is_multi_quadrant(self) -&gt; bool:\n        \"\"\"Get is_aperture_block property value.\"\"\"\n        return self.get_state().get_is_multi_quadrant()\n\n    def set_is_multi_quadrant(self, is_multi_quadrant: bool) -&gt; None:  # noqa: FBT001\n        \"\"\"Set the is_aperture_block property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_is_multi_quadrant(is_multi_quadrant),\n        )\n\n    def get_is_step_and_repeat(self) -&gt; bool:\n        \"\"\"Get is_step_and_repeat property value.\"\"\"\n        return self.get_state().get_is_step_and_repeat()\n\n    def set_is_step_and_repeat(self, is_step_and_repeat: bool) -&gt; None:  # noqa: FBT001\n        \"\"\"Set the is_step_and_repeat property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_is_step_and_repeat(is_step_and_repeat),\n        )\n\n    def get_x_repeat(self) -&gt; int:\n        \"\"\"Get x_step property value.\"\"\"\n        return self.get_state().get_x_repeat()\n\n    def set_x_repeat(self, x_repeat: int) -&gt; None:\n        \"\"\"Set the x_repeat property value.\"\"\"\n        return self.set_state(self.get_state().set_x_repeat(x_repeat))\n\n    def get_y_repeat(self) -&gt; int:\n        \"\"\"Get y_step property value.\"\"\"\n        return self.get_state().get_y_repeat()\n\n    def set_y_repeat(self, y_repeat: int) -&gt; None:\n        \"\"\"Set the y_repeat property value.\"\"\"\n        return self.set_state(self.get_state().set_y_repeat(y_repeat))\n\n    def get_x_step(self) -&gt; Offset:\n        \"\"\"Get x_step property value.\"\"\"\n        return self.get_state().get_x_step()\n\n    def set_x_step(self, x_step: Offset) -&gt; None:\n        \"\"\"Set the x_step property value.\"\"\"\n        return self.set_state(self.get_state().set_x_step(x_step))\n\n    def get_y_step(self) -&gt; Offset:\n        \"\"\"Get y_step property value.\"\"\"\n        return self.get_state().get_y_step()\n\n    def set_y_step(self, y_step: Offset) -&gt; None:\n        \"\"\"Set the y_step property value.\"\"\"\n        return self.set_state(self.get_state().set_y_step(y_step))\n\n    def get_current_position(self) -&gt; Vector2D:\n        \"\"\"Get current_position property value.\"\"\"\n        return self.get_state().get_current_position()\n\n    def set_current_position(self, current_position: Vector2D) -&gt; None:\n        \"\"\"Set the current_position property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_current_position(current_position),\n        )\n\n    def get_current_aperture_id(self) -&gt; Optional[ApertureID]:\n        \"\"\"Get current_aperture property value.\"\"\"\n        current_aperture_id = self.get_state().get_current_aperture_id()\n        if current_aperture_id is None and self.get_is_region():\n            return REGION_OUTLINE_DEFAULT_APERTURE_ID\n\n        return current_aperture_id\n\n    def set_current_aperture_id(self, current_aperture: Optional[ApertureID]) -&gt; None:\n        \"\"\"Set the current_aperture property value.\"\"\"\n        return self.set_state(\n            self.get_state().set_current_aperture_id(current_aperture),\n        )\n\n    def get_aperture(\n        self,\n        __key: ApertureID,\n        transform: ApertureTransform,\n    ) -&gt; Aperture2:\n        \"\"\"Get apertures property value.\"\"\"\n        key_with_transform = ApertureID(\n            f\"{__key}+{transform.get_transform_key()}\",\n        )\n        transformed_aperture = self.apertures.get(key_with_transform)\n        if transformed_aperture is None:\n            # Retrieve aperture with no transform and create a transformed copy.\n            # If transform is all default, no copy is made.\n            aperture = self._get_aperture(__key)\n            transformed_aperture = (\n                aperture.get_mirrored(transform.mirroring)\n                .get_rotated(transform.rotation)\n                .get_scaled(transform.scaling)\n            )\n            self.set_aperture(key_with_transform, transformed_aperture)\n\n        return transformed_aperture\n\n    def _get_aperture(self, __key: ApertureID) -&gt; Aperture2:\n        try:\n            aperture = self.apertures[__key]\n        except KeyError as e:\n            raise ApertureNotDefined2Error(self.current_token) from e\n        return aperture\n\n    def set_aperture(self, __key: ApertureID, __value: Aperture2) -&gt; None:\n        \"\"\"Set the apertures property value.\"\"\"\n        self.apertures[__key] = __value\n\n    def get_macro(self, __key: str) -&gt; ApertureMacro2:\n        \"\"\"Get macro property value.\"\"\"\n        try:\n            return self.get_state().get_macro(__key)\n        except KeyError as e:\n            raise MacroNotDefinedError(self.current_token) from e\n\n    def set_macro(self, __key: str, __value: ApertureMacro2) -&gt; None:\n        \"\"\"Set the macro property value.\"\"\"\n        return self.set_state(self.get_state().set_macro(__key, __value))\n\n    def set_reached_program_stop(self) -&gt; None:\n        \"\"\"Set flag indicating that M00 token was reached.\"\"\"\n        self.reached_program_stop = True\n\n    def get_reached_program_stop(self) -&gt; bool:\n        \"\"\"Get flag indicating that M00 token was reached.\"\"\"\n        return self.reached_program_stop\n\n    def set_reached_optional_stop(self) -&gt; None:\n        \"\"\"Set flag indicating that M01 token was reached.\"\"\"\n        self.reached_optional_stop = True\n\n    def get_reached_optional_stop(self) -&gt; bool:\n        \"\"\"Get flag indicating that M01 token was reached.\"\"\"\n        return self.reached_optional_stop\n\n    def set_reached_end_of_file(self) -&gt; None:\n        \"\"\"Set flag indicating that M02 end of file was reached.\"\"\"\n        self.reached_end_of_file = True\n\n    def get_reached_end_of_file(self) -&gt; bool:\n        \"\"\"Get flag indicating that M02 end of file was reached.\"\"\"\n        return self.reached_end_of_file\n\n    def get_file_attribute(self, key: str) -&gt; Optional[str]:\n        \"\"\"Get file attributes property.\"\"\"\n        return self.file_attributes.get(key)\n\n    def delete_file_attribute(self, key: str) -&gt; None:\n        \"\"\"Get file attributes property.\"\"\"\n        self.file_attributes = self.file_attributes.delete(key)\n\n    def set_file_attribute(self, key: str, value: Optional[str]) -&gt; None:\n        \"\"\"Set file attributes property.\"\"\"\n        self.file_attributes = self.file_attributes.update(key, value)\n\n    def get_aperture_attribute(self, key: str) -&gt; Optional[str]:\n        \"\"\"Get aperture attributes property.\"\"\"\n        return self.aperture_attributes.get(key)\n\n    def delete_aperture_attribute(self, key: str) -&gt; None:\n        \"\"\"Delete aperture attributes property.\"\"\"\n        self.aperture_attributes = self.aperture_attributes.delete(key)\n\n    def clear_aperture_attributes(self) -&gt; None:\n        \"\"\"Clear aperture attributes property.\"\"\"\n        self.aperture_attributes = ApertureAttributes()\n\n    def set_aperture_attribute(self, key: str, value: Optional[str]) -&gt; None:\n        \"\"\"Set aperture attributes property.\"\"\"\n        self.aperture_attributes = self.aperture_attributes.update(key, value)\n\n    def get_object_attribute(self, key: str) -&gt; Optional[str]:\n        \"\"\"Get object attributes property.\"\"\"\n        return self.object_attributes.get(key)\n\n    def delete_object_attribute(self, key: str) -&gt; None:\n        \"\"\"Delete object attributes property.\"\"\"\n        self.object_attributes = self.object_attributes.delete(key)\n\n    def set_object_attribute(self, key: str, value: Optional[str]) -&gt; None:\n        \"\"\"Set object attributes property.\"\"\"\n        self.object_attributes = self.object_attributes.update(key, value)\n\n    def clear_object_attributes(self) -&gt; None:\n        \"\"\"Clear object attributes property.\"\"\"\n        self.object_attributes = ObjectAttributes()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.push_block_command_buffer","title":"push_block_command_buffer","text":"<pre><code>push_block_command_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def push_block_command_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.block_command_buffer_stack.append(\n        CommandBuffer2()\n        if self.options.initial_block_command_buffer is None\n        else self.options.initial_block_command_buffer.copy(),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.pop_block_command_buffer","title":"pop_block_command_buffer","text":"<pre><code>pop_block_command_buffer() -&gt; CommandBuffer2\n</code></pre> <p>Return latest block aperture command buffer and delete it from the stack.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def pop_block_command_buffer(self) -&gt; CommandBuffer2:\n    \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n    if len(self.block_command_buffer_stack) == 0:\n        raise ReferencedNotInitializedBlockBufferError(self.current_token)\n    return self.block_command_buffer_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.first_block_command_buffer","title":"first_block_command_buffer","text":"<pre><code>first_block_command_buffer() -&gt; CommandBuffer2\n</code></pre> <p>Return first (topmost) block aperture command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def first_block_command_buffer(self) -&gt; CommandBuffer2:\n    \"\"\"Return first (topmost) block aperture command buffer.\"\"\"\n    if len(self.block_command_buffer_stack) == 0:\n        raise ReferencedNotInitializedBlockBufferError(self.current_token)\n    return self.block_command_buffer_stack[-1]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.push_block_state","title":"push_block_state","text":"<pre><code>push_block_state() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def push_block_state(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.block_state_stack.append(self.state)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.pop_block_state","title":"pop_block_state","text":"<pre><code>pop_block_state() -&gt; State2\n</code></pre> <p>Return latest block aperture command buffer and delete it from the stack.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def pop_block_state(self) -&gt; State2:\n    \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n    if len(self.block_state_stack) == 0:\n        raise ReferencedNotInitializedBlockBufferError(self.current_token)\n    return self.block_state_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_region_command_buffer","title":"set_region_command_buffer","text":"<pre><code>set_region_command_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_region_command_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.region_command_buffer = (\n        CommandBuffer2()\n        if self.options.initial_region_command_buffer is None\n        else self.options.initial_region_command_buffer.copy()\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.unset_region_command_buffer","title":"unset_region_command_buffer","text":"<pre><code>unset_region_command_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def unset_region_command_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.region_command_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_region_command_buffer","title":"get_region_command_buffer","text":"<pre><code>get_region_command_buffer() -&gt; CommandBuffer2\n</code></pre> <p>Return latest block aperture command buffer and delete it from the stack.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_region_command_buffer(self) -&gt; CommandBuffer2:\n    \"\"\"Return latest block aperture command buffer and delete it from the stack.\"\"\"\n    if self.region_command_buffer is None:\n        raise RegionNotInitializedError(self.current_token)\n    return self.region_command_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_step_and_repeat_command_buffer","title":"set_step_and_repeat_command_buffer","text":"<pre><code>set_step_and_repeat_command_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_step_and_repeat_command_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.step_and_repeat_command_buffer = (\n        CommandBuffer2()\n        if self.options.initial_region_command_buffer is None\n        else self.options.initial_region_command_buffer.copy()\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.unset_step_and_repeat_command_buffer","title":"unset_step_and_repeat_command_buffer","text":"<pre><code>unset_step_and_repeat_command_buffer() -&gt; None\n</code></pre> <p>Unset step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def unset_step_and_repeat_command_buffer(self) -&gt; None:\n    \"\"\"Unset step and repeat command buffer.\"\"\"\n    self.step_and_repeat_command_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_step_and_repeat_command_buffer","title":"get_step_and_repeat_command_buffer","text":"<pre><code>get_step_and_repeat_command_buffer() -&gt; CommandBuffer2\n</code></pre> <p>Return step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_step_and_repeat_command_buffer(self) -&gt; CommandBuffer2:\n    \"\"\"Return step and repeat command buffer.\"\"\"\n    if self.step_and_repeat_command_buffer is None:\n        raise StepAndRepeatNotInitializedError(self.current_token)\n    return self.step_and_repeat_command_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_state_before_step_and_repeat","title":"get_state_before_step_and_repeat","text":"<pre><code>get_state_before_step_and_repeat() -&gt; State2\n</code></pre> <p>Return step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_state_before_step_and_repeat(self) -&gt; State2:\n    \"\"\"Return step and repeat command buffer.\"\"\"\n    if self.state_before_step_and_repeat is None:\n        raise StepAndRepeatNotInitializedError(self.current_token)\n    return self.state_before_step_and_repeat\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.unset_state_before_step_and_repeat","title":"unset_state_before_step_and_repeat","text":"<pre><code>unset_state_before_step_and_repeat() -&gt; None\n</code></pre> <p>Unset step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def unset_state_before_step_and_repeat(self) -&gt; None:\n    \"\"\"Unset step and repeat command buffer.\"\"\"\n    self.state_before_step_and_repeat = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_state_before_step_and_repeat","title":"set_state_before_step_and_repeat","text":"<pre><code>set_state_before_step_and_repeat() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_state_before_step_and_repeat(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.state_before_step_and_repeat = self.state\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.reset_state_to_pre_step_and_repeat","title":"reset_state_to_pre_step_and_repeat","text":"<pre><code>reset_state_to_pre_step_and_repeat() -&gt; None\n</code></pre> <p>Set state to state before step and repeat.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def reset_state_to_pre_step_and_repeat(self) -&gt; None:\n    \"\"\"Set state to state before step and repeat.\"\"\"\n    self.set_state(self.get_state_before_step_and_repeat())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_macro_statement_buffer","title":"get_macro_statement_buffer","text":"<pre><code>get_macro_statement_buffer() -&gt; StatementBuffer2\n</code></pre> <p>Return macro statement buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_macro_statement_buffer(self) -&gt; StatementBuffer2:\n    \"\"\"Return macro statement buffer.\"\"\"\n    if self.macro_statement_buffer is None:\n        raise MacroNotInitializedError(self.current_token)\n    return self.macro_statement_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_macro_statement_buffer","title":"set_macro_statement_buffer","text":"<pre><code>set_macro_statement_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_macro_statement_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.macro_statement_buffer = (\n        StatementBuffer2()\n        if self.options.initial_macro_statement_buffer is None\n        else self.options.initial_macro_statement_buffer\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.unset_macro_statement_buffer","title":"unset_macro_statement_buffer","text":"<pre><code>unset_macro_statement_buffer() -&gt; None\n</code></pre> <p>Unset step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def unset_macro_statement_buffer(self) -&gt; None:\n    \"\"\"Unset step and repeat command buffer.\"\"\"\n    self.macro_statement_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_macro_eval_buffer","title":"get_macro_eval_buffer","text":"<pre><code>get_macro_eval_buffer() -&gt; CommandBuffer2\n</code></pre> <p>Return macro evaluation buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_macro_eval_buffer(self) -&gt; CommandBuffer2:\n    \"\"\"Return macro evaluation buffer.\"\"\"\n    if self.macro_eval_buffer is None:\n        raise MacroNotInitializedError(self.current_token)\n    return self.macro_eval_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_macro_eval_buffer","title":"set_macro_eval_buffer","text":"<pre><code>set_macro_eval_buffer() -&gt; None\n</code></pre> <p>Add new command buffer for block aperture draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_macro_eval_buffer(self) -&gt; None:\n    \"\"\"Add new command buffer for block aperture draw commands.\"\"\"\n    self.macro_eval_buffer = (\n        CommandBuffer2()\n        if self.options.initial_macro_eval_buffer is None\n        else self.options.initial_macro_eval_buffer\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.unset_macro_eval_buffer","title":"unset_macro_eval_buffer","text":"<pre><code>unset_macro_eval_buffer() -&gt; None\n</code></pre> <p>Unset step and repeat command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def unset_macro_eval_buffer(self) -&gt; None:\n    \"\"\"Unset step and repeat command buffer.\"\"\"\n    self.macro_eval_buffer = None\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.skip_token","title":"skip_token","text":"<pre><code>skip_token() -&gt; NoReturn\n</code></pre> <p>Skip this token.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def skip_token(self) -&gt; NoReturn:\n    \"\"\"Skip this token.\"\"\"\n    raise SkipTokenInterrupt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.halt_parser","title":"halt_parser","text":"<pre><code>halt_parser() -&gt; NoReturn\n</code></pre> <p>Halt parsing process.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def halt_parser(self) -&gt; NoReturn:\n    \"\"\"Halt parsing process.\"\"\"\n    raise ExitParsingProcess2Interrupt\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_hooks","title":"get_hooks","text":"<pre><code>get_hooks() -&gt; Parser2HooksBase\n</code></pre> <p>Get hooks object.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_hooks(self) -&gt; Parser2HooksBase:\n    \"\"\"Get hooks object.\"\"\"\n    return self.hooks\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_current_token","title":"get_current_token","text":"<pre><code>get_current_token() -&gt; Optional[Token]\n</code></pre> <p>Get current token object.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_current_token(self) -&gt; Optional[Token]:\n    \"\"\"Get current token object.\"\"\"\n    return self.current_token\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_current_token","title":"set_current_token","text":"<pre><code>set_current_token(token: Token) -&gt; None\n</code></pre> <p>Get current token object.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_current_token(self, token: Token) -&gt; None:\n    \"\"\"Get current token object.\"\"\"\n    self.current_token = token\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_state","title":"set_state","text":"<pre><code>set_state(state: State2) -&gt; None\n</code></pre> <p>Set parser state.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_state(self, state: State2) -&gt; None:\n    \"\"\"Set parser state.\"\"\"\n    self.state = state\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.add_command","title":"add_command","text":"<pre><code>add_command(__command: Command2) -&gt; None\n</code></pre> <p>Add draw command to command buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def add_command(self, __command: Command2) -&gt; None:\n    \"\"\"Add draw command to command buffer.\"\"\"\n    if self.get_is_region():\n        self.get_region_command_buffer().add_command(__command)\n        return\n\n    if self.get_is_aperture_block():\n        self.first_block_command_buffer().add_command(__command)\n        return\n\n    if self.get_is_step_and_repeat():\n        self.get_step_and_repeat_command_buffer().add_command(__command)\n        return\n\n    self.main_command_buffer.add_command(__command)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_state","title":"get_state","text":"<pre><code>get_state() -&gt; State2\n</code></pre> <p>Get parser state.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_state(self) -&gt; State2:\n    \"\"\"Get parser state.\"\"\"\n    return self.state\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_draw_units","title":"get_draw_units","text":"<pre><code>get_draw_units() -&gt; Unit\n</code></pre> <p>Get draw_units property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_draw_units(self) -&gt; Unit:\n    \"\"\"Get draw_units property value.\"\"\"\n    return self.get_state().get_draw_units()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_draw_units","title":"set_draw_units","text":"<pre><code>set_draw_units(draw_units: Unit) -&gt; None\n</code></pre> <p>Set the draw_units property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_draw_units(self, draw_units: Unit) -&gt; None:\n    \"\"\"Set the draw_units property value.\"\"\"\n    return self.set_state(self.get_state().set_draw_units(draw_units))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_coordinate_parser","title":"get_coordinate_parser","text":"<pre><code>get_coordinate_parser() -&gt; CoordinateParser\n</code></pre> <p>Get coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_coordinate_parser(self) -&gt; CoordinateParser:\n    \"\"\"Get coordinate_parser property value.\"\"\"\n    return self.get_state().get_coordinate_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_coordinate_parser","title":"set_coordinate_parser","text":"<pre><code>set_coordinate_parser(\n    coordinate_parser: CoordinateParser,\n) -&gt; None\n</code></pre> <p>Set the coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; None:\n    \"\"\"Set the coordinate_parser property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_coordinate_parser(coordinate_parser),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_polarity","title":"get_polarity","text":"<pre><code>get_polarity() -&gt; Polarity\n</code></pre> <p>Get polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_polarity(self) -&gt; Polarity:\n    \"\"\"Get polarity property value.\"\"\"\n    return self.get_state().get_polarity()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_polarity","title":"set_polarity","text":"<pre><code>set_polarity(polarity: Polarity) -&gt; None\n</code></pre> <p>Set the polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_polarity(self, polarity: Polarity) -&gt; None:\n    \"\"\"Set the polarity property value.\"\"\"\n    return self.set_state(self.get_state().set_polarity(polarity))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_mirroring","title":"get_mirroring","text":"<pre><code>get_mirroring() -&gt; Mirroring\n</code></pre> <p>Get mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_mirroring(self) -&gt; Mirroring:\n    \"\"\"Get mirroring property value.\"\"\"\n    return self.get_state().get_mirroring()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_mirroring","title":"set_mirroring","text":"<pre><code>set_mirroring(mirroring: Mirroring) -&gt; None\n</code></pre> <p>Set the mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_mirroring(self, mirroring: Mirroring) -&gt; None:\n    \"\"\"Set the mirroring property value.\"\"\"\n    return self.set_state(self.get_state().set_mirroring(mirroring))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_rotation","title":"get_rotation","text":"<pre><code>get_rotation() -&gt; Decimal\n</code></pre> <p>Get rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_rotation(self) -&gt; Decimal:\n    \"\"\"Get rotation property value.\"\"\"\n    return self.get_state().get_rotation()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_rotation","title":"set_rotation","text":"<pre><code>set_rotation(rotation: Decimal) -&gt; None\n</code></pre> <p>Set the rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_rotation(self, rotation: Decimal) -&gt; None:\n    \"\"\"Set the rotation property value.\"\"\"\n    return self.set_state(self.get_state().set_rotation(rotation))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_scaling","title":"get_scaling","text":"<pre><code>get_scaling() -&gt; Decimal\n</code></pre> <p>Get scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_scaling(self) -&gt; Decimal:\n    \"\"\"Get scaling property value.\"\"\"\n    return self.get_state().get_scaling()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_scaling","title":"set_scaling","text":"<pre><code>set_scaling(scaling: Decimal) -&gt; None\n</code></pre> <p>Set the scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_scaling(self, scaling: Decimal) -&gt; None:\n    \"\"\"Set the scaling property value.\"\"\"\n    return self.set_state(self.get_state().set_scaling(scaling))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_is_output_image_negation_required","title":"get_is_output_image_negation_required","text":"<pre><code>get_is_output_image_negation_required() -&gt; bool\n</code></pre> <p>Get is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_is_output_image_negation_required(self) -&gt; bool:\n    \"\"\"Get is_output_image_negation_required property value.\"\"\"\n    return self.get_state().get_is_output_image_negation_required()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_is_output_image_negation_required","title":"set_is_output_image_negation_required","text":"<pre><code>set_is_output_image_negation_required(\n    *, value: bool\n) -&gt; None\n</code></pre> <p>Set the is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_is_output_image_negation_required(self, *, value: bool) -&gt; None:\n    \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_is_output_image_negation_required(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_image_name","title":"get_image_name","text":"<pre><code>get_image_name() -&gt; Optional[str]\n</code></pre> <p>Get image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_image_name(self) -&gt; Optional[str]:\n    \"\"\"Get image_name property value.\"\"\"\n    return self.get_state().get_image_name()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_image_name","title":"set_image_name","text":"<pre><code>set_image_name(image_name: Optional[str]) -&gt; None\n</code></pre> <p>Set the image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_image_name(self, image_name: Optional[str]) -&gt; None:\n    \"\"\"Set the image_name property value.\"\"\"\n    return self.set_state(self.get_state().set_image_name(image_name))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_file_name","title":"get_file_name","text":"<pre><code>get_file_name() -&gt; Optional[str]\n</code></pre> <p>Get file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_file_name(self) -&gt; Optional[str]:\n    \"\"\"Get file_name property value.\"\"\"\n    return self.get_state().get_file_name()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_file_name","title":"set_file_name","text":"<pre><code>set_file_name(file_name: Optional[str]) -&gt; None\n</code></pre> <p>Set the file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_file_name(self, file_name: Optional[str]) -&gt; None:\n    \"\"\"Set the file_name property value.\"\"\"\n    return self.set_state(self.get_state().set_file_name(file_name))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_axis_correspondence","title":"get_axis_correspondence","text":"<pre><code>get_axis_correspondence() -&gt; AxisCorrespondence\n</code></pre> <p>Get axis_correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n    \"\"\"Get axis_correspondence property value.\"\"\"\n    return self.get_state().get_axis_correspondence()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_axis_correspondence","title":"set_axis_correspondence","text":"<pre><code>set_axis_correspondence(\n    axis_correspondence: AxisCorrespondence,\n) -&gt; None\n</code></pre> <p>Set the axis_correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; None:\n    \"\"\"Set the axis_correspondence property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_axis_correspondence(axis_correspondence),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_draw_mode","title":"get_draw_mode","text":"<pre><code>get_draw_mode() -&gt; DrawMode\n</code></pre> <p>Get draw_mode property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_draw_mode(self) -&gt; DrawMode:\n    \"\"\"Get draw_mode property value.\"\"\"\n    return self.get_state().get_draw_mode()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_draw_mode","title":"set_draw_mode","text":"<pre><code>set_draw_mode(draw_mode: DrawMode) -&gt; None\n</code></pre> <p>Set the draw_mode property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_draw_mode(self, draw_mode: DrawMode) -&gt; None:\n    \"\"\"Set the draw_mode property value.\"\"\"\n    return self.set_state(self.get_state().set_draw_mode(draw_mode))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_is_region","title":"get_is_region","text":"<pre><code>get_is_region() -&gt; bool\n</code></pre> <p>Get is_region property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_is_region(self) -&gt; bool:\n    \"\"\"Get is_region property value.\"\"\"\n    return self.get_state().get_is_region()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_is_region","title":"set_is_region","text":"<pre><code>set_is_region(is_region: bool) -&gt; None\n</code></pre> <p>Set the is_region property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_is_region(self, is_region: bool) -&gt; None:  # noqa: FBT001\n    \"\"\"Set the is_region property value.\"\"\"\n    return self.set_state(self.get_state().set_is_region(is_region))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_is_aperture_block","title":"get_is_aperture_block","text":"<pre><code>get_is_aperture_block() -&gt; bool\n</code></pre> <p>Get is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_is_aperture_block(self) -&gt; bool:\n    \"\"\"Get is_aperture_block property value.\"\"\"\n    return self.get_state().get_is_aperture_block()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_is_aperture_block","title":"set_is_aperture_block","text":"<pre><code>set_is_aperture_block(is_aperture_block: bool) -&gt; None\n</code></pre> <p>Set the is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_is_aperture_block(self, is_aperture_block: bool) -&gt; None:  # noqa: FBT001\n    \"\"\"Set the is_aperture_block property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_is_aperture_block(is_aperture_block),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_aperture_block_id","title":"get_aperture_block_id","text":"<pre><code>get_aperture_block_id() -&gt; Optional[ApertureID]\n</code></pre> <p>Get is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n    \"\"\"Get is_aperture_block property value.\"\"\"\n    return self.get_state().get_aperture_block_id()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_aperture_block_id","title":"set_aperture_block_id","text":"<pre><code>set_aperture_block_id(\n    aperture_block_id: Optional[ApertureID],\n) -&gt; None\n</code></pre> <p>Set the is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_aperture_block_id(self, aperture_block_id: Optional[ApertureID]) -&gt; None:\n    \"\"\"Set the is_aperture_block property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_aperture_block_id(aperture_block_id),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_is_multi_quadrant","title":"get_is_multi_quadrant","text":"<pre><code>get_is_multi_quadrant() -&gt; bool\n</code></pre> <p>Get is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_is_multi_quadrant(self) -&gt; bool:\n    \"\"\"Get is_aperture_block property value.\"\"\"\n    return self.get_state().get_is_multi_quadrant()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_is_multi_quadrant","title":"set_is_multi_quadrant","text":"<pre><code>set_is_multi_quadrant(is_multi_quadrant: bool) -&gt; None\n</code></pre> <p>Set the is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_is_multi_quadrant(self, is_multi_quadrant: bool) -&gt; None:  # noqa: FBT001\n    \"\"\"Set the is_aperture_block property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_is_multi_quadrant(is_multi_quadrant),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_is_step_and_repeat","title":"get_is_step_and_repeat","text":"<pre><code>get_is_step_and_repeat() -&gt; bool\n</code></pre> <p>Get is_step_and_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_is_step_and_repeat(self) -&gt; bool:\n    \"\"\"Get is_step_and_repeat property value.\"\"\"\n    return self.get_state().get_is_step_and_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_is_step_and_repeat","title":"set_is_step_and_repeat","text":"<pre><code>set_is_step_and_repeat(is_step_and_repeat: bool) -&gt; None\n</code></pre> <p>Set the is_step_and_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_is_step_and_repeat(self, is_step_and_repeat: bool) -&gt; None:  # noqa: FBT001\n    \"\"\"Set the is_step_and_repeat property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_is_step_and_repeat(is_step_and_repeat),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_x_repeat","title":"get_x_repeat","text":"<pre><code>get_x_repeat() -&gt; int\n</code></pre> <p>Get x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_x_repeat(self) -&gt; int:\n    \"\"\"Get x_step property value.\"\"\"\n    return self.get_state().get_x_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_x_repeat","title":"set_x_repeat","text":"<pre><code>set_x_repeat(x_repeat: int) -&gt; None\n</code></pre> <p>Set the x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_x_repeat(self, x_repeat: int) -&gt; None:\n    \"\"\"Set the x_repeat property value.\"\"\"\n    return self.set_state(self.get_state().set_x_repeat(x_repeat))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_y_repeat","title":"get_y_repeat","text":"<pre><code>get_y_repeat() -&gt; int\n</code></pre> <p>Get y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_y_repeat(self) -&gt; int:\n    \"\"\"Get y_step property value.\"\"\"\n    return self.get_state().get_y_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_y_repeat","title":"set_y_repeat","text":"<pre><code>set_y_repeat(y_repeat: int) -&gt; None\n</code></pre> <p>Set the y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_y_repeat(self, y_repeat: int) -&gt; None:\n    \"\"\"Set the y_repeat property value.\"\"\"\n    return self.set_state(self.get_state().set_y_repeat(y_repeat))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_x_step","title":"get_x_step","text":"<pre><code>get_x_step() -&gt; Offset\n</code></pre> <p>Get x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_x_step(self) -&gt; Offset:\n    \"\"\"Get x_step property value.\"\"\"\n    return self.get_state().get_x_step()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_x_step","title":"set_x_step","text":"<pre><code>set_x_step(x_step: Offset) -&gt; None\n</code></pre> <p>Set the x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_x_step(self, x_step: Offset) -&gt; None:\n    \"\"\"Set the x_step property value.\"\"\"\n    return self.set_state(self.get_state().set_x_step(x_step))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_y_step","title":"get_y_step","text":"<pre><code>get_y_step() -&gt; Offset\n</code></pre> <p>Get y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_y_step(self) -&gt; Offset:\n    \"\"\"Get y_step property value.\"\"\"\n    return self.get_state().get_y_step()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_y_step","title":"set_y_step","text":"<pre><code>set_y_step(y_step: Offset) -&gt; None\n</code></pre> <p>Set the y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_y_step(self, y_step: Offset) -&gt; None:\n    \"\"\"Set the y_step property value.\"\"\"\n    return self.set_state(self.get_state().set_y_step(y_step))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_current_position","title":"get_current_position","text":"<pre><code>get_current_position() -&gt; Vector2D\n</code></pre> <p>Get current_position property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_current_position(self) -&gt; Vector2D:\n    \"\"\"Get current_position property value.\"\"\"\n    return self.get_state().get_current_position()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_current_position","title":"set_current_position","text":"<pre><code>set_current_position(current_position: Vector2D) -&gt; None\n</code></pre> <p>Set the current_position property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_current_position(self, current_position: Vector2D) -&gt; None:\n    \"\"\"Set the current_position property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_current_position(current_position),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_current_aperture_id","title":"get_current_aperture_id","text":"<pre><code>get_current_aperture_id() -&gt; Optional[ApertureID]\n</code></pre> <p>Get current_aperture property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_current_aperture_id(self) -&gt; Optional[ApertureID]:\n    \"\"\"Get current_aperture property value.\"\"\"\n    current_aperture_id = self.get_state().get_current_aperture_id()\n    if current_aperture_id is None and self.get_is_region():\n        return REGION_OUTLINE_DEFAULT_APERTURE_ID\n\n    return current_aperture_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_current_aperture_id","title":"set_current_aperture_id","text":"<pre><code>set_current_aperture_id(\n    current_aperture: Optional[ApertureID],\n) -&gt; None\n</code></pre> <p>Set the current_aperture property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_current_aperture_id(self, current_aperture: Optional[ApertureID]) -&gt; None:\n    \"\"\"Set the current_aperture property value.\"\"\"\n    return self.set_state(\n        self.get_state().set_current_aperture_id(current_aperture),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture(\n    __key: ApertureID, transform: ApertureTransform\n) -&gt; Aperture2\n</code></pre> <p>Get apertures property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_aperture(\n    self,\n    __key: ApertureID,\n    transform: ApertureTransform,\n) -&gt; Aperture2:\n    \"\"\"Get apertures property value.\"\"\"\n    key_with_transform = ApertureID(\n        f\"{__key}+{transform.get_transform_key()}\",\n    )\n    transformed_aperture = self.apertures.get(key_with_transform)\n    if transformed_aperture is None:\n        # Retrieve aperture with no transform and create a transformed copy.\n        # If transform is all default, no copy is made.\n        aperture = self._get_aperture(__key)\n        transformed_aperture = (\n            aperture.get_mirrored(transform.mirroring)\n            .get_rotated(transform.rotation)\n            .get_scaled(transform.scaling)\n        )\n        self.set_aperture(key_with_transform, transformed_aperture)\n\n    return transformed_aperture\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_aperture","title":"set_aperture","text":"<pre><code>set_aperture(__key: ApertureID, __value: Aperture2) -&gt; None\n</code></pre> <p>Set the apertures property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_aperture(self, __key: ApertureID, __value: Aperture2) -&gt; None:\n    \"\"\"Set the apertures property value.\"\"\"\n    self.apertures[__key] = __value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_macro","title":"get_macro","text":"<pre><code>get_macro(__key: str) -&gt; ApertureMacro2\n</code></pre> <p>Get macro property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_macro(self, __key: str) -&gt; ApertureMacro2:\n    \"\"\"Get macro property value.\"\"\"\n    try:\n        return self.get_state().get_macro(__key)\n    except KeyError as e:\n        raise MacroNotDefinedError(self.current_token) from e\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_macro","title":"set_macro","text":"<pre><code>set_macro(__key: str, __value: ApertureMacro2) -&gt; None\n</code></pre> <p>Set the macro property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_macro(self, __key: str, __value: ApertureMacro2) -&gt; None:\n    \"\"\"Set the macro property value.\"\"\"\n    return self.set_state(self.get_state().set_macro(__key, __value))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_reached_program_stop","title":"set_reached_program_stop","text":"<pre><code>set_reached_program_stop() -&gt; None\n</code></pre> <p>Set flag indicating that M00 token was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_reached_program_stop(self) -&gt; None:\n    \"\"\"Set flag indicating that M00 token was reached.\"\"\"\n    self.reached_program_stop = True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_reached_program_stop","title":"get_reached_program_stop","text":"<pre><code>get_reached_program_stop() -&gt; bool\n</code></pre> <p>Get flag indicating that M00 token was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_reached_program_stop(self) -&gt; bool:\n    \"\"\"Get flag indicating that M00 token was reached.\"\"\"\n    return self.reached_program_stop\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_reached_optional_stop","title":"set_reached_optional_stop","text":"<pre><code>set_reached_optional_stop() -&gt; None\n</code></pre> <p>Set flag indicating that M01 token was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_reached_optional_stop(self) -&gt; None:\n    \"\"\"Set flag indicating that M01 token was reached.\"\"\"\n    self.reached_optional_stop = True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_reached_optional_stop","title":"get_reached_optional_stop","text":"<pre><code>get_reached_optional_stop() -&gt; bool\n</code></pre> <p>Get flag indicating that M01 token was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_reached_optional_stop(self) -&gt; bool:\n    \"\"\"Get flag indicating that M01 token was reached.\"\"\"\n    return self.reached_optional_stop\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_reached_end_of_file","title":"set_reached_end_of_file","text":"<pre><code>set_reached_end_of_file() -&gt; None\n</code></pre> <p>Set flag indicating that M02 end of file was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_reached_end_of_file(self) -&gt; None:\n    \"\"\"Set flag indicating that M02 end of file was reached.\"\"\"\n    self.reached_end_of_file = True\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_reached_end_of_file","title":"get_reached_end_of_file","text":"<pre><code>get_reached_end_of_file() -&gt; bool\n</code></pre> <p>Get flag indicating that M02 end of file was reached.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_reached_end_of_file(self) -&gt; bool:\n    \"\"\"Get flag indicating that M02 end of file was reached.\"\"\"\n    return self.reached_end_of_file\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_file_attribute","title":"get_file_attribute","text":"<pre><code>get_file_attribute(key: str) -&gt; Optional[str]\n</code></pre> <p>Get file attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_file_attribute(self, key: str) -&gt; Optional[str]:\n    \"\"\"Get file attributes property.\"\"\"\n    return self.file_attributes.get(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.delete_file_attribute","title":"delete_file_attribute","text":"<pre><code>delete_file_attribute(key: str) -&gt; None\n</code></pre> <p>Get file attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def delete_file_attribute(self, key: str) -&gt; None:\n    \"\"\"Get file attributes property.\"\"\"\n    self.file_attributes = self.file_attributes.delete(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_file_attribute","title":"set_file_attribute","text":"<pre><code>set_file_attribute(key: str, value: Optional[str]) -&gt; None\n</code></pre> <p>Set file attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_file_attribute(self, key: str, value: Optional[str]) -&gt; None:\n    \"\"\"Set file attributes property.\"\"\"\n    self.file_attributes = self.file_attributes.update(key, value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_aperture_attribute","title":"get_aperture_attribute","text":"<pre><code>get_aperture_attribute(key: str) -&gt; Optional[str]\n</code></pre> <p>Get aperture attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_aperture_attribute(self, key: str) -&gt; Optional[str]:\n    \"\"\"Get aperture attributes property.\"\"\"\n    return self.aperture_attributes.get(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.delete_aperture_attribute","title":"delete_aperture_attribute","text":"<pre><code>delete_aperture_attribute(key: str) -&gt; None\n</code></pre> <p>Delete aperture attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def delete_aperture_attribute(self, key: str) -&gt; None:\n    \"\"\"Delete aperture attributes property.\"\"\"\n    self.aperture_attributes = self.aperture_attributes.delete(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.clear_aperture_attributes","title":"clear_aperture_attributes","text":"<pre><code>clear_aperture_attributes() -&gt; None\n</code></pre> <p>Clear aperture attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def clear_aperture_attributes(self) -&gt; None:\n    \"\"\"Clear aperture attributes property.\"\"\"\n    self.aperture_attributes = ApertureAttributes()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_aperture_attribute","title":"set_aperture_attribute","text":"<pre><code>set_aperture_attribute(\n    key: str, value: Optional[str]\n) -&gt; None\n</code></pre> <p>Set aperture attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_aperture_attribute(self, key: str, value: Optional[str]) -&gt; None:\n    \"\"\"Set aperture attributes property.\"\"\"\n    self.aperture_attributes = self.aperture_attributes.update(key, value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.get_object_attribute","title":"get_object_attribute","text":"<pre><code>get_object_attribute(key: str) -&gt; Optional[str]\n</code></pre> <p>Get object attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def get_object_attribute(self, key: str) -&gt; Optional[str]:\n    \"\"\"Get object attributes property.\"\"\"\n    return self.object_attributes.get(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.delete_object_attribute","title":"delete_object_attribute","text":"<pre><code>delete_object_attribute(key: str) -&gt; None\n</code></pre> <p>Delete object attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def delete_object_attribute(self, key: str) -&gt; None:\n    \"\"\"Delete object attributes property.\"\"\"\n    self.object_attributes = self.object_attributes.delete(key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.set_object_attribute","title":"set_object_attribute","text":"<pre><code>set_object_attribute(\n    key: str, value: Optional[str]\n) -&gt; None\n</code></pre> <p>Set object attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def set_object_attribute(self, key: str, value: Optional[str]) -&gt; None:\n    \"\"\"Set object attributes property.\"\"\"\n    self.object_attributes = self.object_attributes.update(key, value)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2Context.clear_object_attributes","title":"clear_object_attributes","text":"<pre><code>clear_object_attributes() -&gt; None\n</code></pre> <p>Clear object attributes property.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>def clear_object_attributes(self) -&gt; None:\n    \"\"\"Clear object attributes property.\"\"\"\n    self.object_attributes = ObjectAttributes()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2ContextMacroExpressionFactories","title":"Parser2ContextMacroExpressionFactories  <code>dataclass</code>","text":"<p>Collection of factories for all macro expressions.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>@dataclass\nclass Parser2ContextMacroExpressionFactories:\n    \"\"\"Collection of factories for all macro expressions.\"\"\"\n\n    constant: Type[Constant2] = Constant2\n    variable_name: Type[VariableName2] = VariableName2\n    addition: Type[Addition2] = Addition2\n    subtraction: Type[Subtraction2] = Subtraction2\n    multiplication: Type[Multiplication2] = Multiplication2\n    division: Type[Division2] = Division2\n    negation: Type[Negation2] = Negation2\n    positive: Type[Positive2] = Positive2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/context2.html#pygerber.gerberx3.parser2.context2.Parser2ContextOptions","title":"Parser2ContextOptions","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Options for Parser2Context.</p> Source code in <code>src/pygerber/gerberx3/parser2/context2.py</code> <pre><code>class Parser2ContextOptions(FrozenGeneralModel):\n    \"\"\"Options for Parser2Context.\"\"\"\n\n    initial_state: Optional[State2] = Field(default=None)\n    initial_main_command_buffer: Optional[CommandBuffer2] = Field(default=None)\n    initial_region_command_buffer: Optional[CommandBuffer2] = Field(default=None)\n    initial_block_command_buffer: Optional[CommandBuffer2] = Field(default=None)\n    initial_macro_statement_buffer: Optional[StatementBuffer2] = Field(default=None)\n    initial_macro_eval_buffer: Optional[CommandBuffer2] = Field(default=None)\n    custom_macro_expression_factories: Optional[\n        Parser2ContextMacroExpressionFactories\n    ] = Field(\n        default=None,\n    )\n    hooks: Optional[Parser2HooksBase] = Field(default=None)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html","title":"errors2","text":""},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2","title":"errors2","text":"<p>Base error classes used in this module.</p>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.Parser2Error","title":"Parser2Error","text":"<p>             Bases: <code>ValueError</code></p> <p>Base class for parser errors.</p> <p>Exceptions derived from this exception are exclusively raised in PyGerber's Gerber X3 Parser. This exception can be used in <code>try: ... except Parser2Error: ...</code> block to catch all exceptions raised by Parser while allowing other exceptions to interrupt execution.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class Parser2Error(ValueError):\n    \"\"\"Base class for parser errors.\n\n    Exceptions derived from this exception are exclusively raised in PyGerber's Gerber\n    X3 Parser. This exception can be used in\n    `#!python try: ... except Parser2Error: ...` block to catch all exceptions\n    raised by Parser while allowing other exceptions to interrupt execution.\n    \"\"\"\n\n    def get_message(self) -&gt; str:\n        \"\"\"Get parser error help message.\"\"\"\n        return f\"{self.__class__.__qualname__}: {self.__doc__}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.Parser2Error.get_message","title":"get_message","text":"<pre><code>get_message() -&gt; str\n</code></pre> <p>Get parser error help message.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>def get_message(self) -&gt; str:\n    \"\"\"Get parser error help message.\"\"\"\n    return f\"{self.__class__.__qualname__}: {self.__doc__}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ZeroOmissionNotSupported2Error","title":"ZeroOmissionNotSupported2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when incremental coordinates are selected. (Spec. 8.2.1.2).</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ZeroOmissionNotSupported2Error(Parser2Error):\n    \"\"\"Raised when incremental coordinates are selected. (Spec. 8.2.1.2).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.IncrementalCoordinatesNotSupported2Error","title":"IncrementalCoordinatesNotSupported2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when incremental coordinates are selected. (Spec. 8.2.1.2).</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class IncrementalCoordinatesNotSupported2Error(Parser2Error):\n    \"\"\"Raised when incremental coordinates are selected. (Spec. 8.2.1.2).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.UnsupportedCoordinateType2Error","title":"UnsupportedCoordinateType2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised for unsupported coordinate types.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class UnsupportedCoordinateType2Error(Parser2Error):\n    \"\"\"Raised for unsupported coordinate types.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.InvalidCoordinateLength2Error","title":"InvalidCoordinateLength2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when coordinate string is too long.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class InvalidCoordinateLength2Error(Parser2Error):\n    \"\"\"Raised when coordinate string is too long.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ParserFatal2Error","title":"ParserFatal2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when parser encounters fatal failure from non-parser specific exception.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ParserFatal2Error(Parser2Error):\n    \"\"\"Raised when parser encounters fatal failure from non-parser specific\n    exception.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.OnUpdateDrawingState2Error","title":"OnUpdateDrawingState2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when parser encounters fatal failure from non-parser specific exception during call to .update_drawing_state() call.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class OnUpdateDrawingState2Error(Parser2Error):\n    \"\"\"Raised when parser encounters fatal failure from non-parser specific\n    exception during call to .update_drawing_state() call.\n    \"\"\"\n\n    def __init__(self, token: Token, *args: object) -&gt; None:\n        super().__init__(*args)\n        self.token = token\n\n    def __str__(self) -&gt; str:\n        return f\"{self.token} {self.token.get_token_position()}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.UnitNotSet2Error","title":"UnitNotSet2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when operation which requires units to be set is executed before units are set.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class UnitNotSet2Error(Parser2Error):\n    \"\"\"Raised when operation which requires units to be set is executed before units\n    are set.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ReferencedNotInitializedBlockBufferError","title":"ReferencedNotInitializedBlockBufferError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when Gerber file references block buffer which has not been initialized, ie. when block aperture was not correctly started.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ReferencedNotInitializedBlockBufferError(Parser2Error):\n    \"\"\"Raised when Gerber file references block buffer which has not been\n    initialized, ie. when block aperture was not correctly started.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.UnnamedBlockApertureNotAllowedError","title":"UnnamedBlockApertureNotAllowedError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when aperture block with no ID is encountered.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class UnnamedBlockApertureNotAllowedError(Parser2Error):\n    \"\"\"Raised when aperture block with no ID is encountered.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.RegionNotInitializedError","title":"RegionNotInitializedError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when region is modified without being accessed without initialization.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class RegionNotInitializedError(Parser2Error):\n    \"\"\"Raised when region is modified without being accessed without initialization.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ApertureNotDefined2Error","title":"ApertureNotDefined2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when undefined aperture is selected.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ApertureNotDefined2Error(Parser2Error):\n    \"\"\"Raised when undefined aperture is selected.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.MacroNotDefinedError","title":"MacroNotDefinedError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when undefined macro is referenced.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class MacroNotDefinedError(Parser2Error):\n    \"\"\"Raised when undefined macro is referenced.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.NoValidArcCenterFoundError","title":"NoValidArcCenterFoundError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when no valid arc center point can not be deduced from IJ offset in single quadrant mode (G74).</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class NoValidArcCenterFoundError(Parser2Error):\n    \"\"\"Raised when no valid arc center point can not be deduced from IJ offset in\n    single quadrant mode (G74).\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.CoordinateFormatNotSet2Error","title":"CoordinateFormatNotSet2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when coordinate parser is requested before coordinate format was set.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class CoordinateFormatNotSet2Error(Parser2Error):\n    \"\"\"Raised when coordinate parser is requested before coordinate format was set.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ApertureNotSelected2Error","title":"ApertureNotSelected2Error","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when attempting to use aperture without selecting it first.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ApertureNotSelected2Error(Parser2Error):\n    \"\"\"Raised when attempting to use aperture without selecting it first.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.StepAndRepeatNotInitializedError","title":"StepAndRepeatNotInitializedError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when step and repeat block is closed without being correctly opened.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class StepAndRepeatNotInitializedError(Parser2Error):\n    \"\"\"Raised when step and repeat block is closed without being correctly opened.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.MacroNotInitializedError","title":"MacroNotInitializedError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when macro statement buffer is requested without being correctly initialized.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class MacroNotInitializedError(Parser2Error):\n    \"\"\"Raised when macro statement buffer is requested without being correctly\n    initialized.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.StandardAttributeError","title":"StandardAttributeError","text":"<p>             Bases: <code>Parser2Error</code></p> <p>Raised when parser encounters an error while processing a standard attribute.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class StandardAttributeError(Parser2Error):\n    \"\"\"Raised when parser encounters an error while processing a standard attribute.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.MissingNameFieldError","title":"MissingNameFieldError","text":"<p>             Bases: <code>StandardAttributeError</code></p> <p>Raised when a missing name field is detected.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class MissingNameFieldError(StandardAttributeError):\n    \"\"\"Raised when a missing name field is detected.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.MissingGuidFieldError","title":"MissingGuidFieldError","text":"<p>             Bases: <code>StandardAttributeError</code></p> <p>Raised when a missing name field is detected.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class MissingGuidFieldError(StandardAttributeError):\n    \"\"\"Raised when a missing name field is detected.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.MissingRevisionFieldError","title":"MissingRevisionFieldError","text":"<p>             Bases: <code>StandardAttributeError</code></p> <p>Raised when a missing name field is detected.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class MissingRevisionFieldError(StandardAttributeError):\n    \"\"\"Raised when a missing name field is detected.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.Parser2Interrupt","title":"Parser2Interrupt","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for implementing interrupts.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class Parser2Interrupt(Exception):  # noqa: N818\n    \"\"\"Base class for implementing interrupts.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.ExitParsingProcess2Interrupt","title":"ExitParsingProcess2Interrupt","text":"<p>             Bases: <code>Exception</code></p> <p>Raised to stop parsing.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class ExitParsingProcess2Interrupt(Exception):  # noqa: N818\n    \"\"\"Raised to stop parsing.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/errors2.html#pygerber.gerberx3.parser2.errors2.SkipTokenInterrupt","title":"SkipTokenInterrupt","text":"<p>             Bases: <code>Exception</code></p> <p>Raised to skip all other actions that would be performed on current token.</p> Source code in <code>src/pygerber/gerberx3/parser2/errors2.py</code> <pre><code>class SkipTokenInterrupt(Exception):  # noqa: N818\n    \"\"\"Raised to skip all other actions that would be performed on current token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html","title":"parser2","text":""},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2","title":"parser2","text":"<p>Implementation of Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2","title":"Parser2","text":"<p>Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>class Parser2:\n    \"\"\"Gerber AST parser, version 2.\"\"\"\n\n    def __init__(\n        self,\n        options: Optional[Parser2Options] = None,\n    ) -&gt; None:\n        \"\"\"Initialize parser.\n\n        Parameters\n        ----------\n        options : ParserOptions | None\n            Additional options for modifying parser behavior.\n\n        \"\"\"\n        self.options = Parser2Options() if options is None else options\n        self.is_used = False\n        self.context = (\n            Parser2Context(self.options.context_options)\n            if self.options.initial_context is None\n            else self.options.initial_context\n        )\n        self.get_hooks().on_parser_init(self)\n\n    def parse(self, ast: AST) -&gt; ReadonlyCommandBuffer2:\n        \"\"\"Parse token stack.\"\"\"\n        for _ in self.parse_iter(ast):\n            pass\n\n        return self.context.main_command_buffer.get_readonly()\n\n    def parse_iter(\n        self,\n        ast: AST,\n    ) -&gt; Generator[tuple[Token, Parser2Context], None, None]:\n        \"\"\"Iterate over tokens in stack and parse them.\"\"\"\n        self.get_hooks().pre_parse(self.context)\n        self.is_used = True\n\n        try:\n            for token in ast:\n                self.context.set_current_token(token)\n                self._token_try_visit_except(token)\n\n                yield token, self.context\n\n        except ExitParsingProcess2Interrupt:\n            pass\n\n        self.get_hooks().post_parse(self.context)\n\n    def _token_try_visit_except(self, token: Token) -&gt; None:\n        try:\n            self.get_hooks().pre_parser_visit_any_token(self.context)\n            token.parser2_visit_token(self.context)\n            self.get_hooks().post_parser_visit_any_token(self.context)\n\n        except SkipTokenInterrupt:\n            return\n\n        except ExitParsingProcess2Interrupt:\n            raise\n\n        except Exception as e:\n            if (\n                self.options.on_update_drawing_state_error\n                == Parser2OnErrorAction.Ignore\n            ):\n                pass\n\n            elif (\n                self.options.on_update_drawing_state_error == Parser2OnErrorAction.Raise\n            ):\n                if not isinstance(e, Parser2Error):\n                    raise OnUpdateDrawingState2Error(token) from e\n\n                raise\n\n            elif (\n                self.options.on_update_drawing_state_error == Parser2OnErrorAction.Warn\n            ):\n                logging.warning(\n                    \"Encountered fatal error during call to update_drawing_state() \"\n                    \"of '%s' token %s. Parser will skip this token and continue.\",\n                    token,\n                    token.get_token_position(),\n                )\n\n            elif (\n                self.options.on_update_drawing_state_error\n                == Parser2OnErrorAction.UseHook\n            ):\n                if isinstance(e, Parser2Error):\n                    self.get_hooks().on_parser_error(self.context, e)\n                else:\n                    self.get_hooks().on_other_error(self.context, e)\n\n    def get_hooks(self) -&gt; Parser2HooksBase:\n        \"\"\"Get hooks object.\"\"\"\n        return self.context.get_hooks()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2.__init__","title":"__init__","text":"<pre><code>__init__(options: Optional[Parser2Options] = None) -&gt; None\n</code></pre> <p>Initialize parser.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>ParserOptions | None</code> <p>Additional options for modifying parser behavior.</p> <code>None</code> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>def __init__(\n    self,\n    options: Optional[Parser2Options] = None,\n) -&gt; None:\n    \"\"\"Initialize parser.\n\n    Parameters\n    ----------\n    options : ParserOptions | None\n        Additional options for modifying parser behavior.\n\n    \"\"\"\n    self.options = Parser2Options() if options is None else options\n    self.is_used = False\n    self.context = (\n        Parser2Context(self.options.context_options)\n        if self.options.initial_context is None\n        else self.options.initial_context\n    )\n    self.get_hooks().on_parser_init(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2.parse","title":"parse","text":"<pre><code>parse(ast: AST) -&gt; ReadonlyCommandBuffer2\n</code></pre> <p>Parse token stack.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>def parse(self, ast: AST) -&gt; ReadonlyCommandBuffer2:\n    \"\"\"Parse token stack.\"\"\"\n    for _ in self.parse_iter(ast):\n        pass\n\n    return self.context.main_command_buffer.get_readonly()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2.parse_iter","title":"parse_iter","text":"<pre><code>parse_iter(\n    ast: AST,\n) -&gt; Generator[tuple[Token, Parser2Context], None, None]\n</code></pre> <p>Iterate over tokens in stack and parse them.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>def parse_iter(\n    self,\n    ast: AST,\n) -&gt; Generator[tuple[Token, Parser2Context], None, None]:\n    \"\"\"Iterate over tokens in stack and parse them.\"\"\"\n    self.get_hooks().pre_parse(self.context)\n    self.is_used = True\n\n    try:\n        for token in ast:\n            self.context.set_current_token(token)\n            self._token_try_visit_except(token)\n\n            yield token, self.context\n\n    except ExitParsingProcess2Interrupt:\n        pass\n\n    self.get_hooks().post_parse(self.context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2.get_hooks","title":"get_hooks","text":"<pre><code>get_hooks() -&gt; Parser2HooksBase\n</code></pre> <p>Get hooks object.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>def get_hooks(self) -&gt; Parser2HooksBase:\n    \"\"\"Get hooks object.\"\"\"\n    return self.context.get_hooks()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2OnErrorAction","title":"Parser2OnErrorAction","text":"<p>             Bases: <code>Enum</code></p> <p>Possible error actions.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>class Parser2OnErrorAction(Enum):\n    \"\"\"Possible error actions.\"\"\"\n\n    Ignore = \"ignore\"\n    \"\"\"Ignore parser errors. Errors which occurred will not be signaled. May yield\n    unexpected results for broken files, with missing draw commands or even more\n    significant errors.\"\"\"\n\n    Warn = \"warn\"\n    \"\"\"Warn on parser error. Parser will log warning message about what went wrong.\n    Best for supporting wide range of files without silently ignoring errors in code.\"\"\"\n\n    Raise = \"raise\"\n    \"\"\"Raise exception whenever parser encounters error. Will completely break out of\n    parsing process, making it impossible to render slightly malformed files.\"\"\"\n\n    UseHook = \"use_hook\"\n    \"\"\"Use appropriate hooks to dispatch exception.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2OnErrorAction.Ignore","title":"Ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ignore = 'ignore'\n</code></pre> <p>Ignore parser errors. Errors which occurred will not be signaled. May yield unexpected results for broken files, with missing draw commands or even more significant errors.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2OnErrorAction.Warn","title":"Warn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warn = 'warn'\n</code></pre> <p>Warn on parser error. Parser will log warning message about what went wrong. Best for supporting wide range of files without silently ignoring errors in code.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2OnErrorAction.Raise","title":"Raise  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Raise = 'raise'\n</code></pre> <p>Raise exception whenever parser encounters error. Will completely break out of parsing process, making it impossible to render slightly malformed files.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2OnErrorAction.UseHook","title":"UseHook  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UseHook = 'use_hook'\n</code></pre> <p>Use appropriate hooks to dispatch exception.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2.html#pygerber.gerberx3.parser2.parser2.Parser2Options","title":"Parser2Options","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Container class for Gerber parser options.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2.py</code> <pre><code>class Parser2Options(FrozenGeneralModel):\n    \"\"\"Container class for Gerber parser options.\"\"\"\n\n    initial_context: Optional[Parser2Context] = Field(default=None)\n    context_options: Optional[Parser2ContextOptions] = Field(default=None)\n    on_update_drawing_state_error: Parser2OnErrorAction = Parser2OnErrorAction.Raise\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html","title":"parser2hooks","text":""},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks","title":"parser2hooks","text":"<p>Implementation of hooks for Gerber AST Parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks","title":"Parser2Hooks","text":"<p>             Bases: <code>Parser2HooksBase</code></p> <p>Implementation of hooks for Gerber AST Parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class Parser2Hooks(Parser2HooksBase):\n    \"\"\"Implementation of hooks for Gerber AST Parser, version 2.\"\"\"\n\n    class MacroBeginTokenHooks(Parser2HooksBase.MacroBeginTokenHooks):\n        \"\"\"Hooks for visiting macro begin token (AM).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: MacroBegin,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_macro_statement_buffer()\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode1CircleTokenHooks(Parser2HooksBase.MacroCode1CircleTokenHooks):\n        \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code1CircleToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code1Circle2(\n                    exposure=token.exposure.to_parser2_expression(context),\n                    diameter=token.diameter.to_parser2_expression(context),\n                    center_x=token.center_x.to_parser2_expression(context),\n                    center_y=token.center_y.to_parser2_expression(context),\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode2VectorLineTokenHooks(\n        Parser2HooksBase.MacroCode2VectorLineTokenHooks,\n    ):\n        \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code2VectorLineToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: Code2VectorLine\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code2VectorLine2(),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode4OutlineTokenHooks(Parser2HooksBase.MacroCode4OutlineTokenHooks):\n        \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code4OutlineToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code4Outline2(\n                    exposure=token.exposure.to_parser2_expression(context),\n                    vertex_count=token.number_of_vertices.to_parser2_expression(\n                        context,\n                    ),\n                    start_x=token.start_x.to_parser2_expression(context),\n                    start_y=token.start_y.to_parser2_expression(context),\n                    points=[point.to_parser2_point2(context) for point in token.point],\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode5PolygonTokenHooks(Parser2HooksBase.MacroCode5PolygonTokenHooks):\n        \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code5PolygonToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code5Polygon2(\n                    exposure=token.exposure.to_parser2_expression(context),\n                    number_of_vertices=token.number_of_vertices.to_parser2_expression(\n                        context,\n                    ),\n                    center_x=token.center_x.to_parser2_expression(context),\n                    center_y=token.center_y.to_parser2_expression(context),\n                    diameter=token.diameter.to_parser2_expression(context),\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode6MoireTokenHooks(Parser2HooksBase.MacroCode6MoireTokenHooks):\n        \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code6MoireToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code6Moire2(),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode7ThermalTokenHooks(Parser2HooksBase.MacroCode7ThermalTokenHooks):\n        \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code7ThermalToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code7Thermal2(\n                    center_x=token.center_x.to_parser2_expression(context),\n                    center_y=token.center_y.to_parser2_expression(context),\n                    outer_diameter=token.outer_diameter.to_parser2_expression(context),\n                    inner_diameter=token.inner_diameter.to_parser2_expression(context),\n                    gap=token.gap.to_parser2_expression(context),\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode20VectorLineTokenHooks(\n        Parser2HooksBase.MacroCode20VectorLineTokenHooks,\n    ):\n        \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code20VectorLineToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code20VectorLine2(\n                    exposure=token.exposure.to_parser2_expression(context),\n                    width=token.width.to_parser2_expression(context),\n                    start_x=token.start_x.to_parser2_expression(context),\n                    start_y=token.start_y.to_parser2_expression(context),\n                    end_x=token.end_x.to_parser2_expression(context),\n                    end_y=token.end_y.to_parser2_expression(context),\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode21CenterLineTokenHooks(\n        Parser2HooksBase.MacroCode21CenterLineTokenHooks,\n    ):\n        \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code21CenterLineToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Code21CenterLine2(\n                    exposure=token.exposure.to_parser2_expression(context),\n                    width=token.width.to_parser2_expression(context),\n                    height=token.height.to_parser2_expression(context),\n                    center_x=token.center_x.to_parser2_expression(context),\n                    center_y=token.center_y.to_parser2_expression(context),\n                    rotation=token.rotation.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroCode22LowerLeftLineTokenHooks(\n        Parser2HooksBase.MacroCode22LowerLeftLineTokenHooks,\n    ):\n        \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: Code22LowerLeftLineToken,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(Code22LowerLeftLine2())\n            return super().on_parser_visit_token(token, context)\n\n    class MacroVariableAssignment(Parser2HooksBase.MacroVariableAssignment):\n        \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: MacroVariableAssignment,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Adds the primitive to the statement buffer.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.get_macro_statement_buffer().add_statement(\n                Assignment2(\n                    variable_name=token.variable.name,\n                    value=token.value.to_parser2_expression(context),\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class MacroDefinitionTokenHooks(Parser2HooksBase.MacroDefinitionTokenHooks):\n        \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: MacroDefinition,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            stmt_buff = context.get_macro_statement_buffer()\n            macro_name = token.macro_name\n\n            context.set_macro(\n                macro_name,\n                ApertureMacro2(name=macro_name, statements=stmt_buff.get_readonly()),\n            )\n            context.unset_macro_statement_buffer()\n            return super().on_parser_visit_token(token, context)\n\n    class BeginBlockApertureTokenHooks(Parser2HooksBase.BeginBlockApertureTokenHooks):\n        \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: BlockApertureBegin,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.push_block_command_buffer()\n            # Save state from before block definition started.\n            context.push_block_state()\n\n            context.set_current_position(Vector2D.NULL)\n            context.set_is_aperture_block(is_aperture_block=True)\n            context.set_aperture_block_id(token.identifier)\n\n            return super().on_parser_visit_token(token, context)\n\n    class EndBlockApertureTokenHooks(Parser2HooksBase.EndBlockApertureTokenHooks):\n        \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: BlockApertureEnd,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            command_buffer = context.pop_block_command_buffer()\n            identifier = context.get_aperture_block_id()\n            if identifier is None:\n                raise UnnamedBlockApertureNotAllowedError(token)\n\n            context.set_aperture(\n                identifier,\n                Block2(\n                    identifier=identifier,\n                    attributes=context.aperture_attributes,\n                    command_buffer=command_buffer.get_readonly(),\n                ),\n            )\n            # Restore context state from before the block definition.\n            context.set_state(context.pop_block_state())\n            return super().on_parser_visit_token(token, context)\n\n    class DefineApertureCircleTokenHooks(\n        Parser2HooksBase.DefineApertureCircleTokenHooks,\n    ):\n        \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DefineCircle,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            hole_diameter = (\n                None\n                if token.hole_diameter is None\n                else Offset.new(token.hole_diameter, context.get_draw_units())\n            )\n\n            context.set_aperture(\n                token.aperture_id,\n                Circle2(\n                    identifier=token.aperture_id,\n                    attributes=context.aperture_attributes,\n                    diameter=Offset.new(token.diameter, context.get_draw_units()),\n                    hole_diameter=hole_diameter,\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class DefineApertureRectangleTokenHooks(\n        Parser2HooksBase.DefineApertureRectangleTokenHooks,\n    ):\n        \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DefineRectangle,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            hole_diameter = (\n                None\n                if token.hole_diameter is None\n                else Offset.new(token.hole_diameter, context.get_draw_units())\n            )\n\n            context.set_aperture(\n                token.aperture_id,\n                Rectangle2(\n                    identifier=token.aperture_id,\n                    attributes=context.aperture_attributes,\n                    x_size=Offset.new(token.x_size, context.get_draw_units()),\n                    y_size=Offset.new(token.y_size, context.get_draw_units()),\n                    hole_diameter=hole_diameter,\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class DefineApertureObroundTokenHooks(\n        Parser2HooksBase.DefineApertureObroundTokenHooks,\n    ):\n        \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DefineObround,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            hole_diameter = (\n                None\n                if token.hole_diameter is None\n                else Offset.new(token.hole_diameter, context.get_draw_units())\n            )\n\n            context.set_aperture(\n                token.aperture_id,\n                Obround2(\n                    identifier=token.aperture_id,\n                    attributes=context.aperture_attributes,\n                    x_size=Offset.new(token.x_size, context.get_draw_units()),\n                    y_size=Offset.new(token.y_size, context.get_draw_units()),\n                    hole_diameter=hole_diameter,\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class DefineAperturePolygonTokenHooks(\n        Parser2HooksBase.DefineAperturePolygonTokenHooks,\n    ):\n        \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DefinePolygon,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            hole_diameter = (\n                None\n                if token.hole_diameter is None\n                else Offset.new(token.hole_diameter, context.get_draw_units())\n            )\n            rotation = Decimal(\"0.0\") if token.rotation is None else token.rotation\n\n            context.set_aperture(\n                token.aperture_id,\n                Polygon2(\n                    identifier=token.aperture_id,\n                    attributes=context.aperture_attributes,\n                    outer_diameter=Offset.new(\n                        token.outer_diameter,\n                        context.get_draw_units(),\n                    ),\n                    number_vertices=token.number_of_vertices,\n                    rotation=rotation,\n                    hole_diameter=hole_diameter,\n                ),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class DefineApertureMacroTokenHooks(Parser2HooksBase.DefineApertureMacroTokenHooks):\n        \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DefineMacro,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            macro = context.get_macro(token.aperture_type)\n            context.set_macro_eval_buffer()\n            context.macro_variable_buffer = {\n                f\"${i}\": Decimal(param) for i, param in enumerate(token.am_param, 1)\n            }\n            macro.on_parser2_eval_statement(context)\n\n            context.set_aperture(\n                token.aperture_id,\n                Macro2(\n                    identifier=token.aperture_id,\n                    attributes=context.aperture_attributes,\n                    command_buffer=context.get_macro_eval_buffer().get_readonly(),\n                ),\n            )\n\n            context.unset_macro_eval_buffer()\n            context.macro_variable_buffer = {}\n\n            return super().on_parser_visit_token(token, context)\n\n    class MacroEvalHooks:\n        \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n        def __init__(self) -&gt; None:\n            self.macro_id_counter = 0\n\n        def get_next_id(self) -&gt; ApertureID:\n            \"\"\"Get next aperture id for macro.\"\"\"\n            next_id = ApertureID(self.macro_id_counter)\n            self.macro_id_counter += 1\n            return next_id\n\n        def on_code_1_circle(\n            self,\n            context: Parser2Context,\n            primitive: Code1Circle2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 1 circle primitive.\"\"\"\n            exposure = primitive.exposure.on_parser2_eval_expression(context)\n            polarity = (\n                Polarity.Clear\n                if math.isclose(exposure, Decimal(\"0.0\"))\n                else Polarity.Dark\n            )\n            rotation_degrees = primitive.rotation.on_parser2_eval_expression(context)\n            context.get_macro_eval_buffer().add_command(\n                Flash2(\n                    transform=ApertureTransform(\n                        polarity=polarity,\n                        mirroring=Mirroring.NoMirroring,\n                        rotation=Decimal(\"0.0\"),\n                        scaling=Decimal(\"1.0\"),\n                    ),\n                    aperture=Circle2(\n                        identifier=ApertureID(self.get_next_id()),\n                        diameter=Offset.new(\n                            primitive.diameter.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        hole_diameter=None,\n                    ),\n                    flash_point=Vector2D(\n                        x=Offset.new(\n                            primitive.center_x.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y=Offset.new(\n                            primitive.center_y.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                    ),\n                ).get_rotated(rotation_degrees),\n            )\n\n        def on_code_2_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code2VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n        def on_code_4_outline(\n            self,\n            context: Parser2Context,\n            primitive: Code4Outline2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 4 outline primitive.\"\"\"\n            exposure = primitive.exposure.on_parser2_eval_expression(context)\n            polarity = (\n                Polarity.Clear\n                if math.isclose(exposure, Decimal(\"0.0\"))\n                else Polarity.Dark\n            )\n            transform = ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            )\n            aperture = Circle2(\n                identifier=ApertureID(self.get_next_id()),\n                diameter=Offset.NULL,\n                hole_diameter=None,\n            )\n            context.get_macro_eval_buffer().add_command(\n                Region2(\n                    transform=ApertureTransform(\n                        polarity=polarity,\n                        mirroring=Mirroring.NoMirroring,\n                        rotation=Decimal(\"0.0\"),\n                        scaling=Decimal(\"1.0\"),\n                    ),\n                    command_buffer=CommandBuffer2(\n                        [\n                            Line2(\n                                transform=transform,\n                                aperture=aperture,\n                                start_point=Vector2D(\n                                    x=Offset.new(\n                                        start_point.x.on_parser2_eval_expression(\n                                            context,\n                                        ),\n                                        context.get_draw_units(),\n                                    ),\n                                    y=Offset.new(\n                                        start_point.y.on_parser2_eval_expression(\n                                            context,\n                                        ),\n                                        context.get_draw_units(),\n                                    ),\n                                ),\n                                end_point=Vector2D(\n                                    x=Offset.new(\n                                        end_point.x.on_parser2_eval_expression(\n                                            context,\n                                        ),\n                                        context.get_draw_units(),\n                                    ),\n                                    y=Offset.new(\n                                        end_point.y.on_parser2_eval_expression(\n                                            context,\n                                        ),\n                                        context.get_draw_units(),\n                                    ),\n                                ),\n                            )\n                            for start_point, end_point in zip(\n                                [\n                                    Point2(x=primitive.start_x, y=primitive.start_y),\n                                    *primitive.points,\n                                ],\n                                [\n                                    *primitive.points,\n                                    Point2(x=primitive.start_x, y=primitive.start_y),\n                                ],\n                            )\n                        ],\n                    ).get_readonly(),\n                ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n            )\n\n        def on_code_5_polygon(\n            self,\n            context: Parser2Context,\n            primitive: Code5Polygon2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n            exposure = primitive.exposure.on_parser2_eval_expression(context)\n            polarity = (\n                Polarity.Clear\n                if math.isclose(exposure, Decimal(\"0.0\"))\n                else Polarity.Dark\n            )\n            context.get_macro_eval_buffer().add_command(\n                Flash2(\n                    transform=ApertureTransform(\n                        polarity=polarity,\n                        mirroring=Mirroring.NoMirroring,\n                        rotation=Decimal(\"0.0\"),\n                        scaling=Decimal(\"1.0\"),\n                    ),\n                    aperture=Polygon2(\n                        identifier=ApertureID(self.get_next_id()),\n                        outer_diameter=Offset.new(\n                            primitive.diameter.on_parser2_eval_expression(\n                                context,\n                            ),\n                        ),\n                        number_vertices=round(\n                            primitive.number_of_vertices.on_parser2_eval_expression(\n                                context,\n                            ),\n                        ),\n                        rotation=Decimal(\"0.0\"),\n                        hole_diameter=None,\n                    ),\n                    flash_point=Vector2D(\n                        x=Offset.new(\n                            primitive.center_x.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y=Offset.new(\n                            primitive.center_y.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                    ),\n                ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n            )\n\n        def on_code_6_moire(\n            self,\n            context: Parser2Context,\n            primitive: Code6Moire2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n        def on_code_7_thermal(\n            self,\n            context: Parser2Context,\n            primitive: Code7Thermal2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n        def on_code_20_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code20VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n            exposure = primitive.exposure.on_parser2_eval_expression(context)\n            polarity = (\n                Polarity.Clear\n                if math.isclose(exposure, Decimal(\"0.0\"))\n                else Polarity.Dark\n            )\n            context.get_macro_eval_buffer().add_command(\n                Line2(\n                    transform=ApertureTransform(\n                        polarity=polarity,\n                        mirroring=Mirroring.NoMirroring,\n                        rotation=Decimal(\"0.0\"),\n                        scaling=Decimal(\"1.0\"),\n                    ),\n                    aperture=NoCircle2(\n                        identifier=ApertureID(self.get_next_id()),\n                        diameter=Offset.new(\n                            primitive.width.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        hole_diameter=None,\n                    ),\n                    start_point=Vector2D(\n                        x=Offset.new(\n                            primitive.start_x.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y=Offset.new(\n                            primitive.start_y.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                    ),\n                    end_point=Vector2D(\n                        x=Offset.new(\n                            primitive.end_x.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y=Offset.new(\n                            primitive.end_y.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                    ),\n                ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n            )\n\n        def on_code_21_center_line(\n            self,\n            context: Parser2Context,\n            primitive: Code21CenterLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 21 center line primitive.\"\"\"\n            exposure = primitive.exposure.on_parser2_eval_expression(context)\n            polarity = (\n                Polarity.Clear\n                if math.isclose(exposure, Decimal(\"0.0\"))\n                else Polarity.Dark\n            )\n            context.get_macro_eval_buffer().add_command(\n                Flash2(\n                    transform=ApertureTransform(\n                        polarity=polarity,\n                        mirroring=Mirroring.NoMirroring,\n                        rotation=Decimal(\"0.0\"),\n                        scaling=Decimal(\"1.0\"),\n                    ),\n                    aperture=Rectangle2(\n                        identifier=ApertureID(self.get_next_id()),\n                        x_size=Offset.new(\n                            primitive.width.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y_size=Offset.new(\n                            primitive.height.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        hole_diameter=None,\n                    ),\n                    flash_point=Vector2D(\n                        x=Offset.new(\n                            primitive.center_x.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                        y=Offset.new(\n                            primitive.center_y.on_parser2_eval_expression(context),\n                            context.get_draw_units(),\n                        ),\n                    ),\n                ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n            )\n\n        def on_code_22_lower_left_line(\n            self,\n            context: Parser2Context,\n            primitive: Code22LowerLeftLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n        def on_assignment(\n            self,\n            context: Parser2Context,\n            assignment: Assignment2,\n        ) -&gt; None:\n            \"\"\"Evaluate macro variable assignment statement.\"\"\"\n            context.macro_variable_buffer[assignment.variable_name] = (\n                assignment.value.on_parser2_eval_expression(context)\n            )\n\n    class AxisSelectTokenHooksTokenHooks(\n        Parser2HooksBase.AxisSelectTokenHooksTokenHooks,\n    ):\n        \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: AxisSelect,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Perform actions on the context implicated by this token.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context on which to perform the actions.\n\n            \"\"\"\n            context.set_axis_correspondence(token.correspondence)\n            return super().on_parser_visit_token(token, context)\n\n    class CommandDrawTokenHooks(Parser2HooksBase.CommandDrawTokenHooks):\n        \"\"\"Hooks for visiting draw token (D01).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: D01Draw,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            self.DRAW_MODE_DISPATCH_TABLE[context.get_draw_mode()](self, token, context)\n            return super().on_parser_visit_token(token, context)\n\n        def on_parser_visit_token_line(\n            self,\n            token: D01Draw,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            state = context.get_state()\n\n            x = state.parse_coordinate(token.x)\n            y = state.parse_coordinate(token.y)\n\n            start_point = context.get_current_position()\n            end_point = Vector2D(x=x, y=y)\n\n            aperture_id = context.get_current_aperture_id() or throw(\n                ApertureNotSelected2Error(token),\n            )\n            transform = context.get_state().get_aperture_transform()\n            aperture = context.get_aperture(aperture_id, transform)\n\n            command = Line2(\n                attributes=context.object_attributes,\n                aperture=aperture,\n                start_point=start_point,\n                end_point=end_point,\n                transform=transform,\n            ).get_mirrored(transform.get_mirroring())\n\n            context.add_command(command)\n            context.set_current_position(end_point)\n\n        def on_parser_visit_token_arc(\n            self,\n            token: D01Draw,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            state = context.get_state()\n\n            x = state.parse_coordinate(token.x)\n            y = state.parse_coordinate(token.y)\n            i = state.parse_coordinate(token.i)\n            j = state.parse_coordinate(token.j)\n\n            start_point = context.get_current_position()\n            end_point = Vector2D(x=x, y=y)\n            final_center_point = Vector2D.NULL\n\n            if context.get_is_multi_quadrant() is False:\n                # In single quadrant mode I and J offsets are unsigned, therefore we\n                # need to check all 4 possible center points. We will choose first\n                # valid, if anyone needs behavior strictly matching this from spec,\n                # they can always create issue.\n                for center_offset in (\n                    Vector2D(x=i, y=j),\n                    Vector2D(x=-i, y=j),\n                    Vector2D(x=i, y=-j),\n                    Vector2D(x=-i, y=-j),\n                ):\n                    center_point = start_point + center_offset\n                    relative_start_point = start_point - center_point\n                    relative_end_point = end_point - center_point\n                    # Calculate radius of arc from center to start point and end point,\n                    # If they aren't equal, this center candidate is not valid and we\n                    # can skip it.\n                    if not math.isclose(\n                        relative_start_point.length().value,\n                        relative_end_point.length().value,\n                        rel_tol=1e-3,\n                    ):\n                        continue\n\n                    # Calculate angle between vector pointing from center of arc to\n                    # start, and vector pointing from center of arc to end point. If\n                    # this angle is above 90 degrees, we exceeded allowed angle size in\n                    # single quadrant mode and need to try other possible center points.\n                    clockwise_angle = relative_start_point.angle_between(\n                        relative_end_point,\n                    )\n                    if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                        continue\n\n                    final_center_point = center_point\n                    break\n                else:\n                    raise NoValidArcCenterFoundError(token)\n\n            else:\n                # In multi quadrant mode I and J offsets are signed, so we can simply\n                # use them to calculate center point relative to start point.\n                center_offset = Vector2D(x=i, y=j)\n                final_center_point = start_point + center_offset\n\n            aperture_id = context.get_current_aperture_id() or throw(\n                ApertureNotSelected2Error(token),\n            )\n            transform = context.get_state().get_aperture_transform()\n            aperture = context.get_aperture(aperture_id, transform)\n            command = Arc2(\n                attributes=context.object_attributes,\n                aperture=aperture,\n                start_point=start_point,\n                end_point=end_point,\n                center_point=final_center_point,\n                transform=context.get_state().get_aperture_transform(),\n            ).get_mirrored(transform.get_mirroring())\n\n            context.add_command(command)\n            context.set_current_position(end_point)\n\n        def on_parser_visit_token_cc_arc(\n            self,\n            token: D01Draw,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            state = context.get_state()\n\n            x = state.parse_coordinate(token.x)\n            y = state.parse_coordinate(token.y)\n            i = state.parse_coordinate(token.i)\n            j = state.parse_coordinate(token.j)\n\n            start_point = context.get_current_position()\n            end_point = Vector2D(x=x, y=y)\n            final_center_point = Vector2D.NULL\n\n            if context.get_is_multi_quadrant() is False:\n                for center_offset in (\n                    Vector2D(x=i, y=j),\n                    Vector2D(x=-i, y=j),\n                    Vector2D(x=i, y=-j),\n                    Vector2D(x=-i, y=-j),\n                ):\n                    center_point = start_point + center_offset\n                    relative_start_point = start_point - center_point\n                    relative_end_point = end_point - center_point\n\n                    if not math.isclose(\n                        relative_start_point.length().value,\n                        relative_end_point.length().value,\n                        rel_tol=1e-6,\n                    ):\n                        continue\n\n                    # Calculate angle between vector pointing from center of arc to\n                    # start, and vector pointing from center of arc to end point. If\n                    # this angle is above 90 degrees, we exceeded allowed angle size in\n                    # single quadrant mode and need to try other possible center points.\n                    clockwise_angle = relative_start_point.angle_between_cc(\n                        relative_end_point,\n                    )\n                    if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                        continue\n\n                    final_center_point = center_point\n                    break\n                else:\n                    raise NoValidArcCenterFoundError(token)\n\n            else:\n                center_offset = Vector2D(x=i, y=j)\n                final_center_point = start_point + center_offset\n\n            aperture_id = context.get_current_aperture_id() or throw(\n                ApertureNotSelected2Error(token),\n            )\n            transform = context.get_state().get_aperture_transform()\n            aperture = context.get_aperture(aperture_id, transform)\n            command = CCArc2(\n                attributes=context.object_attributes,\n                aperture=aperture,\n                start_point=start_point,\n                end_point=end_point,\n                center_point=final_center_point,\n                transform=context.get_state().get_aperture_transform(),\n            ).get_mirrored(transform.get_mirroring())\n\n            context.add_command(command)\n            context.set_current_position(end_point)\n\n        DRAW_MODE_DISPATCH_TABLE = MappingProxyType(\n            {\n                DrawMode.Linear: on_parser_visit_token_line,\n                DrawMode.ClockwiseCircular: on_parser_visit_token_arc,\n                DrawMode.CounterclockwiseCircular: on_parser_visit_token_cc_arc,\n            },\n        )\n\n    class CommandMoveTokenHooks(Parser2HooksBase.CommandMoveTokenHooks):\n        \"\"\"Hooks for visiting move token (D02).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: D02Move,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            state = context.get_state()\n\n            x = state.parse_coordinate(token.x)\n            y = state.parse_coordinate(token.y)\n\n            destination_point = Vector2D(x=x, y=y)\n\n            context.set_current_position(destination_point)\n            return super().on_parser_visit_token(token, context)\n\n    class CommandFlashTokenHooks(Parser2HooksBase.CommandFlashTokenHooks):\n        \"\"\"Hooks for visiting flash token (D03).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: D03Flash,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            state = context.get_state()\n\n            x = state.parse_coordinate(token.x)\n            y = state.parse_coordinate(token.y)\n\n            flash_point = Vector2D(x=x, y=y)\n\n            aperture_id = context.get_current_aperture_id() or throw(\n                ApertureNotSelected2Error(token),\n            )\n            transform = context.get_state().get_aperture_transform()\n            aperture = context.get_aperture(aperture_id, transform)\n\n            if isinstance(aperture, Block2):\n                cmd_buffer = aperture.command_buffer.get_transposed(flash_point)\n                context.add_command(\n                    BufferCommand2(\n                        transform=transform,\n                        command_buffer=cmd_buffer,\n                    ),\n                )\n\n            else:\n                context.add_command(\n                    Flash2(\n                        attributes=context.object_attributes,\n                        aperture=aperture,\n                        flash_point=flash_point,\n                        transform=transform,\n                    ),\n                )\n\n            context.set_current_position(flash_point)\n            return super().on_parser_visit_token(token, context)\n\n    class SelectApertureTokenHooks(Parser2HooksBase.SelectApertureTokenHooks):\n        \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DNNSelectAperture,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_current_aperture_id(token.aperture_id)\n            return super().on_parser_visit_token(token, context)\n\n    class CoordinateFormatTokenHooks(Parser2HooksBase.CoordinateFormatTokenHooks):\n        \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: CoordinateFormat,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_coordinate_parser(\n                CoordinateParser.new(\n                    x_format=token.x_format,\n                    y_format=token.y_format,\n                    coordinate_mode=token.coordinate_mode,\n                    zeros_mode=token.zeros_mode,\n                ),\n            )\n\n    class SetLinearTokenHooks(Parser2HooksBase.SetLinearTokenHooks):\n        \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetLinear,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_mode(DrawMode.Linear)\n            return super().on_parser_visit_token(token, context)\n\n    class SetClockwiseCircularTokenHooks(\n        Parser2HooksBase.SetClockwiseCircularTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetClockwiseCircular,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_mode(DrawMode.ClockwiseCircular)\n            return super().on_parser_visit_token(token, context)\n\n    class SetCounterClockwiseCircularTokenHooks(\n        Parser2HooksBase.SetCounterClockwiseCircularTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetCounterclockwiseCircular,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_mode(DrawMode.CounterclockwiseCircular)\n            return super().on_parser_visit_token(token, context)\n\n    class CommentTokenHooks(Parser2HooksBase.CommentTokenHooks):\n        \"\"\"Hooks for visiting comment token (G04).\"\"\"\n\n    class BeginRegionTokenHooks(Parser2HooksBase.BeginRegionTokenHooks):\n        \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: BeginRegion,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_is_region(is_region=True)\n            context.set_region_command_buffer()\n\n            return super().on_parser_visit_token(token, context)\n\n    class EndRegionTokenHooks(Parser2HooksBase.EndRegionTokenHooks):\n        \"\"\"Hooks for visiting end region token (G37).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: EndRegion,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_is_region(is_region=False)\n            command_buffer = context.get_region_command_buffer()\n\n            context.add_command(\n                Region2(\n                    aperture_attributes=context.aperture_attributes,\n                    object_attributes=context.object_attributes,\n                    command_buffer=command_buffer.get_readonly(),\n                    transform=context.get_state().get_aperture_transform(),\n                ),\n            )\n\n            context.unset_region_command_buffer()\n            return super().on_parser_visit_token(token, context)\n\n    class PrepareSelectApertureTokenHooks(\n        Parser2HooksBase.PrepareSelectApertureTokenHooks,\n    ):\n        \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: G54SelectAperture,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            self.hooks.select_aperture.on_parser_visit_token(token, context)\n            return super().on_parser_visit_token(token, context)\n\n    class SetUnitInchTokenHooks(Parser2HooksBase.SetUnitInchTokenHooks):\n        \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetUnitInch,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_units(Unit.Inches)\n            return super().on_parser_visit_token(token, context)\n\n    class SetUnitMillimetersTokenHooks(Parser2HooksBase.SetUnitMillimetersTokenHooks):\n        \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetUnitMillimeters,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_units(Unit.Millimeters)\n            return super().on_parser_visit_token(token, context)\n\n    class SetSingleQuadrantModeTokenHooks(\n        Parser2HooksBase.SetSingleQuadrantModeTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetSingleQuadrantMode,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_is_multi_quadrant(is_multi_quadrant=False)\n            return super().on_parser_visit_token(token, context)\n\n    class SetMultiQuadrantModeTokenHooks(\n        Parser2HooksBase.SetMultiQuadrantModeTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetMultiQuadrantMode,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_is_multi_quadrant(is_multi_quadrant=True)\n            return super().on_parser_visit_token(token, context)\n\n    class SetCoordinateAbsoluteTokenHooks(\n        Parser2HooksBase.SetCoordinateAbsoluteTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetAbsoluteNotation,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            # NOOP - only absolute format supported.\n            return super().on_parser_visit_token(token, context)\n\n    class SetCoordinateIncrementalTokenHooks(\n        Parser2HooksBase.SetCoordinateIncrementalTokenHooks,\n    ):\n        \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: SetIncrementalNotation,  # noqa: ARG002\n            context: Parser2Context,  # noqa: ARG002\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            raise IncrementalCoordinatesNotSupported2Error\n\n    class ImageNameTokenHooks(Parser2HooksBase.ImageNameTokenHooks):\n        \"\"\"Hooks for visiting image name token (IN).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: ImageName,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_image_name(token.content)\n            return super().on_parser_visit_token(token, context)\n\n    class InvalidTokenHooks(Parser2HooksBase.InvalidTokenHooks):\n        \"\"\"Hooks for visiting invalid token.\"\"\"\n\n    class ImagePolarityTokenHooks(Parser2HooksBase.ImagePolarityTokenHooks):\n        \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: ImagePolarity,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_is_output_image_negation_required(\n                value=(token.image_polarity == ImagePolarityEnum.NEGATIVE),\n            )\n            return super().on_parser_visit_token(token, context)\n\n    class LoadMirroringTokenHooks(Parser2HooksBase.LoadMirroringTokenHooks):\n        \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: LoadMirroring,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_mirroring(token.mirroring)\n            return super().on_parser_visit_token(token, context)\n\n    class LoadNameTokenHooks(Parser2HooksBase.LoadNameTokenHooks):\n        \"\"\"Hooks for visiting load name token (LN).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: LoadName,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_file_name(token.content)\n            return super().on_parser_visit_token(token, context)\n\n    class LoadPolarityTokenHooks(Parser2HooksBase.LoadPolarityTokenHooks):\n        \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: LoadPolarity,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_polarity(token.polarity)\n            return super().on_parser_visit_token(token, context)\n\n    class LoadRotationTokenHooks(Parser2HooksBase.LoadRotationTokenHooks):\n        \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: LoadRotation,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_rotation(token.rotation)\n            return super().on_parser_visit_token(token, context)\n\n    class LoadScalingTokenHooks(Parser2HooksBase.LoadScalingTokenHooks):\n        \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: LoadScaling,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_scaling(token.scaling)\n            return super().on_parser_visit_token(token, context)\n\n    class ProgramStopTokenHooks(Parser2HooksBase.ProgramStopTokenHooks):\n        \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: M00ProgramStop,  # noqa: ARG002\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_reached_program_stop()\n            context.halt_parser()\n\n    class OptionalStopTokenHooks(Parser2HooksBase.OptionalStopTokenHooks):\n        \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: M01OptionalStop,  # noqa: ARG002\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Handle child parsing being completed.\"\"\"\n            context.set_reached_optional_stop()\n\n    class EndOfFileTokenHooks(Parser2HooksBase.EndOfFileTokenHooks):\n        \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: M02EndOfFile,  # noqa: ARG002\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_reached_end_of_file()\n            context.halt_parser()\n\n    class UnitModeTokenHooks(Parser2HooksBase.UnitModeTokenHooks):\n        \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: UnitMode,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_draw_units(token.unit)\n            return super().on_parser_visit_token(token, context)\n\n    class ImageOffsetTokenHooks(Parser2HooksBase.ImageOffsetTokenHooks):\n        \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n\n    class StepRepeatBeginTokenHooks(Parser2HooksBase.StepRepeatBeginTokenHooks):\n        \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: StepRepeatBegin,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_state_before_step_and_repeat()\n\n            context.set_is_step_and_repeat(is_step_and_repeat=True)\n            context.set_x_repeat(token.x_repeat)\n            context.set_y_repeat(token.y_repeat)\n            context.set_x_step(Offset.new(token.x_step, unit=context.get_draw_units()))\n            context.set_y_step(Offset.new(token.y_step, unit=context.get_draw_units()))\n            context.set_step_and_repeat_command_buffer()\n\n            return super().on_parser_visit_token(token, context)\n\n    class StepRepeatEndTokenHooks(Parser2HooksBase.StepRepeatEndTokenHooks):\n        \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: StepRepeatEnd,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            if context.get_is_step_and_repeat() is False:\n                raise StepAndRepeatNotInitializedError(token)\n\n            command_buffer = context.get_step_and_repeat_command_buffer().get_readonly()\n            commands: list[Command2] = []\n\n            for x_index in range(context.get_x_repeat()):\n                for y_index in range(context.get_y_repeat()):\n                    buffer_command = BufferCommand2(\n                        transform=context.get_state().get_aperture_transform(),\n                        command_buffer=command_buffer,\n                    ).get_transposed(\n                        Vector2D(\n                            x=(context.get_x_step() * x_index),\n                            y=(context.get_y_step() * y_index),\n                        ),\n                    )\n                    commands.append(buffer_command)\n\n            # Resets all variables, including is_step_and_repeat and possibly other\n            # set during recording of SR command block. Must be done before\n            # add_command() to push SR command buffers to main command buffers.\n            context.reset_state_to_pre_step_and_repeat()\n            context.unset_state_before_step_and_repeat()\n            context.unset_step_and_repeat_command_buffer()\n\n            for command in commands:\n                context.add_command(command)\n\n            return super().on_parser_visit_token(token, context)\n\n    class ApertureAttributeHooks(Parser2HooksBase.ApertureAttributeHooks):\n        \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: ApertureAttribute,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_aperture_attribute(token.name, token.value)\n            return super().on_parser_visit_token(token, context)\n\n    class DeleteAttributeHooks(Parser2HooksBase.DeleteAttributeHooks):\n        \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: DeleteAttribute,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            if token.name is not None:\n                context.delete_aperture_attribute(token.name)\n                context.delete_object_attribute(token.name)\n            else:\n                context.clear_aperture_attributes()\n                context.clear_object_attributes()\n            return super().on_parser_visit_token(token, context)\n\n    class FileAttributeHooks(Parser2HooksBase.FileAttributeHooks):\n        \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: FileAttribute,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_file_attribute(token.name, token.value)\n            return super().on_parser_visit_token(token, context)\n\n    class ObjectAttributeHooks(Parser2HooksBase.ObjectAttributeHooks):\n        \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n\n        def on_parser_visit_token(\n            self,\n            token: ObjectAttribute,\n            context: Parser2Context,\n        ) -&gt; None:\n            \"\"\"Called when parser visits a token.\n\n            This hook should perform all changes on context implicated by token type.\n\n            Parameters\n            ----------\n            token: TokenT\n                The token that is being visited.\n            context : Parser2Context\n                The context object containing information about the parser state.\n\n            \"\"\"\n            context.set_object_attribute(token.name, token.value)\n            return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroBeginTokenHooks","title":"MacroBeginTokenHooks","text":"<p>             Bases: <code>MacroBeginTokenHooks</code></p> <p>Hooks for visiting macro begin token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroBeginTokenHooks(Parser2HooksBase.MacroBeginTokenHooks):\n    \"\"\"Hooks for visiting macro begin token (AM).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: MacroBegin,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_macro_statement_buffer()\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroBeginTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: MacroBegin, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>MacroBegin</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: MacroBegin,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_macro_statement_buffer()\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode1CircleTokenHooks","title":"MacroCode1CircleTokenHooks","text":"<p>             Bases: <code>MacroCode1CircleTokenHooks</code></p> <p>Hooks for visiting macro primitive code 0 circle.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode1CircleTokenHooks(Parser2HooksBase.MacroCode1CircleTokenHooks):\n    \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code1CircleToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code1Circle2(\n                exposure=token.exposure.to_parser2_expression(context),\n                diameter=token.diameter.to_parser2_expression(context),\n                center_x=token.center_x.to_parser2_expression(context),\n                center_y=token.center_y.to_parser2_expression(context),\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode1CircleTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code1CircleToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code1CircleToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code1CircleToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code1Circle2(\n            exposure=token.exposure.to_parser2_expression(context),\n            diameter=token.diameter.to_parser2_expression(context),\n            center_x=token.center_x.to_parser2_expression(context),\n            center_y=token.center_y.to_parser2_expression(context),\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode2VectorLineTokenHooks","title":"MacroCode2VectorLineTokenHooks","text":"<p>             Bases: <code>MacroCode2VectorLineTokenHooks</code></p> <p>Hooks for visiting macro primitive code 2 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode2VectorLineTokenHooks(\n    Parser2HooksBase.MacroCode2VectorLineTokenHooks,\n):\n    \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code2VectorLineToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: Code2VectorLine\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code2VectorLine2(),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode2VectorLineTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code2VectorLineToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code2VectorLineToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code2VectorLineToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: Code2VectorLine\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code2VectorLine2(),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode4OutlineTokenHooks","title":"MacroCode4OutlineTokenHooks","text":"<p>             Bases: <code>MacroCode4OutlineTokenHooks</code></p> <p>Hooks for visiting macro primitive code 4 outline.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode4OutlineTokenHooks(Parser2HooksBase.MacroCode4OutlineTokenHooks):\n    \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code4OutlineToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code4Outline2(\n                exposure=token.exposure.to_parser2_expression(context),\n                vertex_count=token.number_of_vertices.to_parser2_expression(\n                    context,\n                ),\n                start_x=token.start_x.to_parser2_expression(context),\n                start_y=token.start_y.to_parser2_expression(context),\n                points=[point.to_parser2_point2(context) for point in token.point],\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode4OutlineTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code4OutlineToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code4OutlineToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code4OutlineToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code4Outline2(\n            exposure=token.exposure.to_parser2_expression(context),\n            vertex_count=token.number_of_vertices.to_parser2_expression(\n                context,\n            ),\n            start_x=token.start_x.to_parser2_expression(context),\n            start_y=token.start_y.to_parser2_expression(context),\n            points=[point.to_parser2_point2(context) for point in token.point],\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode5PolygonTokenHooks","title":"MacroCode5PolygonTokenHooks","text":"<p>             Bases: <code>MacroCode5PolygonTokenHooks</code></p> <p>Hooks for visiting macro primitive code 5 polygon.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode5PolygonTokenHooks(Parser2HooksBase.MacroCode5PolygonTokenHooks):\n    \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code5PolygonToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code5Polygon2(\n                exposure=token.exposure.to_parser2_expression(context),\n                number_of_vertices=token.number_of_vertices.to_parser2_expression(\n                    context,\n                ),\n                center_x=token.center_x.to_parser2_expression(context),\n                center_y=token.center_y.to_parser2_expression(context),\n                diameter=token.diameter.to_parser2_expression(context),\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode5PolygonTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code5PolygonToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code5PolygonToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code5PolygonToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code5Polygon2(\n            exposure=token.exposure.to_parser2_expression(context),\n            number_of_vertices=token.number_of_vertices.to_parser2_expression(\n                context,\n            ),\n            center_x=token.center_x.to_parser2_expression(context),\n            center_y=token.center_y.to_parser2_expression(context),\n            diameter=token.diameter.to_parser2_expression(context),\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode6MoireTokenHooks","title":"MacroCode6MoireTokenHooks","text":"<p>             Bases: <code>MacroCode6MoireTokenHooks</code></p> <p>Hooks for visiting macro primitive code 6 moire.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode6MoireTokenHooks(Parser2HooksBase.MacroCode6MoireTokenHooks):\n    \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code6MoireToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code6Moire2(),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode6MoireTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code6MoireToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code6MoireToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code6MoireToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code6Moire2(),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode7ThermalTokenHooks","title":"MacroCode7ThermalTokenHooks","text":"<p>             Bases: <code>MacroCode7ThermalTokenHooks</code></p> <p>Hooks for visiting macro primitive code 7 thermal.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode7ThermalTokenHooks(Parser2HooksBase.MacroCode7ThermalTokenHooks):\n    \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code7ThermalToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code7Thermal2(\n                center_x=token.center_x.to_parser2_expression(context),\n                center_y=token.center_y.to_parser2_expression(context),\n                outer_diameter=token.outer_diameter.to_parser2_expression(context),\n                inner_diameter=token.inner_diameter.to_parser2_expression(context),\n                gap=token.gap.to_parser2_expression(context),\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode7ThermalTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code7ThermalToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code7ThermalToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code7ThermalToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code7Thermal2(\n            center_x=token.center_x.to_parser2_expression(context),\n            center_y=token.center_y.to_parser2_expression(context),\n            outer_diameter=token.outer_diameter.to_parser2_expression(context),\n            inner_diameter=token.inner_diameter.to_parser2_expression(context),\n            gap=token.gap.to_parser2_expression(context),\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode20VectorLineTokenHooks","title":"MacroCode20VectorLineTokenHooks","text":"<p>             Bases: <code>MacroCode20VectorLineTokenHooks</code></p> <p>Hooks for visiting macro primitive code 20 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode20VectorLineTokenHooks(\n    Parser2HooksBase.MacroCode20VectorLineTokenHooks,\n):\n    \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code20VectorLineToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code20VectorLine2(\n                exposure=token.exposure.to_parser2_expression(context),\n                width=token.width.to_parser2_expression(context),\n                start_x=token.start_x.to_parser2_expression(context),\n                start_y=token.start_y.to_parser2_expression(context),\n                end_x=token.end_x.to_parser2_expression(context),\n                end_y=token.end_y.to_parser2_expression(context),\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode20VectorLineTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code20VectorLineToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code20VectorLineToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code20VectorLineToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code20VectorLine2(\n            exposure=token.exposure.to_parser2_expression(context),\n            width=token.width.to_parser2_expression(context),\n            start_x=token.start_x.to_parser2_expression(context),\n            start_y=token.start_y.to_parser2_expression(context),\n            end_x=token.end_x.to_parser2_expression(context),\n            end_y=token.end_y.to_parser2_expression(context),\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode21CenterLineTokenHooks","title":"MacroCode21CenterLineTokenHooks","text":"<p>             Bases: <code>MacroCode21CenterLineTokenHooks</code></p> <p>Hooks for visiting macro primitive code 21 center line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode21CenterLineTokenHooks(\n    Parser2HooksBase.MacroCode21CenterLineTokenHooks,\n):\n    \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code21CenterLineToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Code21CenterLine2(\n                exposure=token.exposure.to_parser2_expression(context),\n                width=token.width.to_parser2_expression(context),\n                height=token.height.to_parser2_expression(context),\n                center_x=token.center_x.to_parser2_expression(context),\n                center_y=token.center_y.to_parser2_expression(context),\n                rotation=token.rotation.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode21CenterLineTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code21CenterLineToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code21CenterLineToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code21CenterLineToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Code21CenterLine2(\n            exposure=token.exposure.to_parser2_expression(context),\n            width=token.width.to_parser2_expression(context),\n            height=token.height.to_parser2_expression(context),\n            center_x=token.center_x.to_parser2_expression(context),\n            center_y=token.center_y.to_parser2_expression(context),\n            rotation=token.rotation.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode22LowerLeftLineTokenHooks","title":"MacroCode22LowerLeftLineTokenHooks","text":"<p>             Bases: <code>MacroCode22LowerLeftLineTokenHooks</code></p> <p>Hooks for visiting macro primitive code 22 lower left line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroCode22LowerLeftLineTokenHooks(\n    Parser2HooksBase.MacroCode22LowerLeftLineTokenHooks,\n):\n    \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: Code22LowerLeftLineToken,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(Code22LowerLeftLine2())\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroCode22LowerLeftLineTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: Code22LowerLeftLineToken, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Code22LowerLeftLineToken</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: Code22LowerLeftLineToken,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(Code22LowerLeftLine2())\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroVariableAssignment","title":"MacroVariableAssignment","text":"<p>             Bases: <code>MacroVariableAssignment</code></p> <p>Hooks for visiting macro variable assignment token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroVariableAssignment(Parser2HooksBase.MacroVariableAssignment):\n    \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: MacroVariableAssignment,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Adds the primitive to the statement buffer.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.get_macro_statement_buffer().add_statement(\n            Assignment2(\n                variable_name=token.variable.name,\n                value=token.value.to_parser2_expression(context),\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroVariableAssignment.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: MacroVariableAssignment, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Adds the primitive to the statement buffer.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>MacroVariableAssignment</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: MacroVariableAssignment,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Adds the primitive to the statement buffer.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.get_macro_statement_buffer().add_statement(\n        Assignment2(\n            variable_name=token.variable.name,\n            value=token.value.to_parser2_expression(context),\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroDefinitionTokenHooks","title":"MacroDefinitionTokenHooks","text":"<p>             Bases: <code>MacroDefinitionTokenHooks</code></p> <p>Hooks for visiting macro definition token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroDefinitionTokenHooks(Parser2HooksBase.MacroDefinitionTokenHooks):\n    \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: MacroDefinition,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        stmt_buff = context.get_macro_statement_buffer()\n        macro_name = token.macro_name\n\n        context.set_macro(\n            macro_name,\n            ApertureMacro2(name=macro_name, statements=stmt_buff.get_readonly()),\n        )\n        context.unset_macro_statement_buffer()\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroDefinitionTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: MacroDefinition, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>MacroDefinition</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: MacroDefinition,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    stmt_buff = context.get_macro_statement_buffer()\n    macro_name = token.macro_name\n\n    context.set_macro(\n        macro_name,\n        ApertureMacro2(name=macro_name, statements=stmt_buff.get_readonly()),\n    )\n    context.unset_macro_statement_buffer()\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.BeginBlockApertureTokenHooks","title":"BeginBlockApertureTokenHooks","text":"<p>             Bases: <code>BeginBlockApertureTokenHooks</code></p> <p>Hooks for visiting begin block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class BeginBlockApertureTokenHooks(Parser2HooksBase.BeginBlockApertureTokenHooks):\n    \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: BlockApertureBegin,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.push_block_command_buffer()\n        # Save state from before block definition started.\n        context.push_block_state()\n\n        context.set_current_position(Vector2D.NULL)\n        context.set_is_aperture_block(is_aperture_block=True)\n        context.set_aperture_block_id(token.identifier)\n\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.BeginBlockApertureTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: BlockApertureBegin, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>BlockApertureBegin</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: BlockApertureBegin,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.push_block_command_buffer()\n    # Save state from before block definition started.\n    context.push_block_state()\n\n    context.set_current_position(Vector2D.NULL)\n    context.set_is_aperture_block(is_aperture_block=True)\n    context.set_aperture_block_id(token.identifier)\n\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndBlockApertureTokenHooks","title":"EndBlockApertureTokenHooks","text":"<p>             Bases: <code>EndBlockApertureTokenHooks</code></p> <p>Hooks for visiting end block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class EndBlockApertureTokenHooks(Parser2HooksBase.EndBlockApertureTokenHooks):\n    \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: BlockApertureEnd,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        command_buffer = context.pop_block_command_buffer()\n        identifier = context.get_aperture_block_id()\n        if identifier is None:\n            raise UnnamedBlockApertureNotAllowedError(token)\n\n        context.set_aperture(\n            identifier,\n            Block2(\n                identifier=identifier,\n                attributes=context.aperture_attributes,\n                command_buffer=command_buffer.get_readonly(),\n            ),\n        )\n        # Restore context state from before the block definition.\n        context.set_state(context.pop_block_state())\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndBlockApertureTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: BlockApertureEnd, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>BlockApertureEnd</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: BlockApertureEnd,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    command_buffer = context.pop_block_command_buffer()\n    identifier = context.get_aperture_block_id()\n    if identifier is None:\n        raise UnnamedBlockApertureNotAllowedError(token)\n\n    context.set_aperture(\n        identifier,\n        Block2(\n            identifier=identifier,\n            attributes=context.aperture_attributes,\n            command_buffer=command_buffer.get_readonly(),\n        ),\n    )\n    # Restore context state from before the block definition.\n    context.set_state(context.pop_block_state())\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureCircleTokenHooks","title":"DefineApertureCircleTokenHooks","text":"<p>             Bases: <code>DefineApertureCircleTokenHooks</code></p> <p>Hooks for visiting circle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DefineApertureCircleTokenHooks(\n    Parser2HooksBase.DefineApertureCircleTokenHooks,\n):\n    \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DefineCircle,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        hole_diameter = (\n            None\n            if token.hole_diameter is None\n            else Offset.new(token.hole_diameter, context.get_draw_units())\n        )\n\n        context.set_aperture(\n            token.aperture_id,\n            Circle2(\n                identifier=token.aperture_id,\n                attributes=context.aperture_attributes,\n                diameter=Offset.new(token.diameter, context.get_draw_units()),\n                hole_diameter=hole_diameter,\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureCircleTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DefineCircle, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DefineCircle</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DefineCircle,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    hole_diameter = (\n        None\n        if token.hole_diameter is None\n        else Offset.new(token.hole_diameter, context.get_draw_units())\n    )\n\n    context.set_aperture(\n        token.aperture_id,\n        Circle2(\n            identifier=token.aperture_id,\n            attributes=context.aperture_attributes,\n            diameter=Offset.new(token.diameter, context.get_draw_units()),\n            hole_diameter=hole_diameter,\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureRectangleTokenHooks","title":"DefineApertureRectangleTokenHooks","text":"<p>             Bases: <code>DefineApertureRectangleTokenHooks</code></p> <p>Hooks for visiting rectangle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DefineApertureRectangleTokenHooks(\n    Parser2HooksBase.DefineApertureRectangleTokenHooks,\n):\n    \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DefineRectangle,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        hole_diameter = (\n            None\n            if token.hole_diameter is None\n            else Offset.new(token.hole_diameter, context.get_draw_units())\n        )\n\n        context.set_aperture(\n            token.aperture_id,\n            Rectangle2(\n                identifier=token.aperture_id,\n                attributes=context.aperture_attributes,\n                x_size=Offset.new(token.x_size, context.get_draw_units()),\n                y_size=Offset.new(token.y_size, context.get_draw_units()),\n                hole_diameter=hole_diameter,\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureRectangleTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DefineRectangle, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DefineRectangle</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DefineRectangle,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    hole_diameter = (\n        None\n        if token.hole_diameter is None\n        else Offset.new(token.hole_diameter, context.get_draw_units())\n    )\n\n    context.set_aperture(\n        token.aperture_id,\n        Rectangle2(\n            identifier=token.aperture_id,\n            attributes=context.aperture_attributes,\n            x_size=Offset.new(token.x_size, context.get_draw_units()),\n            y_size=Offset.new(token.y_size, context.get_draw_units()),\n            hole_diameter=hole_diameter,\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureObroundTokenHooks","title":"DefineApertureObroundTokenHooks","text":"<p>             Bases: <code>DefineApertureObroundTokenHooks</code></p> <p>Hooks for visiting obround aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DefineApertureObroundTokenHooks(\n    Parser2HooksBase.DefineApertureObroundTokenHooks,\n):\n    \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DefineObround,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        hole_diameter = (\n            None\n            if token.hole_diameter is None\n            else Offset.new(token.hole_diameter, context.get_draw_units())\n        )\n\n        context.set_aperture(\n            token.aperture_id,\n            Obround2(\n                identifier=token.aperture_id,\n                attributes=context.aperture_attributes,\n                x_size=Offset.new(token.x_size, context.get_draw_units()),\n                y_size=Offset.new(token.y_size, context.get_draw_units()),\n                hole_diameter=hole_diameter,\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureObroundTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DefineObround, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DefineObround</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DefineObround,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    hole_diameter = (\n        None\n        if token.hole_diameter is None\n        else Offset.new(token.hole_diameter, context.get_draw_units())\n    )\n\n    context.set_aperture(\n        token.aperture_id,\n        Obround2(\n            identifier=token.aperture_id,\n            attributes=context.aperture_attributes,\n            x_size=Offset.new(token.x_size, context.get_draw_units()),\n            y_size=Offset.new(token.y_size, context.get_draw_units()),\n            hole_diameter=hole_diameter,\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineAperturePolygonTokenHooks","title":"DefineAperturePolygonTokenHooks","text":"<p>             Bases: <code>DefineAperturePolygonTokenHooks</code></p> <p>Hooks for visiting polygon aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DefineAperturePolygonTokenHooks(\n    Parser2HooksBase.DefineAperturePolygonTokenHooks,\n):\n    \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DefinePolygon,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        hole_diameter = (\n            None\n            if token.hole_diameter is None\n            else Offset.new(token.hole_diameter, context.get_draw_units())\n        )\n        rotation = Decimal(\"0.0\") if token.rotation is None else token.rotation\n\n        context.set_aperture(\n            token.aperture_id,\n            Polygon2(\n                identifier=token.aperture_id,\n                attributes=context.aperture_attributes,\n                outer_diameter=Offset.new(\n                    token.outer_diameter,\n                    context.get_draw_units(),\n                ),\n                number_vertices=token.number_of_vertices,\n                rotation=rotation,\n                hole_diameter=hole_diameter,\n            ),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineAperturePolygonTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DefinePolygon, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DefinePolygon</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DefinePolygon,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    hole_diameter = (\n        None\n        if token.hole_diameter is None\n        else Offset.new(token.hole_diameter, context.get_draw_units())\n    )\n    rotation = Decimal(\"0.0\") if token.rotation is None else token.rotation\n\n    context.set_aperture(\n        token.aperture_id,\n        Polygon2(\n            identifier=token.aperture_id,\n            attributes=context.aperture_attributes,\n            outer_diameter=Offset.new(\n                token.outer_diameter,\n                context.get_draw_units(),\n            ),\n            number_vertices=token.number_of_vertices,\n            rotation=rotation,\n            hole_diameter=hole_diameter,\n        ),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureMacroTokenHooks","title":"DefineApertureMacroTokenHooks","text":"<p>             Bases: <code>DefineApertureMacroTokenHooks</code></p> <p>Hooks for visiting macro aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DefineApertureMacroTokenHooks(Parser2HooksBase.DefineApertureMacroTokenHooks):\n    \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DefineMacro,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        macro = context.get_macro(token.aperture_type)\n        context.set_macro_eval_buffer()\n        context.macro_variable_buffer = {\n            f\"${i}\": Decimal(param) for i, param in enumerate(token.am_param, 1)\n        }\n        macro.on_parser2_eval_statement(context)\n\n        context.set_aperture(\n            token.aperture_id,\n            Macro2(\n                identifier=token.aperture_id,\n                attributes=context.aperture_attributes,\n                command_buffer=context.get_macro_eval_buffer().get_readonly(),\n            ),\n        )\n\n        context.unset_macro_eval_buffer()\n        context.macro_variable_buffer = {}\n\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DefineApertureMacroTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DefineMacro, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DefineMacro</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DefineMacro,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    macro = context.get_macro(token.aperture_type)\n    context.set_macro_eval_buffer()\n    context.macro_variable_buffer = {\n        f\"${i}\": Decimal(param) for i, param in enumerate(token.am_param, 1)\n    }\n    macro.on_parser2_eval_statement(context)\n\n    context.set_aperture(\n        token.aperture_id,\n        Macro2(\n            identifier=token.aperture_id,\n            attributes=context.aperture_attributes,\n            command_buffer=context.get_macro_eval_buffer().get_readonly(),\n        ),\n    )\n\n    context.unset_macro_eval_buffer()\n    context.macro_variable_buffer = {}\n\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks","title":"MacroEvalHooks","text":"<p>Hooks called when evaluating macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class MacroEvalHooks:\n    \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self.macro_id_counter = 0\n\n    def get_next_id(self) -&gt; ApertureID:\n        \"\"\"Get next aperture id for macro.\"\"\"\n        next_id = ApertureID(self.macro_id_counter)\n        self.macro_id_counter += 1\n        return next_id\n\n    def on_code_1_circle(\n        self,\n        context: Parser2Context,\n        primitive: Code1Circle2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 1 circle primitive.\"\"\"\n        exposure = primitive.exposure.on_parser2_eval_expression(context)\n        polarity = (\n            Polarity.Clear\n            if math.isclose(exposure, Decimal(\"0.0\"))\n            else Polarity.Dark\n        )\n        rotation_degrees = primitive.rotation.on_parser2_eval_expression(context)\n        context.get_macro_eval_buffer().add_command(\n            Flash2(\n                transform=ApertureTransform(\n                    polarity=polarity,\n                    mirroring=Mirroring.NoMirroring,\n                    rotation=Decimal(\"0.0\"),\n                    scaling=Decimal(\"1.0\"),\n                ),\n                aperture=Circle2(\n                    identifier=ApertureID(self.get_next_id()),\n                    diameter=Offset.new(\n                        primitive.diameter.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    hole_diameter=None,\n                ),\n                flash_point=Vector2D(\n                    x=Offset.new(\n                        primitive.center_x.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y=Offset.new(\n                        primitive.center_y.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                ),\n            ).get_rotated(rotation_degrees),\n        )\n\n    def on_code_2_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code2VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n    def on_code_4_outline(\n        self,\n        context: Parser2Context,\n        primitive: Code4Outline2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 4 outline primitive.\"\"\"\n        exposure = primitive.exposure.on_parser2_eval_expression(context)\n        polarity = (\n            Polarity.Clear\n            if math.isclose(exposure, Decimal(\"0.0\"))\n            else Polarity.Dark\n        )\n        transform = ApertureTransform(\n            polarity=polarity,\n            mirroring=Mirroring.NoMirroring,\n            rotation=Decimal(\"0.0\"),\n            scaling=Decimal(\"1.0\"),\n        )\n        aperture = Circle2(\n            identifier=ApertureID(self.get_next_id()),\n            diameter=Offset.NULL,\n            hole_diameter=None,\n        )\n        context.get_macro_eval_buffer().add_command(\n            Region2(\n                transform=ApertureTransform(\n                    polarity=polarity,\n                    mirroring=Mirroring.NoMirroring,\n                    rotation=Decimal(\"0.0\"),\n                    scaling=Decimal(\"1.0\"),\n                ),\n                command_buffer=CommandBuffer2(\n                    [\n                        Line2(\n                            transform=transform,\n                            aperture=aperture,\n                            start_point=Vector2D(\n                                x=Offset.new(\n                                    start_point.x.on_parser2_eval_expression(\n                                        context,\n                                    ),\n                                    context.get_draw_units(),\n                                ),\n                                y=Offset.new(\n                                    start_point.y.on_parser2_eval_expression(\n                                        context,\n                                    ),\n                                    context.get_draw_units(),\n                                ),\n                            ),\n                            end_point=Vector2D(\n                                x=Offset.new(\n                                    end_point.x.on_parser2_eval_expression(\n                                        context,\n                                    ),\n                                    context.get_draw_units(),\n                                ),\n                                y=Offset.new(\n                                    end_point.y.on_parser2_eval_expression(\n                                        context,\n                                    ),\n                                    context.get_draw_units(),\n                                ),\n                            ),\n                        )\n                        for start_point, end_point in zip(\n                            [\n                                Point2(x=primitive.start_x, y=primitive.start_y),\n                                *primitive.points,\n                            ],\n                            [\n                                *primitive.points,\n                                Point2(x=primitive.start_x, y=primitive.start_y),\n                            ],\n                        )\n                    ],\n                ).get_readonly(),\n            ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n        )\n\n    def on_code_5_polygon(\n        self,\n        context: Parser2Context,\n        primitive: Code5Polygon2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n        exposure = primitive.exposure.on_parser2_eval_expression(context)\n        polarity = (\n            Polarity.Clear\n            if math.isclose(exposure, Decimal(\"0.0\"))\n            else Polarity.Dark\n        )\n        context.get_macro_eval_buffer().add_command(\n            Flash2(\n                transform=ApertureTransform(\n                    polarity=polarity,\n                    mirroring=Mirroring.NoMirroring,\n                    rotation=Decimal(\"0.0\"),\n                    scaling=Decimal(\"1.0\"),\n                ),\n                aperture=Polygon2(\n                    identifier=ApertureID(self.get_next_id()),\n                    outer_diameter=Offset.new(\n                        primitive.diameter.on_parser2_eval_expression(\n                            context,\n                        ),\n                    ),\n                    number_vertices=round(\n                        primitive.number_of_vertices.on_parser2_eval_expression(\n                            context,\n                        ),\n                    ),\n                    rotation=Decimal(\"0.0\"),\n                    hole_diameter=None,\n                ),\n                flash_point=Vector2D(\n                    x=Offset.new(\n                        primitive.center_x.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y=Offset.new(\n                        primitive.center_y.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                ),\n            ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n        )\n\n    def on_code_6_moire(\n        self,\n        context: Parser2Context,\n        primitive: Code6Moire2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n    def on_code_7_thermal(\n        self,\n        context: Parser2Context,\n        primitive: Code7Thermal2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n    def on_code_20_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code20VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n        exposure = primitive.exposure.on_parser2_eval_expression(context)\n        polarity = (\n            Polarity.Clear\n            if math.isclose(exposure, Decimal(\"0.0\"))\n            else Polarity.Dark\n        )\n        context.get_macro_eval_buffer().add_command(\n            Line2(\n                transform=ApertureTransform(\n                    polarity=polarity,\n                    mirroring=Mirroring.NoMirroring,\n                    rotation=Decimal(\"0.0\"),\n                    scaling=Decimal(\"1.0\"),\n                ),\n                aperture=NoCircle2(\n                    identifier=ApertureID(self.get_next_id()),\n                    diameter=Offset.new(\n                        primitive.width.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    hole_diameter=None,\n                ),\n                start_point=Vector2D(\n                    x=Offset.new(\n                        primitive.start_x.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y=Offset.new(\n                        primitive.start_y.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                ),\n                end_point=Vector2D(\n                    x=Offset.new(\n                        primitive.end_x.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y=Offset.new(\n                        primitive.end_y.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                ),\n            ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n        )\n\n    def on_code_21_center_line(\n        self,\n        context: Parser2Context,\n        primitive: Code21CenterLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 21 center line primitive.\"\"\"\n        exposure = primitive.exposure.on_parser2_eval_expression(context)\n        polarity = (\n            Polarity.Clear\n            if math.isclose(exposure, Decimal(\"0.0\"))\n            else Polarity.Dark\n        )\n        context.get_macro_eval_buffer().add_command(\n            Flash2(\n                transform=ApertureTransform(\n                    polarity=polarity,\n                    mirroring=Mirroring.NoMirroring,\n                    rotation=Decimal(\"0.0\"),\n                    scaling=Decimal(\"1.0\"),\n                ),\n                aperture=Rectangle2(\n                    identifier=ApertureID(self.get_next_id()),\n                    x_size=Offset.new(\n                        primitive.width.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y_size=Offset.new(\n                        primitive.height.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    hole_diameter=None,\n                ),\n                flash_point=Vector2D(\n                    x=Offset.new(\n                        primitive.center_x.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                    y=Offset.new(\n                        primitive.center_y.on_parser2_eval_expression(context),\n                        context.get_draw_units(),\n                    ),\n                ),\n            ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n        )\n\n    def on_code_22_lower_left_line(\n        self,\n        context: Parser2Context,\n        primitive: Code22LowerLeftLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n    def on_assignment(\n        self,\n        context: Parser2Context,\n        assignment: Assignment2,\n    ) -&gt; None:\n        \"\"\"Evaluate macro variable assignment statement.\"\"\"\n        context.macro_variable_buffer[assignment.variable_name] = (\n            assignment.value.on_parser2_eval_expression(context)\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.get_next_id","title":"get_next_id","text":"<pre><code>get_next_id() -&gt; ApertureID\n</code></pre> <p>Get next aperture id for macro.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def get_next_id(self) -&gt; ApertureID:\n    \"\"\"Get next aperture id for macro.\"\"\"\n    next_id = ApertureID(self.macro_id_counter)\n    self.macro_id_counter += 1\n    return next_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_1_circle","title":"on_code_1_circle","text":"<pre><code>on_code_1_circle(\n    context: Parser2Context, primitive: Code1Circle2\n) -&gt; None\n</code></pre> <p>Evaluate code 1 circle primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_1_circle(\n    self,\n    context: Parser2Context,\n    primitive: Code1Circle2,\n) -&gt; None:\n    \"\"\"Evaluate code 1 circle primitive.\"\"\"\n    exposure = primitive.exposure.on_parser2_eval_expression(context)\n    polarity = (\n        Polarity.Clear\n        if math.isclose(exposure, Decimal(\"0.0\"))\n        else Polarity.Dark\n    )\n    rotation_degrees = primitive.rotation.on_parser2_eval_expression(context)\n    context.get_macro_eval_buffer().add_command(\n        Flash2(\n            transform=ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            ),\n            aperture=Circle2(\n                identifier=ApertureID(self.get_next_id()),\n                diameter=Offset.new(\n                    primitive.diameter.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                hole_diameter=None,\n            ),\n            flash_point=Vector2D(\n                x=Offset.new(\n                    primitive.center_x.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y=Offset.new(\n                    primitive.center_y.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n            ),\n        ).get_rotated(rotation_degrees),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_2_vector_line","title":"on_code_2_vector_line","text":"<pre><code>on_code_2_vector_line(\n    context: Parser2Context, primitive: Code2VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 2 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_2_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code2VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_4_outline","title":"on_code_4_outline","text":"<pre><code>on_code_4_outline(\n    context: Parser2Context, primitive: Code4Outline2\n) -&gt; None\n</code></pre> <p>Evaluate code 4 outline primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_4_outline(\n    self,\n    context: Parser2Context,\n    primitive: Code4Outline2,\n) -&gt; None:\n    \"\"\"Evaluate code 4 outline primitive.\"\"\"\n    exposure = primitive.exposure.on_parser2_eval_expression(context)\n    polarity = (\n        Polarity.Clear\n        if math.isclose(exposure, Decimal(\"0.0\"))\n        else Polarity.Dark\n    )\n    transform = ApertureTransform(\n        polarity=polarity,\n        mirroring=Mirroring.NoMirroring,\n        rotation=Decimal(\"0.0\"),\n        scaling=Decimal(\"1.0\"),\n    )\n    aperture = Circle2(\n        identifier=ApertureID(self.get_next_id()),\n        diameter=Offset.NULL,\n        hole_diameter=None,\n    )\n    context.get_macro_eval_buffer().add_command(\n        Region2(\n            transform=ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            ),\n            command_buffer=CommandBuffer2(\n                [\n                    Line2(\n                        transform=transform,\n                        aperture=aperture,\n                        start_point=Vector2D(\n                            x=Offset.new(\n                                start_point.x.on_parser2_eval_expression(\n                                    context,\n                                ),\n                                context.get_draw_units(),\n                            ),\n                            y=Offset.new(\n                                start_point.y.on_parser2_eval_expression(\n                                    context,\n                                ),\n                                context.get_draw_units(),\n                            ),\n                        ),\n                        end_point=Vector2D(\n                            x=Offset.new(\n                                end_point.x.on_parser2_eval_expression(\n                                    context,\n                                ),\n                                context.get_draw_units(),\n                            ),\n                            y=Offset.new(\n                                end_point.y.on_parser2_eval_expression(\n                                    context,\n                                ),\n                                context.get_draw_units(),\n                            ),\n                        ),\n                    )\n                    for start_point, end_point in zip(\n                        [\n                            Point2(x=primitive.start_x, y=primitive.start_y),\n                            *primitive.points,\n                        ],\n                        [\n                            *primitive.points,\n                            Point2(x=primitive.start_x, y=primitive.start_y),\n                        ],\n                    )\n                ],\n            ).get_readonly(),\n        ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_5_polygon","title":"on_code_5_polygon","text":"<pre><code>on_code_5_polygon(\n    context: Parser2Context, primitive: Code5Polygon2\n) -&gt; None\n</code></pre> <p>Evaluate code 5 polygon primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_5_polygon(\n    self,\n    context: Parser2Context,\n    primitive: Code5Polygon2,\n) -&gt; None:\n    \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n    exposure = primitive.exposure.on_parser2_eval_expression(context)\n    polarity = (\n        Polarity.Clear\n        if math.isclose(exposure, Decimal(\"0.0\"))\n        else Polarity.Dark\n    )\n    context.get_macro_eval_buffer().add_command(\n        Flash2(\n            transform=ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            ),\n            aperture=Polygon2(\n                identifier=ApertureID(self.get_next_id()),\n                outer_diameter=Offset.new(\n                    primitive.diameter.on_parser2_eval_expression(\n                        context,\n                    ),\n                ),\n                number_vertices=round(\n                    primitive.number_of_vertices.on_parser2_eval_expression(\n                        context,\n                    ),\n                ),\n                rotation=Decimal(\"0.0\"),\n                hole_diameter=None,\n            ),\n            flash_point=Vector2D(\n                x=Offset.new(\n                    primitive.center_x.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y=Offset.new(\n                    primitive.center_y.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n            ),\n        ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_6_moire","title":"on_code_6_moire","text":"<pre><code>on_code_6_moire(\n    context: Parser2Context, primitive: Code6Moire2\n) -&gt; None\n</code></pre> <p>Evaluate code 6 moire primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_6_moire(\n    self,\n    context: Parser2Context,\n    primitive: Code6Moire2,\n) -&gt; None:\n    \"\"\"Evaluate code 6 moire primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_7_thermal","title":"on_code_7_thermal","text":"<pre><code>on_code_7_thermal(\n    context: Parser2Context, primitive: Code7Thermal2\n) -&gt; None\n</code></pre> <p>Evaluate code 7 thermal primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_7_thermal(\n    self,\n    context: Parser2Context,\n    primitive: Code7Thermal2,\n) -&gt; None:\n    \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_20_vector_line","title":"on_code_20_vector_line","text":"<pre><code>on_code_20_vector_line(\n    context: Parser2Context, primitive: Code20VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 20 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_20_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code20VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n    exposure = primitive.exposure.on_parser2_eval_expression(context)\n    polarity = (\n        Polarity.Clear\n        if math.isclose(exposure, Decimal(\"0.0\"))\n        else Polarity.Dark\n    )\n    context.get_macro_eval_buffer().add_command(\n        Line2(\n            transform=ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            ),\n            aperture=NoCircle2(\n                identifier=ApertureID(self.get_next_id()),\n                diameter=Offset.new(\n                    primitive.width.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                hole_diameter=None,\n            ),\n            start_point=Vector2D(\n                x=Offset.new(\n                    primitive.start_x.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y=Offset.new(\n                    primitive.start_y.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n            ),\n            end_point=Vector2D(\n                x=Offset.new(\n                    primitive.end_x.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y=Offset.new(\n                    primitive.end_y.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n            ),\n        ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_21_center_line","title":"on_code_21_center_line","text":"<pre><code>on_code_21_center_line(\n    context: Parser2Context, primitive: Code21CenterLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 21 center line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_21_center_line(\n    self,\n    context: Parser2Context,\n    primitive: Code21CenterLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 21 center line primitive.\"\"\"\n    exposure = primitive.exposure.on_parser2_eval_expression(context)\n    polarity = (\n        Polarity.Clear\n        if math.isclose(exposure, Decimal(\"0.0\"))\n        else Polarity.Dark\n    )\n    context.get_macro_eval_buffer().add_command(\n        Flash2(\n            transform=ApertureTransform(\n                polarity=polarity,\n                mirroring=Mirroring.NoMirroring,\n                rotation=Decimal(\"0.0\"),\n                scaling=Decimal(\"1.0\"),\n            ),\n            aperture=Rectangle2(\n                identifier=ApertureID(self.get_next_id()),\n                x_size=Offset.new(\n                    primitive.width.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y_size=Offset.new(\n                    primitive.height.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                hole_diameter=None,\n            ),\n            flash_point=Vector2D(\n                x=Offset.new(\n                    primitive.center_x.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n                y=Offset.new(\n                    primitive.center_y.on_parser2_eval_expression(context),\n                    context.get_draw_units(),\n                ),\n            ),\n        ).get_rotated(primitive.rotation.on_parser2_eval_expression(context)),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_code_22_lower_left_line","title":"on_code_22_lower_left_line","text":"<pre><code>on_code_22_lower_left_line(\n    context: Parser2Context, primitive: Code22LowerLeftLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 22 lower left line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_code_22_lower_left_line(\n    self,\n    context: Parser2Context,\n    primitive: Code22LowerLeftLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.MacroEvalHooks.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(\n    context: Parser2Context, assignment: Assignment2\n) -&gt; None\n</code></pre> <p>Evaluate macro variable assignment statement.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_assignment(\n    self,\n    context: Parser2Context,\n    assignment: Assignment2,\n) -&gt; None:\n    \"\"\"Evaluate macro variable assignment statement.\"\"\"\n    context.macro_variable_buffer[assignment.variable_name] = (\n        assignment.value.on_parser2_eval_expression(context)\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.AxisSelectTokenHooksTokenHooks","title":"AxisSelectTokenHooksTokenHooks","text":"<p>             Bases: <code>AxisSelectTokenHooksTokenHooks</code></p> <p>Hooks for visiting axis select token (AS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class AxisSelectTokenHooksTokenHooks(\n    Parser2HooksBase.AxisSelectTokenHooksTokenHooks,\n):\n    \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: AxisSelect,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context on which to perform the actions.\n\n        \"\"\"\n        context.set_axis_correspondence(token.correspondence)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.AxisSelectTokenHooksTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: AxisSelect, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>AxisSelect</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context on which to perform the actions.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: AxisSelect,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context on which to perform the actions.\n\n    \"\"\"\n    context.set_axis_correspondence(token.correspondence)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandDrawTokenHooks","title":"CommandDrawTokenHooks","text":"<p>             Bases: <code>CommandDrawTokenHooks</code></p> <p>Hooks for visiting draw token (D01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class CommandDrawTokenHooks(Parser2HooksBase.CommandDrawTokenHooks):\n    \"\"\"Hooks for visiting draw token (D01).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: D01Draw,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        self.DRAW_MODE_DISPATCH_TABLE[context.get_draw_mode()](self, token, context)\n        return super().on_parser_visit_token(token, context)\n\n    def on_parser_visit_token_line(\n        self,\n        token: D01Draw,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        state = context.get_state()\n\n        x = state.parse_coordinate(token.x)\n        y = state.parse_coordinate(token.y)\n\n        start_point = context.get_current_position()\n        end_point = Vector2D(x=x, y=y)\n\n        aperture_id = context.get_current_aperture_id() or throw(\n            ApertureNotSelected2Error(token),\n        )\n        transform = context.get_state().get_aperture_transform()\n        aperture = context.get_aperture(aperture_id, transform)\n\n        command = Line2(\n            attributes=context.object_attributes,\n            aperture=aperture,\n            start_point=start_point,\n            end_point=end_point,\n            transform=transform,\n        ).get_mirrored(transform.get_mirroring())\n\n        context.add_command(command)\n        context.set_current_position(end_point)\n\n    def on_parser_visit_token_arc(\n        self,\n        token: D01Draw,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        state = context.get_state()\n\n        x = state.parse_coordinate(token.x)\n        y = state.parse_coordinate(token.y)\n        i = state.parse_coordinate(token.i)\n        j = state.parse_coordinate(token.j)\n\n        start_point = context.get_current_position()\n        end_point = Vector2D(x=x, y=y)\n        final_center_point = Vector2D.NULL\n\n        if context.get_is_multi_quadrant() is False:\n            # In single quadrant mode I and J offsets are unsigned, therefore we\n            # need to check all 4 possible center points. We will choose first\n            # valid, if anyone needs behavior strictly matching this from spec,\n            # they can always create issue.\n            for center_offset in (\n                Vector2D(x=i, y=j),\n                Vector2D(x=-i, y=j),\n                Vector2D(x=i, y=-j),\n                Vector2D(x=-i, y=-j),\n            ):\n                center_point = start_point + center_offset\n                relative_start_point = start_point - center_point\n                relative_end_point = end_point - center_point\n                # Calculate radius of arc from center to start point and end point,\n                # If they aren't equal, this center candidate is not valid and we\n                # can skip it.\n                if not math.isclose(\n                    relative_start_point.length().value,\n                    relative_end_point.length().value,\n                    rel_tol=1e-3,\n                ):\n                    continue\n\n                # Calculate angle between vector pointing from center of arc to\n                # start, and vector pointing from center of arc to end point. If\n                # this angle is above 90 degrees, we exceeded allowed angle size in\n                # single quadrant mode and need to try other possible center points.\n                clockwise_angle = relative_start_point.angle_between(\n                    relative_end_point,\n                )\n                if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                    continue\n\n                final_center_point = center_point\n                break\n            else:\n                raise NoValidArcCenterFoundError(token)\n\n        else:\n            # In multi quadrant mode I and J offsets are signed, so we can simply\n            # use them to calculate center point relative to start point.\n            center_offset = Vector2D(x=i, y=j)\n            final_center_point = start_point + center_offset\n\n        aperture_id = context.get_current_aperture_id() or throw(\n            ApertureNotSelected2Error(token),\n        )\n        transform = context.get_state().get_aperture_transform()\n        aperture = context.get_aperture(aperture_id, transform)\n        command = Arc2(\n            attributes=context.object_attributes,\n            aperture=aperture,\n            start_point=start_point,\n            end_point=end_point,\n            center_point=final_center_point,\n            transform=context.get_state().get_aperture_transform(),\n        ).get_mirrored(transform.get_mirroring())\n\n        context.add_command(command)\n        context.set_current_position(end_point)\n\n    def on_parser_visit_token_cc_arc(\n        self,\n        token: D01Draw,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        state = context.get_state()\n\n        x = state.parse_coordinate(token.x)\n        y = state.parse_coordinate(token.y)\n        i = state.parse_coordinate(token.i)\n        j = state.parse_coordinate(token.j)\n\n        start_point = context.get_current_position()\n        end_point = Vector2D(x=x, y=y)\n        final_center_point = Vector2D.NULL\n\n        if context.get_is_multi_quadrant() is False:\n            for center_offset in (\n                Vector2D(x=i, y=j),\n                Vector2D(x=-i, y=j),\n                Vector2D(x=i, y=-j),\n                Vector2D(x=-i, y=-j),\n            ):\n                center_point = start_point + center_offset\n                relative_start_point = start_point - center_point\n                relative_end_point = end_point - center_point\n\n                if not math.isclose(\n                    relative_start_point.length().value,\n                    relative_end_point.length().value,\n                    rel_tol=1e-6,\n                ):\n                    continue\n\n                # Calculate angle between vector pointing from center of arc to\n                # start, and vector pointing from center of arc to end point. If\n                # this angle is above 90 degrees, we exceeded allowed angle size in\n                # single quadrant mode and need to try other possible center points.\n                clockwise_angle = relative_start_point.angle_between_cc(\n                    relative_end_point,\n                )\n                if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                    continue\n\n                final_center_point = center_point\n                break\n            else:\n                raise NoValidArcCenterFoundError(token)\n\n        else:\n            center_offset = Vector2D(x=i, y=j)\n            final_center_point = start_point + center_offset\n\n        aperture_id = context.get_current_aperture_id() or throw(\n            ApertureNotSelected2Error(token),\n        )\n        transform = context.get_state().get_aperture_transform()\n        aperture = context.get_aperture(aperture_id, transform)\n        command = CCArc2(\n            attributes=context.object_attributes,\n            aperture=aperture,\n            start_point=start_point,\n            end_point=end_point,\n            center_point=final_center_point,\n            transform=context.get_state().get_aperture_transform(),\n        ).get_mirrored(transform.get_mirroring())\n\n        context.add_command(command)\n        context.set_current_position(end_point)\n\n    DRAW_MODE_DISPATCH_TABLE = MappingProxyType(\n        {\n            DrawMode.Linear: on_parser_visit_token_line,\n            DrawMode.ClockwiseCircular: on_parser_visit_token_arc,\n            DrawMode.CounterclockwiseCircular: on_parser_visit_token_cc_arc,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandDrawTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: D01Draw, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D01Draw</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: D01Draw,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    self.DRAW_MODE_DISPATCH_TABLE[context.get_draw_mode()](self, token, context)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandDrawTokenHooks.on_parser_visit_token_line","title":"on_parser_visit_token_line","text":"<pre><code>on_parser_visit_token_line(\n    token: D01Draw, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D01Draw</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token_line(\n    self,\n    token: D01Draw,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    state = context.get_state()\n\n    x = state.parse_coordinate(token.x)\n    y = state.parse_coordinate(token.y)\n\n    start_point = context.get_current_position()\n    end_point = Vector2D(x=x, y=y)\n\n    aperture_id = context.get_current_aperture_id() or throw(\n        ApertureNotSelected2Error(token),\n    )\n    transform = context.get_state().get_aperture_transform()\n    aperture = context.get_aperture(aperture_id, transform)\n\n    command = Line2(\n        attributes=context.object_attributes,\n        aperture=aperture,\n        start_point=start_point,\n        end_point=end_point,\n        transform=transform,\n    ).get_mirrored(transform.get_mirroring())\n\n    context.add_command(command)\n    context.set_current_position(end_point)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandDrawTokenHooks.on_parser_visit_token_arc","title":"on_parser_visit_token_arc","text":"<pre><code>on_parser_visit_token_arc(\n    token: D01Draw, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D01Draw</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token_arc(\n    self,\n    token: D01Draw,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    state = context.get_state()\n\n    x = state.parse_coordinate(token.x)\n    y = state.parse_coordinate(token.y)\n    i = state.parse_coordinate(token.i)\n    j = state.parse_coordinate(token.j)\n\n    start_point = context.get_current_position()\n    end_point = Vector2D(x=x, y=y)\n    final_center_point = Vector2D.NULL\n\n    if context.get_is_multi_quadrant() is False:\n        # In single quadrant mode I and J offsets are unsigned, therefore we\n        # need to check all 4 possible center points. We will choose first\n        # valid, if anyone needs behavior strictly matching this from spec,\n        # they can always create issue.\n        for center_offset in (\n            Vector2D(x=i, y=j),\n            Vector2D(x=-i, y=j),\n            Vector2D(x=i, y=-j),\n            Vector2D(x=-i, y=-j),\n        ):\n            center_point = start_point + center_offset\n            relative_start_point = start_point - center_point\n            relative_end_point = end_point - center_point\n            # Calculate radius of arc from center to start point and end point,\n            # If they aren't equal, this center candidate is not valid and we\n            # can skip it.\n            if not math.isclose(\n                relative_start_point.length().value,\n                relative_end_point.length().value,\n                rel_tol=1e-3,\n            ):\n                continue\n\n            # Calculate angle between vector pointing from center of arc to\n            # start, and vector pointing from center of arc to end point. If\n            # this angle is above 90 degrees, we exceeded allowed angle size in\n            # single quadrant mode and need to try other possible center points.\n            clockwise_angle = relative_start_point.angle_between(\n                relative_end_point,\n            )\n            if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                continue\n\n            final_center_point = center_point\n            break\n        else:\n            raise NoValidArcCenterFoundError(token)\n\n    else:\n        # In multi quadrant mode I and J offsets are signed, so we can simply\n        # use them to calculate center point relative to start point.\n        center_offset = Vector2D(x=i, y=j)\n        final_center_point = start_point + center_offset\n\n    aperture_id = context.get_current_aperture_id() or throw(\n        ApertureNotSelected2Error(token),\n    )\n    transform = context.get_state().get_aperture_transform()\n    aperture = context.get_aperture(aperture_id, transform)\n    command = Arc2(\n        attributes=context.object_attributes,\n        aperture=aperture,\n        start_point=start_point,\n        end_point=end_point,\n        center_point=final_center_point,\n        transform=context.get_state().get_aperture_transform(),\n    ).get_mirrored(transform.get_mirroring())\n\n    context.add_command(command)\n    context.set_current_position(end_point)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandDrawTokenHooks.on_parser_visit_token_cc_arc","title":"on_parser_visit_token_cc_arc","text":"<pre><code>on_parser_visit_token_cc_arc(\n    token: D01Draw, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D01Draw</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token_cc_arc(\n    self,\n    token: D01Draw,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    state = context.get_state()\n\n    x = state.parse_coordinate(token.x)\n    y = state.parse_coordinate(token.y)\n    i = state.parse_coordinate(token.i)\n    j = state.parse_coordinate(token.j)\n\n    start_point = context.get_current_position()\n    end_point = Vector2D(x=x, y=y)\n    final_center_point = Vector2D.NULL\n\n    if context.get_is_multi_quadrant() is False:\n        for center_offset in (\n            Vector2D(x=i, y=j),\n            Vector2D(x=-i, y=j),\n            Vector2D(x=i, y=-j),\n            Vector2D(x=-i, y=-j),\n        ):\n            center_point = start_point + center_offset\n            relative_start_point = start_point - center_point\n            relative_end_point = end_point - center_point\n\n            if not math.isclose(\n                relative_start_point.length().value,\n                relative_end_point.length().value,\n                rel_tol=1e-6,\n            ):\n                continue\n\n            # Calculate angle between vector pointing from center of arc to\n            # start, and vector pointing from center of arc to end point. If\n            # this angle is above 90 degrees, we exceeded allowed angle size in\n            # single quadrant mode and need to try other possible center points.\n            clockwise_angle = relative_start_point.angle_between_cc(\n                relative_end_point,\n            )\n            if clockwise_angle &gt; MAX_SINGLE_QUADRANT_ANGLE:\n                continue\n\n            final_center_point = center_point\n            break\n        else:\n            raise NoValidArcCenterFoundError(token)\n\n    else:\n        center_offset = Vector2D(x=i, y=j)\n        final_center_point = start_point + center_offset\n\n    aperture_id = context.get_current_aperture_id() or throw(\n        ApertureNotSelected2Error(token),\n    )\n    transform = context.get_state().get_aperture_transform()\n    aperture = context.get_aperture(aperture_id, transform)\n    command = CCArc2(\n        attributes=context.object_attributes,\n        aperture=aperture,\n        start_point=start_point,\n        end_point=end_point,\n        center_point=final_center_point,\n        transform=context.get_state().get_aperture_transform(),\n    ).get_mirrored(transform.get_mirroring())\n\n    context.add_command(command)\n    context.set_current_position(end_point)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandMoveTokenHooks","title":"CommandMoveTokenHooks","text":"<p>             Bases: <code>CommandMoveTokenHooks</code></p> <p>Hooks for visiting move token (D02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class CommandMoveTokenHooks(Parser2HooksBase.CommandMoveTokenHooks):\n    \"\"\"Hooks for visiting move token (D02).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: D02Move,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        state = context.get_state()\n\n        x = state.parse_coordinate(token.x)\n        y = state.parse_coordinate(token.y)\n\n        destination_point = Vector2D(x=x, y=y)\n\n        context.set_current_position(destination_point)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandMoveTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: D02Move, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D02Move</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: D02Move,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    state = context.get_state()\n\n    x = state.parse_coordinate(token.x)\n    y = state.parse_coordinate(token.y)\n\n    destination_point = Vector2D(x=x, y=y)\n\n    context.set_current_position(destination_point)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandFlashTokenHooks","title":"CommandFlashTokenHooks","text":"<p>             Bases: <code>CommandFlashTokenHooks</code></p> <p>Hooks for visiting flash token (D03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class CommandFlashTokenHooks(Parser2HooksBase.CommandFlashTokenHooks):\n    \"\"\"Hooks for visiting flash token (D03).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: D03Flash,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        state = context.get_state()\n\n        x = state.parse_coordinate(token.x)\n        y = state.parse_coordinate(token.y)\n\n        flash_point = Vector2D(x=x, y=y)\n\n        aperture_id = context.get_current_aperture_id() or throw(\n            ApertureNotSelected2Error(token),\n        )\n        transform = context.get_state().get_aperture_transform()\n        aperture = context.get_aperture(aperture_id, transform)\n\n        if isinstance(aperture, Block2):\n            cmd_buffer = aperture.command_buffer.get_transposed(flash_point)\n            context.add_command(\n                BufferCommand2(\n                    transform=transform,\n                    command_buffer=cmd_buffer,\n                ),\n            )\n\n        else:\n            context.add_command(\n                Flash2(\n                    attributes=context.object_attributes,\n                    aperture=aperture,\n                    flash_point=flash_point,\n                    transform=transform,\n                ),\n            )\n\n        context.set_current_position(flash_point)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommandFlashTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: D03Flash, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>D03Flash</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: D03Flash,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    state = context.get_state()\n\n    x = state.parse_coordinate(token.x)\n    y = state.parse_coordinate(token.y)\n\n    flash_point = Vector2D(x=x, y=y)\n\n    aperture_id = context.get_current_aperture_id() or throw(\n        ApertureNotSelected2Error(token),\n    )\n    transform = context.get_state().get_aperture_transform()\n    aperture = context.get_aperture(aperture_id, transform)\n\n    if isinstance(aperture, Block2):\n        cmd_buffer = aperture.command_buffer.get_transposed(flash_point)\n        context.add_command(\n            BufferCommand2(\n                transform=transform,\n                command_buffer=cmd_buffer,\n            ),\n        )\n\n    else:\n        context.add_command(\n            Flash2(\n                attributes=context.object_attributes,\n                aperture=aperture,\n                flash_point=flash_point,\n                transform=transform,\n            ),\n        )\n\n    context.set_current_position(flash_point)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SelectApertureTokenHooks","title":"SelectApertureTokenHooks","text":"<p>             Bases: <code>SelectApertureTokenHooks</code></p> <p>Hooks for visiting select aperture token (DNN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SelectApertureTokenHooks(Parser2HooksBase.SelectApertureTokenHooks):\n    \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DNNSelectAperture,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_current_aperture_id(token.aperture_id)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SelectApertureTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DNNSelectAperture, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DNNSelectAperture</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DNNSelectAperture,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_current_aperture_id(token.aperture_id)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CoordinateFormatTokenHooks","title":"CoordinateFormatTokenHooks","text":"<p>             Bases: <code>CoordinateFormatTokenHooks</code></p> <p>Hooks for visiting coordinate format token (FS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class CoordinateFormatTokenHooks(Parser2HooksBase.CoordinateFormatTokenHooks):\n    \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: CoordinateFormat,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_coordinate_parser(\n            CoordinateParser.new(\n                x_format=token.x_format,\n                y_format=token.y_format,\n                coordinate_mode=token.coordinate_mode,\n                zeros_mode=token.zeros_mode,\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CoordinateFormatTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: CoordinateFormat, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>CoordinateFormat</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: CoordinateFormat,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_coordinate_parser(\n        CoordinateParser.new(\n            x_format=token.x_format,\n            y_format=token.y_format,\n            coordinate_mode=token.coordinate_mode,\n            zeros_mode=token.zeros_mode,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetLinearTokenHooks","title":"SetLinearTokenHooks","text":"<p>             Bases: <code>SetLinearTokenHooks</code></p> <p>Hooks for visiting set linear token (G01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetLinearTokenHooks(Parser2HooksBase.SetLinearTokenHooks):\n    \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetLinear,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_mode(DrawMode.Linear)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetLinearTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetLinear, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetLinear</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetLinear,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_mode(DrawMode.Linear)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetClockwiseCircularTokenHooks","title":"SetClockwiseCircularTokenHooks","text":"<p>             Bases: <code>SetClockwiseCircularTokenHooks</code></p> <p>Hooks for visiting set clockwise circular token (G02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetClockwiseCircularTokenHooks(\n    Parser2HooksBase.SetClockwiseCircularTokenHooks,\n):\n    \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetClockwiseCircular,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_mode(DrawMode.ClockwiseCircular)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetClockwiseCircularTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetClockwiseCircular, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetClockwiseCircular</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetClockwiseCircular,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_mode(DrawMode.ClockwiseCircular)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCounterClockwiseCircularTokenHooks","title":"SetCounterClockwiseCircularTokenHooks","text":"<p>             Bases: <code>SetCounterClockwiseCircularTokenHooks</code></p> <p>Hooks for visiting set counter clockwise circular token (G03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetCounterClockwiseCircularTokenHooks(\n    Parser2HooksBase.SetCounterClockwiseCircularTokenHooks,\n):\n    \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetCounterclockwiseCircular,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_mode(DrawMode.CounterclockwiseCircular)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCounterClockwiseCircularTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetCounterclockwiseCircular,\n    context: Parser2Context,\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetCounterclockwiseCircular</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetCounterclockwiseCircular,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_mode(DrawMode.CounterclockwiseCircular)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.CommentTokenHooks","title":"CommentTokenHooks","text":"<p>             Bases: <code>CommentTokenHooks</code></p> <p>Hooks for visiting comment token (G04).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class CommentTokenHooks(Parser2HooksBase.CommentTokenHooks):\n    \"\"\"Hooks for visiting comment token (G04).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.BeginRegionTokenHooks","title":"BeginRegionTokenHooks","text":"<p>             Bases: <code>BeginRegionTokenHooks</code></p> <p>Hooks for visiting begin region token (G36).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class BeginRegionTokenHooks(Parser2HooksBase.BeginRegionTokenHooks):\n    \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: BeginRegion,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_is_region(is_region=True)\n        context.set_region_command_buffer()\n\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.BeginRegionTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: BeginRegion, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>BeginRegion</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: BeginRegion,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_is_region(is_region=True)\n    context.set_region_command_buffer()\n\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndRegionTokenHooks","title":"EndRegionTokenHooks","text":"<p>             Bases: <code>EndRegionTokenHooks</code></p> <p>Hooks for visiting end region token (G37).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class EndRegionTokenHooks(Parser2HooksBase.EndRegionTokenHooks):\n    \"\"\"Hooks for visiting end region token (G37).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: EndRegion,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_is_region(is_region=False)\n        command_buffer = context.get_region_command_buffer()\n\n        context.add_command(\n            Region2(\n                aperture_attributes=context.aperture_attributes,\n                object_attributes=context.object_attributes,\n                command_buffer=command_buffer.get_readonly(),\n                transform=context.get_state().get_aperture_transform(),\n            ),\n        )\n\n        context.unset_region_command_buffer()\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndRegionTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: EndRegion, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>EndRegion</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: EndRegion,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_is_region(is_region=False)\n    command_buffer = context.get_region_command_buffer()\n\n    context.add_command(\n        Region2(\n            aperture_attributes=context.aperture_attributes,\n            object_attributes=context.object_attributes,\n            command_buffer=command_buffer.get_readonly(),\n            transform=context.get_state().get_aperture_transform(),\n        ),\n    )\n\n    context.unset_region_command_buffer()\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.PrepareSelectApertureTokenHooks","title":"PrepareSelectApertureTokenHooks","text":"<p>             Bases: <code>PrepareSelectApertureTokenHooks</code></p> <p>Hooks for visiting prepare select aperture token (G54).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class PrepareSelectApertureTokenHooks(\n    Parser2HooksBase.PrepareSelectApertureTokenHooks,\n):\n    \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: G54SelectAperture,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        self.hooks.select_aperture.on_parser_visit_token(token, context)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.PrepareSelectApertureTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: G54SelectAperture, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>G54SelectAperture</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: G54SelectAperture,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    self.hooks.select_aperture.on_parser_visit_token(token, context)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetUnitInchTokenHooks","title":"SetUnitInchTokenHooks","text":"<p>             Bases: <code>SetUnitInchTokenHooks</code></p> <p>Hooks for visiting set unit inch token (G70).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetUnitInchTokenHooks(Parser2HooksBase.SetUnitInchTokenHooks):\n    \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetUnitInch,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_units(Unit.Inches)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetUnitInchTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetUnitInch, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetUnitInch</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetUnitInch,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_units(Unit.Inches)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetUnitMillimetersTokenHooks","title":"SetUnitMillimetersTokenHooks","text":"<p>             Bases: <code>SetUnitMillimetersTokenHooks</code></p> <p>Hooks for visiting set unit millimeters token (G71).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetUnitMillimetersTokenHooks(Parser2HooksBase.SetUnitMillimetersTokenHooks):\n    \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetUnitMillimeters,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_units(Unit.Millimeters)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetUnitMillimetersTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetUnitMillimeters, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetUnitMillimeters</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetUnitMillimeters,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_units(Unit.Millimeters)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetSingleQuadrantModeTokenHooks","title":"SetSingleQuadrantModeTokenHooks","text":"<p>             Bases: <code>SetSingleQuadrantModeTokenHooks</code></p> <p>Hooks for visiting set single-quadrant mode token (G74).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetSingleQuadrantModeTokenHooks(\n    Parser2HooksBase.SetSingleQuadrantModeTokenHooks,\n):\n    \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetSingleQuadrantMode,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_is_multi_quadrant(is_multi_quadrant=False)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetSingleQuadrantModeTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetSingleQuadrantMode, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetSingleQuadrantMode</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetSingleQuadrantMode,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_is_multi_quadrant(is_multi_quadrant=False)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetMultiQuadrantModeTokenHooks","title":"SetMultiQuadrantModeTokenHooks","text":"<p>             Bases: <code>SetMultiQuadrantModeTokenHooks</code></p> <p>Hooks for visiting set multi-quadrant mode token (G75).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetMultiQuadrantModeTokenHooks(\n    Parser2HooksBase.SetMultiQuadrantModeTokenHooks,\n):\n    \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetMultiQuadrantMode,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_is_multi_quadrant(is_multi_quadrant=True)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetMultiQuadrantModeTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetMultiQuadrantMode, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetMultiQuadrantMode</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetMultiQuadrantMode,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_is_multi_quadrant(is_multi_quadrant=True)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCoordinateAbsoluteTokenHooks","title":"SetCoordinateAbsoluteTokenHooks","text":"<p>             Bases: <code>SetCoordinateAbsoluteTokenHooks</code></p> <p>Hooks for visiting set coordinate absolute token (G90).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetCoordinateAbsoluteTokenHooks(\n    Parser2HooksBase.SetCoordinateAbsoluteTokenHooks,\n):\n    \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetAbsoluteNotation,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        # NOOP - only absolute format supported.\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCoordinateAbsoluteTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetAbsoluteNotation, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetAbsoluteNotation</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetAbsoluteNotation,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    # NOOP - only absolute format supported.\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCoordinateIncrementalTokenHooks","title":"SetCoordinateIncrementalTokenHooks","text":"<p>             Bases: <code>SetCoordinateIncrementalTokenHooks</code></p> <p>Hooks for visiting set coordinate incremental token (G91).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class SetCoordinateIncrementalTokenHooks(\n    Parser2HooksBase.SetCoordinateIncrementalTokenHooks,\n):\n    \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: SetIncrementalNotation,  # noqa: ARG002\n        context: Parser2Context,  # noqa: ARG002\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        raise IncrementalCoordinatesNotSupported2Error\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.SetCoordinateIncrementalTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: SetIncrementalNotation, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>SetIncrementalNotation</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: SetIncrementalNotation,  # noqa: ARG002\n    context: Parser2Context,  # noqa: ARG002\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    raise IncrementalCoordinatesNotSupported2Error\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ImageNameTokenHooks","title":"ImageNameTokenHooks","text":"<p>             Bases: <code>ImageNameTokenHooks</code></p> <p>Hooks for visiting image name token (IN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ImageNameTokenHooks(Parser2HooksBase.ImageNameTokenHooks):\n    \"\"\"Hooks for visiting image name token (IN).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: ImageName,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_image_name(token.content)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ImageNameTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: ImageName, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>ImageName</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: ImageName,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_image_name(token.content)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.InvalidTokenHooks","title":"InvalidTokenHooks","text":"<p>             Bases: <code>InvalidTokenHooks</code></p> <p>Hooks for visiting invalid token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class InvalidTokenHooks(Parser2HooksBase.InvalidTokenHooks):\n    \"\"\"Hooks for visiting invalid token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ImagePolarityTokenHooks","title":"ImagePolarityTokenHooks","text":"<p>             Bases: <code>ImagePolarityTokenHooks</code></p> <p>Hooks for visiting image polarity token (IP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ImagePolarityTokenHooks(Parser2HooksBase.ImagePolarityTokenHooks):\n    \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: ImagePolarity,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_is_output_image_negation_required(\n            value=(token.image_polarity == ImagePolarityEnum.NEGATIVE),\n        )\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ImagePolarityTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: ImagePolarity, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>ImagePolarity</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: ImagePolarity,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_is_output_image_negation_required(\n        value=(token.image_polarity == ImagePolarityEnum.NEGATIVE),\n    )\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadMirroringTokenHooks","title":"LoadMirroringTokenHooks","text":"<p>             Bases: <code>LoadMirroringTokenHooks</code></p> <p>Hooks for visiting load mirroring token (LM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class LoadMirroringTokenHooks(Parser2HooksBase.LoadMirroringTokenHooks):\n    \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: LoadMirroring,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_mirroring(token.mirroring)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadMirroringTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: LoadMirroring, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>LoadMirroring</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: LoadMirroring,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_mirroring(token.mirroring)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadNameTokenHooks","title":"LoadNameTokenHooks","text":"<p>             Bases: <code>LoadNameTokenHooks</code></p> <p>Hooks for visiting load name token (LN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class LoadNameTokenHooks(Parser2HooksBase.LoadNameTokenHooks):\n    \"\"\"Hooks for visiting load name token (LN).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: LoadName,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_file_name(token.content)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadNameTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: LoadName, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>LoadName</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: LoadName,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_file_name(token.content)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadPolarityTokenHooks","title":"LoadPolarityTokenHooks","text":"<p>             Bases: <code>LoadPolarityTokenHooks</code></p> <p>Hooks for visiting load polarity token (LP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class LoadPolarityTokenHooks(Parser2HooksBase.LoadPolarityTokenHooks):\n    \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: LoadPolarity,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_polarity(token.polarity)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadPolarityTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: LoadPolarity, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>LoadPolarity</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: LoadPolarity,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_polarity(token.polarity)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadRotationTokenHooks","title":"LoadRotationTokenHooks","text":"<p>             Bases: <code>LoadRotationTokenHooks</code></p> <p>Hooks for visiting load rotation token (LR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class LoadRotationTokenHooks(Parser2HooksBase.LoadRotationTokenHooks):\n    \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: LoadRotation,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_rotation(token.rotation)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadRotationTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: LoadRotation, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>LoadRotation</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: LoadRotation,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_rotation(token.rotation)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadScalingTokenHooks","title":"LoadScalingTokenHooks","text":"<p>             Bases: <code>LoadScalingTokenHooks</code></p> <p>Hooks for visiting load scaling token (LS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class LoadScalingTokenHooks(Parser2HooksBase.LoadScalingTokenHooks):\n    \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: LoadScaling,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_scaling(token.scaling)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.LoadScalingTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: LoadScaling, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>LoadScaling</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: LoadScaling,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_scaling(token.scaling)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ProgramStopTokenHooks","title":"ProgramStopTokenHooks","text":"<p>             Bases: <code>ProgramStopTokenHooks</code></p> <p>Hooks for visiting program stop token (M00).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ProgramStopTokenHooks(Parser2HooksBase.ProgramStopTokenHooks):\n    \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: M00ProgramStop,  # noqa: ARG002\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_reached_program_stop()\n        context.halt_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ProgramStopTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: M00ProgramStop, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>M00ProgramStop</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: M00ProgramStop,  # noqa: ARG002\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_reached_program_stop()\n    context.halt_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.OptionalStopTokenHooks","title":"OptionalStopTokenHooks","text":"<p>             Bases: <code>OptionalStopTokenHooks</code></p> <p>Hooks for visiting optional stop token (M01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class OptionalStopTokenHooks(Parser2HooksBase.OptionalStopTokenHooks):\n    \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: M01OptionalStop,  # noqa: ARG002\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Handle child parsing being completed.\"\"\"\n        context.set_reached_optional_stop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.OptionalStopTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: M01OptionalStop, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Handle child parsing being completed.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: M01OptionalStop,  # noqa: ARG002\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Handle child parsing being completed.\"\"\"\n    context.set_reached_optional_stop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndOfFileTokenHooks","title":"EndOfFileTokenHooks","text":"<p>             Bases: <code>EndOfFileTokenHooks</code></p> <p>Hooks for visiting end of file token (M02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class EndOfFileTokenHooks(Parser2HooksBase.EndOfFileTokenHooks):\n    \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: M02EndOfFile,  # noqa: ARG002\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_reached_end_of_file()\n        context.halt_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.EndOfFileTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: M02EndOfFile, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>M02EndOfFile</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: M02EndOfFile,  # noqa: ARG002\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_reached_end_of_file()\n    context.halt_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.UnitModeTokenHooks","title":"UnitModeTokenHooks","text":"<p>             Bases: <code>UnitModeTokenHooks</code></p> <p>Hooks for visiting unit mode token (MO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class UnitModeTokenHooks(Parser2HooksBase.UnitModeTokenHooks):\n    \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: UnitMode,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_draw_units(token.unit)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.UnitModeTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: UnitMode, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>UnitMode</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: UnitMode,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_draw_units(token.unit)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ImageOffsetTokenHooks","title":"ImageOffsetTokenHooks","text":"<p>             Bases: <code>ImageOffsetTokenHooks</code></p> <p>Hooks for visiting image offset token (OF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ImageOffsetTokenHooks(Parser2HooksBase.ImageOffsetTokenHooks):\n    \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.StepRepeatBeginTokenHooks","title":"StepRepeatBeginTokenHooks","text":"<p>             Bases: <code>StepRepeatBeginTokenHooks</code></p> <p>Hooks for visiting step and repeat begin token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class StepRepeatBeginTokenHooks(Parser2HooksBase.StepRepeatBeginTokenHooks):\n    \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: StepRepeatBegin,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_state_before_step_and_repeat()\n\n        context.set_is_step_and_repeat(is_step_and_repeat=True)\n        context.set_x_repeat(token.x_repeat)\n        context.set_y_repeat(token.y_repeat)\n        context.set_x_step(Offset.new(token.x_step, unit=context.get_draw_units()))\n        context.set_y_step(Offset.new(token.y_step, unit=context.get_draw_units()))\n        context.set_step_and_repeat_command_buffer()\n\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.StepRepeatBeginTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: StepRepeatBegin, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>StepRepeatBegin</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: StepRepeatBegin,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_state_before_step_and_repeat()\n\n    context.set_is_step_and_repeat(is_step_and_repeat=True)\n    context.set_x_repeat(token.x_repeat)\n    context.set_y_repeat(token.y_repeat)\n    context.set_x_step(Offset.new(token.x_step, unit=context.get_draw_units()))\n    context.set_y_step(Offset.new(token.y_step, unit=context.get_draw_units()))\n    context.set_step_and_repeat_command_buffer()\n\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.StepRepeatEndTokenHooks","title":"StepRepeatEndTokenHooks","text":"<p>             Bases: <code>StepRepeatEndTokenHooks</code></p> <p>Hooks for visiting step and repeat end token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class StepRepeatEndTokenHooks(Parser2HooksBase.StepRepeatEndTokenHooks):\n    \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: StepRepeatEnd,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        if context.get_is_step_and_repeat() is False:\n            raise StepAndRepeatNotInitializedError(token)\n\n        command_buffer = context.get_step_and_repeat_command_buffer().get_readonly()\n        commands: list[Command2] = []\n\n        for x_index in range(context.get_x_repeat()):\n            for y_index in range(context.get_y_repeat()):\n                buffer_command = BufferCommand2(\n                    transform=context.get_state().get_aperture_transform(),\n                    command_buffer=command_buffer,\n                ).get_transposed(\n                    Vector2D(\n                        x=(context.get_x_step() * x_index),\n                        y=(context.get_y_step() * y_index),\n                    ),\n                )\n                commands.append(buffer_command)\n\n        # Resets all variables, including is_step_and_repeat and possibly other\n        # set during recording of SR command block. Must be done before\n        # add_command() to push SR command buffers to main command buffers.\n        context.reset_state_to_pre_step_and_repeat()\n        context.unset_state_before_step_and_repeat()\n        context.unset_step_and_repeat_command_buffer()\n\n        for command in commands:\n            context.add_command(command)\n\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.StepRepeatEndTokenHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: StepRepeatEnd, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>StepRepeatEnd</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: StepRepeatEnd,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    if context.get_is_step_and_repeat() is False:\n        raise StepAndRepeatNotInitializedError(token)\n\n    command_buffer = context.get_step_and_repeat_command_buffer().get_readonly()\n    commands: list[Command2] = []\n\n    for x_index in range(context.get_x_repeat()):\n        for y_index in range(context.get_y_repeat()):\n            buffer_command = BufferCommand2(\n                transform=context.get_state().get_aperture_transform(),\n                command_buffer=command_buffer,\n            ).get_transposed(\n                Vector2D(\n                    x=(context.get_x_step() * x_index),\n                    y=(context.get_y_step() * y_index),\n                ),\n            )\n            commands.append(buffer_command)\n\n    # Resets all variables, including is_step_and_repeat and possibly other\n    # set during recording of SR command block. Must be done before\n    # add_command() to push SR command buffers to main command buffers.\n    context.reset_state_to_pre_step_and_repeat()\n    context.unset_state_before_step_and_repeat()\n    context.unset_step_and_repeat_command_buffer()\n\n    for command in commands:\n        context.add_command(command)\n\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ApertureAttributeHooks","title":"ApertureAttributeHooks","text":"<p>             Bases: <code>ApertureAttributeHooks</code></p> <p>Hooks for visiting aperture attribute token (TA).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ApertureAttributeHooks(Parser2HooksBase.ApertureAttributeHooks):\n    \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: ApertureAttribute,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_aperture_attribute(token.name, token.value)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ApertureAttributeHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: ApertureAttribute, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>ApertureAttribute</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: ApertureAttribute,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_aperture_attribute(token.name, token.value)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DeleteAttributeHooks","title":"DeleteAttributeHooks","text":"<p>             Bases: <code>DeleteAttributeHooks</code></p> <p>Hooks for visiting delete attribute token (TD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class DeleteAttributeHooks(Parser2HooksBase.DeleteAttributeHooks):\n    \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: DeleteAttribute,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        if token.name is not None:\n            context.delete_aperture_attribute(token.name)\n            context.delete_object_attribute(token.name)\n        else:\n            context.clear_aperture_attributes()\n            context.clear_object_attributes()\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.DeleteAttributeHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: DeleteAttribute, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>DeleteAttribute</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: DeleteAttribute,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    if token.name is not None:\n        context.delete_aperture_attribute(token.name)\n        context.delete_object_attribute(token.name)\n    else:\n        context.clear_aperture_attributes()\n        context.clear_object_attributes()\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.FileAttributeHooks","title":"FileAttributeHooks","text":"<p>             Bases: <code>FileAttributeHooks</code></p> <p>Hooks for visiting file attribute token (TF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class FileAttributeHooks(Parser2HooksBase.FileAttributeHooks):\n    \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: FileAttribute,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_file_attribute(token.name, token.value)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.FileAttributeHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: FileAttribute, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>FileAttribute</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: FileAttribute,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_file_attribute(token.name, token.value)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ObjectAttributeHooks","title":"ObjectAttributeHooks","text":"<p>             Bases: <code>ObjectAttributeHooks</code></p> <p>Hooks for visiting object attribute token (TO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>class ObjectAttributeHooks(Parser2HooksBase.ObjectAttributeHooks):\n    \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: ObjectAttribute,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n        context.set_object_attribute(token.name, token.value)\n        return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks.html#pygerber.gerberx3.parser2.parser2hooks.Parser2Hooks.ObjectAttributeHooks.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: ObjectAttribute, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>ObjectAttribute</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: ObjectAttribute,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n    context.set_object_attribute(token.name, token.value)\n    return super().on_parser_visit_token(token, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html","title":"parser2hooks_base","text":""},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base","title":"parser2hooks_base","text":"<p>Parser hooks interface class, for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase","title":"TokenHooksBase","text":"<p>             Bases: <code>Generic[TokenT]</code></p> <p>Class for creating token visit hooks.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class TokenHooksBase(Generic[TokenT]):\n    \"\"\"Class for creating token visit hooks.\"\"\"\n\n    def __init__(self, hooks: Parser2HooksBase) -&gt; None:\n        self.hooks = hooks\n\n    def post_hooks_init(self) -&gt; None:\n        \"\"\"Called after all hooks are assigned.\"\"\"\n\n    def pre_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called before parser visits a token.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that will be visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n\n    def on_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called when parser visits a token.\n\n        This hook should perform all changes on context implicated by token type.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that is being visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n\n    def post_parser_visit_token(\n        self,\n        token: TokenT,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Called after parser visits a token.\n\n        Parameters\n        ----------\n        token: TokenT\n            The token that was visited.\n        context : Parser2Context\n            The context object containing information about the parser state.\n\n        \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.post_hooks_init","title":"post_hooks_init","text":"<pre><code>post_hooks_init() -&gt; None\n</code></pre> <p>Called after all hooks are assigned.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_hooks_init(self) -&gt; None:\n    \"\"\"Called after all hooks are assigned.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.pre_parser_visit_token","title":"pre_parser_visit_token","text":"<pre><code>pre_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called before parser visits a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that will be visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called before parser visits a token.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that will be visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.on_parser_visit_token","title":"on_parser_visit_token","text":"<pre><code>on_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called when parser visits a token.</p> <p>This hook should perform all changes on context implicated by token type.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that is being visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called when parser visits a token.\n\n    This hook should perform all changes on context implicated by token type.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that is being visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.TokenHooksBase.post_parser_visit_token","title":"post_parser_visit_token","text":"<pre><code>post_parser_visit_token(\n    token: TokenT, context: Parser2Context\n) -&gt; None\n</code></pre> <p>Called after parser visits a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>TokenT</code> <p>The token that was visited.</p> required <code>context</code> <code>Parser2Context</code> <p>The context object containing information about the parser state.</p> required Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parser_visit_token(\n    self,\n    token: TokenT,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Called after parser visits a token.\n\n    Parameters\n    ----------\n    token: TokenT\n        The token that was visited.\n    context : Parser2Context\n        The context object containing information about the parser state.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase","title":"Parser2HooksBase","text":"<p>Collection of overridable hooks for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class Parser2HooksBase:\n    \"\"\"Collection of overridable hooks for Gerber AST parser, version 2.\"\"\"\n\n    def __init__(self) -&gt; None:  # noqa: PLR0915\n        super().__init__()\n        self.macro_begin = self.MacroBeginTokenHooks(self)\n        self.macro_code_1_circle = self.MacroCode1CircleTokenHooks(self)\n        self.macro_code_2_vector_line = self.MacroCode2VectorLineTokenHooks(self)\n        self.macro_code_4_outline = self.MacroCode4OutlineTokenHooks(self)\n        self.macro_code_5_polygon = self.MacroCode5PolygonTokenHooks(self)\n        self.macro_code_6_moire = self.MacroCode6MoireTokenHooks(self)\n        self.macro_code_7_thermal = self.MacroCode7ThermalTokenHooks(self)\n        self.macro_code_20_vector_line = self.MacroCode20VectorLineTokenHooks(self)\n        self.macro_code_21_center_line = self.MacroCode21CenterLineTokenHooks(self)\n        self.macro_code_22_lower_left_line = self.MacroCode22LowerLeftLineTokenHooks(\n            self,\n        )\n        self.macro_variable_assignment = self.MacroVariableAssignment(self)\n        self.macro_definition = self.MacroDefinitionTokenHooks(self)\n        self.macro_eval = self.MacroEvalHooks()\n\n        self.end_block_aperture = self.EndBlockApertureTokenHooks(self)\n        self.begin_block_aperture = self.BeginBlockApertureTokenHooks(self)\n\n        self.define_circle_aperture = self.DefineApertureCircleTokenHooks(self)\n        self.define_rectangle_aperture = self.DefineApertureRectangleTokenHooks(self)\n        self.define_obround_aperture = self.DefineApertureObroundTokenHooks(self)\n        self.define_polygon_aperture = self.DefineAperturePolygonTokenHooks(self)\n        self.define_macro_aperture = self.DefineApertureMacroTokenHooks(self)\n        self.define_aperture = self.DefineApertureTokenHooks(self)\n\n        self.axis_select = self.AxisSelectTokenHooksTokenHooks(self)\n\n        self.command_draw = self.CommandDrawTokenHooks(self)\n        self.command_move = self.CommandMoveTokenHooks(self)\n        self.command_flash = self.CommandFlashTokenHooks(self)\n\n        self.select_aperture = self.SelectApertureTokenHooks(self)\n        self.coordinate_format = self.CoordinateFormatTokenHooks(self)\n\n        self.set_linear = self.SetLinearTokenHooks(self)\n        self.set_clockwise_circular = self.SetClockwiseCircularTokenHooks(self)\n        self.set_counter_clockwise_circular = (\n            self.SetCounterClockwiseCircularTokenHooks(self)\n        )\n\n        self.comment = self.CommentTokenHooks(self)\n        self.begin_region = self.BeginRegionTokenHooks(self)\n        self.end_region = self.EndRegionTokenHooks(self)\n        self.prepare_select_aperture = self.PrepareSelectApertureTokenHooks(self)\n        self.set_unit_inch = self.SetUnitInchTokenHooks(self)\n        self.set_unit_millimeters = self.SetUnitMillimetersTokenHooks(self)\n\n        self.set_single_quadrant_mode = self.SetSingleQuadrantModeTokenHooks(self)\n        self.set_multi_quadrant_mode = self.SetMultiQuadrantModeTokenHooks(self)\n\n        self.set_coordinate_absolute = self.SetCoordinateAbsoluteTokenHooks(self)\n        self.set_coordinate_incremental = self.SetCoordinateIncrementalTokenHooks(self)\n\n        self.image_name = self.ImageNameTokenHooks(self)\n        self.invalid_token = self.InvalidTokenHooks(self)\n        self.image_polarity = self.ImagePolarityTokenHooks(self)\n        self.load_name = self.LoadNameTokenHooks(self)\n\n        self.load_mirroring = self.LoadMirroringTokenHooks(self)\n        self.load_polarity = self.LoadPolarityTokenHooks(self)\n        self.load_rotation = self.LoadRotationTokenHooks(self)\n        self.load_scaling = self.LoadScalingTokenHooks(self)\n\n        self.program_stop = self.ProgramStopTokenHooks(self)\n        self.optional_stop = self.OptionalStopTokenHooks(self)\n        self.end_of_file = self.EndOfFileTokenHooks(self)\n        self.unit_mode = self.UnitModeTokenHooks(self)\n        self.image_offset = self.ImageOffsetTokenHooks(self)\n\n        self.step_repeat_begin = self.StepRepeatBeginTokenHooks(self)\n        self.step_repeat_end = self.StepRepeatEndTokenHooks(self)\n\n        self.aperture_attribute = self.ApertureAttributeHooks(self)\n        self.delete_attribute = self.DeleteAttributeHooks(self)\n        self.file_attribute = self.FileAttributeHooks(self)\n        self.object_attribute = self.ObjectAttributeHooks(self)\n\n        self._call_post_hooks_init()\n\n    def _call_post_hooks_init(self) -&gt; None:  # noqa: PLR0915\n        self.macro_begin.post_hooks_init()\n        self.macro_code_1_circle.post_hooks_init()\n        self.macro_code_2_vector_line.post_hooks_init()\n        self.macro_code_4_outline.post_hooks_init()\n        self.macro_code_5_polygon.post_hooks_init()\n        self.macro_code_6_moire.post_hooks_init()\n        self.macro_code_7_thermal.post_hooks_init()\n        self.macro_code_20_vector_line.post_hooks_init()\n        self.macro_code_21_center_line.post_hooks_init()\n        self.macro_code_22_lower_left_line.post_hooks_init()\n        self.macro_variable_assignment.post_hooks_init()\n        self.macro_definition.post_hooks_init()\n\n        self.end_block_aperture.post_hooks_init()\n        self.begin_block_aperture.post_hooks_init()\n\n        self.define_circle_aperture.post_hooks_init()\n        self.define_rectangle_aperture.post_hooks_init()\n        self.define_obround_aperture.post_hooks_init()\n        self.define_polygon_aperture.post_hooks_init()\n        self.define_macro_aperture.post_hooks_init()\n        self.define_aperture.post_hooks_init()\n\n        self.axis_select.post_hooks_init()\n\n        self.command_draw.post_hooks_init()\n        self.command_move.post_hooks_init()\n        self.command_flash.post_hooks_init()\n\n        self.select_aperture.post_hooks_init()\n        self.coordinate_format.post_hooks_init()\n\n        self.set_linear.post_hooks_init()\n        self.set_clockwise_circular.post_hooks_init()\n        self.set_counter_clockwise_circular.post_hooks_init()\n\n        self.comment.post_hooks_init()\n        self.begin_region.post_hooks_init()\n        self.end_region.post_hooks_init()\n        self.prepare_select_aperture.post_hooks_init()\n\n        self.set_unit_inch.post_hooks_init()\n        self.set_unit_millimeters.post_hooks_init()\n\n        self.set_single_quadrant_mode.post_hooks_init()\n        self.set_multi_quadrant_mode.post_hooks_init()\n\n        self.set_coordinate_absolute.post_hooks_init()\n        self.set_coordinate_incremental.post_hooks_init()\n\n        self.image_name.post_hooks_init()\n        self.invalid_token.post_hooks_init()\n        self.image_polarity.post_hooks_init()\n        self.load_name.post_hooks_init()\n\n        self.load_mirroring.post_hooks_init()\n        self.load_polarity.post_hooks_init()\n        self.load_rotation.post_hooks_init()\n        self.load_scaling.post_hooks_init()\n\n        self.program_stop.post_hooks_init()\n        self.optional_stop.post_hooks_init()\n        self.end_of_file.post_hooks_init()\n        self.unit_mode.post_hooks_init()\n        self.image_offset.post_hooks_init()\n\n        self.step_repeat_begin.post_hooks_init()\n        self.step_repeat_end.post_hooks_init()\n\n        self.aperture_attribute.post_hooks_init()\n        self.delete_attribute.post_hooks_init()\n        self.file_attribute.post_hooks_init()\n        self.object_attribute.post_hooks_init()\n\n    def on_parser_init(self, parser: Parser2) -&gt; None:\n        \"\"\"Called after parser initialization.\"\"\"\n\n    def pre_parse(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called before parsing starts.\"\"\"\n\n    def post_parse(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called after parsing finishes.\"\"\"\n\n    def on_parser_error(self, context: Parser2Context, error: Parser2Error) -&gt; None:\n        \"\"\"Called when parsing error is thrown.\"\"\"\n\n    def on_other_error(self, context: Parser2Context, error: Exception) -&gt; None:\n        \"\"\"Called when other error is thrown.\"\"\"\n\n    def pre_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called before parser visits any token.\"\"\"\n\n    def post_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Called after parser visits any token.\"\"\"\n\n    class MacroBeginTokenHooks(TokenHooksBase[MacroBeginT]):\n        \"\"\"Hooks for visiting macro definition begin token (AM).\"\"\"\n\n    class MacroCode1CircleTokenHooks(TokenHooksBase[Code1CircleTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n\n    class MacroCode2VectorLineTokenHooks(TokenHooksBase[Code2VectorLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n\n    class MacroCode4OutlineTokenHooks(TokenHooksBase[Code4OutlineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n\n    class MacroCode5PolygonTokenHooks(TokenHooksBase[Code5PolygonTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n\n    class MacroCode6MoireTokenHooks(TokenHooksBase[Code6MoireTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n\n    class MacroCode7ThermalTokenHooks(TokenHooksBase[Code7ThermalTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n\n    class MacroCode20VectorLineTokenHooks(TokenHooksBase[Code20VectorLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n\n    class MacroCode21CenterLineTokenHooks(TokenHooksBase[Code21CenterLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n\n    class MacroCode22LowerLeftLineTokenHooks(TokenHooksBase[Code22LowerLeftLineTokenT]):\n        \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n\n    class MacroVariableAssignment(TokenHooksBase[MacroVariableAssignmentT]):\n        \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n\n    class MacroDefinitionTokenHooks(TokenHooksBase[MacroDefinitionT]):\n        \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n\n    class MacroEvalHooks:\n        \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n        def on_code_1_circle(\n            self,\n            context: Parser2Context,\n            primitive: Code1Circle2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 1 circle primitive.\"\"\"\n\n        def on_code_2_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code2VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n        def on_code_4_outline(\n            self,\n            context: Parser2Context,\n            primitive: Code4Outline2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 4 outline primitive.\"\"\"\n\n        def on_code_5_polygon(\n            self,\n            context: Parser2Context,\n            primitive: Code5Polygon2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n\n        def on_code_6_moire(\n            self,\n            context: Parser2Context,\n            primitive: Code6Moire2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n        def on_code_7_thermal(\n            self,\n            context: Parser2Context,\n            primitive: Code7Thermal2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n        def on_code_20_vector_line(\n            self,\n            context: Parser2Context,\n            primitive: Code20VectorLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n\n        def on_code_21_center_line(\n            self,\n            context: Parser2Context,\n            primitive: Code21CenterLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 21 center line primitive.\"\"\"\n\n        def on_code_22_lower_left_line(\n            self,\n            context: Parser2Context,\n            primitive: Code22LowerLeftLine2,\n        ) -&gt; None:\n            \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n        def on_assignment(\n            self,\n            context: Parser2Context,\n            assignment: Assignment2,\n        ) -&gt; None:\n            \"\"\"Evaluate macro variable assignment statement.\"\"\"\n\n    class BeginBlockApertureTokenHooks(TokenHooksBase[BlockApertureBeginT]):\n        \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n\n    class EndBlockApertureTokenHooks(TokenHooksBase[BlockApertureEndT]):\n        \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n\n    class DefineApertureCircleTokenHooks(TokenHooksBase[DefineCircleT]):\n        \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n\n    class DefineApertureRectangleTokenHooks(TokenHooksBase[DefineRectangleT]):\n        \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n\n    class DefineApertureObroundTokenHooks(TokenHooksBase[DefineObroundT]):\n        \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n\n    class DefineAperturePolygonTokenHooks(TokenHooksBase[DefinePolygonT]):\n        \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n\n    class DefineApertureMacroTokenHooks(TokenHooksBase[DefineMacroT]):\n        \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n\n    class DefineApertureTokenHooks(TokenHooksBase[DefineAnyT]):\n        \"\"\"Hooks for visiting any aperture definition token (ADD).\"\"\"\n\n    class AxisSelectTokenHooksTokenHooks(TokenHooksBase[AxisSelectT]):\n        \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n\n    class CommandDrawTokenHooks(TokenHooksBase[D01DrawT]):\n        \"\"\"Hooks for visiting draw token (D01).\"\"\"\n\n    class CommandMoveTokenHooks(TokenHooksBase[D02MoveT]):\n        \"\"\"Hooks for visiting move token (D02).\"\"\"\n\n    class CommandFlashTokenHooks(TokenHooksBase[D03FlashT]):\n        \"\"\"Hooks for visiting flash token (D03).\"\"\"\n\n    class SelectApertureTokenHooks(TokenHooksBase[DNNSelectApertureT]):\n        \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n\n    class CoordinateFormatTokenHooks(TokenHooksBase[CoordinateFormatT]):\n        \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n\n    class SetLinearTokenHooks(TokenHooksBase[SetLinearT]):\n        \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n\n    class SetClockwiseCircularTokenHooks(TokenHooksBase[SetClockwiseCircularT]):\n        \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n\n    class SetCounterClockwiseCircularTokenHooks(\n        TokenHooksBase[SetCounterclockwiseCircularT],\n    ):\n        \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n\n    class CommentTokenHooks(TokenHooksBase[CommentT]):\n        \"\"\"Hooks for visiting comment token (G04).\"\"\"\n\n    class BeginRegionTokenHooks(TokenHooksBase[BeginRegionT]):\n        \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n\n    class EndRegionTokenHooks(TokenHooksBase[EndRegionT]):\n        \"\"\"Hooks for visiting end region token (G37).\"\"\"\n\n    class PrepareSelectApertureTokenHooks(TokenHooksBase[G54SelectApertureT]):\n        \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n\n    class SetUnitInchTokenHooks(TokenHooksBase[SetUnitInchT]):\n        \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n\n    class SetUnitMillimetersTokenHooks(TokenHooksBase[SetUnitMillimetersT]):\n        \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n\n    class SetSingleQuadrantModeTokenHooks(TokenHooksBase[SetSingleQuadrantModeT]):\n        \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n\n    class SetMultiQuadrantModeTokenHooks(TokenHooksBase[SetMultiQuadrantModeT]):\n        \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n\n    class SetCoordinateAbsoluteTokenHooks(TokenHooksBase[SetAbsoluteNotationT]):\n        \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n\n    class SetCoordinateIncrementalTokenHooks(TokenHooksBase[SetIncrementalNotationT]):\n        \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n\n    class ImageNameTokenHooks(TokenHooksBase[ImageNameT]):\n        \"\"\"Hooks for visiting image name token (IN).\"\"\"\n\n    class InvalidTokenHooks(TokenHooksBase[InvalidTokenT]):\n        \"\"\"Hooks for visiting invalid token.\"\"\"\n\n    class ImagePolarityTokenHooks(TokenHooksBase[ImagePolarityT]):\n        \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n\n    class LoadMirroringTokenHooks(TokenHooksBase[LoadMirroringT]):\n        \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n\n    class LoadNameTokenHooks(TokenHooksBase[LoadNameT]):\n        \"\"\"Hooks for visiting load name token (LN).\"\"\"\n\n    class LoadPolarityTokenHooks(TokenHooksBase[LoadPolarityT]):\n        \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n\n    class LoadRotationTokenHooks(TokenHooksBase[LoadRotationT]):\n        \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n\n    class LoadScalingTokenHooks(TokenHooksBase[LoadScalingT]):\n        \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n\n    class ProgramStopTokenHooks(TokenHooksBase[M00ProgramStopT]):\n        \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n\n    class OptionalStopTokenHooks(TokenHooksBase[M01OptionalStopT]):\n        \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n\n    class EndOfFileTokenHooks(TokenHooksBase[M02EndOfFileT]):\n        \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n\n    class UnitModeTokenHooks(TokenHooksBase[UnitModeT]):\n        \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n\n    class ImageOffsetTokenHooks(TokenHooksBase[ImageOffsetT]):\n        \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n\n    class StepRepeatBeginTokenHooks(TokenHooksBase[StepRepeatBeginT]):\n        \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n\n    class StepRepeatEndTokenHooks(TokenHooksBase[StepRepeatEndT]):\n        \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n\n    class ApertureAttributeHooks(TokenHooksBase[ApertureAttributeT]):\n        \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n\n    class DeleteAttributeHooks(TokenHooksBase[DeleteAttributeT]):\n        \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n\n    class FileAttributeHooks(TokenHooksBase[FileAttributeT]):\n        \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n\n    class ObjectAttributeHooks(TokenHooksBase[ObjectAttributeT]):\n        \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroBeginTokenHooks","title":"MacroBeginTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[MacroBeginT]</code></p> <p>Hooks for visiting macro definition begin token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroBeginTokenHooks(TokenHooksBase[MacroBeginT]):\n    \"\"\"Hooks for visiting macro definition begin token (AM).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode1CircleTokenHooks","title":"MacroCode1CircleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code1CircleTokenT]</code></p> <p>Hooks for visiting macro primitive code 0 circle.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode1CircleTokenHooks(TokenHooksBase[Code1CircleTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 0 circle.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode2VectorLineTokenHooks","title":"MacroCode2VectorLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code2VectorLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 2 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode2VectorLineTokenHooks(TokenHooksBase[Code2VectorLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 2 vector line.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode4OutlineTokenHooks","title":"MacroCode4OutlineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code4OutlineTokenT]</code></p> <p>Hooks for visiting macro primitive code 4 outline.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode4OutlineTokenHooks(TokenHooksBase[Code4OutlineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 4 outline.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode5PolygonTokenHooks","title":"MacroCode5PolygonTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code5PolygonTokenT]</code></p> <p>Hooks for visiting macro primitive code 5 polygon.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode5PolygonTokenHooks(TokenHooksBase[Code5PolygonTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 5 polygon.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode6MoireTokenHooks","title":"MacroCode6MoireTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code6MoireTokenT]</code></p> <p>Hooks for visiting macro primitive code 6 moire.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode6MoireTokenHooks(TokenHooksBase[Code6MoireTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 6 moire.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode7ThermalTokenHooks","title":"MacroCode7ThermalTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code7ThermalTokenT]</code></p> <p>Hooks for visiting macro primitive code 7 thermal.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode7ThermalTokenHooks(TokenHooksBase[Code7ThermalTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 7 thermal.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode20VectorLineTokenHooks","title":"MacroCode20VectorLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code20VectorLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 20 vector line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode20VectorLineTokenHooks(TokenHooksBase[Code20VectorLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 20 vector line.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode21CenterLineTokenHooks","title":"MacroCode21CenterLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code21CenterLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 21 center line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode21CenterLineTokenHooks(TokenHooksBase[Code21CenterLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 21 center line.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroCode22LowerLeftLineTokenHooks","title":"MacroCode22LowerLeftLineTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[Code22LowerLeftLineTokenT]</code></p> <p>Hooks for visiting macro primitive code 22 lower left line.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroCode22LowerLeftLineTokenHooks(TokenHooksBase[Code22LowerLeftLineTokenT]):\n    \"\"\"Hooks for visiting macro primitive code 22 lower left line.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroVariableAssignment","title":"MacroVariableAssignment","text":"<p>             Bases: <code>TokenHooksBase[MacroVariableAssignmentT]</code></p> <p>Hooks for visiting macro variable assignment token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroVariableAssignment(TokenHooksBase[MacroVariableAssignmentT]):\n    \"\"\"Hooks for visiting macro variable assignment token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroDefinitionTokenHooks","title":"MacroDefinitionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[MacroDefinitionT]</code></p> <p>Hooks for visiting macro definition token (AM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroDefinitionTokenHooks(TokenHooksBase[MacroDefinitionT]):\n    \"\"\"Hooks for visiting macro definition token (AM).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks","title":"MacroEvalHooks","text":"<p>Hooks called when evaluating macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class MacroEvalHooks:\n    \"\"\"Hooks called when evaluating macro aperture.\"\"\"\n\n    def on_code_1_circle(\n        self,\n        context: Parser2Context,\n        primitive: Code1Circle2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 1 circle primitive.\"\"\"\n\n    def on_code_2_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code2VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n\n    def on_code_4_outline(\n        self,\n        context: Parser2Context,\n        primitive: Code4Outline2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 4 outline primitive.\"\"\"\n\n    def on_code_5_polygon(\n        self,\n        context: Parser2Context,\n        primitive: Code5Polygon2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n\n    def on_code_6_moire(\n        self,\n        context: Parser2Context,\n        primitive: Code6Moire2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 6 moire primitive.\"\"\"\n\n    def on_code_7_thermal(\n        self,\n        context: Parser2Context,\n        primitive: Code7Thermal2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n\n    def on_code_20_vector_line(\n        self,\n        context: Parser2Context,\n        primitive: Code20VectorLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n\n    def on_code_21_center_line(\n        self,\n        context: Parser2Context,\n        primitive: Code21CenterLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 21 center line primitive.\"\"\"\n\n    def on_code_22_lower_left_line(\n        self,\n        context: Parser2Context,\n        primitive: Code22LowerLeftLine2,\n    ) -&gt; None:\n        \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n\n    def on_assignment(\n        self,\n        context: Parser2Context,\n        assignment: Assignment2,\n    ) -&gt; None:\n        \"\"\"Evaluate macro variable assignment statement.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_1_circle","title":"on_code_1_circle","text":"<pre><code>on_code_1_circle(\n    context: Parser2Context, primitive: Code1Circle2\n) -&gt; None\n</code></pre> <p>Evaluate code 1 circle primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_1_circle(\n    self,\n    context: Parser2Context,\n    primitive: Code1Circle2,\n) -&gt; None:\n    \"\"\"Evaluate code 1 circle primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_2_vector_line","title":"on_code_2_vector_line","text":"<pre><code>on_code_2_vector_line(\n    context: Parser2Context, primitive: Code2VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 2 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_2_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code2VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 2 vector line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_4_outline","title":"on_code_4_outline","text":"<pre><code>on_code_4_outline(\n    context: Parser2Context, primitive: Code4Outline2\n) -&gt; None\n</code></pre> <p>Evaluate code 4 outline primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_4_outline(\n    self,\n    context: Parser2Context,\n    primitive: Code4Outline2,\n) -&gt; None:\n    \"\"\"Evaluate code 4 outline primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_5_polygon","title":"on_code_5_polygon","text":"<pre><code>on_code_5_polygon(\n    context: Parser2Context, primitive: Code5Polygon2\n) -&gt; None\n</code></pre> <p>Evaluate code 5 polygon primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_5_polygon(\n    self,\n    context: Parser2Context,\n    primitive: Code5Polygon2,\n) -&gt; None:\n    \"\"\"Evaluate code 5 polygon primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_6_moire","title":"on_code_6_moire","text":"<pre><code>on_code_6_moire(\n    context: Parser2Context, primitive: Code6Moire2\n) -&gt; None\n</code></pre> <p>Evaluate code 6 moire primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_6_moire(\n    self,\n    context: Parser2Context,\n    primitive: Code6Moire2,\n) -&gt; None:\n    \"\"\"Evaluate code 6 moire primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_7_thermal","title":"on_code_7_thermal","text":"<pre><code>on_code_7_thermal(\n    context: Parser2Context, primitive: Code7Thermal2\n) -&gt; None\n</code></pre> <p>Evaluate code 7 thermal primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_7_thermal(\n    self,\n    context: Parser2Context,\n    primitive: Code7Thermal2,\n) -&gt; None:\n    \"\"\"Evaluate code 7 thermal primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_20_vector_line","title":"on_code_20_vector_line","text":"<pre><code>on_code_20_vector_line(\n    context: Parser2Context, primitive: Code20VectorLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 20 vector line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_20_vector_line(\n    self,\n    context: Parser2Context,\n    primitive: Code20VectorLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 20 vector line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_21_center_line","title":"on_code_21_center_line","text":"<pre><code>on_code_21_center_line(\n    context: Parser2Context, primitive: Code21CenterLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 21 center line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_21_center_line(\n    self,\n    context: Parser2Context,\n    primitive: Code21CenterLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 21 center line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_code_22_lower_left_line","title":"on_code_22_lower_left_line","text":"<pre><code>on_code_22_lower_left_line(\n    context: Parser2Context, primitive: Code22LowerLeftLine2\n) -&gt; None\n</code></pre> <p>Evaluate code 22 lower left line primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_code_22_lower_left_line(\n    self,\n    context: Parser2Context,\n    primitive: Code22LowerLeftLine2,\n) -&gt; None:\n    \"\"\"Evaluate code 22 lower left line primitive.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.MacroEvalHooks.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(\n    context: Parser2Context, assignment: Assignment2\n) -&gt; None\n</code></pre> <p>Evaluate macro variable assignment statement.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_assignment(\n    self,\n    context: Parser2Context,\n    assignment: Assignment2,\n) -&gt; None:\n    \"\"\"Evaluate macro variable assignment statement.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.BeginBlockApertureTokenHooks","title":"BeginBlockApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BlockApertureBeginT]</code></p> <p>Hooks for visiting begin block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class BeginBlockApertureTokenHooks(TokenHooksBase[BlockApertureBeginT]):\n    \"\"\"Hooks for visiting begin block aperture token (AB).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndBlockApertureTokenHooks","title":"EndBlockApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BlockApertureEndT]</code></p> <p>Hooks for visiting end block aperture token (AB).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndBlockApertureTokenHooks(TokenHooksBase[BlockApertureEndT]):\n    \"\"\"Hooks for visiting end block aperture token (AB).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureCircleTokenHooks","title":"DefineApertureCircleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineCircleT]</code></p> <p>Hooks for visiting circle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureCircleTokenHooks(TokenHooksBase[DefineCircleT]):\n    \"\"\"Hooks for visiting circle aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureRectangleTokenHooks","title":"DefineApertureRectangleTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineRectangleT]</code></p> <p>Hooks for visiting rectangle aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureRectangleTokenHooks(TokenHooksBase[DefineRectangleT]):\n    \"\"\"Hooks for visiting rectangle aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureObroundTokenHooks","title":"DefineApertureObroundTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineObroundT]</code></p> <p>Hooks for visiting obround aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureObroundTokenHooks(TokenHooksBase[DefineObroundT]):\n    \"\"\"Hooks for visiting obround aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineAperturePolygonTokenHooks","title":"DefineAperturePolygonTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefinePolygonT]</code></p> <p>Hooks for visiting polygon aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineAperturePolygonTokenHooks(TokenHooksBase[DefinePolygonT]):\n    \"\"\"Hooks for visiting polygon aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureMacroTokenHooks","title":"DefineApertureMacroTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineMacroT]</code></p> <p>Hooks for visiting macro aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureMacroTokenHooks(TokenHooksBase[DefineMacroT]):\n    \"\"\"Hooks for visiting macro aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DefineApertureTokenHooks","title":"DefineApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DefineAnyT]</code></p> <p>Hooks for visiting any aperture definition token (ADD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DefineApertureTokenHooks(TokenHooksBase[DefineAnyT]):\n    \"\"\"Hooks for visiting any aperture definition token (ADD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.AxisSelectTokenHooksTokenHooks","title":"AxisSelectTokenHooksTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[AxisSelectT]</code></p> <p>Hooks for visiting axis select token (AS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class AxisSelectTokenHooksTokenHooks(TokenHooksBase[AxisSelectT]):\n    \"\"\"Hooks for visiting axis select token (AS).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandDrawTokenHooks","title":"CommandDrawTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D01DrawT]</code></p> <p>Hooks for visiting draw token (D01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandDrawTokenHooks(TokenHooksBase[D01DrawT]):\n    \"\"\"Hooks for visiting draw token (D01).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandMoveTokenHooks","title":"CommandMoveTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D02MoveT]</code></p> <p>Hooks for visiting move token (D02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandMoveTokenHooks(TokenHooksBase[D02MoveT]):\n    \"\"\"Hooks for visiting move token (D02).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommandFlashTokenHooks","title":"CommandFlashTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[D03FlashT]</code></p> <p>Hooks for visiting flash token (D03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommandFlashTokenHooks(TokenHooksBase[D03FlashT]):\n    \"\"\"Hooks for visiting flash token (D03).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SelectApertureTokenHooks","title":"SelectApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[DNNSelectApertureT]</code></p> <p>Hooks for visiting select aperture token (DNN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SelectApertureTokenHooks(TokenHooksBase[DNNSelectApertureT]):\n    \"\"\"Hooks for visiting select aperture token (DNN).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CoordinateFormatTokenHooks","title":"CoordinateFormatTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[CoordinateFormatT]</code></p> <p>Hooks for visiting coordinate format token (FS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CoordinateFormatTokenHooks(TokenHooksBase[CoordinateFormatT]):\n    \"\"\"Hooks for visiting coordinate format token (FS).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetLinearTokenHooks","title":"SetLinearTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetLinearT]</code></p> <p>Hooks for visiting set linear token (G01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetLinearTokenHooks(TokenHooksBase[SetLinearT]):\n    \"\"\"Hooks for visiting set linear token (G01).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetClockwiseCircularTokenHooks","title":"SetClockwiseCircularTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetClockwiseCircularT]</code></p> <p>Hooks for visiting set clockwise circular token (G02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetClockwiseCircularTokenHooks(TokenHooksBase[SetClockwiseCircularT]):\n    \"\"\"Hooks for visiting set clockwise circular token (G02).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCounterClockwiseCircularTokenHooks","title":"SetCounterClockwiseCircularTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetCounterclockwiseCircularT]</code></p> <p>Hooks for visiting set counter clockwise circular token (G03).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCounterClockwiseCircularTokenHooks(\n    TokenHooksBase[SetCounterclockwiseCircularT],\n):\n    \"\"\"Hooks for visiting set counter clockwise circular token (G03).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.CommentTokenHooks","title":"CommentTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[CommentT]</code></p> <p>Hooks for visiting comment token (G04).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class CommentTokenHooks(TokenHooksBase[CommentT]):\n    \"\"\"Hooks for visiting comment token (G04).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.BeginRegionTokenHooks","title":"BeginRegionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[BeginRegionT]</code></p> <p>Hooks for visiting begin region token (G36).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class BeginRegionTokenHooks(TokenHooksBase[BeginRegionT]):\n    \"\"\"Hooks for visiting begin region token (G36).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndRegionTokenHooks","title":"EndRegionTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[EndRegionT]</code></p> <p>Hooks for visiting end region token (G37).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndRegionTokenHooks(TokenHooksBase[EndRegionT]):\n    \"\"\"Hooks for visiting end region token (G37).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.PrepareSelectApertureTokenHooks","title":"PrepareSelectApertureTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[G54SelectApertureT]</code></p> <p>Hooks for visiting prepare select aperture token (G54).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class PrepareSelectApertureTokenHooks(TokenHooksBase[G54SelectApertureT]):\n    \"\"\"Hooks for visiting prepare select aperture token (G54).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetUnitInchTokenHooks","title":"SetUnitInchTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetUnitInchT]</code></p> <p>Hooks for visiting set unit inch token (G70).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetUnitInchTokenHooks(TokenHooksBase[SetUnitInchT]):\n    \"\"\"Hooks for visiting set unit inch token (G70).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetUnitMillimetersTokenHooks","title":"SetUnitMillimetersTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetUnitMillimetersT]</code></p> <p>Hooks for visiting set unit millimeters token (G71).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetUnitMillimetersTokenHooks(TokenHooksBase[SetUnitMillimetersT]):\n    \"\"\"Hooks for visiting set unit millimeters token (G71).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetSingleQuadrantModeTokenHooks","title":"SetSingleQuadrantModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetSingleQuadrantModeT]</code></p> <p>Hooks for visiting set single-quadrant mode token (G74).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetSingleQuadrantModeTokenHooks(TokenHooksBase[SetSingleQuadrantModeT]):\n    \"\"\"Hooks for visiting set single-quadrant mode token (G74).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetMultiQuadrantModeTokenHooks","title":"SetMultiQuadrantModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetMultiQuadrantModeT]</code></p> <p>Hooks for visiting set multi-quadrant mode token (G75).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetMultiQuadrantModeTokenHooks(TokenHooksBase[SetMultiQuadrantModeT]):\n    \"\"\"Hooks for visiting set multi-quadrant mode token (G75).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCoordinateAbsoluteTokenHooks","title":"SetCoordinateAbsoluteTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetAbsoluteNotationT]</code></p> <p>Hooks for visiting set coordinate absolute token (G90).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCoordinateAbsoluteTokenHooks(TokenHooksBase[SetAbsoluteNotationT]):\n    \"\"\"Hooks for visiting set coordinate absolute token (G90).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.SetCoordinateIncrementalTokenHooks","title":"SetCoordinateIncrementalTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[SetIncrementalNotationT]</code></p> <p>Hooks for visiting set coordinate incremental token (G91).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class SetCoordinateIncrementalTokenHooks(TokenHooksBase[SetIncrementalNotationT]):\n    \"\"\"Hooks for visiting set coordinate incremental token (G91).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImageNameTokenHooks","title":"ImageNameTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImageNameT]</code></p> <p>Hooks for visiting image name token (IN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImageNameTokenHooks(TokenHooksBase[ImageNameT]):\n    \"\"\"Hooks for visiting image name token (IN).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.InvalidTokenHooks","title":"InvalidTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[InvalidTokenT]</code></p> <p>Hooks for visiting invalid token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class InvalidTokenHooks(TokenHooksBase[InvalidTokenT]):\n    \"\"\"Hooks for visiting invalid token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImagePolarityTokenHooks","title":"ImagePolarityTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImagePolarityT]</code></p> <p>Hooks for visiting image polarity token (IP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImagePolarityTokenHooks(TokenHooksBase[ImagePolarityT]):\n    \"\"\"Hooks for visiting image polarity token (IP).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadMirroringTokenHooks","title":"LoadMirroringTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadMirroringT]</code></p> <p>Hooks for visiting load mirroring token (LM).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadMirroringTokenHooks(TokenHooksBase[LoadMirroringT]):\n    \"\"\"Hooks for visiting load mirroring token (LM).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadNameTokenHooks","title":"LoadNameTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadNameT]</code></p> <p>Hooks for visiting load name token (LN).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadNameTokenHooks(TokenHooksBase[LoadNameT]):\n    \"\"\"Hooks for visiting load name token (LN).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadPolarityTokenHooks","title":"LoadPolarityTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadPolarityT]</code></p> <p>Hooks for visiting load polarity token (LP).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadPolarityTokenHooks(TokenHooksBase[LoadPolarityT]):\n    \"\"\"Hooks for visiting load polarity token (LP).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadRotationTokenHooks","title":"LoadRotationTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadRotationT]</code></p> <p>Hooks for visiting load rotation token (LR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadRotationTokenHooks(TokenHooksBase[LoadRotationT]):\n    \"\"\"Hooks for visiting load rotation token (LR).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.LoadScalingTokenHooks","title":"LoadScalingTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[LoadScalingT]</code></p> <p>Hooks for visiting load scaling token (LS).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class LoadScalingTokenHooks(TokenHooksBase[LoadScalingT]):\n    \"\"\"Hooks for visiting load scaling token (LS).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ProgramStopTokenHooks","title":"ProgramStopTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M00ProgramStopT]</code></p> <p>Hooks for visiting program stop token (M00).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ProgramStopTokenHooks(TokenHooksBase[M00ProgramStopT]):\n    \"\"\"Hooks for visiting program stop token (M00).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.OptionalStopTokenHooks","title":"OptionalStopTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M01OptionalStopT]</code></p> <p>Hooks for visiting optional stop token (M01).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class OptionalStopTokenHooks(TokenHooksBase[M01OptionalStopT]):\n    \"\"\"Hooks for visiting optional stop token (M01).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.EndOfFileTokenHooks","title":"EndOfFileTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[M02EndOfFileT]</code></p> <p>Hooks for visiting end of file token (M02).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class EndOfFileTokenHooks(TokenHooksBase[M02EndOfFileT]):\n    \"\"\"Hooks for visiting end of file token (M02).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.UnitModeTokenHooks","title":"UnitModeTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[UnitModeT]</code></p> <p>Hooks for visiting unit mode token (MO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class UnitModeTokenHooks(TokenHooksBase[UnitModeT]):\n    \"\"\"Hooks for visiting unit mode token (MO).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ImageOffsetTokenHooks","title":"ImageOffsetTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[ImageOffsetT]</code></p> <p>Hooks for visiting image offset token (OF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ImageOffsetTokenHooks(TokenHooksBase[ImageOffsetT]):\n    \"\"\"Hooks for visiting image offset token (OF).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.StepRepeatBeginTokenHooks","title":"StepRepeatBeginTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[StepRepeatBeginT]</code></p> <p>Hooks for visiting step and repeat begin token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class StepRepeatBeginTokenHooks(TokenHooksBase[StepRepeatBeginT]):\n    \"\"\"Hooks for visiting step and repeat begin token (SR).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.StepRepeatEndTokenHooks","title":"StepRepeatEndTokenHooks","text":"<p>             Bases: <code>TokenHooksBase[StepRepeatEndT]</code></p> <p>Hooks for visiting step and repeat end token (SR).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class StepRepeatEndTokenHooks(TokenHooksBase[StepRepeatEndT]):\n    \"\"\"Hooks for visiting step and repeat end token (SR).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ApertureAttributeHooks","title":"ApertureAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[ApertureAttributeT]</code></p> <p>Hooks for visiting aperture attribute token (TA).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ApertureAttributeHooks(TokenHooksBase[ApertureAttributeT]):\n    \"\"\"Hooks for visiting aperture attribute token (TA).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.DeleteAttributeHooks","title":"DeleteAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[DeleteAttributeT]</code></p> <p>Hooks for visiting delete attribute token (TD).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class DeleteAttributeHooks(TokenHooksBase[DeleteAttributeT]):\n    \"\"\"Hooks for visiting delete attribute token (TD).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.FileAttributeHooks","title":"FileAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[FileAttributeT]</code></p> <p>Hooks for visiting file attribute token (TF).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class FileAttributeHooks(TokenHooksBase[FileAttributeT]):\n    \"\"\"Hooks for visiting file attribute token (TF).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.ObjectAttributeHooks","title":"ObjectAttributeHooks","text":"<p>             Bases: <code>TokenHooksBase[ObjectAttributeT]</code></p> <p>Hooks for visiting object attribute token (TO).</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>class ObjectAttributeHooks(TokenHooksBase[ObjectAttributeT]):\n    \"\"\"Hooks for visiting object attribute token (TO).\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_parser_init","title":"on_parser_init","text":"<pre><code>on_parser_init(parser: Parser2) -&gt; None\n</code></pre> <p>Called after parser initialization.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_init(self, parser: Parser2) -&gt; None:\n    \"\"\"Called after parser initialization.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.pre_parse","title":"pre_parse","text":"<pre><code>pre_parse(context: Parser2Context) -&gt; None\n</code></pre> <p>Called before parsing starts.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parse(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called before parsing starts.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.post_parse","title":"post_parse","text":"<pre><code>post_parse(context: Parser2Context) -&gt; None\n</code></pre> <p>Called after parsing finishes.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parse(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called after parsing finishes.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_parser_error","title":"on_parser_error","text":"<pre><code>on_parser_error(\n    context: Parser2Context, error: Parser2Error\n) -&gt; None\n</code></pre> <p>Called when parsing error is thrown.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_parser_error(self, context: Parser2Context, error: Parser2Error) -&gt; None:\n    \"\"\"Called when parsing error is thrown.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.on_other_error","title":"on_other_error","text":"<pre><code>on_other_error(\n    context: Parser2Context, error: Exception\n) -&gt; None\n</code></pre> <p>Called when other error is thrown.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def on_other_error(self, context: Parser2Context, error: Exception) -&gt; None:\n    \"\"\"Called when other error is thrown.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.pre_parser_visit_any_token","title":"pre_parser_visit_any_token","text":"<pre><code>pre_parser_visit_any_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Called before parser visits any token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def pre_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called before parser visits any token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/parser2hooks_base.html#pygerber.gerberx3.parser2.parser2hooks_base.Parser2HooksBase.post_parser_visit_any_token","title":"post_parser_visit_any_token","text":"<pre><code>post_parser_visit_any_token(\n    context: Parser2Context,\n) -&gt; None\n</code></pre> <p>Called after parser visits any token.</p> Source code in <code>src/pygerber/gerberx3/parser2/parser2hooks_base.py</code> <pre><code>def post_parser_visit_any_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Called after parser visits any token.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html","title":"state2","text":""},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2","title":"state2","text":"<p>Alternative implementation of Gerber AST parser state, version 2.</p> <p>Parser state is immutable and composed out of multiple sub objects. This approach allows for cheap storage and updates of parser state, as whenever parser state is updated, only one value must be changed, while rest of the structures remain unchanged and only references to them are copied.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants","title":"State2Constants","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Collection of rarely changing (usually once per AST) parser constants.</p> <p>This class represents the state constants used in the Gerber parser. It contains properties for various parser constants such as draw units, coordinate format, polarity, mirroring, rotation, scaling, image polarity, and file name. These constants are typically set once per AST (Abstract Syntax Tree) and are used throughout the parsing process.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class State2Constants(FrozenGeneralModel):\n    \"\"\"Collection of rarely changing (usually once per AST) parser constants.\n\n    This class represents the state constants used in the Gerber parser. It contains\n    properties for various parser constants such as draw units, coordinate format,\n    polarity, mirroring, rotation, scaling, image polarity, and file name. These\n    constants are typically set once per AST (Abstract Syntax Tree) and are used\n    throughout the parsing process.\n    \"\"\"\n\n    draw_units: Optional[Unit] = Field(default=None)\n    \"\"\"The draw units used for the Gerber file. (Spec reference: 4.2.1)\"\"\"\n\n    coordinate_parser: Optional[CoordinateParser] = Field(default=None)\n    \"\"\"The coordinate format specification, including the number of decimals.\n    (Spec reference: 4.2.2)\"\"\"\n\n    is_output_image_negation_required: bool = Field(default=False)\n    \"\"\"Flag indicating whether image polarity flipping is required.\n    (Spec reference: 8.1.4)\"\"\"\n\n    image_name: Optional[str] = Field(default=None)\n    \"\"\"The name of the image. (Spec reference: 8.1.3)\"\"\"\n\n    file_name: Optional[str] = Field(default=None)\n    \"\"\"The name of the file. (Spec reference: 8.1.6)\"\"\"\n\n    axis_correspondence: AxisCorrespondence = Field(default=AxisCorrespondence.AXBY)\n    \"\"\"Correspondence between the X, Y data axes and the A, B output device axes.\n    It does not affect the image in computer to computer data exchange. It only\n    has an effect how the image is positioned on an output device.\"\"\"\n\n    def get_draw_units(self) -&gt; Unit:\n        \"\"\"Get the draw units.\n\n        This method returns the draw units used for the Gerber file.\n\n        Returns\n        -------\n        Unit\n            The draw units.\n\n        Raises\n        ------\n        UnitNotSet2Error\n            If the draw units are not set.\n\n        \"\"\"\n        if self.draw_units is None:\n            raise UnitNotSet2Error\n        return self.draw_units\n\n    def set_draw_units(self, draw_units: Unit) -&gt; Self:\n        \"\"\"Set the draw units for the state.\n\n        This method updates the draw units of the state and returns a new instance of\n        the state with the updated draw units.\n\n        Parameters\n        ----------\n        draw_units : Unit\n            The draw units to be set.\n\n        Returns\n        -------\n        Self\n            A new instance of the state with the updated draw units.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"draw_units\": draw_units,\n            },\n        )\n\n    def get_coordinate_parser(self) -&gt; CoordinateParser:\n        \"\"\"Get coordinate_parser property value.\"\"\"\n        if self.coordinate_parser is None:\n            raise CoordinateFormatNotSet2Error\n        return self.coordinate_parser\n\n    def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; Self:\n        \"\"\"Set the coordinate_parser property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"coordinate_parser\": coordinate_parser,\n            },\n        )\n\n    def get_is_output_image_negation_required(self) -&gt; bool:\n        \"\"\"Get is_output_image_negation_required property value.\"\"\"\n        return self.is_output_image_negation_required\n\n    def set_is_output_image_negation_required(\n        self,\n        value: bool,  # noqa: FBT001\n    ) -&gt; Self:\n        \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"is_output_image_negation_required\": value,\n            },\n        )\n\n    def get_image_name(self) -&gt; Optional[str]:\n        \"\"\"Get image_name property value.\"\"\"\n        return self.image_name\n\n    def set_image_name(self, image_name: Optional[str]) -&gt; Self:\n        \"\"\"Set the image_name property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"image_name\": image_name,\n            },\n        )\n\n    def get_file_name(self) -&gt; Optional[str]:\n        \"\"\"Get file_name property value.\"\"\"\n        return self.file_name\n\n    def set_file_name(self, file_name: Optional[str]) -&gt; Self:\n        \"\"\"Set the file_name property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"file_name\": file_name,\n            },\n        )\n\n    def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n        \"\"\"Get token axis correspondence property value.\"\"\"\n        return self.axis_correspondence\n\n    def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; Self:\n        \"\"\"Set token axis correspondence property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"axis_correspondence\": axis_correspondence,\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.draw_units","title":"draw_units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>draw_units: Optional[Unit] = Field(default=None)\n</code></pre> <p>The draw units used for the Gerber file. (Spec reference: 4.2.1)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.coordinate_parser","title":"coordinate_parser  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_parser: Optional[CoordinateParser] = Field(\n    default=None\n)\n</code></pre> <p>The coordinate format specification, including the number of decimals. (Spec reference: 4.2.2)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.is_output_image_negation_required","title":"is_output_image_negation_required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_output_image_negation_required: bool = Field(\n    default=False\n)\n</code></pre> <p>Flag indicating whether image polarity flipping is required. (Spec reference: 8.1.4)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.image_name","title":"image_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.3)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.file_name","title":"file_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the file. (Spec reference: 8.1.6)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.axis_correspondence","title":"axis_correspondence  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>axis_correspondence: AxisCorrespondence = Field(\n    default=AXBY\n)\n</code></pre> <p>Correspondence between the X, Y data axes and the A, B output device axes. It does not affect the image in computer to computer data exchange. It only has an effect how the image is positioned on an output device.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_draw_units","title":"get_draw_units","text":"<pre><code>get_draw_units() -&gt; Unit\n</code></pre> <p>Get the draw units.</p> <p>This method returns the draw units used for the Gerber file.</p> <p>Returns:</p> Type Description <code>Unit</code> <p>The draw units.</p> <p>Raises:</p> Type Description <code>UnitNotSet2Error</code> <p>If the draw units are not set.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_draw_units(self) -&gt; Unit:\n    \"\"\"Get the draw units.\n\n    This method returns the draw units used for the Gerber file.\n\n    Returns\n    -------\n    Unit\n        The draw units.\n\n    Raises\n    ------\n    UnitNotSet2Error\n        If the draw units are not set.\n\n    \"\"\"\n    if self.draw_units is None:\n        raise UnitNotSet2Error\n    return self.draw_units\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_draw_units","title":"set_draw_units","text":"<pre><code>set_draw_units(draw_units: Unit) -&gt; Self\n</code></pre> <p>Set the draw units for the state.</p> <p>This method updates the draw units of the state and returns a new instance of the state with the updated draw units.</p> <p>Parameters:</p> Name Type Description Default <code>draw_units</code> <code>Unit</code> <p>The draw units to be set.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of the state with the updated draw units.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_draw_units(self, draw_units: Unit) -&gt; Self:\n    \"\"\"Set the draw units for the state.\n\n    This method updates the draw units of the state and returns a new instance of\n    the state with the updated draw units.\n\n    Parameters\n    ----------\n    draw_units : Unit\n        The draw units to be set.\n\n    Returns\n    -------\n    Self\n        A new instance of the state with the updated draw units.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"draw_units\": draw_units,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_coordinate_parser","title":"get_coordinate_parser","text":"<pre><code>get_coordinate_parser() -&gt; CoordinateParser\n</code></pre> <p>Get coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_coordinate_parser(self) -&gt; CoordinateParser:\n    \"\"\"Get coordinate_parser property value.\"\"\"\n    if self.coordinate_parser is None:\n        raise CoordinateFormatNotSet2Error\n    return self.coordinate_parser\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_coordinate_parser","title":"set_coordinate_parser","text":"<pre><code>set_coordinate_parser(\n    coordinate_parser: CoordinateParser,\n) -&gt; Self\n</code></pre> <p>Set the coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; Self:\n    \"\"\"Set the coordinate_parser property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"coordinate_parser\": coordinate_parser,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_is_output_image_negation_required","title":"get_is_output_image_negation_required","text":"<pre><code>get_is_output_image_negation_required() -&gt; bool\n</code></pre> <p>Get is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_output_image_negation_required(self) -&gt; bool:\n    \"\"\"Get is_output_image_negation_required property value.\"\"\"\n    return self.is_output_image_negation_required\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_is_output_image_negation_required","title":"set_is_output_image_negation_required","text":"<pre><code>set_is_output_image_negation_required(value: bool) -&gt; Self\n</code></pre> <p>Set the is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_output_image_negation_required(\n    self,\n    value: bool,  # noqa: FBT001\n) -&gt; Self:\n    \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"is_output_image_negation_required\": value,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_image_name","title":"get_image_name","text":"<pre><code>get_image_name() -&gt; Optional[str]\n</code></pre> <p>Get image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_image_name(self) -&gt; Optional[str]:\n    \"\"\"Get image_name property value.\"\"\"\n    return self.image_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_image_name","title":"set_image_name","text":"<pre><code>set_image_name(image_name: Optional[str]) -&gt; Self\n</code></pre> <p>Set the image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_image_name(self, image_name: Optional[str]) -&gt; Self:\n    \"\"\"Set the image_name property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"image_name\": image_name,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_file_name","title":"get_file_name","text":"<pre><code>get_file_name() -&gt; Optional[str]\n</code></pre> <p>Get file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_file_name(self) -&gt; Optional[str]:\n    \"\"\"Get file_name property value.\"\"\"\n    return self.file_name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_file_name","title":"set_file_name","text":"<pre><code>set_file_name(file_name: Optional[str]) -&gt; Self\n</code></pre> <p>Set the file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_file_name(self, file_name: Optional[str]) -&gt; Self:\n    \"\"\"Set the file_name property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"file_name\": file_name,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.get_axis_correspondence","title":"get_axis_correspondence","text":"<pre><code>get_axis_correspondence() -&gt; AxisCorrespondence\n</code></pre> <p>Get token axis correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n    \"\"\"Get token axis correspondence property value.\"\"\"\n    return self.axis_correspondence\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2Constants.set_axis_correspondence","title":"set_axis_correspondence","text":"<pre><code>set_axis_correspondence(\n    axis_correspondence: AxisCorrespondence,\n) -&gt; Self\n</code></pre> <p>Set token axis correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; Self:\n    \"\"\"Set token axis correspondence property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"axis_correspondence\": axis_correspondence,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform","title":"ApertureTransform","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Proxy for accessing Parser2State from the moment of creation of command.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class ApertureTransform(FrozenGeneralModel):\n    \"\"\"Proxy for accessing Parser2State from the moment of creation of command.\"\"\"\n\n    polarity: Polarity = Field(default=Polarity.Dark)\n    \"\"\"The polarity object transformation parameter. (Spec reference: 4.9.2)\"\"\"\n\n    mirroring: Mirroring = Field(default=Mirroring.NoMirroring)\n    \"\"\"The mirror object transformation parameter. (Spec reference: 4.9.3)\"\"\"\n\n    rotation: Decimal = Field(default=Decimal(\"0.0\"))\n    \"\"\"The rotation object transformation parameter. (Spec reference: 4.9.4)\"\"\"\n\n    scaling: Decimal = Field(default=Decimal(\"1.0\"))\n    \"\"\"The scale object transformation parameter. (Spec reference: 4.9.5)\"\"\"\n\n    def get_polarity(self) -&gt; Polarity:\n        \"\"\"Get polarity property value.\"\"\"\n        return self.polarity\n\n    def set_polarity(self, polarity: Polarity) -&gt; Self:\n        \"\"\"Set the polarity property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"polarity\": polarity,\n            },\n        )\n\n    def get_mirroring(self) -&gt; Mirroring:\n        \"\"\"Get mirroring property value.\"\"\"\n        return self.mirroring\n\n    def set_mirroring(self, mirroring: Mirroring) -&gt; Self:\n        \"\"\"Set the mirroring property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"mirroring\": mirroring,\n            },\n        )\n\n    def get_rotation(self) -&gt; Decimal:\n        \"\"\"Get rotation property value.\"\"\"\n        return self.rotation\n\n    def set_rotation(self, rotation: Decimal) -&gt; Self:\n        \"\"\"Set the rotation property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"rotation\": rotation,\n            },\n        )\n\n    def get_scaling(self) -&gt; Decimal:\n        \"\"\"Get scaling property value.\"\"\"\n        return self.scaling\n\n    def set_scaling(self, scaling: Decimal) -&gt; Self:\n        \"\"\"Set the scaling property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"scaling\": scaling,\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of object scaled by factor.\"\"\"\n        return self.model_copy(\n            update={\n                \"scaling\": self.scaling * scale,\n            },\n        )\n\n    def get_transform_key(self) -&gt; str:\n        \"\"\"Get key describing rotation and scaling.\"\"\"\n        return (\n            f\"*%{self.get_rotation():.3f}*%{self.get_scaling():.3f}\"\n            f\"*%{self.get_mirroring()}\"\n        )\n\n    def has_mirroring_enabled(self) -&gt; bool:\n        \"\"\"Check if there is any mirroring set.\"\"\"\n        return self.get_mirroring() is not Mirroring.NoMirroring\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: Polarity = Field(default=Dark)\n</code></pre> <p>The polarity object transformation parameter. (Spec reference: 4.9.2)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.mirroring","title":"mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mirroring: Mirroring = Field(default=NoMirroring)\n</code></pre> <p>The mirror object transformation parameter. (Spec reference: 4.9.3)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Decimal = Field(default=Decimal('0.0'))\n</code></pre> <p>The rotation object transformation parameter. (Spec reference: 4.9.4)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.scaling","title":"scaling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scaling: Decimal = Field(default=Decimal('1.0'))\n</code></pre> <p>The scale object transformation parameter. (Spec reference: 4.9.5)</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_polarity","title":"get_polarity","text":"<pre><code>get_polarity() -&gt; Polarity\n</code></pre> <p>Get polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_polarity(self) -&gt; Polarity:\n    \"\"\"Get polarity property value.\"\"\"\n    return self.polarity\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.set_polarity","title":"set_polarity","text":"<pre><code>set_polarity(polarity: Polarity) -&gt; Self\n</code></pre> <p>Set the polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_polarity(self, polarity: Polarity) -&gt; Self:\n    \"\"\"Set the polarity property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"polarity\": polarity,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_mirroring","title":"get_mirroring","text":"<pre><code>get_mirroring() -&gt; Mirroring\n</code></pre> <p>Get mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_mirroring(self) -&gt; Mirroring:\n    \"\"\"Get mirroring property value.\"\"\"\n    return self.mirroring\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.set_mirroring","title":"set_mirroring","text":"<pre><code>set_mirroring(mirroring: Mirroring) -&gt; Self\n</code></pre> <p>Set the mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_mirroring(self, mirroring: Mirroring) -&gt; Self:\n    \"\"\"Set the mirroring property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"mirroring\": mirroring,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_rotation","title":"get_rotation","text":"<pre><code>get_rotation() -&gt; Decimal\n</code></pre> <p>Get rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_rotation(self) -&gt; Decimal:\n    \"\"\"Get rotation property value.\"\"\"\n    return self.rotation\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.set_rotation","title":"set_rotation","text":"<pre><code>set_rotation(rotation: Decimal) -&gt; Self\n</code></pre> <p>Set the rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_rotation(self, rotation: Decimal) -&gt; Self:\n    \"\"\"Set the rotation property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"rotation\": rotation,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_scaling","title":"get_scaling","text":"<pre><code>get_scaling() -&gt; Decimal\n</code></pre> <p>Get scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_scaling(self) -&gt; Decimal:\n    \"\"\"Get scaling property value.\"\"\"\n    return self.scaling\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.set_scaling","title":"set_scaling","text":"<pre><code>set_scaling(scaling: Decimal) -&gt; Self\n</code></pre> <p>Set the scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_scaling(self, scaling: Decimal) -&gt; Self:\n    \"\"\"Set the scaling property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"scaling\": scaling,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of object scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of object scaled by factor.\"\"\"\n    return self.model_copy(\n        update={\n            \"scaling\": self.scaling * scale,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.get_transform_key","title":"get_transform_key","text":"<pre><code>get_transform_key() -&gt; str\n</code></pre> <p>Get key describing rotation and scaling.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_transform_key(self) -&gt; str:\n    \"\"\"Get key describing rotation and scaling.\"\"\"\n    return (\n        f\"*%{self.get_rotation():.3f}*%{self.get_scaling():.3f}\"\n        f\"*%{self.get_mirroring()}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.ApertureTransform.has_mirroring_enabled","title":"has_mirroring_enabled","text":"<pre><code>has_mirroring_enabled() -&gt; bool\n</code></pre> <p>Check if there is any mirroring set.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def has_mirroring_enabled(self) -&gt; bool:\n    \"\"\"Check if there is any mirroring set.\"\"\"\n    return self.get_mirroring() is not Mirroring.NoMirroring\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2MacroIndex","title":"State2MacroIndex","text":"<p>             Bases: <code>ImmutableMapping[str, ApertureMacro2]</code></p> <p>Index of all macros defined in Gerber AST until currently parsed token.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class State2MacroIndex(ImmutableMapping[str, ApertureMacro2]):\n    \"\"\"Index of all macros defined in Gerber AST until currently parsed token.\"\"\"\n\n    def set_macro(self, __id: str, __macro: ApertureMacro2) -&gt; Self:\n        \"\"\"Add new macro to macros index.\"\"\"\n        # TODO(argmaster): Add warning handling.  # noqa: TD003\n        return self.update(__id, __macro)\n\n    def get_macro(self, __id: str) -&gt; ApertureMacro2:\n        \"\"\"Get existing macro from index. When macro is missing KeyError is\n        raised.\n        \"\"\"\n        return self.mapping[__id]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2MacroIndex.set_macro","title":"set_macro","text":"<pre><code>set_macro(__id: str, __macro: ApertureMacro2) -&gt; Self\n</code></pre> <p>Add new macro to macros index.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_macro(self, __id: str, __macro: ApertureMacro2) -&gt; Self:\n    \"\"\"Add new macro to macros index.\"\"\"\n    # TODO(argmaster): Add warning handling.  # noqa: TD003\n    return self.update(__id, __macro)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2MacroIndex.get_macro","title":"get_macro","text":"<pre><code>get_macro(__id: str) -&gt; ApertureMacro2\n</code></pre> <p>Get existing macro from index. When macro is missing KeyError is raised.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_macro(self, __id: str) -&gt; ApertureMacro2:\n    \"\"\"Get existing macro from index. When macro is missing KeyError is\n    raised.\n    \"\"\"\n    return self.mapping[__id]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags","title":"State2DrawFlags","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Collection of drawing flags of Gerber AST parser, version 2.</p> <p>This class represents the drawing flags used in the Gerber AST parser. It contains properties to control various drawing modes and settings.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class State2DrawFlags(FrozenGeneralModel):\n    \"\"\"Collection of drawing flags of Gerber AST parser, version 2.\n\n    This class represents the drawing flags used in the Gerber AST parser.\n    It contains properties to control various drawing modes and settings.\n    \"\"\"\n\n    draw_mode: DrawMode = DrawMode.Linear\n    \"\"\"The current draw mode (linear, clockwise circular, or counterclockwise circular).\n    \"\"\"\n    is_region: bool = False\n    \"\"\"Indicates whether the current statement is a region statement.\"\"\"\n    is_aperture_block: bool = False\n    \"\"\"Indicates whether the current statement is an aperture block statement.\"\"\"\n    aperture_block_id: Optional[ApertureID] = Field(default=None)\n    \"\"\"The ID of the current aperture block, if any.\"\"\"\n    is_multi_quadrant: bool = False\n    \"\"\"Indicates whether the multi-quadrant mode is enabled.\"\"\"\n\n    def get_draw_mode(self) -&gt; DrawMode:\n        \"\"\"Get the current draw mode.\n\n        Returns\n        -------\n            DrawMode: The current draw mode.\n\n        \"\"\"\n        return self.draw_mode\n\n    def set_draw_mode(self, draw_mode: DrawMode) -&gt; State2DrawFlags:\n        \"\"\"Set the draw mode.\n\n        Args:\n        ----\n            draw_mode (DrawMode): The new draw mode.\n\n        Returns:\n        -------\n            State2DrawFlags: A new instance of State2DrawFlags with the updated draw\n            mode.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"draw_mode\": draw_mode,\n            },\n        )\n\n    def get_is_region(self) -&gt; bool:\n        \"\"\"Check if the current statement is a region statement.\n\n        Returns\n        -------\n            bool: True if the current statement is a region statement, False otherwise.\n\n        \"\"\"\n        return self.is_region\n\n    def set_is_region(self, val: bool) -&gt; State2DrawFlags:  # noqa: FBT001\n        \"\"\"Set the flag indicating whether the current statement is a region statement.\n\n        Args:\n        ----\n            val (bool): True if the current statement is a region statement, False\n            otherwise.\n\n        Returns:\n        -------\n            State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"is_region\": val,\n            },\n        )\n\n    def get_is_aperture_block(self) -&gt; bool:\n        \"\"\"Check if the current statement is an aperture block statement.\n\n        Returns\n        -------\n            bool: True if the current statement is an aperture block statement, False\n            otherwise.\n\n        \"\"\"\n        return self.is_aperture_block\n\n    def set_is_aperture_block(self, val: bool) -&gt; State2DrawFlags:  # noqa: FBT001\n        \"\"\"Set the flag indicating whether the current statement is an aperture block\n        statement.\n\n        Args:\n        ----\n            val (bool): True if the current statement is an aperture block statement,\n            False otherwise.\n\n        Returns:\n        -------\n            State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"is_aperture_block\": val,\n            },\n        )\n\n    def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n        \"\"\"Get the ID of the current aperture block.\n\n        This method returns the ID of the current aperture block.\n\n        Returns\n        -------\n        Optional[ApertureID]\n            The ID of the current aperture block, or None if no aperture block is set.\n\n        \"\"\"\n        return self.aperture_block_id\n\n    def set_aperture_block_id(\n        self,\n        aperture_block_id: Optional[ApertureID],\n    ) -&gt; State2DrawFlags:\n        \"\"\"Set the ID of the current aperture block.\n\n        This method sets the ID of the current aperture block.\n\n        Parameters\n        ----------\n        aperture_block_id : Optional[ApertureID]\n            The ID of the current aperture block.\n\n        Returns\n        -------\n        State2DrawFlags\n            A new instance of the State2DrawFlags with the updated flag.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"aperture_block_id\": aperture_block_id,\n            },\n        )\n\n    def get_is_multi_quadrant(self) -&gt; bool:\n        \"\"\"Check if the multi-quadrant mode is enabled.\n\n        Returns\n        -------\n            bool: True if the multi-quadrant mode is enabled, False otherwise.\n\n        \"\"\"\n        return self.is_multi_quadrant\n\n    def set_is_multi_quadrant(self, val: bool) -&gt; Self:  # noqa: FBT001\n        \"\"\"Set the flag indicating whether the multi-quadrant mode is enabled.\n\n        Args:\n        ----\n            val (bool): True to enable the multi-quadrant mode, False to disable it.\n\n        Returns:\n        -------\n            State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"is_multi_quadrant\": val,\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.draw_mode","title":"draw_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>draw_mode: DrawMode = Linear\n</code></pre> <p>The current draw mode (linear, clockwise circular, or counterclockwise circular).</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.is_region","title":"is_region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_region: bool = False\n</code></pre> <p>Indicates whether the current statement is a region statement.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.is_aperture_block","title":"is_aperture_block  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_aperture_block: bool = False\n</code></pre> <p>Indicates whether the current statement is an aperture block statement.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.aperture_block_id","title":"aperture_block_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aperture_block_id: Optional[ApertureID] = Field(\n    default=None\n)\n</code></pre> <p>The ID of the current aperture block, if any.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.is_multi_quadrant","title":"is_multi_quadrant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_multi_quadrant: bool = False\n</code></pre> <p>Indicates whether the multi-quadrant mode is enabled.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.get_draw_mode","title":"get_draw_mode","text":"<pre><code>get_draw_mode() -&gt; DrawMode\n</code></pre> <p>Get the current draw mode.</p> <p>Returns:</p> Type Description <code>    DrawMode: The current draw mode.</code> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_draw_mode(self) -&gt; DrawMode:\n    \"\"\"Get the current draw mode.\n\n    Returns\n    -------\n        DrawMode: The current draw mode.\n\n    \"\"\"\n    return self.draw_mode\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.set_draw_mode","title":"set_draw_mode","text":"<pre><code>set_draw_mode(draw_mode: DrawMode) -&gt; State2DrawFlags\n</code></pre> <p>Set the draw mode.</p> Args: <pre><code>draw_mode (DrawMode): The new draw mode.\n</code></pre> Returns: <pre><code>State2DrawFlags: A new instance of State2DrawFlags with the updated draw\nmode.\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_draw_mode(self, draw_mode: DrawMode) -&gt; State2DrawFlags:\n    \"\"\"Set the draw mode.\n\n    Args:\n    ----\n        draw_mode (DrawMode): The new draw mode.\n\n    Returns:\n    -------\n        State2DrawFlags: A new instance of State2DrawFlags with the updated draw\n        mode.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"draw_mode\": draw_mode,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.get_is_region","title":"get_is_region","text":"<pre><code>get_is_region() -&gt; bool\n</code></pre> <p>Check if the current statement is a region statement.</p> <p>Returns:</p> Type Description <code>    bool: True if the current statement is a region statement, False otherwise.</code> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_region(self) -&gt; bool:\n    \"\"\"Check if the current statement is a region statement.\n\n    Returns\n    -------\n        bool: True if the current statement is a region statement, False otherwise.\n\n    \"\"\"\n    return self.is_region\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.set_is_region","title":"set_is_region","text":"<pre><code>set_is_region(val: bool) -&gt; State2DrawFlags\n</code></pre> <p>Set the flag indicating whether the current statement is a region statement.</p> Args: <pre><code>val (bool): True if the current statement is a region statement, False\notherwise.\n</code></pre> Returns: <pre><code>State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_region(self, val: bool) -&gt; State2DrawFlags:  # noqa: FBT001\n    \"\"\"Set the flag indicating whether the current statement is a region statement.\n\n    Args:\n    ----\n        val (bool): True if the current statement is a region statement, False\n        otherwise.\n\n    Returns:\n    -------\n        State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"is_region\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.get_is_aperture_block","title":"get_is_aperture_block","text":"<pre><code>get_is_aperture_block() -&gt; bool\n</code></pre> <p>Check if the current statement is an aperture block statement.</p> <p>Returns:</p> Type Description <code>    bool: True if the current statement is an aperture block statement, False</code> <p>otherwise.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_aperture_block(self) -&gt; bool:\n    \"\"\"Check if the current statement is an aperture block statement.\n\n    Returns\n    -------\n        bool: True if the current statement is an aperture block statement, False\n        otherwise.\n\n    \"\"\"\n    return self.is_aperture_block\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.set_is_aperture_block","title":"set_is_aperture_block","text":"<pre><code>set_is_aperture_block(val: bool) -&gt; State2DrawFlags\n</code></pre> <p>Set the flag indicating whether the current statement is an aperture block statement.</p> Args: <pre><code>val (bool): True if the current statement is an aperture block statement,\nFalse otherwise.\n</code></pre> Returns: <pre><code>State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_aperture_block(self, val: bool) -&gt; State2DrawFlags:  # noqa: FBT001\n    \"\"\"Set the flag indicating whether the current statement is an aperture block\n    statement.\n\n    Args:\n    ----\n        val (bool): True if the current statement is an aperture block statement,\n        False otherwise.\n\n    Returns:\n    -------\n        State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"is_aperture_block\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.get_aperture_block_id","title":"get_aperture_block_id","text":"<pre><code>get_aperture_block_id() -&gt; Optional[ApertureID]\n</code></pre> <p>Get the ID of the current aperture block.</p> <p>This method returns the ID of the current aperture block.</p> <p>Returns:</p> Type Description <code>Optional[ApertureID]</code> <p>The ID of the current aperture block, or None if no aperture block is set.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n    \"\"\"Get the ID of the current aperture block.\n\n    This method returns the ID of the current aperture block.\n\n    Returns\n    -------\n    Optional[ApertureID]\n        The ID of the current aperture block, or None if no aperture block is set.\n\n    \"\"\"\n    return self.aperture_block_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.set_aperture_block_id","title":"set_aperture_block_id","text":"<pre><code>set_aperture_block_id(\n    aperture_block_id: Optional[ApertureID],\n) -&gt; State2DrawFlags\n</code></pre> <p>Set the ID of the current aperture block.</p> <p>This method sets the ID of the current aperture block.</p> <p>Parameters:</p> Name Type Description Default <code>aperture_block_id</code> <code>Optional[ApertureID]</code> <p>The ID of the current aperture block.</p> required <p>Returns:</p> Type Description <code>State2DrawFlags</code> <p>A new instance of the State2DrawFlags with the updated flag.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_aperture_block_id(\n    self,\n    aperture_block_id: Optional[ApertureID],\n) -&gt; State2DrawFlags:\n    \"\"\"Set the ID of the current aperture block.\n\n    This method sets the ID of the current aperture block.\n\n    Parameters\n    ----------\n    aperture_block_id : Optional[ApertureID]\n        The ID of the current aperture block.\n\n    Returns\n    -------\n    State2DrawFlags\n        A new instance of the State2DrawFlags with the updated flag.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"aperture_block_id\": aperture_block_id,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.get_is_multi_quadrant","title":"get_is_multi_quadrant","text":"<pre><code>get_is_multi_quadrant() -&gt; bool\n</code></pre> <p>Check if the multi-quadrant mode is enabled.</p> <p>Returns:</p> Type Description <code>    bool: True if the multi-quadrant mode is enabled, False otherwise.</code> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_multi_quadrant(self) -&gt; bool:\n    \"\"\"Check if the multi-quadrant mode is enabled.\n\n    Returns\n    -------\n        bool: True if the multi-quadrant mode is enabled, False otherwise.\n\n    \"\"\"\n    return self.is_multi_quadrant\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2DrawFlags.set_is_multi_quadrant","title":"set_is_multi_quadrant","text":"<pre><code>set_is_multi_quadrant(val: bool) -&gt; Self\n</code></pre> <p>Set the flag indicating whether the multi-quadrant mode is enabled.</p> Args: <pre><code>val (bool): True to enable the multi-quadrant mode, False to disable it.\n</code></pre> Returns: <pre><code>State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_multi_quadrant(self, val: bool) -&gt; Self:  # noqa: FBT001\n    \"\"\"Set the flag indicating whether the multi-quadrant mode is enabled.\n\n    Args:\n    ----\n        val (bool): True to enable the multi-quadrant mode, False to disable it.\n\n    Returns:\n    -------\n        State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"is_multi_quadrant\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2","title":"StepAndRepeatState2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Step and Repeat state maintainer.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class StepAndRepeatState2(FrozenGeneralModel):\n    \"\"\"Step and Repeat state maintainer.\"\"\"\n\n    is_step_and_repeat: bool = False\n    \"\"\"Indicates whether the current statement is a step and repeat statement.\"\"\"\n\n    x_repeat: int = 0\n    \"\"\"Number of repeats in the X direction.\"\"\"\n\n    y_repeat: int = 0\n    \"\"\"Number of repeats in the Y direction.\"\"\"\n\n    x_step: Offset = Offset.NULL\n    \"\"\"Step repeat distance in X direction.\"\"\"\n\n    y_step: Offset = Offset.NULL\n    \"\"\"Step repeat distance in Y direction.\"\"\"\n\n    def get_is_step_and_repeat(self) -&gt; bool:\n        \"\"\"Check if the current statement is a step and repeat statement.\n\n        Returns\n        -------\n            bool: True if the current statement is a step and repeat statement, False\n            otherwise.\n\n        \"\"\"\n        return self.is_step_and_repeat\n\n    def set_is_step_and_repeat(self, val: bool) -&gt; StepAndRepeatState2:  # noqa: FBT001\n        \"\"\"Set the flag indicating whether the current statement is a step and repeat\n        statement.\n\n        Args:\n        ----\n            val (bool): True if the current statement is a step and repeat statement,\n            False otherwise.\n\n        Returns:\n        -------\n            State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n        \"\"\"\n        return self.model_copy(\n            update={\n                \"is_step_and_repeat\": val,\n            },\n        )\n\n    def get_x_repeat(self) -&gt; int:\n        \"\"\"Get x_repeat property value.\"\"\"\n        return self.x_repeat\n\n    def set_x_repeat(self, val: int) -&gt; StepAndRepeatState2:\n        \"\"\"Set the x_repeat property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"x_repeat\": val,\n            },\n        )\n\n    def get_y_repeat(self) -&gt; int:\n        \"\"\"Get y_repeat property value.\"\"\"\n        return self.y_repeat\n\n    def set_y_repeat(self, val: int) -&gt; StepAndRepeatState2:\n        \"\"\"Set the y_repeat property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"y_repeat\": val,\n            },\n        )\n\n    def get_x_step(self) -&gt; Offset:\n        \"\"\"Get x_step property value.\"\"\"\n        return self.x_step\n\n    def set_x_step(self, val: Offset) -&gt; StepAndRepeatState2:\n        \"\"\"Set the x_step property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"x_step\": val,\n            },\n        )\n\n    def get_y_step(self) -&gt; Offset:\n        \"\"\"Get y_step property value.\"\"\"\n        return self.y_step\n\n    def set_y_step(self, val: Offset) -&gt; Self:\n        \"\"\"Set the y_step property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"y_step\": val,\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.is_step_and_repeat","title":"is_step_and_repeat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_step_and_repeat: bool = False\n</code></pre> <p>Indicates whether the current statement is a step and repeat statement.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.x_repeat","title":"x_repeat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x_repeat: int = 0\n</code></pre> <p>Number of repeats in the X direction.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.y_repeat","title":"y_repeat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y_repeat: int = 0\n</code></pre> <p>Number of repeats in the Y direction.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.x_step","title":"x_step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x_step: Offset = NULL\n</code></pre> <p>Step repeat distance in X direction.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.y_step","title":"y_step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y_step: Offset = NULL\n</code></pre> <p>Step repeat distance in Y direction.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.get_is_step_and_repeat","title":"get_is_step_and_repeat","text":"<pre><code>get_is_step_and_repeat() -&gt; bool\n</code></pre> <p>Check if the current statement is a step and repeat statement.</p> <p>Returns:</p> Type Description <code>    bool: True if the current statement is a step and repeat statement, False</code> <p>otherwise.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_step_and_repeat(self) -&gt; bool:\n    \"\"\"Check if the current statement is a step and repeat statement.\n\n    Returns\n    -------\n        bool: True if the current statement is a step and repeat statement, False\n        otherwise.\n\n    \"\"\"\n    return self.is_step_and_repeat\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.set_is_step_and_repeat","title":"set_is_step_and_repeat","text":"<pre><code>set_is_step_and_repeat(val: bool) -&gt; StepAndRepeatState2\n</code></pre> <p>Set the flag indicating whether the current statement is a step and repeat statement.</p> Args: <pre><code>val (bool): True if the current statement is a step and repeat statement,\nFalse otherwise.\n</code></pre> Returns: <pre><code>State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n</code></pre> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_step_and_repeat(self, val: bool) -&gt; StepAndRepeatState2:  # noqa: FBT001\n    \"\"\"Set the flag indicating whether the current statement is a step and repeat\n    statement.\n\n    Args:\n    ----\n        val (bool): True if the current statement is a step and repeat statement,\n        False otherwise.\n\n    Returns:\n    -------\n        State2DrawFlags: A new instance of State2DrawFlags with the updated flag.\n\n    \"\"\"\n    return self.model_copy(\n        update={\n            \"is_step_and_repeat\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.get_x_repeat","title":"get_x_repeat","text":"<pre><code>get_x_repeat() -&gt; int\n</code></pre> <p>Get x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_x_repeat(self) -&gt; int:\n    \"\"\"Get x_repeat property value.\"\"\"\n    return self.x_repeat\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.set_x_repeat","title":"set_x_repeat","text":"<pre><code>set_x_repeat(val: int) -&gt; StepAndRepeatState2\n</code></pre> <p>Set the x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_x_repeat(self, val: int) -&gt; StepAndRepeatState2:\n    \"\"\"Set the x_repeat property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"x_repeat\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.get_y_repeat","title":"get_y_repeat","text":"<pre><code>get_y_repeat() -&gt; int\n</code></pre> <p>Get y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_y_repeat(self) -&gt; int:\n    \"\"\"Get y_repeat property value.\"\"\"\n    return self.y_repeat\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.set_y_repeat","title":"set_y_repeat","text":"<pre><code>set_y_repeat(val: int) -&gt; StepAndRepeatState2\n</code></pre> <p>Set the y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_y_repeat(self, val: int) -&gt; StepAndRepeatState2:\n    \"\"\"Set the y_repeat property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"y_repeat\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.get_x_step","title":"get_x_step","text":"<pre><code>get_x_step() -&gt; Offset\n</code></pre> <p>Get x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_x_step(self) -&gt; Offset:\n    \"\"\"Get x_step property value.\"\"\"\n    return self.x_step\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.set_x_step","title":"set_x_step","text":"<pre><code>set_x_step(val: Offset) -&gt; StepAndRepeatState2\n</code></pre> <p>Set the x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_x_step(self, val: Offset) -&gt; StepAndRepeatState2:\n    \"\"\"Set the x_step property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"x_step\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.get_y_step","title":"get_y_step","text":"<pre><code>get_y_step() -&gt; Offset\n</code></pre> <p>Get y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_y_step(self) -&gt; Offset:\n    \"\"\"Get y_step property value.\"\"\"\n    return self.y_step\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.StepAndRepeatState2.set_y_step","title":"set_y_step","text":"<pre><code>set_y_step(val: Offset) -&gt; Self\n</code></pre> <p>Set the y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_y_step(self, val: Offset) -&gt; Self:\n    \"\"\"Set the y_step property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"y_step\": val,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2","title":"State2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Gerber AST parser, version 2, parsing state.</p> <p>This object is immutable and intended way to update the state is through setters which return updated copy of state.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>class State2(FrozenGeneralModel):\n    \"\"\"Gerber AST parser, version 2, parsing state.\n\n    This object is immutable and intended way to update the state is through setters\n    which return updated copy of state.\n    \"\"\"\n\n    constants: State2Constants = Field(default_factory=State2Constants)\n    \"\"\"Collection of rarely changing Gerber state constants.\"\"\"\n\n    def get_constants(self) -&gt; State2Constants:\n        \"\"\"Get constants property value.\"\"\"\n        return self.constants\n\n    def set_constants(self, constants: State2Constants) -&gt; Self:\n        \"\"\"Set the constants property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"constants\": constants,\n            },\n        )\n\n    def get_draw_units(self) -&gt; Unit:\n        \"\"\"Get draw_units property value.\"\"\"\n        return self.get_constants().get_draw_units()\n\n    def set_draw_units(self, draw_units: Unit) -&gt; Self:\n        \"\"\"Set the draw_units property value.\"\"\"\n        return self.set_constants(self.get_constants().set_draw_units(draw_units))\n\n    def get_coordinate_parser(self) -&gt; CoordinateParser:\n        \"\"\"Get coordinate_parser property value.\"\"\"\n        return self.get_constants().get_coordinate_parser()\n\n    def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; Self:\n        \"\"\"Set the coordinate_parser property value.\"\"\"\n        return self.set_constants(\n            self.get_constants().set_coordinate_parser(coordinate_parser),\n        )\n\n    aperture_transform: ApertureTransform = Field(default_factory=ApertureTransform)\n\n    def get_aperture_transform(self) -&gt; ApertureTransform:\n        \"\"\"Get aperture_transform property value.\"\"\"\n        return self.aperture_transform\n\n    def set_aperture_transform(self, aperture_transform: ApertureTransform) -&gt; Self:\n        \"\"\"Set the aperture_transform property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"aperture_transform\": aperture_transform,\n            },\n        )\n\n    def get_polarity(self) -&gt; Polarity:\n        \"\"\"Get polarity property value.\"\"\"\n        return self.get_aperture_transform().get_polarity()\n\n    def set_polarity(self, polarity: Polarity) -&gt; Self:\n        \"\"\"Set the polarity property value.\"\"\"\n        return self.set_aperture_transform(\n            self.get_aperture_transform().set_polarity(polarity),\n        )\n\n    def get_mirroring(self) -&gt; Mirroring:\n        \"\"\"Get mirroring property value.\"\"\"\n        return self.get_aperture_transform().get_mirroring()\n\n    def set_mirroring(self, mirroring: Mirroring) -&gt; Self:\n        \"\"\"Set the mirroring property value.\"\"\"\n        return self.set_aperture_transform(\n            self.get_aperture_transform().set_mirroring(mirroring),\n        )\n\n    def get_rotation(self) -&gt; Decimal:\n        \"\"\"Get rotation property value.\"\"\"\n        return self.get_aperture_transform().get_rotation()\n\n    def set_rotation(self, rotation: Decimal) -&gt; Self:\n        \"\"\"Set the rotation property value.\"\"\"\n        return self.set_aperture_transform(\n            self.get_aperture_transform().set_rotation(rotation),\n        )\n\n    def get_scaling(self) -&gt; Decimal:\n        \"\"\"Get scaling property value.\"\"\"\n        return self.get_aperture_transform().get_scaling()\n\n    def set_scaling(self, scaling: Decimal) -&gt; Self:\n        \"\"\"Set the scaling property value.\"\"\"\n        return self.set_aperture_transform(\n            self.get_aperture_transform().set_scaling(scaling),\n        )\n\n    def get_is_output_image_negation_required(self) -&gt; bool:\n        \"\"\"Get is_output_image_negation_required property value.\"\"\"\n        return self.get_constants().get_is_output_image_negation_required()\n\n    def set_is_output_image_negation_required(\n        self,\n        value: bool,  # noqa: FBT001\n    ) -&gt; Self:\n        \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n        return self.set_constants(\n            self.get_constants().set_is_output_image_negation_required(value),\n        )\n\n    def get_image_name(self) -&gt; Optional[str]:\n        \"\"\"Get image_name property value.\"\"\"\n        return self.get_constants().get_image_name()\n\n    def set_image_name(self, image_name: Optional[str]) -&gt; Self:\n        \"\"\"Set the image_name property value.\"\"\"\n        return self.set_constants(self.get_constants().set_image_name(image_name))\n\n    def get_file_name(self) -&gt; Optional[str]:\n        \"\"\"Get file_name property value.\"\"\"\n        return self.get_constants().get_file_name()\n\n    def set_file_name(self, file_name: Optional[str]) -&gt; Self:\n        \"\"\"Set the file_name property value.\"\"\"\n        return self.set_constants(self.get_constants().set_file_name(file_name))\n\n    def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n        \"\"\"Get token axis correspondence property value.\"\"\"\n        return self.get_constants().get_axis_correspondence()\n\n    def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; Self:\n        \"\"\"Set token axis correspondence property value.\"\"\"\n        return self.set_constants(\n            self.get_constants().set_axis_correspondence(axis_correspondence),\n        )\n\n    flags: State2DrawFlags = Field(default_factory=State2DrawFlags)\n    \"\"\"Collection of more often changing Gerber state flags.\"\"\"\n\n    def get_flags(self) -&gt; State2DrawFlags:\n        \"\"\"Get flags property value.\"\"\"\n        return self.flags\n\n    def set_flags(self, flags: State2DrawFlags) -&gt; Self:\n        \"\"\"Set the flags property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"flags\": flags,\n            },\n        )\n\n    def get_draw_mode(self) -&gt; DrawMode:\n        \"\"\"Get draw_mode property value.\"\"\"\n        return self.get_flags().get_draw_mode()\n\n    def set_draw_mode(self, draw_mode: DrawMode) -&gt; Self:\n        \"\"\"Set the draw_mode property value.\"\"\"\n        return self.set_flags(self.get_flags().set_draw_mode(draw_mode))\n\n    def get_is_region(self) -&gt; bool:\n        \"\"\"Get is_region property value.\"\"\"\n        return self.get_flags().get_is_region()\n\n    def set_is_region(self, is_region: bool) -&gt; Self:  # noqa: FBT001\n        \"\"\"Set the is_region property value.\"\"\"\n        return self.set_flags(self.get_flags().set_is_region(is_region))\n\n    def get_is_aperture_block(self) -&gt; bool:\n        \"\"\"Get is_aperture_block property value.\"\"\"\n        return self.get_flags().get_is_aperture_block()\n\n    def set_is_aperture_block(self, is_aperture_block: bool) -&gt; Self:  # noqa: FBT001\n        \"\"\"Set the is_aperture_block property value.\"\"\"\n        return self.set_flags(\n            self.get_flags().set_is_aperture_block(is_aperture_block),\n        )\n\n    def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n        \"\"\"Get aperture_block_id property value.\"\"\"\n        return self.get_flags().get_aperture_block_id()\n\n    def set_aperture_block_id(self, aperture_block_id: Optional[ApertureID]) -&gt; Self:\n        \"\"\"Set the aperture_block_id property value.\"\"\"\n        return self.set_flags(\n            self.get_flags().set_aperture_block_id(aperture_block_id),\n        )\n\n    def get_is_multi_quadrant(self) -&gt; bool:\n        \"\"\"Get is_aperture_block property value.\"\"\"\n        return self.get_flags().get_is_multi_quadrant()\n\n    def set_is_multi_quadrant(self, is_multi_quadrant: bool) -&gt; Self:  # noqa: FBT001\n        \"\"\"Set the is_aperture_block property value.\"\"\"\n        return self.set_flags(\n            self.get_flags().set_is_multi_quadrant(is_multi_quadrant),\n        )\n\n    step_repeat: StepAndRepeatState2 = Field(default_factory=StepAndRepeatState2)\n\n    def get_step_and_repeat(self) -&gt; StepAndRepeatState2:\n        \"\"\"Get step_repeat property value.\"\"\"\n        return self.step_repeat\n\n    def set_step_and_repeat(self, step_and_repeat: StepAndRepeatState2) -&gt; Self:\n        \"\"\"Set step_repeat property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"step_repeat\": step_and_repeat,\n            },\n        )\n\n    def get_is_step_and_repeat(self) -&gt; bool:\n        \"\"\"Get is_step_and_repeat property value.\"\"\"\n        return self.get_step_and_repeat().get_is_step_and_repeat()\n\n    def set_is_step_and_repeat(self, is_step_and_repeat: bool) -&gt; Self:  # noqa: FBT001\n        \"\"\"Set the is_step_and_repeat property value.\"\"\"\n        return self.set_step_and_repeat(\n            self.get_step_and_repeat().set_is_step_and_repeat(is_step_and_repeat),\n        )\n\n    def get_x_repeat(self) -&gt; int:\n        \"\"\"Get x_repeat property value.\"\"\"\n        return self.get_step_and_repeat().get_x_repeat()\n\n    def set_x_repeat(self, value: int) -&gt; Self:\n        \"\"\"Set the x_repeat property value.\"\"\"\n        return self.set_step_and_repeat(\n            self.get_step_and_repeat().set_x_repeat(value),\n        )\n\n    def get_y_repeat(self) -&gt; int:\n        \"\"\"Get y_repeat property value.\"\"\"\n        return self.get_step_and_repeat().get_y_repeat()\n\n    def set_y_repeat(self, value: int) -&gt; Self:\n        \"\"\"Set the y_repeat property value.\"\"\"\n        return self.set_step_and_repeat(\n            self.get_step_and_repeat().set_y_repeat(value),\n        )\n\n    def get_x_step(self) -&gt; Offset:\n        \"\"\"Get x_step property value.\"\"\"\n        return self.get_step_and_repeat().get_x_step()\n\n    def set_x_step(self, value: Offset) -&gt; Self:\n        \"\"\"Set the x_repeat property value.\"\"\"\n        return self.set_step_and_repeat(\n            self.get_step_and_repeat().set_x_step(value),\n        )\n\n    def get_y_step(self) -&gt; Offset:\n        \"\"\"Get y_step property value.\"\"\"\n        return self.get_step_and_repeat().get_y_step()\n\n    def set_y_step(self, value: Offset) -&gt; Self:\n        \"\"\"Set the y_repeat property value.\"\"\"\n        return self.set_step_and_repeat(\n            self.get_step_and_repeat().set_y_step(value),\n        )\n\n    current_position: Vector2D = Vector2D(x=Offset.NULL, y=Offset.NULL)\n    \"\"\"Current position of drawing head.\"\"\"\n\n    def get_current_position(self) -&gt; Vector2D:\n        \"\"\"Get current_position property value.\"\"\"\n        return self.current_position\n\n    def set_current_position(self, current_position: Vector2D) -&gt; Self:\n        \"\"\"Set the current_position property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"current_position\": current_position,\n            },\n        )\n\n    current_aperture_id: Optional[ApertureID] = None\n    \"\"\"Reference to currently selected aperture.\"\"\"\n\n    def get_current_aperture_id(self) -&gt; Optional[ApertureID]:\n        \"\"\"Get current_aperture property value.\"\"\"\n        return self.current_aperture_id\n\n    def set_current_aperture_id(self, current_aperture: Optional[ApertureID]) -&gt; Self:\n        \"\"\"Set the current_aperture property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"current_aperture_id\": current_aperture,\n            },\n        )\n\n    macros: State2MacroIndex = Field(default_factory=State2MacroIndex)\n    \"\"\"Collection of all macros defined until given point in code.\"\"\"\n\n    def get_macro(self, __key: str) -&gt; ApertureMacro2:\n        \"\"\"Get macros property value.\"\"\"\n        return self.macros.get_macro(__key)\n\n    def set_macro(self, __key: str, __value: ApertureMacro2) -&gt; Self:\n        \"\"\"Set the macros property value.\"\"\"\n        return self.model_copy(\n            update={\n                \"macros\": self.macros.set_macro(__key, __value),\n            },\n        )\n\n    def parse_coordinate(self, coordinate: Coordinate) -&gt; Offset:\n        \"\"\"Parse a coordinate and convert it to an Offset.\n\n        This method parses a given coordinate and converts it to an Offset object.\n        It handles missing X, Y by substituting them with the current\n        position and missing I, J by substituting them with NULL offset.\n\n        Parameters\n        ----------\n        coordinate : Coordinate\n            The coordinate to be parsed.\n\n        Returns\n        -------\n        Offset\n            The parsed coordinate converted to an Offset object.\n\n        \"\"\"\n        if coordinate.coordinate_type == CoordinateType.MISSING_X:\n            return self.current_position.x\n\n        if coordinate.coordinate_type == CoordinateType.MISSING_Y:\n            return self.current_position.y\n\n        if coordinate.coordinate_type == CoordinateType.MISSING_I:\n            return Offset.NULL\n\n        if coordinate.coordinate_type == CoordinateType.MISSING_J:\n            return Offset.NULL\n\n        return Offset.new(\n            self.get_coordinate_parser().parse(coordinate),\n            unit=self.get_draw_units(),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.constants","title":"constants  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>constants: State2Constants = Field(\n    default_factory=State2Constants\n)\n</code></pre> <p>Collection of rarely changing Gerber state constants.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.flags","title":"flags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flags: State2DrawFlags = Field(\n    default_factory=State2DrawFlags\n)\n</code></pre> <p>Collection of more often changing Gerber state flags.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.current_position","title":"current_position  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_position: Vector2D = Vector2D(x=NULL, y=NULL)\n</code></pre> <p>Current position of drawing head.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.current_aperture_id","title":"current_aperture_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_aperture_id: Optional[ApertureID] = None\n</code></pre> <p>Reference to currently selected aperture.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.macros","title":"macros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macros: State2MacroIndex = Field(\n    default_factory=State2MacroIndex\n)\n</code></pre> <p>Collection of all macros defined until given point in code.</p>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_constants","title":"get_constants","text":"<pre><code>get_constants() -&gt; State2Constants\n</code></pre> <p>Get constants property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_constants(self) -&gt; State2Constants:\n    \"\"\"Get constants property value.\"\"\"\n    return self.constants\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_constants","title":"set_constants","text":"<pre><code>set_constants(constants: State2Constants) -&gt; Self\n</code></pre> <p>Set the constants property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_constants(self, constants: State2Constants) -&gt; Self:\n    \"\"\"Set the constants property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"constants\": constants,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_draw_units","title":"get_draw_units","text":"<pre><code>get_draw_units() -&gt; Unit\n</code></pre> <p>Get draw_units property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_draw_units(self) -&gt; Unit:\n    \"\"\"Get draw_units property value.\"\"\"\n    return self.get_constants().get_draw_units()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_draw_units","title":"set_draw_units","text":"<pre><code>set_draw_units(draw_units: Unit) -&gt; Self\n</code></pre> <p>Set the draw_units property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_draw_units(self, draw_units: Unit) -&gt; Self:\n    \"\"\"Set the draw_units property value.\"\"\"\n    return self.set_constants(self.get_constants().set_draw_units(draw_units))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_coordinate_parser","title":"get_coordinate_parser","text":"<pre><code>get_coordinate_parser() -&gt; CoordinateParser\n</code></pre> <p>Get coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_coordinate_parser(self) -&gt; CoordinateParser:\n    \"\"\"Get coordinate_parser property value.\"\"\"\n    return self.get_constants().get_coordinate_parser()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_coordinate_parser","title":"set_coordinate_parser","text":"<pre><code>set_coordinate_parser(\n    coordinate_parser: CoordinateParser,\n) -&gt; Self\n</code></pre> <p>Set the coordinate_parser property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_coordinate_parser(self, coordinate_parser: CoordinateParser) -&gt; Self:\n    \"\"\"Set the coordinate_parser property value.\"\"\"\n    return self.set_constants(\n        self.get_constants().set_coordinate_parser(coordinate_parser),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_aperture_transform","title":"get_aperture_transform","text":"<pre><code>get_aperture_transform() -&gt; ApertureTransform\n</code></pre> <p>Get aperture_transform property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_aperture_transform(self) -&gt; ApertureTransform:\n    \"\"\"Get aperture_transform property value.\"\"\"\n    return self.aperture_transform\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_aperture_transform","title":"set_aperture_transform","text":"<pre><code>set_aperture_transform(\n    aperture_transform: ApertureTransform,\n) -&gt; Self\n</code></pre> <p>Set the aperture_transform property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_aperture_transform(self, aperture_transform: ApertureTransform) -&gt; Self:\n    \"\"\"Set the aperture_transform property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"aperture_transform\": aperture_transform,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_polarity","title":"get_polarity","text":"<pre><code>get_polarity() -&gt; Polarity\n</code></pre> <p>Get polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_polarity(self) -&gt; Polarity:\n    \"\"\"Get polarity property value.\"\"\"\n    return self.get_aperture_transform().get_polarity()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_polarity","title":"set_polarity","text":"<pre><code>set_polarity(polarity: Polarity) -&gt; Self\n</code></pre> <p>Set the polarity property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_polarity(self, polarity: Polarity) -&gt; Self:\n    \"\"\"Set the polarity property value.\"\"\"\n    return self.set_aperture_transform(\n        self.get_aperture_transform().set_polarity(polarity),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_mirroring","title":"get_mirroring","text":"<pre><code>get_mirroring() -&gt; Mirroring\n</code></pre> <p>Get mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_mirroring(self) -&gt; Mirroring:\n    \"\"\"Get mirroring property value.\"\"\"\n    return self.get_aperture_transform().get_mirroring()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_mirroring","title":"set_mirroring","text":"<pre><code>set_mirroring(mirroring: Mirroring) -&gt; Self\n</code></pre> <p>Set the mirroring property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_mirroring(self, mirroring: Mirroring) -&gt; Self:\n    \"\"\"Set the mirroring property value.\"\"\"\n    return self.set_aperture_transform(\n        self.get_aperture_transform().set_mirroring(mirroring),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_rotation","title":"get_rotation","text":"<pre><code>get_rotation() -&gt; Decimal\n</code></pre> <p>Get rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_rotation(self) -&gt; Decimal:\n    \"\"\"Get rotation property value.\"\"\"\n    return self.get_aperture_transform().get_rotation()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_rotation","title":"set_rotation","text":"<pre><code>set_rotation(rotation: Decimal) -&gt; Self\n</code></pre> <p>Set the rotation property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_rotation(self, rotation: Decimal) -&gt; Self:\n    \"\"\"Set the rotation property value.\"\"\"\n    return self.set_aperture_transform(\n        self.get_aperture_transform().set_rotation(rotation),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_scaling","title":"get_scaling","text":"<pre><code>get_scaling() -&gt; Decimal\n</code></pre> <p>Get scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_scaling(self) -&gt; Decimal:\n    \"\"\"Get scaling property value.\"\"\"\n    return self.get_aperture_transform().get_scaling()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_scaling","title":"set_scaling","text":"<pre><code>set_scaling(scaling: Decimal) -&gt; Self\n</code></pre> <p>Set the scaling property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_scaling(self, scaling: Decimal) -&gt; Self:\n    \"\"\"Set the scaling property value.\"\"\"\n    return self.set_aperture_transform(\n        self.get_aperture_transform().set_scaling(scaling),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_is_output_image_negation_required","title":"get_is_output_image_negation_required","text":"<pre><code>get_is_output_image_negation_required() -&gt; bool\n</code></pre> <p>Get is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_output_image_negation_required(self) -&gt; bool:\n    \"\"\"Get is_output_image_negation_required property value.\"\"\"\n    return self.get_constants().get_is_output_image_negation_required()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_is_output_image_negation_required","title":"set_is_output_image_negation_required","text":"<pre><code>set_is_output_image_negation_required(value: bool) -&gt; Self\n</code></pre> <p>Set the is_output_image_negation_required property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_output_image_negation_required(\n    self,\n    value: bool,  # noqa: FBT001\n) -&gt; Self:\n    \"\"\"Set the is_output_image_negation_required property value.\"\"\"\n    return self.set_constants(\n        self.get_constants().set_is_output_image_negation_required(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_image_name","title":"get_image_name","text":"<pre><code>get_image_name() -&gt; Optional[str]\n</code></pre> <p>Get image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_image_name(self) -&gt; Optional[str]:\n    \"\"\"Get image_name property value.\"\"\"\n    return self.get_constants().get_image_name()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_image_name","title":"set_image_name","text":"<pre><code>set_image_name(image_name: Optional[str]) -&gt; Self\n</code></pre> <p>Set the image_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_image_name(self, image_name: Optional[str]) -&gt; Self:\n    \"\"\"Set the image_name property value.\"\"\"\n    return self.set_constants(self.get_constants().set_image_name(image_name))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_file_name","title":"get_file_name","text":"<pre><code>get_file_name() -&gt; Optional[str]\n</code></pre> <p>Get file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_file_name(self) -&gt; Optional[str]:\n    \"\"\"Get file_name property value.\"\"\"\n    return self.get_constants().get_file_name()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_file_name","title":"set_file_name","text":"<pre><code>set_file_name(file_name: Optional[str]) -&gt; Self\n</code></pre> <p>Set the file_name property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_file_name(self, file_name: Optional[str]) -&gt; Self:\n    \"\"\"Set the file_name property value.\"\"\"\n    return self.set_constants(self.get_constants().set_file_name(file_name))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_axis_correspondence","title":"get_axis_correspondence","text":"<pre><code>get_axis_correspondence() -&gt; AxisCorrespondence\n</code></pre> <p>Get token axis correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_axis_correspondence(self) -&gt; AxisCorrespondence:\n    \"\"\"Get token axis correspondence property value.\"\"\"\n    return self.get_constants().get_axis_correspondence()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_axis_correspondence","title":"set_axis_correspondence","text":"<pre><code>set_axis_correspondence(\n    axis_correspondence: AxisCorrespondence,\n) -&gt; Self\n</code></pre> <p>Set token axis correspondence property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_axis_correspondence(self, axis_correspondence: AxisCorrespondence) -&gt; Self:\n    \"\"\"Set token axis correspondence property value.\"\"\"\n    return self.set_constants(\n        self.get_constants().set_axis_correspondence(axis_correspondence),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_flags","title":"get_flags","text":"<pre><code>get_flags() -&gt; State2DrawFlags\n</code></pre> <p>Get flags property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_flags(self) -&gt; State2DrawFlags:\n    \"\"\"Get flags property value.\"\"\"\n    return self.flags\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_flags","title":"set_flags","text":"<pre><code>set_flags(flags: State2DrawFlags) -&gt; Self\n</code></pre> <p>Set the flags property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_flags(self, flags: State2DrawFlags) -&gt; Self:\n    \"\"\"Set the flags property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"flags\": flags,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_draw_mode","title":"get_draw_mode","text":"<pre><code>get_draw_mode() -&gt; DrawMode\n</code></pre> <p>Get draw_mode property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_draw_mode(self) -&gt; DrawMode:\n    \"\"\"Get draw_mode property value.\"\"\"\n    return self.get_flags().get_draw_mode()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_draw_mode","title":"set_draw_mode","text":"<pre><code>set_draw_mode(draw_mode: DrawMode) -&gt; Self\n</code></pre> <p>Set the draw_mode property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_draw_mode(self, draw_mode: DrawMode) -&gt; Self:\n    \"\"\"Set the draw_mode property value.\"\"\"\n    return self.set_flags(self.get_flags().set_draw_mode(draw_mode))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_is_region","title":"get_is_region","text":"<pre><code>get_is_region() -&gt; bool\n</code></pre> <p>Get is_region property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_region(self) -&gt; bool:\n    \"\"\"Get is_region property value.\"\"\"\n    return self.get_flags().get_is_region()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_is_region","title":"set_is_region","text":"<pre><code>set_is_region(is_region: bool) -&gt; Self\n</code></pre> <p>Set the is_region property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_region(self, is_region: bool) -&gt; Self:  # noqa: FBT001\n    \"\"\"Set the is_region property value.\"\"\"\n    return self.set_flags(self.get_flags().set_is_region(is_region))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_is_aperture_block","title":"get_is_aperture_block","text":"<pre><code>get_is_aperture_block() -&gt; bool\n</code></pre> <p>Get is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_aperture_block(self) -&gt; bool:\n    \"\"\"Get is_aperture_block property value.\"\"\"\n    return self.get_flags().get_is_aperture_block()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_is_aperture_block","title":"set_is_aperture_block","text":"<pre><code>set_is_aperture_block(is_aperture_block: bool) -&gt; Self\n</code></pre> <p>Set the is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_aperture_block(self, is_aperture_block: bool) -&gt; Self:  # noqa: FBT001\n    \"\"\"Set the is_aperture_block property value.\"\"\"\n    return self.set_flags(\n        self.get_flags().set_is_aperture_block(is_aperture_block),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_aperture_block_id","title":"get_aperture_block_id","text":"<pre><code>get_aperture_block_id() -&gt; Optional[ApertureID]\n</code></pre> <p>Get aperture_block_id property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_aperture_block_id(self) -&gt; Optional[ApertureID]:\n    \"\"\"Get aperture_block_id property value.\"\"\"\n    return self.get_flags().get_aperture_block_id()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_aperture_block_id","title":"set_aperture_block_id","text":"<pre><code>set_aperture_block_id(\n    aperture_block_id: Optional[ApertureID],\n) -&gt; Self\n</code></pre> <p>Set the aperture_block_id property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_aperture_block_id(self, aperture_block_id: Optional[ApertureID]) -&gt; Self:\n    \"\"\"Set the aperture_block_id property value.\"\"\"\n    return self.set_flags(\n        self.get_flags().set_aperture_block_id(aperture_block_id),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_is_multi_quadrant","title":"get_is_multi_quadrant","text":"<pre><code>get_is_multi_quadrant() -&gt; bool\n</code></pre> <p>Get is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_multi_quadrant(self) -&gt; bool:\n    \"\"\"Get is_aperture_block property value.\"\"\"\n    return self.get_flags().get_is_multi_quadrant()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_is_multi_quadrant","title":"set_is_multi_quadrant","text":"<pre><code>set_is_multi_quadrant(is_multi_quadrant: bool) -&gt; Self\n</code></pre> <p>Set the is_aperture_block property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_multi_quadrant(self, is_multi_quadrant: bool) -&gt; Self:  # noqa: FBT001\n    \"\"\"Set the is_aperture_block property value.\"\"\"\n    return self.set_flags(\n        self.get_flags().set_is_multi_quadrant(is_multi_quadrant),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_step_and_repeat","title":"get_step_and_repeat","text":"<pre><code>get_step_and_repeat() -&gt; StepAndRepeatState2\n</code></pre> <p>Get step_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_step_and_repeat(self) -&gt; StepAndRepeatState2:\n    \"\"\"Get step_repeat property value.\"\"\"\n    return self.step_repeat\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_step_and_repeat","title":"set_step_and_repeat","text":"<pre><code>set_step_and_repeat(\n    step_and_repeat: StepAndRepeatState2,\n) -&gt; Self\n</code></pre> <p>Set step_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_step_and_repeat(self, step_and_repeat: StepAndRepeatState2) -&gt; Self:\n    \"\"\"Set step_repeat property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"step_repeat\": step_and_repeat,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_is_step_and_repeat","title":"get_is_step_and_repeat","text":"<pre><code>get_is_step_and_repeat() -&gt; bool\n</code></pre> <p>Get is_step_and_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_is_step_and_repeat(self) -&gt; bool:\n    \"\"\"Get is_step_and_repeat property value.\"\"\"\n    return self.get_step_and_repeat().get_is_step_and_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_is_step_and_repeat","title":"set_is_step_and_repeat","text":"<pre><code>set_is_step_and_repeat(is_step_and_repeat: bool) -&gt; Self\n</code></pre> <p>Set the is_step_and_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_is_step_and_repeat(self, is_step_and_repeat: bool) -&gt; Self:  # noqa: FBT001\n    \"\"\"Set the is_step_and_repeat property value.\"\"\"\n    return self.set_step_and_repeat(\n        self.get_step_and_repeat().set_is_step_and_repeat(is_step_and_repeat),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_x_repeat","title":"get_x_repeat","text":"<pre><code>get_x_repeat() -&gt; int\n</code></pre> <p>Get x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_x_repeat(self) -&gt; int:\n    \"\"\"Get x_repeat property value.\"\"\"\n    return self.get_step_and_repeat().get_x_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_x_repeat","title":"set_x_repeat","text":"<pre><code>set_x_repeat(value: int) -&gt; Self\n</code></pre> <p>Set the x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_x_repeat(self, value: int) -&gt; Self:\n    \"\"\"Set the x_repeat property value.\"\"\"\n    return self.set_step_and_repeat(\n        self.get_step_and_repeat().set_x_repeat(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_y_repeat","title":"get_y_repeat","text":"<pre><code>get_y_repeat() -&gt; int\n</code></pre> <p>Get y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_y_repeat(self) -&gt; int:\n    \"\"\"Get y_repeat property value.\"\"\"\n    return self.get_step_and_repeat().get_y_repeat()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_y_repeat","title":"set_y_repeat","text":"<pre><code>set_y_repeat(value: int) -&gt; Self\n</code></pre> <p>Set the y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_y_repeat(self, value: int) -&gt; Self:\n    \"\"\"Set the y_repeat property value.\"\"\"\n    return self.set_step_and_repeat(\n        self.get_step_and_repeat().set_y_repeat(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_x_step","title":"get_x_step","text":"<pre><code>get_x_step() -&gt; Offset\n</code></pre> <p>Get x_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_x_step(self) -&gt; Offset:\n    \"\"\"Get x_step property value.\"\"\"\n    return self.get_step_and_repeat().get_x_step()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_x_step","title":"set_x_step","text":"<pre><code>set_x_step(value: Offset) -&gt; Self\n</code></pre> <p>Set the x_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_x_step(self, value: Offset) -&gt; Self:\n    \"\"\"Set the x_repeat property value.\"\"\"\n    return self.set_step_and_repeat(\n        self.get_step_and_repeat().set_x_step(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_y_step","title":"get_y_step","text":"<pre><code>get_y_step() -&gt; Offset\n</code></pre> <p>Get y_step property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_y_step(self) -&gt; Offset:\n    \"\"\"Get y_step property value.\"\"\"\n    return self.get_step_and_repeat().get_y_step()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_y_step","title":"set_y_step","text":"<pre><code>set_y_step(value: Offset) -&gt; Self\n</code></pre> <p>Set the y_repeat property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_y_step(self, value: Offset) -&gt; Self:\n    \"\"\"Set the y_repeat property value.\"\"\"\n    return self.set_step_and_repeat(\n        self.get_step_and_repeat().set_y_step(value),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_current_position","title":"get_current_position","text":"<pre><code>get_current_position() -&gt; Vector2D\n</code></pre> <p>Get current_position property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_current_position(self) -&gt; Vector2D:\n    \"\"\"Get current_position property value.\"\"\"\n    return self.current_position\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_current_position","title":"set_current_position","text":"<pre><code>set_current_position(current_position: Vector2D) -&gt; Self\n</code></pre> <p>Set the current_position property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_current_position(self, current_position: Vector2D) -&gt; Self:\n    \"\"\"Set the current_position property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"current_position\": current_position,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_current_aperture_id","title":"get_current_aperture_id","text":"<pre><code>get_current_aperture_id() -&gt; Optional[ApertureID]\n</code></pre> <p>Get current_aperture property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_current_aperture_id(self) -&gt; Optional[ApertureID]:\n    \"\"\"Get current_aperture property value.\"\"\"\n    return self.current_aperture_id\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_current_aperture_id","title":"set_current_aperture_id","text":"<pre><code>set_current_aperture_id(\n    current_aperture: Optional[ApertureID],\n) -&gt; Self\n</code></pre> <p>Set the current_aperture property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_current_aperture_id(self, current_aperture: Optional[ApertureID]) -&gt; Self:\n    \"\"\"Set the current_aperture property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"current_aperture_id\": current_aperture,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.get_macro","title":"get_macro","text":"<pre><code>get_macro(__key: str) -&gt; ApertureMacro2\n</code></pre> <p>Get macros property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def get_macro(self, __key: str) -&gt; ApertureMacro2:\n    \"\"\"Get macros property value.\"\"\"\n    return self.macros.get_macro(__key)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.set_macro","title":"set_macro","text":"<pre><code>set_macro(__key: str, __value: ApertureMacro2) -&gt; Self\n</code></pre> <p>Set the macros property value.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def set_macro(self, __key: str, __value: ApertureMacro2) -&gt; Self:\n    \"\"\"Set the macros property value.\"\"\"\n    return self.model_copy(\n        update={\n            \"macros\": self.macros.set_macro(__key, __value),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/state2.html#pygerber.gerberx3.parser2.state2.State2.parse_coordinate","title":"parse_coordinate","text":"<pre><code>parse_coordinate(coordinate: Coordinate) -&gt; Offset\n</code></pre> <p>Parse a coordinate and convert it to an Offset.</p> <p>This method parses a given coordinate and converts it to an Offset object. It handles missing X, Y by substituting them with the current position and missing I, J by substituting them with NULL offset.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to be parsed.</p> required <p>Returns:</p> Type Description <code>Offset</code> <p>The parsed coordinate converted to an Offset object.</p> Source code in <code>src/pygerber/gerberx3/parser2/state2.py</code> <pre><code>def parse_coordinate(self, coordinate: Coordinate) -&gt; Offset:\n    \"\"\"Parse a coordinate and convert it to an Offset.\n\n    This method parses a given coordinate and converts it to an Offset object.\n    It handles missing X, Y by substituting them with the current\n    position and missing I, J by substituting them with NULL offset.\n\n    Parameters\n    ----------\n    coordinate : Coordinate\n        The coordinate to be parsed.\n\n    Returns\n    -------\n    Offset\n        The parsed coordinate converted to an Offset object.\n\n    \"\"\"\n    if coordinate.coordinate_type == CoordinateType.MISSING_X:\n        return self.current_position.x\n\n    if coordinate.coordinate_type == CoordinateType.MISSING_Y:\n        return self.current_position.y\n\n    if coordinate.coordinate_type == CoordinateType.MISSING_I:\n        return Offset.NULL\n\n    if coordinate.coordinate_type == CoordinateType.MISSING_J:\n        return Offset.NULL\n\n    return Offset.new(\n        self.get_coordinate_parser().parse(coordinate),\n        unit=self.get_draw_units(),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/__init__.html#pygerber.gerberx3.parser2.apertures2","title":"apertures2","text":"<p>Parser level abstraction of aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html","title":"aperture2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2","title":"aperture2","text":"<p>Parser level abstraction of aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2","title":"Aperture2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Parser level abstraction of aperture info.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>class Aperture2(FrozenGeneralModel):\n    \"\"\"Parser level abstraction of aperture info.\"\"\"\n\n    identifier: ApertureID\n    attributes: ApertureAttributes = Field(default_factory=ImmutableMapping)\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        raise NotImplementedError\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of aperture.\"\"\"\n        raise NotImplementedError\n\n    def get_stroke_width(self) -&gt; Offset:\n        \"\"\"Get stroke width of command.\"\"\"\n        raise NotImplementedError\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:  # noqa: ARG002\n        \"\"\"Get mirrored aperture.\"\"\"\n        return self\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:  # noqa: ARG002\n        \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n        return self\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:  # noqa: ARG002\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of aperture.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.get_stroke_width","title":"get_stroke_width","text":"<pre><code>get_stroke_width() -&gt; Offset\n</code></pre> <p>Get stroke width of command.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def get_stroke_width(self) -&gt; Offset:\n    \"\"\"Get stroke width of command.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:  # noqa: ARG002\n    \"\"\"Get mirrored aperture.\"\"\"\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:  # noqa: ARG002\n    \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/aperture2.html#pygerber.gerberx3.parser2.apertures2.aperture2.Aperture2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/aperture2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:  # noqa: ARG002\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html","title":"block2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2","title":"block2","text":"<p>Parser level abstraction of block aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2","title":"Block2","text":"<p>             Bases: <code>Aperture2</code></p> <p>Parser level abstraction of aperture info for block aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>class Block2(Aperture2):\n    \"\"\"Parser level abstraction of aperture info for block aperture.\"\"\"\n\n    command_buffer: ReadonlyCommandBuffer2\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        # Block apertures are resolved into series of commands at parser level.\n        raise NotImplementedError\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of aperture.\"\"\"\n        return self.command_buffer.get_bounding_box()\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n        if angle == Decimal(\"0.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_rotated(angle),\n            },\n        )\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored aperture.\"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_scaled(scale),\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    # Block apertures are resolved into series of commands at parser level.\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of aperture.\"\"\"\n    return self.command_buffer.get_bounding_box()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n    if angle == Decimal(\"0.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored aperture.\"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/block2.html#pygerber.gerberx3.parser2.apertures2.block2.Block2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/block2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html","title":"circle2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2","title":"circle2","text":"<p>Parser level abstraction of circle aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.Circle2","title":"Circle2","text":"<p>             Bases: <code>Aperture2</code></p> <p>Parser level abstraction of aperture info for circle aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>class Circle2(Aperture2):\n    \"\"\"Parser level abstraction of aperture info for circle aperture.\"\"\"\n\n    diameter: Offset\n    hole_diameter: Optional[Offset]\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_circle(command, self)\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Get bounding box of draw operation.\"\"\"\n        return BoundingBox.from_diameter(self.diameter)\n\n    def get_stroke_width(self) -&gt; Offset:\n        \"\"\"Get stroke width of command.\"\"\"\n        return self.diameter\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"diameter\": (self.diameter * scale),\n                \"hole_diameter\": (\n                    None if self.hole_diameter is None else self.hole_diameter * scale\n                ),\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.Circle2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_circle(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.Circle2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Get bounding box of draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Get bounding box of draw operation.\"\"\"\n    return BoundingBox.from_diameter(self.diameter)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.Circle2.get_stroke_width","title":"get_stroke_width","text":"<pre><code>get_stroke_width() -&gt; Offset\n</code></pre> <p>Get stroke width of command.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>def get_stroke_width(self) -&gt; Offset:\n    \"\"\"Get stroke width of command.\"\"\"\n    return self.diameter\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.Circle2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"diameter\": (self.diameter * scale),\n            \"hole_diameter\": (\n                None if self.hole_diameter is None else self.hole_diameter * scale\n            ),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.NoCircle2","title":"NoCircle2","text":"<p>             Bases: <code>Circle2</code></p> <p>Dummy aperture representing case when aperture is not needed but has to be given to denote width of draw line command.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>class NoCircle2(Circle2):\n    \"\"\"Dummy aperture representing case when aperture is not needed but has to be\n    given to denote width of draw line command.\n    \"\"\"\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_no_circle(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/circle2.html#pygerber.gerberx3.parser2.apertures2.circle2.NoCircle2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/circle2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_no_circle(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html","title":"macro2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2","title":"macro2","text":"<p>Parser level abstraction of macro aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2","title":"Macro2","text":"<p>             Bases: <code>Aperture2</code></p> <p>Parser level abstraction of aperture info for macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>class Macro2(Aperture2):\n    \"\"\"Parser level abstraction of aperture info for macro aperture.\"\"\"\n\n    command_buffer: ReadonlyCommandBuffer2\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_macro(command, self)\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of aperture.\"\"\"\n        return self.command_buffer.get_bounding_box()\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored aperture.\"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n        if angle == Decimal(\"0.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_rotated(angle),\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_scaled(scale),\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_macro(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of aperture.\"\"\"\n    return self.command_buffer.get_bounding_box()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored aperture.\"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n    if angle == Decimal(\"0.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/macro2.html#pygerber.gerberx3.parser2.apertures2.macro2.Macro2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/macro2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/obround2.html","title":"obround2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/obround2.html#pygerber.gerberx3.parser2.apertures2.obround2","title":"obround2","text":"<p>Parser level abstraction of obround aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/obround2.html#pygerber.gerberx3.parser2.apertures2.obround2.Obround2","title":"Obround2","text":"<p>             Bases: <code>Rectangle2</code></p> <p>Parser level abstraction of aperture info for obround aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/obround2.py</code> <pre><code>class Obround2(Rectangle2):\n    \"\"\"Parser level abstraction of aperture info for obround aperture.\"\"\"\n\n    x_size: Offset\n    y_size: Offset\n    hole_diameter: Optional[Offset]\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_obround(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/obround2.html#pygerber.gerberx3.parser2.apertures2.obround2.Obround2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/obround2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_obround(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html","title":"polygon2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2","title":"polygon2","text":"<p>Parser level abstraction of polygon aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2.Polygon2","title":"Polygon2","text":"<p>             Bases: <code>Aperture2</code></p> <p>Parser level abstraction of aperture info for polygon aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/polygon2.py</code> <pre><code>class Polygon2(Aperture2):\n    \"\"\"Parser level abstraction of aperture info for polygon aperture.\"\"\"\n\n    outer_diameter: Offset\n    number_vertices: int\n    rotation: Decimal\n    hole_diameter: Optional[Offset]\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_polygon(command, self)\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of aperture.\"\"\"\n        return BoundingBox.from_diameter(self.outer_diameter)\n\n    def get_stroke_width(self) -&gt; Offset:\n        \"\"\"Get stroke width of command.\"\"\"\n        return self.outer_diameter\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        return self.model_copy(\n            update={\n                \"outer_diameter\": self.outer_diameter * scale,\n                \"hole_diameter\": (\n                    None if self.hole_diameter is None else self.hole_diameter * scale\n                ),\n            },\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2.Polygon2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/polygon2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_polygon(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2.Polygon2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/polygon2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of aperture.\"\"\"\n    return BoundingBox.from_diameter(self.outer_diameter)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2.Polygon2.get_stroke_width","title":"get_stroke_width","text":"<pre><code>get_stroke_width() -&gt; Offset\n</code></pre> <p>Get stroke width of command.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/polygon2.py</code> <pre><code>def get_stroke_width(self) -&gt; Offset:\n    \"\"\"Get stroke width of command.\"\"\"\n    return self.outer_diameter\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/polygon2.html#pygerber.gerberx3.parser2.apertures2.polygon2.Polygon2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/polygon2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    return self.model_copy(\n        update={\n            \"outer_diameter\": self.outer_diameter * scale,\n            \"hole_diameter\": (\n                None if self.hole_diameter is None else self.hole_diameter * scale\n            ),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html","title":"rectangle2","text":""},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2","title":"rectangle2","text":"<p>Parser level abstraction of rectangle aperture info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2","title":"Rectangle2","text":"<p>             Bases: <code>Aperture2</code></p> <p>Parser level abstraction of aperture info for rectangle aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>class Rectangle2(Aperture2):\n    \"\"\"Parser level abstraction of aperture info for rectangle aperture.\"\"\"\n\n    x_size: Offset\n    y_size: Offset\n    hole_diameter: Optional[Offset]\n    rotation: Decimal = Field(default=Decimal(\"0.0\"))\n\n    def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_flash_rectangle(command, self)\n\n    def get_stroke_width(self) -&gt; Offset:\n        \"\"\"Return stroke width of aperture.\"\"\"\n        return (self.x_size + self.y_size) / 2\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of aperture.\"\"\"\n        return BoundingBox.from_rectangle(self.x_size, self.y_size).get_rotated(\n            self.rotation,\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        return self.model_copy(\n            update={\n                \"x_size\": self.x_size * scale,\n                \"y_size\": self.y_size * scale,\n                \"hole_diameter\": (\n                    None if self.hole_diameter is None else self.hole_diameter * scale\n                ),\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\"rotation\": (self.rotation + angle) % Decimal(360)},\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2.render_flash","title":"render_flash","text":"<pre><code>render_flash(renderer: Renderer2, command: Flash2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>def render_flash(self, renderer: Renderer2, command: Flash2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_flash_rectangle(command, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2.get_stroke_width","title":"get_stroke_width","text":"<pre><code>get_stroke_width() -&gt; Offset\n</code></pre> <p>Return stroke width of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>def get_stroke_width(self) -&gt; Offset:\n    \"\"\"Return stroke width of aperture.\"\"\"\n    return (self.x_size + self.y_size) / 2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of aperture.\"\"\"\n    return BoundingBox.from_rectangle(self.x_size, self.y_size).get_rotated(\n        self.rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    return self.model_copy(\n        update={\n            \"x_size\": self.x_size * scale,\n            \"y_size\": self.y_size * scale,\n            \"hole_diameter\": (\n                None if self.hole_diameter is None else self.hole_diameter * scale\n            ),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/apertures2/rectangle2.html#pygerber.gerberx3.parser2.apertures2.rectangle2.Rectangle2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/apertures2/rectangle2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\"rotation\": (self.rotation + angle) % Decimal(360)},\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/__init__.html#pygerber.gerberx3.parser2.commands2","title":"commands2","text":"<p>Parser level abstraction of draw operation info for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.html","title":"aperture_draw_command2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.html#pygerber.gerberx3.parser2.commands2.aperture_draw_command2","title":"aperture_draw_command2","text":"<p>Parser level abstraction of draw operation which utilizes apertures for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.html#pygerber.gerberx3.parser2.commands2.aperture_draw_command2.ApertureDrawCommand2","title":"ApertureDrawCommand2","text":"<p>             Bases: <code>Command2</code></p> <p>Parser level abstraction of draw operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.py</code> <pre><code>class ApertureDrawCommand2(Command2):\n    \"\"\"Parser level abstraction of draw operation for Gerber AST parser, version 2.\"\"\"\n\n    attributes: ObjectAttributes = Field(default_factory=ObjectAttributes)\n    aperture: Aperture2\n\n    def render_iter(self, hooks: Renderer2) -&gt; Generator[Command2, None, None]:\n        \"\"\"Render draw operation.\"\"\"\n        self.render(hooks)\n        yield self\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__qualname__}()\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.html#pygerber.gerberx3.parser2.commands2.aperture_draw_command2.ApertureDrawCommand2.render_iter","title":"render_iter","text":"<pre><code>render_iter(\n    hooks: Renderer2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/aperture_draw_command2.py</code> <pre><code>def render_iter(self, hooks: Renderer2) -&gt; Generator[Command2, None, None]:\n    \"\"\"Render draw operation.\"\"\"\n    self.render(hooks)\n    yield self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html","title":"arc2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2","title":"arc2","text":"<p>Parser level abstraction of draw arc operation for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2","title":"Arc2","text":"<p>             Bases: <code>ApertureDrawCommand2</code></p> <p>Parser level abstraction of draw arc operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>class Arc2(ApertureDrawCommand2):\n    \"\"\"Parser level abstraction of draw arc operation for Gerber AST parser,\n    version 2.\n    \"\"\"\n\n    start_point: Vector2D\n    end_point: Vector2D\n    center_point: Vector2D\n\n    def get_relative_start_point(self) -&gt; Vector2D:\n        \"\"\"Get starting point relative to arc center.\"\"\"\n        return self.start_point - self.center_point\n\n    def get_relative_end_point(self) -&gt; Vector2D:\n        \"\"\"Get ending point relative to arc center.\"\"\"\n        return self.end_point - self.center_point\n\n    def get_relative_center_point(self) -&gt; Vector2D:\n        \"\"\"Get center point relative to arc center.\"\"\"\n        return self.center_point - self.center_point\n\n    def get_radius(self) -&gt; Offset:\n        \"\"\"Get radius of circle arc.\"\"\"\n        return self.get_relative_start_point().length()\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of arc.\"\"\"\n        return (\n            BoundingBox.from_diameter(\n                (self.get_radius() * 2) + (self.aperture.get_stroke_width() * 2),\n            )\n            + self.center_point\n        )\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored command.\n\n        Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n        \"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n\n        new_end_point = self.end_point.get_mirrored(mirror)\n        new_start_point = self.start_point.get_mirrored(mirror)\n        new_center_point = self.center_point.get_mirrored(mirror)\n\n        if mirror == Mirroring.XY:\n            return self.model_copy(\n                update={\n                    \"end_point\": new_end_point,\n                    \"start_point\": new_start_point,\n                    \"center_point\": new_center_point,\n                },\n            )\n\n        return self.model_copy(\n            update={\n                \"end_point\": new_start_point,\n                \"start_point\": new_end_point,\n                \"center_point\": new_center_point,\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point.get_rotated(angle),\n                \"end_point\": self.end_point.get_rotated(angle),\n                \"center_point\": self.center_point.get_rotated(angle),\n            },\n        )\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get transposed command.\"\"\"\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point + vector,\n                \"end_point\": self.end_point + vector,\n                \"center_point\": self.center_point + vector,\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point.get_scaled(scale),\n                \"end_point\": self.end_point.get_scaled(scale),\n                \"center_point\": self.center_point.get_scaled(scale),\n                \"aperture\": self.aperture.get_scaled(scale),\n                \"transform\": self.transform.get_scaled(scale),\n            },\n        )\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_arc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector2D\n</code></pre> <p>Get starting point relative to arc center.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_relative_start_point(self) -&gt; Vector2D:\n    \"\"\"Get starting point relative to arc center.\"\"\"\n    return self.start_point - self.center_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector2D\n</code></pre> <p>Get ending point relative to arc center.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_relative_end_point(self) -&gt; Vector2D:\n    \"\"\"Get ending point relative to arc center.\"\"\"\n    return self.end_point - self.center_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_relative_center_point","title":"get_relative_center_point","text":"<pre><code>get_relative_center_point() -&gt; Vector2D\n</code></pre> <p>Get center point relative to arc center.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_relative_center_point(self) -&gt; Vector2D:\n    \"\"\"Get center point relative to arc center.\"\"\"\n    return self.center_point - self.center_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; Offset\n</code></pre> <p>Get radius of circle arc.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_radius(self) -&gt; Offset:\n    \"\"\"Get radius of circle arc.\"\"\"\n    return self.get_relative_start_point().length()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of arc.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of arc.\"\"\"\n    return (\n        BoundingBox.from_diameter(\n            (self.get_radius() * 2) + (self.aperture.get_stroke_width() * 2),\n        )\n        + self.center_point\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored command.</p> <p>Mirroring is a NOOP if mirror is <code>Mirroring.NoMirroring</code>.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored command.\n\n    Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n    \"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n\n    new_end_point = self.end_point.get_mirrored(mirror)\n    new_start_point = self.start_point.get_mirrored(mirror)\n    new_center_point = self.center_point.get_mirrored(mirror)\n\n    if mirror == Mirroring.XY:\n        return self.model_copy(\n            update={\n                \"end_point\": new_end_point,\n                \"start_point\": new_start_point,\n                \"center_point\": new_center_point,\n            },\n        )\n\n    return self.model_copy(\n        update={\n            \"end_point\": new_start_point,\n            \"start_point\": new_end_point,\n            \"center_point\": new_center_point,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point.get_rotated(angle),\n            \"end_point\": self.end_point.get_rotated(angle),\n            \"center_point\": self.center_point.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get transposed command.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get transposed command.\"\"\"\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point + vector,\n            \"end_point\": self.end_point + vector,\n            \"center_point\": self.center_point + vector,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point.get_scaled(scale),\n            \"end_point\": self.end_point.get_scaled(scale),\n            \"center_point\": self.center_point.get_scaled(scale),\n            \"aperture\": self.aperture.get_scaled(scale),\n            \"transform\": self.transform.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.Arc2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_arc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.CCArc2","title":"CCArc2","text":"<p>             Bases: <code>Arc2</code></p> <p>Parser level abstraction of draw counterclockwise arc operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>class CCArc2(Arc2):\n    \"\"\"Parser level abstraction of draw counterclockwise arc operation for Gerber AST\n    parser, version 2.\n    \"\"\"\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_cc_arc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/arc2.html#pygerber.gerberx3.parser2.commands2.arc2.CCArc2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/arc2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_cc_arc(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html","title":"buffer_command2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2","title":"buffer_command2","text":"<p>Parser level abstraction of command that consists of multiple commands for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2","title":"BufferCommand2","text":"<p>             Bases: <code>Command2</code></p> <p>Parser level abstraction of command that consists of multiple commands for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>class BufferCommand2(Command2):\n    \"\"\"Parser level abstraction of command that consists of multiple commands for Gerber\n    AST parser, version 2.\n    \"\"\"\n\n    command_buffer: ReadonlyCommandBuffer2\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored command.\n\n        Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n        \"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n            },\n        )\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get transposed command.\"\"\"\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_transposed(vector),\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_rotated(angle),\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        return self.model_copy(\n            update={\n                \"command_buffer\": self.command_buffer.get_scaled(scale),\n            },\n        )\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Get bounding box of draw operation.\"\"\"\n        return self.command_buffer.get_bounding_box()\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        for _ in renderer.hooks.render_buffer(self):\n            pass\n\n    def render_iter(self, renderer: Renderer2) -&gt; Generator[Command2, None, None]:\n        \"\"\"Render draw operation.\"\"\"\n        yield from renderer.hooks.render_buffer(self)\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return length of buffered commands.\"\"\"\n        return len(self.command_buffer)\n\n    def __iter__(self) -&gt; Iterator[Command2]:  # type: ignore[override]\n        \"\"\"Iterate over buffered draw commands.\"\"\"\n        yield from self.command_buffer\n\n    def __getitem__(self, index: int) -&gt; Command2:\n        \"\"\"Get item by index from commands.\"\"\"\n        return self.command_buffer[index]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored command.</p> <p>Mirroring is a NOOP if mirror is <code>Mirroring.NoMirroring</code>.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored command.\n\n    Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n    \"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_mirrored(mirror),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get transposed command.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get transposed command.\"\"\"\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_transposed(vector),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    return self.model_copy(\n        update={\n            \"command_buffer\": self.command_buffer.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Get bounding box of draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Get bounding box of draw operation.\"\"\"\n    return self.command_buffer.get_bounding_box()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    for _ in renderer.hooks.render_buffer(self):\n        pass\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.render_iter","title":"render_iter","text":"<pre><code>render_iter(\n    renderer: Renderer2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def render_iter(self, renderer: Renderer2) -&gt; Generator[Command2, None, None]:\n    \"\"\"Render draw operation.\"\"\"\n    yield from renderer.hooks.render_buffer(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return length of buffered commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return length of buffered commands.\"\"\"\n    return len(self.command_buffer)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Command2]\n</code></pre> <p>Iterate over buffered draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def __iter__(self) -&gt; Iterator[Command2]:  # type: ignore[override]\n    \"\"\"Iterate over buffered draw commands.\"\"\"\n    yield from self.command_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/buffer_command2.html#pygerber.gerberx3.parser2.commands2.buffer_command2.BufferCommand2.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: int) -&gt; Command2\n</code></pre> <p>Get item by index from commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/buffer_command2.py</code> <pre><code>def __getitem__(self, index: int) -&gt; Command2:\n    \"\"\"Get item by index from commands.\"\"\"\n    return self.command_buffer[index]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html","title":"command2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2","title":"command2","text":"<p>Parser level abstraction of draw operation for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2","title":"Command2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Parser level abstraction of draw operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>class Command2(FrozenGeneralModel):\n    \"\"\"Parser level abstraction of draw operation for Gerber AST parser, version 2.\"\"\"\n\n    transform: ApertureTransform\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Get bounding box of draw operation.\"\"\"\n        raise NotImplementedError\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored command.\n\n        Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n        \"\"\"\n        raise NotImplementedError\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get transposed command.\"\"\"\n        raise NotImplementedError\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        raise NotImplementedError\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        raise NotImplementedError\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        raise NotImplementedError\n\n    def render_iter(\n        self,\n        renderer: Renderer2,  # noqa: ARG002\n    ) -&gt; Generator[Command2, None, None]:\n        \"\"\"Render draw operation.\"\"\"\n        raise NotImplementedError\n        yield  # type: ignore[unreachable]\n\n    def command_to_json(self) -&gt; str:\n        \"\"\"Dump draw operation.\"\"\"\n        return json.dumps(\n            {\n                \"cls\": f\"{self.__module__}.{self.__class__.__qualname__}\",\n                \"dict\": json.loads(self.model_dump_json()),\n            },\n        )\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__qualname__}()\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Get bounding box of draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Get bounding box of draw operation.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored command.</p> <p>Mirroring is a NOOP if mirror is <code>Mirroring.NoMirroring</code>.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored command.\n\n    Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get transposed command.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get transposed command.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.render_iter","title":"render_iter","text":"<pre><code>render_iter(\n    renderer: Renderer2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def render_iter(\n    self,\n    renderer: Renderer2,  # noqa: ARG002\n) -&gt; Generator[Command2, None, None]:\n    \"\"\"Render draw operation.\"\"\"\n    raise NotImplementedError\n    yield  # type: ignore[unreachable]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/command2.html#pygerber.gerberx3.parser2.commands2.command2.Command2.command_to_json","title":"command_to_json","text":"<pre><code>command_to_json() -&gt; str\n</code></pre> <p>Dump draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/command2.py</code> <pre><code>def command_to_json(self) -&gt; str:\n    \"\"\"Dump draw operation.\"\"\"\n    return json.dumps(\n        {\n            \"cls\": f\"{self.__module__}.{self.__class__.__qualname__}\",\n            \"dict\": json.loads(self.model_dump_json()),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html","title":"flash2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2","title":"flash2","text":"<p>Parser level abstraction of flash operation for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2","title":"Flash2","text":"<p>             Bases: <code>ApertureDrawCommand2</code></p> <p>Parser level abstraction of flash operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>class Flash2(ApertureDrawCommand2):\n    \"\"\"Parser level abstraction of flash operation for Gerber AST parser,\n    version 2.\n    \"\"\"\n\n    flash_point: Vector2D\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored command.\n\n        Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n        \"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n        return self.model_copy(\n            update={\n                \"flash_point\": self.flash_point.get_mirrored(mirror),\n                \"aperture\": self.aperture.get_mirrored(mirror),\n            },\n        )\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get transposed command.\"\"\"\n        return self.model_copy(\n            update={\n                \"flash_point\": self.flash_point + vector,\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\n                \"flash_point\": self.flash_point.get_rotated(angle),\n                \"aperture\": self.aperture.get_rotated(angle),\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"flash_point\": self.flash_point.get_scaled(scale),\n                \"aperture\": self.aperture.get_scaled(scale),\n                \"transform\": self.transform.get_scaled(scale),\n            },\n        )\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        self.aperture.render_flash(renderer, self)\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Get bounding box of draw operation.\"\"\"\n        return self.aperture.get_bounding_box() + self.flash_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored command.</p> <p>Mirroring is a NOOP if mirror is <code>Mirroring.NoMirroring</code>.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored command.\n\n    Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n    \"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n    return self.model_copy(\n        update={\n            \"flash_point\": self.flash_point.get_mirrored(mirror),\n            \"aperture\": self.aperture.get_mirrored(mirror),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get transposed command.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get transposed command.\"\"\"\n    return self.model_copy(\n        update={\n            \"flash_point\": self.flash_point + vector,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\n            \"flash_point\": self.flash_point.get_rotated(angle),\n            \"aperture\": self.aperture.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"flash_point\": self.flash_point.get_scaled(scale),\n            \"aperture\": self.aperture.get_scaled(scale),\n            \"transform\": self.transform.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    self.aperture.render_flash(renderer, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/flash2.html#pygerber.gerberx3.parser2.commands2.flash2.Flash2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Get bounding box of draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/flash2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Get bounding box of draw operation.\"\"\"\n    return self.aperture.get_bounding_box() + self.flash_point\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html","title":"line2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2","title":"line2","text":"<p>Parser level abstraction of draw line operation for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2","title":"Line2","text":"<p>             Bases: <code>ApertureDrawCommand2</code></p> <p>Parser level abstraction of draw line operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>class Line2(ApertureDrawCommand2):\n    \"\"\"Parser level abstraction of draw line operation for Gerber AST parser,\n    version 2.\n    \"\"\"\n\n    start_point: Vector2D\n    end_point: Vector2D\n\n    def get_bounding_box(self) -&gt; BoundingBox:\n        \"\"\"Return bounding box of draw operation.\"\"\"\n        vertex_box = self.aperture.get_bounding_box()\n        return (vertex_box + self.start_point) + (vertex_box + self.end_point)\n\n    def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n        \"\"\"Get mirrored command.\n\n        Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n        \"\"\"\n        if mirror == Mirroring.NoMirroring:\n            return self\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point.get_mirrored(mirror),\n                \"end_point\": self.end_point.get_mirrored(mirror),\n            },\n        )\n\n    def get_transposed(self, vector: Vector2D) -&gt; Self:\n        \"\"\"Get transposed command.\"\"\"\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point + vector,\n                \"end_point\": self.end_point + vector,\n            },\n        )\n\n    def get_rotated(self, angle: Decimal) -&gt; Self:\n        \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point.get_rotated(angle),\n                \"end_point\": self.end_point.get_rotated(angle),\n            },\n        )\n\n    def get_scaled(self, scale: Decimal) -&gt; Self:\n        \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n        if scale == Decimal(\"1.0\"):\n            return self\n        return self.model_copy(\n            update={\n                \"start_point\": self.start_point.get_scaled(scale),\n                \"end_point\": self.end_point.get_scaled(scale),\n                \"aperture\": self.aperture.get_scaled(scale),\n                \"transform\": self.transform.get_scaled(scale),\n            },\n        )\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_line(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.get_bounding_box","title":"get_bounding_box","text":"<pre><code>get_bounding_box() -&gt; BoundingBox\n</code></pre> <p>Return bounding box of draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def get_bounding_box(self) -&gt; BoundingBox:\n    \"\"\"Return bounding box of draw operation.\"\"\"\n    vertex_box = self.aperture.get_bounding_box()\n    return (vertex_box + self.start_point) + (vertex_box + self.end_point)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.get_mirrored","title":"get_mirrored","text":"<pre><code>get_mirrored(mirror: Mirroring) -&gt; Self\n</code></pre> <p>Get mirrored command.</p> <p>Mirroring is a NOOP if mirror is <code>Mirroring.NoMirroring</code>.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def get_mirrored(self, mirror: Mirroring) -&gt; Self:\n    \"\"\"Get mirrored command.\n\n    Mirroring is a NOOP if mirror is `Mirroring.NoMirroring`.\n    \"\"\"\n    if mirror == Mirroring.NoMirroring:\n        return self\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point.get_mirrored(mirror),\n            \"end_point\": self.end_point.get_mirrored(mirror),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.get_transposed","title":"get_transposed","text":"<pre><code>get_transposed(vector: Vector2D) -&gt; Self\n</code></pre> <p>Get transposed command.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def get_transposed(self, vector: Vector2D) -&gt; Self:\n    \"\"\"Get transposed command.\"\"\"\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point + vector,\n            \"end_point\": self.end_point + vector,\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.get_rotated","title":"get_rotated","text":"<pre><code>get_rotated(angle: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this command rotated around (0, 0).</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def get_rotated(self, angle: Decimal) -&gt; Self:\n    \"\"\"Get copy of this command rotated around (0, 0).\"\"\"\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point.get_rotated(angle),\n            \"end_point\": self.end_point.get_rotated(angle),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.get_scaled","title":"get_scaled","text":"<pre><code>get_scaled(scale: Decimal) -&gt; Self\n</code></pre> <p>Get copy of this aperture scaled by factor.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def get_scaled(self, scale: Decimal) -&gt; Self:\n    \"\"\"Get copy of this aperture scaled by factor.\"\"\"\n    if scale == Decimal(\"1.0\"):\n        return self\n    return self.model_copy(\n        update={\n            \"start_point\": self.start_point.get_scaled(scale),\n            \"end_point\": self.end_point.get_scaled(scale),\n            \"aperture\": self.aperture.get_scaled(scale),\n            \"transform\": self.transform.get_scaled(scale),\n        },\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/line2.html#pygerber.gerberx3.parser2.commands2.line2.Line2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/line2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_line(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html","title":"region2","text":""},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html#pygerber.gerberx3.parser2.commands2.region2","title":"region2","text":"<p>Parser level abstraction of draw region operation for Gerber AST parser, version 2.</p>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html#pygerber.gerberx3.parser2.commands2.region2.Region2","title":"Region2","text":"<p>             Bases: <code>BufferCommand2</code></p> <p>Parser level abstraction of draw region operation for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/region2.py</code> <pre><code>class Region2(BufferCommand2):\n    \"\"\"Parser level abstraction of draw region operation for Gerber AST parser,\n    version 2.\n    \"\"\"\n\n    aperture_attributes: ApertureAttributes = Field(default_factory=ApertureAttributes)\n    object_attributes: ObjectAttributes = Field(default_factory=ObjectAttributes)\n    command_buffer: ReadonlyCommandBuffer2\n\n    def command_to_json(self) -&gt; str:\n        \"\"\"Dump draw operation.\"\"\"\n        return f\"\"\"{{ \"cls\": \"{self.__module__}.{self.__class__.__qualname__}\", \"dict\": {{\n        \"polarity\": \"{self.transform.polarity.value}\",\n        \"aperture_attributes\": {self.aperture_attributes.model_dump_json()},\n        \"command_buffer\": {self.command_buffer.model_dump_json()},\n        \"command_buffer\": {\n            self.command_buffer.debug_buffer_to_json(8)}\n    }}\n}}\"\"\"  # noqa: E501\n\n    def render(self, renderer: Renderer2) -&gt; None:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_region(self)\n\n    def render_iter(self, renderer: Renderer2) -&gt; Generator[Command2, None, None]:\n        \"\"\"Render draw operation.\"\"\"\n        renderer.hooks.render_region(self)\n        yield self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html#pygerber.gerberx3.parser2.commands2.region2.Region2.command_to_json","title":"command_to_json","text":"<pre><code>command_to_json() -&gt; str\n</code></pre> <p>Dump draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/region2.py</code> <pre><code>    def command_to_json(self) -&gt; str:\n        \"\"\"Dump draw operation.\"\"\"\n        return f\"\"\"{{ \"cls\": \"{self.__module__}.{self.__class__.__qualname__}\", \"dict\": {{\n        \"polarity\": \"{self.transform.polarity.value}\",\n        \"aperture_attributes\": {self.aperture_attributes.model_dump_json()},\n        \"command_buffer\": {self.command_buffer.model_dump_json()},\n        \"command_buffer\": {\n            self.command_buffer.debug_buffer_to_json(8)}\n    }}\n}}\"\"\"  # noqa: E501\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html#pygerber.gerberx3.parser2.commands2.region2.Region2.render","title":"render","text":"<pre><code>render(renderer: Renderer2) -&gt; None\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/region2.py</code> <pre><code>def render(self, renderer: Renderer2) -&gt; None:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_region(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/commands2/region2.html#pygerber.gerberx3.parser2.commands2.region2.Region2.render_iter","title":"render_iter","text":"<pre><code>render_iter(\n    renderer: Renderer2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Render draw operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/commands2/region2.py</code> <pre><code>def render_iter(self, renderer: Renderer2) -&gt; Generator[Command2, None, None]:\n    \"\"\"Render draw operation.\"\"\"\n    renderer.hooks.render_region(self)\n    yield self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/__init__.html#pygerber.gerberx3.parser2.macro2","title":"macro2","text":"<p>Macro elements used to construct a macro aperture template.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/assignment2.html","title":"assignment2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/assignment2.html#pygerber.gerberx3.parser2.macro2.assignment2","title":"assignment2","text":"<p><code>assignment2</code> module contains a <code>Assignment2</code> class wrapping variable assignment within macro definition.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/assignment2.html#pygerber.gerberx3.parser2.macro2.assignment2.Assignment2","title":"Assignment2","text":"<p>             Bases: <code>Statement2</code></p> <p>Variable assignment.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/assignment2.py</code> <pre><code>class Assignment2(Statement2):\n    \"\"\"Variable assignment.\"\"\"\n\n    variable_name: str\n    value: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_assignment(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/assignment2.html#pygerber.gerberx3.parser2.macro2.assignment2.Assignment2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/assignment2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_assignment(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/element2.html","title":"element2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/element2.html#pygerber.gerberx3.parser2.macro2.element2","title":"element2","text":"<p>Base class for creating macro elements.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/element2.html#pygerber.gerberx3.parser2.macro2.element2.Element2","title":"Element2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Base class for creating macro elements.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/element2.py</code> <pre><code>class Element2(FrozenGeneralModel):\n    \"\"\"Base class for creating macro elements.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/enums.html","title":"enums","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/enums.html#pygerber.gerberx3.parser2.macro2.enums","title":"enums","text":"<p><code>enums</code> module contains Exposure2 enumeration containing possible macro primitive exposures.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/enums.html#pygerber.gerberx3.parser2.macro2.enums.Exposure","title":"Exposure","text":"<p>             Bases: <code>Enum</code></p> <p>Macro primitive exposure.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/enums.py</code> <pre><code>class Exposure(Enum):\n    \"\"\"Macro primitive exposure.\"\"\"\n\n    ON = 1\n    OFF = 0\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/macro2.html","title":"macro2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/macro2.html#pygerber.gerberx3.parser2.macro2.macro2","title":"macro2","text":"<p>Container for aperture macro elements.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/macro2.html#pygerber.gerberx3.parser2.macro2.macro2.ApertureMacro2","title":"ApertureMacro2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Container for the elements contained within an aperture macro.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/macro2.py</code> <pre><code>class ApertureMacro2(FrozenGeneralModel):\n    \"\"\"Container for the elements contained within an aperture macro.\"\"\"\n\n    name: str\n    statements: ReadonlyStatementBuffer2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        for stmt in self.statements:\n            stmt.on_parser2_eval_statement(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/macro2.html#pygerber.gerberx3.parser2.macro2.macro2.ApertureMacro2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/macro2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    for stmt in self.statements:\n        stmt.on_parser2_eval_statement(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/point2.html","title":"point2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/point2.html#pygerber.gerberx3.parser2.macro2.point2","title":"point2","text":"<p>Container for two macro expressions tied together as point in 2D space.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/point2.html#pygerber.gerberx3.parser2.macro2.point2.Point2","title":"Point2","text":"<p>             Bases: <code>Element2</code></p> <p>Pair of two expressions representing a point in 2D space.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/point2.py</code> <pre><code>class Point2(Element2):\n    \"\"\"Pair of two expressions representing a point in 2D space.\"\"\"\n\n    x: Expression2\n    y: Expression2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement2.html","title":"statement2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement2.html#pygerber.gerberx3.parser2.macro2.statement2","title":"statement2","text":"<p>Macro statement base class.</p> <p>A statement is everything what have to appear alone, for example a primitive or a variable assignment. Statements by themselves can't be reduced to numerical value during macro evaluation.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement2.html#pygerber.gerberx3.parser2.macro2.statement2.Statement2","title":"Statement2","text":"<p>             Bases: <code>Element2</code></p> <p>Macro statement base class.</p> <p>A statement is everything what have to appear alone, for example a primitive or a variable assignment. Statements by themselves can't be reduced to numerical value during macro evaluation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement2.py</code> <pre><code>class Statement2(Element2):\n    \"\"\"Macro statement base class.\n\n    A statement is everything what have to appear alone, for example a primitive or a\n    variable assignment. Statements by themselves can't be reduced to numerical value\n    during macro evaluation.\n    \"\"\"\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement2.html#pygerber.gerberx3.parser2.macro2.statement2.Statement2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html","title":"statement_buffer2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2","title":"statement_buffer2","text":"<p>Module contains class `StatementBuffer2 for macro statements.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.StatementBuffer2","title":"StatementBuffer2","text":"<p>Buffer for macro statements.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>class StatementBuffer2:\n    \"\"\"Buffer for macro statements.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self.statements: list[Statement2] = []\n\n    def add_statement(self, statement: Statement2) -&gt; None:\n        \"\"\"Append a complete statement to the buffer.\"\"\"\n        self.statements.append(statement)\n\n    def get_readonly(self) -&gt; ReadonlyStatementBuffer2:\n        \"\"\"Return readonly buffer.\"\"\"\n        return ReadonlyStatementBuffer2(statements=self.statements)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.StatementBuffer2.add_statement","title":"add_statement","text":"<pre><code>add_statement(statement: Statement2) -&gt; None\n</code></pre> <p>Append a complete statement to the buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>def add_statement(self, statement: Statement2) -&gt; None:\n    \"\"\"Append a complete statement to the buffer.\"\"\"\n    self.statements.append(statement)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.StatementBuffer2.get_readonly","title":"get_readonly","text":"<pre><code>get_readonly() -&gt; ReadonlyStatementBuffer2\n</code></pre> <p>Return readonly buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>def get_readonly(self) -&gt; ReadonlyStatementBuffer2:\n    \"\"\"Return readonly buffer.\"\"\"\n    return ReadonlyStatementBuffer2(statements=self.statements)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.ReadonlyStatementBuffer2","title":"ReadonlyStatementBuffer2","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Read-only macro statement buffer.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>class ReadonlyStatementBuffer2(FrozenGeneralModel):\n    \"\"\"Read-only macro statement buffer.\"\"\"\n\n    statements: List[Statement2]\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return length of buffered commands.\"\"\"\n        return len(self.statements)\n\n    def __iter__(self) -&gt; Iterator[Statement2]:  # type: ignore[override]\n        \"\"\"Iterate over buffered draw commands.\"\"\"\n        yield from self.statements\n\n    def __getitem__(self, position: int) -&gt; Statement2:\n        \"\"\"Get draw command at position.\"\"\"\n        return self.statements[position]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.ReadonlyStatementBuffer2.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return length of buffered commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return length of buffered commands.\"\"\"\n    return len(self.statements)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.ReadonlyStatementBuffer2.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Statement2]\n</code></pre> <p>Iterate over buffered draw commands.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>def __iter__(self) -&gt; Iterator[Statement2]:  # type: ignore[override]\n    \"\"\"Iterate over buffered draw commands.\"\"\"\n    yield from self.statements\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/statement_buffer2.html#pygerber.gerberx3.parser2.macro2.statement_buffer2.ReadonlyStatementBuffer2.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(position: int) -&gt; Statement2\n</code></pre> <p>Get draw command at position.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/statement_buffer2.py</code> <pre><code>def __getitem__(self, position: int) -&gt; Statement2:\n    \"\"\"Get draw command at position.\"\"\"\n    return self.statements[position]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/__init__.html#pygerber.gerberx3.parser2.macro2.expressions2","title":"expressions2","text":"<p><code>expressions2</code> package contains all macro expressions.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html","title":"binary2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2","title":"binary2","text":"<p><code>binary2</code> module contain classes wrapping binary operations within macro.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.BinaryOperator2","title":"BinaryOperator2","text":"<p>             Bases: <code>Expression2</code></p> <p>Single binary operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>class BinaryOperator2(Expression2):\n    \"\"\"Single binary operation.\"\"\"\n\n    lhs: Expression2\n    rhs: Expression2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Addition2","title":"Addition2","text":"<p>             Bases: <code>BinaryOperator2</code></p> <p>Addition expression.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>class Addition2(BinaryOperator2):\n    \"\"\"Addition expression.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.lhs.on_parser2_eval_expression(\n            context,\n        ) + self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Addition2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.lhs.on_parser2_eval_expression(\n        context,\n    ) + self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Subtraction2","title":"Subtraction2","text":"<p>             Bases: <code>BinaryOperator2</code></p> <p>Subtract expression.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>class Subtraction2(BinaryOperator2):\n    \"\"\"Subtract expression.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.lhs.on_parser2_eval_expression(\n            context,\n        ) - self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Subtraction2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.lhs.on_parser2_eval_expression(\n        context,\n    ) - self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Multiplication2","title":"Multiplication2","text":"<p>             Bases: <code>BinaryOperator2</code></p> <p>Multiply expression.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>class Multiplication2(BinaryOperator2):\n    \"\"\"Multiply expression.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.lhs.on_parser2_eval_expression(\n            context,\n        ) * self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Multiplication2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.lhs.on_parser2_eval_expression(\n        context,\n    ) * self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Division2","title":"Division2","text":"<p>             Bases: <code>BinaryOperator2</code></p> <p>Divide expression.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>class Division2(BinaryOperator2):\n    \"\"\"Divide expression.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.lhs.on_parser2_eval_expression(\n            context,\n        ) / self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/binary2.html#pygerber.gerberx3.parser2.macro2.expressions2.binary2.Division2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/binary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.lhs.on_parser2_eval_expression(\n        context,\n    ) / self.rhs.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/constant2.html","title":"constant2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/constant2.html#pygerber.gerberx3.parser2.macro2.expressions2.constant2","title":"constant2","text":"<p><code>constant2</code> module contain class wrapping constant value in macro definition.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/constant2.html#pygerber.gerberx3.parser2.macro2.expressions2.constant2.Constant2","title":"Constant2","text":"<p>             Bases: <code>Expression2</code></p> <p>Class wrapping constant value in macro definition.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/constant2.py</code> <pre><code>class Constant2(Expression2):\n    \"\"\"Class wrapping constant value in macro definition.\"\"\"\n\n    value: Decimal\n\n    def on_parser2_eval_expression(\n        self,\n        context: Parser2Context,  # noqa: ARG002\n    ) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/constant2.html#pygerber.gerberx3.parser2.macro2.expressions2.constant2.Constant2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/constant2.py</code> <pre><code>def on_parser2_eval_expression(\n    self,\n    context: Parser2Context,  # noqa: ARG002\n) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/expression2.html","title":"expression2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/expression2.html#pygerber.gerberx3.parser2.macro2.expressions2.expression2","title":"expression2","text":"<p>Macro expression base class, a part which can be used to build more complicated expressions.</p> <p>Example of macro expression would be a variable reference, a constant or addition, everything what can be composed into more complicated structures, but doesn't appear alone as a macro content. Expressions can be reduced to numerical value during macro evaluation.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/expression2.html#pygerber.gerberx3.parser2.macro2.expressions2.expression2.Expression2","title":"Expression2","text":"<p>             Bases: <code>Element2</code></p> <p>Macro expression base class, a part which can be used to build more complicated expressions.</p> <p>Example of macro expression would be a variable reference, a constant or addition, everything what can be composed into more complicated structures, but doesn't appear alone as a macro content. Expressions can be reduced to numerical value during macro evaluation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/expression2.py</code> <pre><code>class Expression2(Element2):\n    \"\"\"Macro expression base class, a part which can be used to build more complicated\n    expressions.\n\n    Example of macro expression would be a variable reference, a constant or addition,\n    everything what can be composed into more complicated structures, but doesn't appear\n    alone as a macro content. Expressions can be reduced to numerical value during macro\n    evaluation.\n    \"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/expression2.html#pygerber.gerberx3.parser2.macro2.expressions2.expression2.Expression2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/expression2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html","title":"unary2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2","title":"unary2","text":"<p><code>unary2</code> module contain classes wrapping unary operations within macro.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2.UnaryOperator2","title":"UnaryOperator2","text":"<p>             Bases: <code>Expression2</code></p> <p>Single binary operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/unary2.py</code> <pre><code>class UnaryOperator2(Expression2):\n    \"\"\"Single binary operation.\"\"\"\n\n    op: Expression2\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2.Negation2","title":"Negation2","text":"<p>             Bases: <code>UnaryOperator2</code></p> <p>Unary minus operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/unary2.py</code> <pre><code>class Negation2(UnaryOperator2):\n    \"\"\"Unary minus operation.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return -self.op.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2.Negation2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/unary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return -self.op.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2.Positive2","title":"Positive2","text":"<p>             Bases: <code>UnaryOperator2</code></p> <p>Unary plus operation.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/unary2.py</code> <pre><code>class Positive2(UnaryOperator2):\n    \"\"\"Unary plus operation.\"\"\"\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return self.op.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/unary2.html#pygerber.gerberx3.parser2.macro2.expressions2.unary2.Positive2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/unary2.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return self.op.on_parser2_eval_expression(context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.html","title":"variable_name","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.html#pygerber.gerberx3.parser2.macro2.expressions2.variable_name","title":"variable_name","text":"<p>Module <code>variable_name.py</code> contains a class <code>VariableName</code> used to wrap variable name.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.html#pygerber.gerberx3.parser2.macro2.expressions2.variable_name.VariableName2","title":"VariableName2","text":"<p>             Bases: <code>Expression2</code></p> <p>Class wrapping variable name in macro definition.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.py</code> <pre><code>class VariableName2(Expression2):\n    \"\"\"Class wrapping variable name in macro definition.\"\"\"\n\n    name: str\n\n    def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n        \"\"\"Reduce expression to numerical value.\"\"\"\n        return context.macro_variable_buffer[self.name]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.html#pygerber.gerberx3.parser2.macro2.expressions2.variable_name.VariableName2.on_parser2_eval_expression","title":"on_parser2_eval_expression","text":"<pre><code>on_parser2_eval_expression(\n    context: Parser2Context,\n) -&gt; Decimal\n</code></pre> <p>Reduce expression to numerical value.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/expressions2/variable_name.py</code> <pre><code>def on_parser2_eval_expression(self, context: Parser2Context) -&gt; Decimal:\n    \"\"\"Reduce expression to numerical value.\"\"\"\n    return context.macro_variable_buffer[self.name]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/__init__.html#pygerber.gerberx3.parser2.macro2.primitives2","title":"primitives2","text":"<p>Package primitives2 contain all macro primitives.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.html","title":"code_1_circle2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_1_circle2","title":"code_1_circle2","text":"<p>Macro primitive circle.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_1_circle2.Code1Circle2","title":"Code1Circle2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Circle macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.py</code> <pre><code>class Code1Circle2(Primitive2):\n    \"\"\"Circle macro primitive.\"\"\"\n\n    exposure: Expression2\n    diameter: Expression2\n    center_x: Expression2\n    center_y: Expression2\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_1_circle(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_1_circle2.Code1Circle2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_1_circle2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_1_circle(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.html","title":"code_20_vector_line2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_20_vector_line2","title":"code_20_vector_line2","text":"<p>Macro primitive vector line.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_20_vector_line2.Code20VectorLine2","title":"Code20VectorLine2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Vector line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.py</code> <pre><code>class Code20VectorLine2(Primitive2):\n    \"\"\"Vector line macro primitive.\"\"\"\n\n    exposure: Expression2\n    width: Expression2\n    start_x: Expression2\n    start_y: Expression2\n    end_x: Expression2\n    end_y: Expression2\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_20_vector_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_20_vector_line2.Code20VectorLine2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_20_vector_line2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_20_vector_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.html","title":"code_21_center_line2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_21_center_line2","title":"code_21_center_line2","text":"<p>Macro primitive center line.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_21_center_line2.Code21CenterLine2","title":"Code21CenterLine2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Center line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.py</code> <pre><code>class Code21CenterLine2(Primitive2):\n    \"\"\"Center line macro primitive.\"\"\"\n\n    exposure: Expression2\n    width: Expression2\n    height: Expression2\n    center_x: Expression2\n    center_y: Expression2\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_21_center_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_21_center_line2.Code21CenterLine2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_21_center_line2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_21_center_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.html","title":"code_22_lower_left_line2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_22_lower_left_line2","title":"code_22_lower_left_line2","text":"<p>Code 22 lower left line macro primitive.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_22_lower_left_line2.Code22LowerLeftLine2","title":"Code22LowerLeftLine2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Code 22 lower left line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.py</code> <pre><code>class Code22LowerLeftLine2(Primitive2):\n    \"\"\"Code 22 lower left line macro primitive.\"\"\"\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_22_lower_left_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_22_lower_left_line2.Code22LowerLeftLine2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_22_lower_left_line2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_22_lower_left_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.html","title":"code_2_vector_line2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_2_vector_line2","title":"code_2_vector_line2","text":"<p>Vector line macro primitive.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_2_vector_line2.Code2VectorLine2","title":"Code2VectorLine2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Vector line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.py</code> <pre><code>class Code2VectorLine2(Primitive2):\n    \"\"\"Vector line macro primitive.\"\"\"\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_2_vector_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_2_vector_line2.Code2VectorLine2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_2_vector_line2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_2_vector_line(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.html","title":"code_4_outline2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_4_outline2","title":"code_4_outline2","text":"<p>Outline macro primitive.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_4_outline2.Code4Outline2","title":"Code4Outline2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Vector line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.py</code> <pre><code>class Code4Outline2(Primitive2):\n    \"\"\"Vector line macro primitive.\"\"\"\n\n    exposure: Expression2\n    vertex_count: Expression2\n    start_x: Expression2\n    start_y: Expression2\n    points: List[Point2]\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_4_outline(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_4_outline2.Code4Outline2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_4_outline2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_4_outline(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.html","title":"code_5_polygon2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_5_polygon2","title":"code_5_polygon2","text":"<p>Macro primitive polygon.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_5_polygon2.Code5Polygon2","title":"Code5Polygon2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Polygon macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.py</code> <pre><code>class Code5Polygon2(Primitive2):\n    \"\"\"Polygon macro primitive.\"\"\"\n\n    # 5 Polygon Exposure, # vertices, Center X, Center Y, Diameter, Rotation 4.5.1.7\n\n    exposure: Expression2\n    number_of_vertices: Expression2\n    center_x: Expression2\n    center_y: Expression2\n    diameter: Expression2\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_5_polygon(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_5_polygon2.Code5Polygon2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_5_polygon2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_5_polygon(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.html","title":"code_6_moire2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_6_moire2","title":"code_6_moire2","text":"<p>Macro primitive Moire.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_6_moire2.Code6Moire2","title":"Code6Moire2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Moire macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.py</code> <pre><code>class Code6Moire2(Primitive2):\n    \"\"\"Moire macro primitive.\"\"\"\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_6_moire(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_6_moire2.Code6Moire2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_6_moire2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_6_moire(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.html","title":"code_7_thermal2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_7_thermal2","title":"code_7_thermal2","text":"<p>Thermal macro primitive.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_7_thermal2.Code7Thermal2","title":"Code7Thermal2","text":"<p>             Bases: <code>Primitive2</code></p> <p>Thermal macro primitive.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.py</code> <pre><code>class Code7Thermal2(Primitive2):\n    \"\"\"Thermal macro primitive.\"\"\"\n\n    center_x: Expression2\n    center_y: Expression2\n    outer_diameter: Expression2\n    inner_diameter: Expression2\n    gap: Expression2\n    rotation: Expression2\n\n    def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n        \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n        context.hooks.macro_eval.on_code_7_thermal(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.html#pygerber.gerberx3.parser2.macro2.primitives2.code_7_thermal2.Code7Thermal2.on_parser2_eval_statement","title":"on_parser2_eval_statement","text":"<pre><code>on_parser2_eval_statement(context: Parser2Context) -&gt; None\n</code></pre> <p>Evaluate macro to create concrete macro aperture.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/code_7_thermal2.py</code> <pre><code>def on_parser2_eval_statement(self, context: Parser2Context) -&gt; None:\n    \"\"\"Evaluate macro to create concrete macro aperture.\"\"\"\n    context.hooks.macro_eval.on_code_7_thermal(context, self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/primitive2.html","title":"primitive2","text":""},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/primitive2.html#pygerber.gerberx3.parser2.macro2.primitives2.primitive2","title":"primitive2","text":"<p>Macro primitive base class.</p>"},{"location":"reference/pygerber/gerberx3/parser2/macro2/primitives2/primitive2.html#pygerber.gerberx3.parser2.macro2.primitives2.primitive2.Primitive2","title":"Primitive2","text":"<p>             Bases: <code>Statement2</code></p> <p>Macro primitive base class.</p> Source code in <code>src/pygerber/gerberx3/parser2/macro2/primitives2/primitive2.py</code> <pre><code>class Primitive2(Statement2):\n    \"\"\"Macro primitive base class.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/renderer2/__init__.html#pygerber.gerberx3.renderer2","title":"renderer2","text":"<p>Package <code>backend2</code> contains classes implementing Gerber rendering for command buffers generated by Parser2 based Gerber source.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html","title":"abstract","text":""},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract","title":"abstract","text":"<p>Module contains base class Rendering backend for Parser2 based Gerber data structures.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2","title":"Renderer2","text":"<p>Rendering backend base class for Parser2 based Gerber data structures.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>class Renderer2:\n    \"\"\"Rendering backend base class for Parser2 based Gerber data structures.\"\"\"\n\n    def __init__(self, hooks: Renderer2HooksABC) -&gt; None:\n        self.hooks = hooks\n\n    def render(self, command_buffer: ReadonlyCommandBuffer2) -&gt; ImageRef:\n        \"\"\"Render Gerber structures.\"\"\"\n        for _ in self.render_iter(command_buffer):\n            pass\n\n        return self.get_image_ref()\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        return self.hooks.get_image_ref()\n\n    def render_iter(\n        self,\n        command_buffer: ReadonlyCommandBuffer2,\n    ) -&gt; Generator[Command2, None, None]:\n        \"\"\"Iterate over commands in buffer and render image for each command.\"\"\"\n        self.hooks.init(self, command_buffer)\n        for command in command_buffer:\n            yield from command.render_iter(self)\n        self.hooks.finalize()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2.render","title":"render","text":"<pre><code>render(command_buffer: ReadonlyCommandBuffer2) -&gt; ImageRef\n</code></pre> <p>Render Gerber structures.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render(self, command_buffer: ReadonlyCommandBuffer2) -&gt; ImageRef:\n    \"\"\"Render Gerber structures.\"\"\"\n    for _ in self.render_iter(command_buffer):\n        pass\n\n    return self.get_image_ref()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    return self.hooks.get_image_ref()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2.render_iter","title":"render_iter","text":"<pre><code>render_iter(\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Iterate over commands in buffer and render image for each command.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_iter(\n    self,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; Generator[Command2, None, None]:\n    \"\"\"Iterate over commands in buffer and render image for each command.\"\"\"\n    self.hooks.init(self, command_buffer)\n    for command in command_buffer:\n        yield from command.render_iter(self)\n    self.hooks.finalize()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC","title":"Renderer2HooksABC","text":"<p>Hooks for implementing rendering of Gerber structures to a target format.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>class Renderer2HooksABC:\n    \"\"\"Hooks for implementing rendering of Gerber structures to a target format.\"\"\"\n\n    def init(self, renderer: Renderer2, command_buffer: ReadonlyCommandBuffer2) -&gt; None:\n        \"\"\"Initialize rendering.\"\"\"\n        self.renderer = renderer\n        self.command_buffer = command_buffer\n\n    def render_line(self, command: Line2) -&gt; None:\n        \"\"\"Render line to target image.\"\"\"\n\n    def render_arc(self, command: Arc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n\n    def render_cc_arc(self, command: CCArc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n\n    def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n        \"\"\"Render flash circle to target image.\"\"\"\n\n    def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n        \"\"\"Render flash no circle aperture to target image.\"\"\"\n\n    def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n        \"\"\"Render flash rectangle to target image.\"\"\"\n\n    def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n        \"\"\"Render flash obround to target image.\"\"\"\n\n    def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n        \"\"\"Render flash polygon to target image.\"\"\"\n\n    def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n        \"\"\"Render flash macro aperture to target image.\"\"\"\n\n    def render_buffer(self, command: BufferCommand2) -&gt; Generator[Command2, None, None]:\n        \"\"\"Render buffer command, performing no writes.\"\"\"\n        for cmd in command:\n            cmd.render(self.renderer)\n            yield cmd\n\n    def render_region(self, command: Region2) -&gt; None:\n        \"\"\"Render region to target image.\"\"\"\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        raise NotImplementedError\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize rendering.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.init","title":"init","text":"<pre><code>init(\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None\n</code></pre> <p>Initialize rendering.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def init(self, renderer: Renderer2, command_buffer: ReadonlyCommandBuffer2) -&gt; None:\n    \"\"\"Initialize rendering.\"\"\"\n    self.renderer = renderer\n    self.command_buffer = command_buffer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_line","title":"render_line","text":"<pre><code>render_line(command: Line2) -&gt; None\n</code></pre> <p>Render line to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_line(self, command: Line2) -&gt; None:\n    \"\"\"Render line to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_arc","title":"render_arc","text":"<pre><code>render_arc(command: Arc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_arc(self, command: Arc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_cc_arc","title":"render_cc_arc","text":"<pre><code>render_cc_arc(command: CCArc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_cc_arc(self, command: CCArc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_circle","title":"render_flash_circle","text":"<pre><code>render_flash_circle(\n    command: Flash2, aperture: Circle2\n) -&gt; None\n</code></pre> <p>Render flash circle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n    \"\"\"Render flash circle to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_no_circle","title":"render_flash_no_circle","text":"<pre><code>render_flash_no_circle(\n    command: Flash2, aperture: NoCircle2\n) -&gt; None\n</code></pre> <p>Render flash no circle aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n    \"\"\"Render flash no circle aperture to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_rectangle","title":"render_flash_rectangle","text":"<pre><code>render_flash_rectangle(\n    command: Flash2, aperture: Rectangle2\n) -&gt; None\n</code></pre> <p>Render flash rectangle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n    \"\"\"Render flash rectangle to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_obround","title":"render_flash_obround","text":"<pre><code>render_flash_obround(\n    command: Flash2, aperture: Obround2\n) -&gt; None\n</code></pre> <p>Render flash obround to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n    \"\"\"Render flash obround to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_polygon","title":"render_flash_polygon","text":"<pre><code>render_flash_polygon(\n    command: Flash2, aperture: Polygon2\n) -&gt; None\n</code></pre> <p>Render flash polygon to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n    \"\"\"Render flash polygon to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_flash_macro","title":"render_flash_macro","text":"<pre><code>render_flash_macro(\n    command: Flash2, aperture: Macro2\n) -&gt; None\n</code></pre> <p>Render flash macro aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n    \"\"\"Render flash macro aperture to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_buffer","title":"render_buffer","text":"<pre><code>render_buffer(\n    command: BufferCommand2,\n) -&gt; Generator[Command2, None, None]\n</code></pre> <p>Render buffer command, performing no writes.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_buffer(self, command: BufferCommand2) -&gt; Generator[Command2, None, None]:\n    \"\"\"Render buffer command, performing no writes.\"\"\"\n    for cmd in command:\n        cmd.render(self.renderer)\n        yield cmd\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.render_region","title":"render_region","text":"<pre><code>render_region(command: Region2) -&gt; None\n</code></pre> <p>Render region to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def render_region(self, command: Region2) -&gt; None:\n    \"\"\"Render region to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.Renderer2HooksABC.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize rendering.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize rendering.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.ImageRef","title":"ImageRef","text":"<p>Generic container for reference to rendered image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>class ImageRef:\n    \"\"\"Generic container for reference to rendered image.\"\"\"\n\n    def save_to(\n        self,\n        dest: BytesIO | Path | str,\n        options: Optional[FormatOptions] = None,\n    ) -&gt; None:\n        \"\"\"Save rendered image.\"\"\"\n        if isinstance(dest, str):\n            dest = Path(dest)\n        if isinstance(dest, Path):\n            with dest.open(\"wb\") as output:\n                return self._save_to_io(output, options)\n        else:\n            return self._save_to_io(dest, options)\n\n    def _save_to_io(\n        self,\n        output: BinaryIO,\n        options: Optional[FormatOptions] = None,\n    ) -&gt; None:\n        \"\"\"Save rendered image to bytes stream buffer.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.ImageRef.save_to","title":"save_to","text":"<pre><code>save_to(\n    dest: BytesIO | Path | str,\n    options: Optional[FormatOptions] = None,\n) -&gt; None\n</code></pre> <p>Save rendered image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>def save_to(\n    self,\n    dest: BytesIO | Path | str,\n    options: Optional[FormatOptions] = None,\n) -&gt; None:\n    \"\"\"Save rendered image.\"\"\"\n    if isinstance(dest, str):\n        dest = Path(dest)\n    if isinstance(dest, Path):\n        with dest.open(\"wb\") as output:\n            return self._save_to_io(output, options)\n    else:\n        return self._save_to_io(dest, options)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/abstract.html#pygerber.gerberx3.renderer2.abstract.FormatOptions","title":"FormatOptions","text":"<p>Base class for representing of possible format options.</p> Source code in <code>src/pygerber/gerberx3/renderer2/abstract.py</code> <pre><code>class FormatOptions:\n    \"\"\"Base class for representing of possible format options.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/errors2.html","title":"errors2","text":""},{"location":"reference/pygerber/gerberx3/renderer2/errors2.html#pygerber.gerberx3.renderer2.errors2","title":"errors2","text":"<p>Module contains exceptions raised by rendering backends.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/errors2.html#pygerber.gerberx3.renderer2.errors2.Renderer2Error","title":"Renderer2Error","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for exceptions raised by rendering backends.</p> Source code in <code>src/pygerber/gerberx3/renderer2/errors2.py</code> <pre><code>class Renderer2Error(Exception):\n    \"\"\"Base class for exceptions raised by rendering backends.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/errors2.html#pygerber.gerberx3.renderer2.errors2.SvgRenderer2Error","title":"SvgRenderer2Error","text":"<p>             Bases: <code>Renderer2Error</code></p> <p>Error raised by SVG rendering backend.</p> Source code in <code>src/pygerber/gerberx3/renderer2/errors2.py</code> <pre><code>class SvgRenderer2Error(Renderer2Error):\n    \"\"\"Error raised by SVG rendering backend.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/errors2.html#pygerber.gerberx3.renderer2.errors2.DRAWSVGNotAvailableError","title":"DRAWSVGNotAvailableError","text":"<p>             Bases: <code>SvgRenderer2Error</code></p> <p>Raised when <code>drawsvg</code> can't be imported, probably because it was not installed.</p> <p>You can install it with <code>pip install pygerber[svg]</code>.</p> Source code in <code>src/pygerber/gerberx3/renderer2/errors2.py</code> <pre><code>class DRAWSVGNotAvailableError(SvgRenderer2Error):\n    \"\"\"Raised when `drawsvg` can't be imported, probably because it was not installed.\n\n    You can install it with `pip install pygerber[svg]`.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__(\n            \"`drawsvg` library is not available. \"\n            \"Install it with `pip install pygerber[svg]`.\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html","title":"raster","text":""},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster","title":"raster","text":"<p>Module contains implementation of Gerber rendering backend outputting raster images.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2","title":"RasterRenderer2","text":"<p>             Bases: <code>Renderer2</code></p> <p>Rendering backend for creating raster images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderer2(Renderer2):\n    \"\"\"Rendering backend for creating raster images.\"\"\"\n\n    def __init__(\n        self,\n        hooks: Optional[RasterRenderer2Hooks] = None,\n    ) -&gt; None:\n        hooks = RasterRenderer2Hooks() if hooks is None else hooks\n        super().__init__(hooks)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder","title":"RasterRenderingFrameBuilder","text":"<p>Builder for RasterRenderingFrame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderingFrameBuilder:\n    \"\"\"Builder for RasterRenderingFrame.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self.command_buffer: Optional[ReadonlyCommandBuffer2] = None\n        self.bounding_box: Optional[BoundingBox] = None\n        self.image: Optional[Image.Image] = None\n        self.mask: Optional[Image.Image] = None\n        self.color_scheme: Optional[ColorScheme] = None\n        self.is_region: bool = False\n        self.dpmm = 1\n        self.scale = Decimal(\"1\")\n        self.polarity: Optional[Polarity] = None\n        self.x_offset = 0\n        self.y_offset = 0\n\n    def set_command_buffer(self, command_buffer: ReadonlyCommandBuffer2) -&gt; Self:\n        \"\"\"Specify source buffer.\"\"\"\n        self.command_buffer = command_buffer\n        return self\n\n    def set_command_buffer_from_list(self, commands: list[Command2]) -&gt; Self:\n        \"\"\"Specify source buffer.\"\"\"\n        self.command_buffer = ReadonlyCommandBuffer2(commands=commands)\n        return self\n\n    def set_dpmm(self, dpmm: int) -&gt; Self:\n        \"\"\"Specify image dpmm.\"\"\"\n        self.dpmm = dpmm\n        return self\n\n    def set_scale(self, scale: Decimal) -&gt; Self:\n        \"\"\"Specify rendering scale.\"\"\"\n        self.scale = scale\n        return self\n\n    def set_image(self, image: Image.Image) -&gt; Self:\n        \"\"\"Specify image.\"\"\"\n        self.image = image\n        return self\n\n    def set_mask(self, mask: Image.Image) -&gt; Self:\n        \"\"\"Specify mask.\"\"\"\n        self.mask = mask\n        return self\n\n    def set_region(self, *, is_region: bool) -&gt; Self:\n        \"\"\"Specify region.\"\"\"\n        self.is_region = is_region\n        return self\n\n    def set_color_scheme(self, color_scheme: ColorScheme) -&gt; Self:\n        \"\"\"Specify color scheme.\"\"\"\n        self.color_scheme = color_scheme\n        return self\n\n    def set_polarity(self, polarity: Polarity) -&gt; Self:\n        \"\"\"Specify polarity.\"\"\"\n        self.polarity = polarity\n        return self\n\n    def set_pixel_dimension_offsets(self, x: int = 0, y: int = 0) -&gt; Self:\n        \"\"\"Set pixel dimension offsets.\"\"\"\n        self.x_offset = x\n        self.y_offset = y\n        return self\n\n    def build(self, *, with_mask: bool = True) -&gt; RasterRenderingFrame:\n        \"\"\"Build final rendering frame container.\"\"\"\n        command_buffer = (\n            self.command_buffer\n            if self.command_buffer is not None\n            else throw(RuntimeError(\"Command buffer not set.\"))\n        )\n        bbox = (\n            command_buffer.get_bounding_box()\n            if self.bounding_box is None\n            else self.bounding_box\n        )\n        dimensions = (\n            max(custom_round(bbox.width.as_millimeters() * self.dpmm * self.scale), 1)\n            + self.x_offset,\n            max(custom_round(bbox.height.as_millimeters() * self.dpmm * self.scale), 1)\n            + self.y_offset,\n        )\n        image = (\n            Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n            if self.image is None\n            else self.image\n        )\n        mask = (\n            (\n                Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n                if self.mask is None\n                else self.mask\n            )\n            if with_mask\n            else None\n        )\n        color_scheme = self.color_scheme or throw(RuntimeError(\"Missing color schema.\"))\n        polarity = self.polarity or throw(RuntimeError(\"Missing polarity.\"))\n        # Unset command buffer to prevent unintended reuse.\n        self.command_buffer = None\n        self.polarity = None\n\n        return RasterRenderingFrame(\n            command_buffer=command_buffer,\n            bounding_box=bbox,\n            image=image,\n            mask=mask,\n            color_scheme=color_scheme,\n            polarity=polarity,\n            is_region=self.is_region,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_command_buffer","title":"set_command_buffer","text":"<pre><code>set_command_buffer(\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; Self\n</code></pre> <p>Specify source buffer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_command_buffer(self, command_buffer: ReadonlyCommandBuffer2) -&gt; Self:\n    \"\"\"Specify source buffer.\"\"\"\n    self.command_buffer = command_buffer\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_command_buffer_from_list","title":"set_command_buffer_from_list","text":"<pre><code>set_command_buffer_from_list(\n    commands: list[Command2],\n) -&gt; Self\n</code></pre> <p>Specify source buffer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_command_buffer_from_list(self, commands: list[Command2]) -&gt; Self:\n    \"\"\"Specify source buffer.\"\"\"\n    self.command_buffer = ReadonlyCommandBuffer2(commands=commands)\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_dpmm","title":"set_dpmm","text":"<pre><code>set_dpmm(dpmm: int) -&gt; Self\n</code></pre> <p>Specify image dpmm.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_dpmm(self, dpmm: int) -&gt; Self:\n    \"\"\"Specify image dpmm.\"\"\"\n    self.dpmm = dpmm\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_scale","title":"set_scale","text":"<pre><code>set_scale(scale: Decimal) -&gt; Self\n</code></pre> <p>Specify rendering scale.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_scale(self, scale: Decimal) -&gt; Self:\n    \"\"\"Specify rendering scale.\"\"\"\n    self.scale = scale\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_image","title":"set_image","text":"<pre><code>set_image(image: Image.Image) -&gt; Self\n</code></pre> <p>Specify image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_image(self, image: Image.Image) -&gt; Self:\n    \"\"\"Specify image.\"\"\"\n    self.image = image\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_mask","title":"set_mask","text":"<pre><code>set_mask(mask: Image.Image) -&gt; Self\n</code></pre> <p>Specify mask.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_mask(self, mask: Image.Image) -&gt; Self:\n    \"\"\"Specify mask.\"\"\"\n    self.mask = mask\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_region","title":"set_region","text":"<pre><code>set_region(*, is_region: bool) -&gt; Self\n</code></pre> <p>Specify region.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_region(self, *, is_region: bool) -&gt; Self:\n    \"\"\"Specify region.\"\"\"\n    self.is_region = is_region\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_color_scheme","title":"set_color_scheme","text":"<pre><code>set_color_scheme(color_scheme: ColorScheme) -&gt; Self\n</code></pre> <p>Specify color scheme.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_color_scheme(self, color_scheme: ColorScheme) -&gt; Self:\n    \"\"\"Specify color scheme.\"\"\"\n    self.color_scheme = color_scheme\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_polarity","title":"set_polarity","text":"<pre><code>set_polarity(polarity: Polarity) -&gt; Self\n</code></pre> <p>Specify polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_polarity(self, polarity: Polarity) -&gt; Self:\n    \"\"\"Specify polarity.\"\"\"\n    self.polarity = polarity\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.set_pixel_dimension_offsets","title":"set_pixel_dimension_offsets","text":"<pre><code>set_pixel_dimension_offsets(x: int = 0, y: int = 0) -&gt; Self\n</code></pre> <p>Set pixel dimension offsets.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_pixel_dimension_offsets(self, x: int = 0, y: int = 0) -&gt; Self:\n    \"\"\"Set pixel dimension offsets.\"\"\"\n    self.x_offset = x\n    self.y_offset = y\n    return self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrameBuilder.build","title":"build","text":"<pre><code>build(*, with_mask: bool = True) -&gt; RasterRenderingFrame\n</code></pre> <p>Build final rendering frame container.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def build(self, *, with_mask: bool = True) -&gt; RasterRenderingFrame:\n    \"\"\"Build final rendering frame container.\"\"\"\n    command_buffer = (\n        self.command_buffer\n        if self.command_buffer is not None\n        else throw(RuntimeError(\"Command buffer not set.\"))\n    )\n    bbox = (\n        command_buffer.get_bounding_box()\n        if self.bounding_box is None\n        else self.bounding_box\n    )\n    dimensions = (\n        max(custom_round(bbox.width.as_millimeters() * self.dpmm * self.scale), 1)\n        + self.x_offset,\n        max(custom_round(bbox.height.as_millimeters() * self.dpmm * self.scale), 1)\n        + self.y_offset,\n    )\n    image = (\n        Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n        if self.image is None\n        else self.image\n    )\n    mask = (\n        (\n            Image.new(\"RGBA\", dimensions, (0, 0, 0, 0))\n            if self.mask is None\n            else self.mask\n        )\n        if with_mask\n        else None\n    )\n    color_scheme = self.color_scheme or throw(RuntimeError(\"Missing color schema.\"))\n    polarity = self.polarity or throw(RuntimeError(\"Missing polarity.\"))\n    # Unset command buffer to prevent unintended reuse.\n    self.command_buffer = None\n    self.polarity = None\n\n    return RasterRenderingFrame(\n        command_buffer=command_buffer,\n        bounding_box=bbox,\n        image=image,\n        mask=mask,\n        color_scheme=color_scheme,\n        polarity=polarity,\n        is_region=self.is_region,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame","title":"RasterRenderingFrame","text":"<p>Container for rendering variables.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderingFrame:\n    \"\"\"Container for rendering variables.\"\"\"\n\n    def __init__(\n        self,\n        command_buffer: ReadonlyCommandBuffer2,\n        bounding_box: BoundingBox,\n        image: Image.Image,\n        mask: Optional[Image.Image],\n        color_scheme: ColorScheme,\n        polarity: Polarity,\n        *,\n        is_region: bool = False,\n    ) -&gt; None:\n        self.command_buffer = command_buffer\n        self.bounding_box = bounding_box\n        self.image = image\n        self.layer = ImageDraw.ImageDraw(image)\n        self.mask = mask\n        self.mask_draw = None if mask is None else ImageDraw.ImageDraw(mask)\n        self.color_scheme = color_scheme\n        self.polarity = polarity\n        self.is_region = is_region\n\n    def get_aperture(self) -&gt; RasterAperture:\n        \"\"\"Return aperture.\"\"\"\n        if self.mask is None:\n            msg = \"Invalid aperture mask.\"\n            raise RuntimeError(msg)\n        return RasterAperture(image=self.image, mask=self.mask)\n\n    def get_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if self.polarity == Polarity.Dark:\n            return self._get_color(polarity)\n        return self._get_color(polarity.invert())\n\n    def _get_color(self, polarity: Polarity) -&gt; str:\n        if self.is_region:\n            if polarity == Polarity.Dark:\n                return self.color_scheme.solid_region_color.to_hex()\n            return self.color_scheme.clear_region_color.to_hex()\n\n        if polarity == Polarity.Dark:\n            return self.color_scheme.solid_color.to_hex()\n        return self.color_scheme.clear_color.to_hex()\n\n    def get_mask_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if polarity == Polarity.Dark:\n            return \"#FFFFFFFF\"\n        return \"#00000000\"\n\n    def line(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw line on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.line(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.line(*args, **kwargs)\n\n    def arc(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw arc on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.arc(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.arc(*args, **kwargs)\n\n    def ellipse(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw ellipse on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.ellipse(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.ellipse(*args, **kwargs)\n\n    def rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw rectangle on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.rectangle(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.rectangle(*args, **kwargs)\n\n    def rounded_rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw rounded rectangle on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.rounded_rectangle(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.rounded_rectangle(*args, **kwargs)\n\n    def regular_polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw regular polygon on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.regular_polygon(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.regular_polygon(*args, **kwargs)\n\n    def polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw polygon on image.\"\"\"\n        kwargs[\"fill\"] = self.get_color(polarity)\n        self.layer.polygon(*args, **kwargs)\n        if self.mask_draw is not None:\n            kwargs[\"fill\"] = self.get_mask_color(polarity)\n            self.mask_draw.polygon(*args, **kwargs)\n\n    def paste(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Draw polygon on image.\"\"\"\n        self.image.paste(*args, **kwargs)\n        if self.mask is not None:\n            self.mask.paste(*args, **kwargs)\n\n    def region_mode(self) -&gt; ContextManager[None]:\n        \"\"\"Set rendering mode to region.\"\"\"\n\n        @contextmanager\n        def _with() -&gt; Generator[None, None, None]:\n            self.is_region = True\n            yield\n            self.is_region = False\n\n        return _with()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture() -&gt; RasterAperture\n</code></pre> <p>Return aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture(self) -&gt; RasterAperture:\n    \"\"\"Return aperture.\"\"\"\n    if self.mask is None:\n        msg = \"Invalid aperture mask.\"\n        raise RuntimeError(msg)\n    return RasterAperture(image=self.image, mask=self.mask)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_color","title":"get_color","text":"<pre><code>get_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if self.polarity == Polarity.Dark:\n        return self._get_color(polarity)\n    return self._get_color(polarity.invert())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.get_mask_color","title":"get_mask_color","text":"<pre><code>get_mask_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_mask_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if polarity == Polarity.Dark:\n        return \"#FFFFFFFF\"\n    return \"#00000000\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.line","title":"line","text":"<pre><code>line(polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw line on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def line(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw line on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.line(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.line(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.arc","title":"arc","text":"<pre><code>arc(polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw arc on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def arc(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw arc on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.arc(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.arc(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.ellipse","title":"ellipse","text":"<pre><code>ellipse(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw ellipse on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def ellipse(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw ellipse on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.ellipse(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.ellipse(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw rectangle on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw rectangle on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.rectangle(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.rectangle(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.rounded_rectangle","title":"rounded_rectangle","text":"<pre><code>rounded_rectangle(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw rounded rectangle on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def rounded_rectangle(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw rounded rectangle on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.rounded_rectangle(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.rounded_rectangle(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.regular_polygon","title":"regular_polygon","text":"<pre><code>regular_polygon(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw regular polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def regular_polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw regular polygon on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.regular_polygon(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.regular_polygon(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.polygon","title":"polygon","text":"<pre><code>polygon(\n    polarity: Polarity, *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Draw polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def polygon(self, polarity: Polarity, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw polygon on image.\"\"\"\n    kwargs[\"fill\"] = self.get_color(polarity)\n    self.layer.polygon(*args, **kwargs)\n    if self.mask_draw is not None:\n        kwargs[\"fill\"] = self.get_mask_color(polarity)\n        self.mask_draw.polygon(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.paste","title":"paste","text":"<pre><code>paste(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Draw polygon on image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def paste(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Draw polygon on image.\"\"\"\n    self.image.paste(*args, **kwargs)\n    if self.mask is not None:\n        self.mask.paste(*args, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderingFrame.region_mode","title":"region_mode","text":"<pre><code>region_mode() -&gt; ContextManager[None]\n</code></pre> <p>Set rendering mode to region.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def region_mode(self) -&gt; ContextManager[None]:\n    \"\"\"Set rendering mode to region.\"\"\"\n\n    @contextmanager\n    def _with() -&gt; Generator[None, None, None]:\n        self.is_region = True\n        yield\n        self.is_region = False\n\n    return _with()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterAperture","title":"RasterAperture","text":"<p>Raster Aperture model.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterAperture:\n    \"\"\"Raster Aperture model.\"\"\"\n\n    def __init__(self, image: Image.Image, mask: Image.Image) -&gt; None:\n        self.image = image\n        self.mask = mask\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks","title":"RasterRenderer2Hooks","text":"<p>             Bases: <code>Renderer2HooksABC</code></p> <p>Class implementing rendering hooks to output raster images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterRenderer2Hooks(Renderer2HooksABC):\n    \"\"\"Class implementing rendering hooks to output raster images.\"\"\"\n\n    def __init__(\n        self,\n        color_scheme: ColorScheme = ColorScheme.DEBUG_1_ALPHA,\n        scale: Decimal = Decimal(\"1\"),\n        dpmm: int = 20,\n        *,\n        flip_y: bool = True,\n    ) -&gt; None:\n        self.color_scheme = color_scheme\n        self.scale = scale\n        self.dpmm = dpmm\n        self.flip_y = flip_y\n        self.frame_builder = (\n            RasterRenderingFrameBuilder()\n            .set_dpmm(self.dpmm)\n            .set_scale(self.scale)\n            .set_color_scheme(self.color_scheme)\n        )\n\n    def init(\n        self,\n        renderer: Renderer2,\n        command_buffer: ReadonlyCommandBuffer2,\n    ) -&gt; None:\n        \"\"\"Initialize renderer.\"\"\"\n        if not isinstance(renderer, RasterRenderer2):\n            raise NotImplementedError\n\n        self.renderer = renderer\n        self.command_buffer = command_buffer\n        self.rendering_stack: list[RasterRenderingFrame] = []\n        self.push_render_frame(\n            self.frame_builder.set_polarity(Polarity.Dark)\n            .set_command_buffer(command_buffer)\n            .build(with_mask=False),\n        )\n        self.apertures: dict[str, RasterAperture] = {}\n\n    def push_render_frame(self, cmd: RasterRenderingFrame) -&gt; None:\n        \"\"\"Push new segment render frame.\"\"\"\n        self.rendering_stack.append(cmd)\n\n    def pop_render_frame(self) -&gt; RasterRenderingFrame:\n        \"\"\"Pop segment render frame.\"\"\"\n        if len(self.rendering_stack) &lt;= 1:\n            raise RuntimeError\n        return self.rendering_stack.pop()\n\n    @property\n    def frame(self) -&gt; RasterRenderingFrame:\n        \"\"\"Get current rendering stack frame.\"\"\"\n        return self.rendering_stack[-1]\n\n    def convert_xy(self, v: Vector2D) -&gt; tuple[int, int]:\n        \"\"\"Convert vector coordinates to coordinates in image space.\"\"\"\n        return (\n            self.convert_x(v.x),\n            self.convert_y(v.y),\n        )\n\n    def convert_x(self, x: Offset) -&gt; int:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        origin_offset_x = self.frame.bounding_box.min_x.as_millimeters()\n        corrected_position_x = x.as_millimeters() - origin_offset_x\n        return custom_round(\n            corrected_position_x * self.scale * self.dpmm - Decimal(0.5),\n        )\n\n    def convert_y(self, y: Offset) -&gt; int:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        origin_offset_y = self.frame.bounding_box.min_y.as_millimeters()\n        corrected_position_y = y.as_millimeters() - origin_offset_y\n        return custom_round(\n            corrected_position_y * self.scale * self.dpmm - Decimal(0.5),\n        )\n\n    def convert_size(self, diameter: Offset) -&gt; int:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        return max(custom_round(diameter.as_millimeters() * self.scale * self.dpmm), 1)\n\n    def convert_bbox(self, bbox: BoundingBox) -&gt; tuple[int, int, int, int]:\n        \"\"\"Convert bounding box region to pixel coordinates bbox.\"\"\"\n        return (\n            self.convert_x(bbox.min_x),\n            self.convert_y(bbox.min_y),\n            self.convert_x(bbox.max_x),\n            self.convert_y(bbox.max_y),\n        )\n\n    def get_aperture(self, aperture_id: str) -&gt; Optional[RasterAperture]:\n        \"\"\"Get SVG group representing aperture.\"\"\"\n        return self.apertures.get(aperture_id)\n\n    def set_aperture(\n        self,\n        aperture_id: str,\n        raster_aperture: RasterAperture,\n    ) -&gt; None:\n        \"\"\"Set SVG group representing aperture.\"\"\"\n        self.apertures[aperture_id] = raster_aperture\n\n    def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n        \"\"\"Return combined ID for listed aperture.\"\"\"\n        return (\n            f\"{aperture.identifier}%{transform.polarity.value}\"\n            f\"%{transform.get_transform_key()}\"\n        )\n\n    def render_line(self, command: Line2) -&gt; None:\n        \"\"\"Render line to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        self.frame.line(\n            command.transform.polarity,\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_arc(self, command: Arc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        bbox = self.convert_bbox(\n            BoundingBox.from_diameter(\n                (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n            )\n            + command.center_point,\n        )\n\n        if end_angle &lt; start_angle:\n            end_angle += 360\n\n        if end_angle == start_angle:\n            start_angle = 360\n            end_angle = 0\n\n        self.frame.arc(\n            command.transform.polarity,\n            bbox,\n            end_angle,\n            start_angle,\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_cc_arc(self, command: CCArc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector2D.UNIT_X,\n            )\n            % 360\n        )\n        bbox = self.convert_bbox(\n            BoundingBox.from_diameter(\n                (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n            )\n            + command.center_point,\n        )\n\n        if end_angle &lt;= start_angle:\n            end_angle += 360\n\n        self.frame.arc(\n            command.transform.polarity,\n            bbox,\n            start_angle,\n            end_angle,\n            width=self.convert_size(command.aperture.get_stroke_width()),\n        )\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n        \"\"\"Render flash circle to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        raster_aperture = self.get_aperture(aperture_id)\n\n        if raster_aperture is None:\n            bbox = list(self.convert_bbox(command.get_bounding_box()))\n            # Circles which are drawn with small amount of pixels are offset by 1 pixel\n            # for some reason. This is a first part of workaround for that. 30 pixels is\n            # an empirically determined threshold after which the offset is not needed\n            # anymore. We need to increase size of the bounding box by 1 pixel to\n            # fit a circle which size will also be increased by 1 pixel.\n            if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n                self.frame_builder.set_pixel_dimension_offsets(x=1, y=1)\n\n            # Unfortunately workaround implemented just above forces frame generation\n            # to be deferred to here.\n            frame_builder = self.frame_builder.set_polarity(\n                command.transform.polarity\n            ).set_command_buffer_from_list([command])\n            self.push_render_frame(frame_builder.build())\n            # Additionally we have to clean up frame_builder state we have altered.\n            self.frame_builder.set_pixel_dimension_offsets()\n\n            # We have to recalculate a bounding box after jumping into new frame as\n            # dimensions of the frame likely changed, therefore relative position of\n            # bounding box also changed.\n            bbox = list(self.convert_bbox(command.get_bounding_box()))\n            # This is a second part of workaround for circles which are drawn with small\n            # amount of pixels. We need to increase size of the circle itself. We\n            # couldn't do it earlier because we need to recalculate bbox for new frame.\n            if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n                bbox[2] += 1\n\n            self.frame.ellipse(\n                Polarity.Dark,\n                bbox,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            raster_aperture = frame.get_aperture()\n            self.set_aperture(aperture_id, raster_aperture)\n\n        self._paste_aperture(command, raster_aperture)\n\n    def _make_hole(\n        self,\n        command: Flash2,\n        aperture: Circle2 | Rectangle2 | Obround2 | Polygon2,\n    ) -&gt; None:\n        if aperture.hole_diameter is None:\n            return\n        self.frame.ellipse(\n            Polarity.Clear,\n            self.convert_bbox(\n                BoundingBox(\n                    min_x=-(aperture.hole_diameter / 2),\n                    min_y=-(aperture.hole_diameter / 2),\n                    max_x=aperture.hole_diameter / 2,\n                    max_y=aperture.hole_diameter / 2,\n                )\n                + command.flash_point,\n            ),\n        )\n\n    def _paste_aperture(self, command: Flash2, aperture_image: RasterAperture) -&gt; None:\n        bbox = command.get_bounding_box()\n        origin_x, origin_y = self.convert_bbox(bbox)[0:2]\n        self.frame.paste(\n            aperture_image.image,\n            (origin_x, origin_y),\n            mask=aperture_image.mask,\n        )\n\n    def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n        \"\"\"Render flash no circle aperture to target image.\"\"\"\n\n    def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n        \"\"\"Render flash rectangle to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        raster_aperture = self.get_aperture(aperture_id)\n\n        if raster_aperture is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n            edge_offset_vector = Vector2D(\n                x=aperture.x_size / 2,\n                y=Offset.new(0),\n            ).get_rotated(aperture.rotation)\n\n            max_xy = command.flash_point + edge_offset_vector\n            min_xy = command.flash_point - edge_offset_vector\n\n            start_xy = min_xy\n            end_xy = max_xy\n\n            tangent_vector = Vector2D(\n                x=Offset.new(0),\n                y=aperture.y_size / 2,\n            ).get_rotated(aperture.rotation)\n\n            self.frame.polygon(\n                Polarity.Dark,\n                (\n                    (self.convert_xy(start_xy + tangent_vector)),\n                    (self.convert_xy(start_xy - tangent_vector)),\n                    (self.convert_xy(end_xy - tangent_vector)),\n                    (self.convert_xy(end_xy + tangent_vector)),\n                ),\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            raster_aperture = frame.get_aperture()\n            self.set_aperture(aperture_id, raster_aperture)\n\n        self._paste_aperture(command, raster_aperture)\n\n    def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n        \"\"\"Render flash obround to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n\n            self.frame.rounded_rectangle(\n                Polarity.Dark,\n                self.convert_bbox(\n                    BoundingBox.from_rectangle(aperture.x_size, aperture.y_size)\n                    + command.flash_point,\n                ),\n                radius=min(\n                    self.convert_size(aperture.x_size),\n                    self.convert_size(aperture.y_size),\n                )\n                / 2,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n        \"\"\"Render flash polygon to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer_from_list([command])\n                .build(),\n            )\n\n            outer_diameter = aperture.outer_diameter\n            radius = self.convert_size(outer_diameter / 2)\n            # In PIL rotation angle goes in opposite direction than in Gerber and\n            # starts from different orientation.\n            rotation = -float(aperture.rotation) - 90.0\n            bbox = command.get_bounding_box()\n\n            self.frame.regular_polygon(\n                Polarity.Dark,\n                (\n                    self.convert_x(bbox.min_x) + radius,\n                    self.convert_y(bbox.min_y) + radius,\n                    radius,\n                ),\n                n_sides=aperture.number_vertices,\n                rotation=rotation,\n            )\n            self._make_hole(command, aperture)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n        \"\"\"Render flash macro aperture to target image.\"\"\"\n        aperture_id = self.get_aperture_id(aperture, command.transform)\n        aperture_image = self.get_aperture(aperture_id)\n\n        if aperture_image is None:\n            self.push_render_frame(\n                self.frame_builder.set_polarity(command.transform.polarity)\n                .set_command_buffer(aperture.command_buffer)\n                .build(),\n            )\n\n            for cmd in aperture.command_buffer:\n                cmd.render(self.renderer)\n\n            frame = self.pop_render_frame()\n            aperture_image = frame.get_aperture()\n            self.set_aperture(aperture_id, aperture_image)\n\n        self._paste_aperture(command, aperture_image)\n\n    def render_region(self, command: Region2) -&gt; None:\n        \"\"\"Render region to target image.\"\"\"\n        if len(command.command_buffer) == 0:\n            return\n\n        with self.frame.region_mode():\n            points: list[tuple[int, int]] = []\n\n            for cmd in command.command_buffer:\n                if isinstance(cmd, Line2):\n                    self.generate_line_points(cmd, points)\n                elif isinstance(cmd, Arc2):\n                    self.generate_arc_points(cmd, points)\n                elif isinstance(cmd, CCArc2):\n                    self.generate_cc_arc_points(cmd, points)\n                else:\n                    raise NotImplementedError\n\n            self.frame.polygon(command.transform.polarity, points)\n\n    def generate_line_points(\n        self,\n        command: Line2,\n        points: list[tuple[int, int]],\n    ) -&gt; None:\n        \"\"\"Generate points of line region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def generate_arc_points(self, command: Arc2, points: list[tuple[int, int]]) -&gt; None:\n        \"\"\"Generate points of arc region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        angle = command.get_relative_start_point().angle_between(\n            command.get_relative_end_point(),\n        )\n        angle_ratio = angle / 360\n        arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n        point_count = self.convert_size(arc_length / 1.618)\n        angle_step = Decimal(angle) / Decimal(point_count)\n\n        current_point = command.get_relative_start_point()\n        for i in range(point_count - 1):\n            rotated_current_point = current_point.rotate_around_origin(\n                -(i * angle_step),\n            )\n            absolute_current_point = command.center_point + rotated_current_point\n            points.append(\n                (\n                    self.convert_x(absolute_current_point.x),\n                    self.convert_y(absolute_current_point.y),\n                ),\n            )\n\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def generate_cc_arc_points(\n        self,\n        command: CCArc2,\n        points: list[tuple[int, int]],\n    ) -&gt; None:\n        \"\"\"Generate points of counter clockwise arc region boundary.\"\"\"\n        points.append(\n            (\n                self.convert_x(command.start_point.x),\n                self.convert_y(command.start_point.y),\n            ),\n        )\n        angle = command.get_relative_start_point().angle_between(\n            command.get_relative_end_point(),\n        )\n        angle_ratio = angle / 360\n        arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n        point_count = self.convert_size(arc_length / 2)\n        angle_step = Decimal(angle) / Decimal(point_count)\n\n        current_point = command.get_relative_start_point()\n        for i in range(point_count - 1):\n            rotated_current_point = current_point.rotate_around_origin(i * angle_step)\n            absolute_current_point = command.center_point + rotated_current_point\n            points.append(\n                (\n                    self.convert_x(absolute_current_point.x),\n                    self.convert_y(absolute_current_point.y),\n                ),\n            )\n\n        points.append(\n            (\n                self.convert_x(command.end_point.x),\n                self.convert_y(command.end_point.y),\n            ),\n        )\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize renderer.\"\"\"\n        self.apertures.clear()\n        gc.collect(0)\n        gc.collect(1)\n        gc.collect(2)\n        self.frame.image = self.frame.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n        gc.collect(0)\n        gc.collect(1)\n        gc.collect(2)\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        return RasterImageRef(self.frame.image)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.frame","title":"frame  <code>property</code>","text":"<pre><code>frame: RasterRenderingFrame\n</code></pre> <p>Get current rendering stack frame.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.init","title":"init","text":"<pre><code>init(\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None\n</code></pre> <p>Initialize renderer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def init(\n    self,\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None:\n    \"\"\"Initialize renderer.\"\"\"\n    if not isinstance(renderer, RasterRenderer2):\n        raise NotImplementedError\n\n    self.renderer = renderer\n    self.command_buffer = command_buffer\n    self.rendering_stack: list[RasterRenderingFrame] = []\n    self.push_render_frame(\n        self.frame_builder.set_polarity(Polarity.Dark)\n        .set_command_buffer(command_buffer)\n        .build(with_mask=False),\n    )\n    self.apertures: dict[str, RasterAperture] = {}\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.push_render_frame","title":"push_render_frame","text":"<pre><code>push_render_frame(cmd: RasterRenderingFrame) -&gt; None\n</code></pre> <p>Push new segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def push_render_frame(self, cmd: RasterRenderingFrame) -&gt; None:\n    \"\"\"Push new segment render frame.\"\"\"\n    self.rendering_stack.append(cmd)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.pop_render_frame","title":"pop_render_frame","text":"<pre><code>pop_render_frame() -&gt; RasterRenderingFrame\n</code></pre> <p>Pop segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def pop_render_frame(self) -&gt; RasterRenderingFrame:\n    \"\"\"Pop segment render frame.\"\"\"\n    if len(self.rendering_stack) &lt;= 1:\n        raise RuntimeError\n    return self.rendering_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_xy","title":"convert_xy","text":"<pre><code>convert_xy(v: Vector2D) -&gt; tuple[int, int]\n</code></pre> <p>Convert vector coordinates to coordinates in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_xy(self, v: Vector2D) -&gt; tuple[int, int]:\n    \"\"\"Convert vector coordinates to coordinates in image space.\"\"\"\n    return (\n        self.convert_x(v.x),\n        self.convert_y(v.y),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_x","title":"convert_x","text":"<pre><code>convert_x(x: Offset) -&gt; int\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_x(self, x: Offset) -&gt; int:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    origin_offset_x = self.frame.bounding_box.min_x.as_millimeters()\n    corrected_position_x = x.as_millimeters() - origin_offset_x\n    return custom_round(\n        corrected_position_x * self.scale * self.dpmm - Decimal(0.5),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_y","title":"convert_y","text":"<pre><code>convert_y(y: Offset) -&gt; int\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_y(self, y: Offset) -&gt; int:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    origin_offset_y = self.frame.bounding_box.min_y.as_millimeters()\n    corrected_position_y = y.as_millimeters() - origin_offset_y\n    return custom_round(\n        corrected_position_y * self.scale * self.dpmm - Decimal(0.5),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_size","title":"convert_size","text":"<pre><code>convert_size(diameter: Offset) -&gt; int\n</code></pre> <p>Convert y offset to pixel y coordinate.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_size(self, diameter: Offset) -&gt; int:\n    \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n    return max(custom_round(diameter.as_millimeters() * self.scale * self.dpmm), 1)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.convert_bbox","title":"convert_bbox","text":"<pre><code>convert_bbox(\n    bbox: BoundingBox,\n) -&gt; tuple[int, int, int, int]\n</code></pre> <p>Convert bounding box region to pixel coordinates bbox.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def convert_bbox(self, bbox: BoundingBox) -&gt; tuple[int, int, int, int]:\n    \"\"\"Convert bounding box region to pixel coordinates bbox.\"\"\"\n    return (\n        self.convert_x(bbox.min_x),\n        self.convert_y(bbox.min_y),\n        self.convert_x(bbox.max_x),\n        self.convert_y(bbox.max_y),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture(aperture_id: str) -&gt; Optional[RasterAperture]\n</code></pre> <p>Get SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture(self, aperture_id: str) -&gt; Optional[RasterAperture]:\n    \"\"\"Get SVG group representing aperture.\"\"\"\n    return self.apertures.get(aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.set_aperture","title":"set_aperture","text":"<pre><code>set_aperture(\n    aperture_id: str, raster_aperture: RasterAperture\n) -&gt; None\n</code></pre> <p>Set SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def set_aperture(\n    self,\n    aperture_id: str,\n    raster_aperture: RasterAperture,\n) -&gt; None:\n    \"\"\"Set SVG group representing aperture.\"\"\"\n    self.apertures[aperture_id] = raster_aperture\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_aperture_id","title":"get_aperture_id","text":"<pre><code>get_aperture_id(\n    aperture: Aperture2, transform: ApertureTransform\n) -&gt; str\n</code></pre> <p>Return combined ID for listed aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n    \"\"\"Return combined ID for listed aperture.\"\"\"\n    return (\n        f\"{aperture.identifier}%{transform.polarity.value}\"\n        f\"%{transform.get_transform_key()}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_line","title":"render_line","text":"<pre><code>render_line(command: Line2) -&gt; None\n</code></pre> <p>Render line to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_line(self, command: Line2) -&gt; None:\n    \"\"\"Render line to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    self.frame.line(\n        command.transform.polarity,\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_arc","title":"render_arc","text":"<pre><code>render_arc(command: Arc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_arc(self, command: Arc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    start_angle = (\n        command.get_relative_start_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    end_angle = (\n        command.get_relative_end_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    bbox = self.convert_bbox(\n        BoundingBox.from_diameter(\n            (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n        )\n        + command.center_point,\n    )\n\n    if end_angle &lt; start_angle:\n        end_angle += 360\n\n    if end_angle == start_angle:\n        start_angle = 360\n        end_angle = 0\n\n    self.frame.arc(\n        command.transform.polarity,\n        bbox,\n        end_angle,\n        start_angle,\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_cc_arc","title":"render_cc_arc","text":"<pre><code>render_cc_arc(command: CCArc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_cc_arc(self, command: CCArc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    start_angle = (\n        command.get_relative_start_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    end_angle = (\n        command.get_relative_end_point().angle_between(\n            Vector2D.UNIT_X,\n        )\n        % 360\n    )\n    bbox = self.convert_bbox(\n        BoundingBox.from_diameter(\n            (command.get_radius() * 2) + (command.aperture.get_stroke_width()),\n        )\n        + command.center_point,\n    )\n\n    if end_angle &lt;= start_angle:\n        end_angle += 360\n\n    self.frame.arc(\n        command.transform.polarity,\n        bbox,\n        start_angle,\n        end_angle,\n        width=self.convert_size(command.aperture.get_stroke_width()),\n    )\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_circle","title":"render_flash_circle","text":"<pre><code>render_flash_circle(\n    command: Flash2, aperture: Circle2\n) -&gt; None\n</code></pre> <p>Render flash circle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n    \"\"\"Render flash circle to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    raster_aperture = self.get_aperture(aperture_id)\n\n    if raster_aperture is None:\n        bbox = list(self.convert_bbox(command.get_bounding_box()))\n        # Circles which are drawn with small amount of pixels are offset by 1 pixel\n        # for some reason. This is a first part of workaround for that. 30 pixels is\n        # an empirically determined threshold after which the offset is not needed\n        # anymore. We need to increase size of the bounding box by 1 pixel to\n        # fit a circle which size will also be increased by 1 pixel.\n        if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n            self.frame_builder.set_pixel_dimension_offsets(x=1, y=1)\n\n        # Unfortunately workaround implemented just above forces frame generation\n        # to be deferred to here.\n        frame_builder = self.frame_builder.set_polarity(\n            command.transform.polarity\n        ).set_command_buffer_from_list([command])\n        self.push_render_frame(frame_builder.build())\n        # Additionally we have to clean up frame_builder state we have altered.\n        self.frame_builder.set_pixel_dimension_offsets()\n\n        # We have to recalculate a bounding box after jumping into new frame as\n        # dimensions of the frame likely changed, therefore relative position of\n        # bounding box also changed.\n        bbox = list(self.convert_bbox(command.get_bounding_box()))\n        # This is a second part of workaround for circles which are drawn with small\n        # amount of pixels. We need to increase size of the circle itself. We\n        # couldn't do it earlier because we need to recalculate bbox for new frame.\n        if abs(bbox[0] - bbox[2]) &lt;= 35:  # noqa: PLR2004\n            bbox[2] += 1\n\n        self.frame.ellipse(\n            Polarity.Dark,\n            bbox,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        raster_aperture = frame.get_aperture()\n        self.set_aperture(aperture_id, raster_aperture)\n\n    self._paste_aperture(command, raster_aperture)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_no_circle","title":"render_flash_no_circle","text":"<pre><code>render_flash_no_circle(\n    command: Flash2, aperture: NoCircle2\n) -&gt; None\n</code></pre> <p>Render flash no circle aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n    \"\"\"Render flash no circle aperture to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_rectangle","title":"render_flash_rectangle","text":"<pre><code>render_flash_rectangle(\n    command: Flash2, aperture: Rectangle2\n) -&gt; None\n</code></pre> <p>Render flash rectangle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n    \"\"\"Render flash rectangle to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    raster_aperture = self.get_aperture(aperture_id)\n\n    if raster_aperture is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n        edge_offset_vector = Vector2D(\n            x=aperture.x_size / 2,\n            y=Offset.new(0),\n        ).get_rotated(aperture.rotation)\n\n        max_xy = command.flash_point + edge_offset_vector\n        min_xy = command.flash_point - edge_offset_vector\n\n        start_xy = min_xy\n        end_xy = max_xy\n\n        tangent_vector = Vector2D(\n            x=Offset.new(0),\n            y=aperture.y_size / 2,\n        ).get_rotated(aperture.rotation)\n\n        self.frame.polygon(\n            Polarity.Dark,\n            (\n                (self.convert_xy(start_xy + tangent_vector)),\n                (self.convert_xy(start_xy - tangent_vector)),\n                (self.convert_xy(end_xy - tangent_vector)),\n                (self.convert_xy(end_xy + tangent_vector)),\n            ),\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        raster_aperture = frame.get_aperture()\n        self.set_aperture(aperture_id, raster_aperture)\n\n    self._paste_aperture(command, raster_aperture)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_obround","title":"render_flash_obround","text":"<pre><code>render_flash_obround(\n    command: Flash2, aperture: Obround2\n) -&gt; None\n</code></pre> <p>Render flash obround to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n    \"\"\"Render flash obround to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n\n        self.frame.rounded_rectangle(\n            Polarity.Dark,\n            self.convert_bbox(\n                BoundingBox.from_rectangle(aperture.x_size, aperture.y_size)\n                + command.flash_point,\n            ),\n            radius=min(\n                self.convert_size(aperture.x_size),\n                self.convert_size(aperture.y_size),\n            )\n            / 2,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_polygon","title":"render_flash_polygon","text":"<pre><code>render_flash_polygon(\n    command: Flash2, aperture: Polygon2\n) -&gt; None\n</code></pre> <p>Render flash polygon to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n    \"\"\"Render flash polygon to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer_from_list([command])\n            .build(),\n        )\n\n        outer_diameter = aperture.outer_diameter\n        radius = self.convert_size(outer_diameter / 2)\n        # In PIL rotation angle goes in opposite direction than in Gerber and\n        # starts from different orientation.\n        rotation = -float(aperture.rotation) - 90.0\n        bbox = command.get_bounding_box()\n\n        self.frame.regular_polygon(\n            Polarity.Dark,\n            (\n                self.convert_x(bbox.min_x) + radius,\n                self.convert_y(bbox.min_y) + radius,\n                radius,\n            ),\n            n_sides=aperture.number_vertices,\n            rotation=rotation,\n        )\n        self._make_hole(command, aperture)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_flash_macro","title":"render_flash_macro","text":"<pre><code>render_flash_macro(\n    command: Flash2, aperture: Macro2\n) -&gt; None\n</code></pre> <p>Render flash macro aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n    \"\"\"Render flash macro aperture to target image.\"\"\"\n    aperture_id = self.get_aperture_id(aperture, command.transform)\n    aperture_image = self.get_aperture(aperture_id)\n\n    if aperture_image is None:\n        self.push_render_frame(\n            self.frame_builder.set_polarity(command.transform.polarity)\n            .set_command_buffer(aperture.command_buffer)\n            .build(),\n        )\n\n        for cmd in aperture.command_buffer:\n            cmd.render(self.renderer)\n\n        frame = self.pop_render_frame()\n        aperture_image = frame.get_aperture()\n        self.set_aperture(aperture_id, aperture_image)\n\n    self._paste_aperture(command, aperture_image)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.render_region","title":"render_region","text":"<pre><code>render_region(command: Region2) -&gt; None\n</code></pre> <p>Render region to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def render_region(self, command: Region2) -&gt; None:\n    \"\"\"Render region to target image.\"\"\"\n    if len(command.command_buffer) == 0:\n        return\n\n    with self.frame.region_mode():\n        points: list[tuple[int, int]] = []\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, Line2):\n                self.generate_line_points(cmd, points)\n            elif isinstance(cmd, Arc2):\n                self.generate_arc_points(cmd, points)\n            elif isinstance(cmd, CCArc2):\n                self.generate_cc_arc_points(cmd, points)\n            else:\n                raise NotImplementedError\n\n        self.frame.polygon(command.transform.polarity, points)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_line_points","title":"generate_line_points","text":"<pre><code>generate_line_points(\n    command: Line2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_line_points(\n    self,\n    command: Line2,\n    points: list[tuple[int, int]],\n) -&gt; None:\n    \"\"\"Generate points of line region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_arc_points","title":"generate_arc_points","text":"<pre><code>generate_arc_points(\n    command: Arc2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of arc region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_arc_points(self, command: Arc2, points: list[tuple[int, int]]) -&gt; None:\n    \"\"\"Generate points of arc region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    angle = command.get_relative_start_point().angle_between(\n        command.get_relative_end_point(),\n    )\n    angle_ratio = angle / 360\n    arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n    point_count = self.convert_size(arc_length / 1.618)\n    angle_step = Decimal(angle) / Decimal(point_count)\n\n    current_point = command.get_relative_start_point()\n    for i in range(point_count - 1):\n        rotated_current_point = current_point.rotate_around_origin(\n            -(i * angle_step),\n        )\n        absolute_current_point = command.center_point + rotated_current_point\n        points.append(\n            (\n                self.convert_x(absolute_current_point.x),\n                self.convert_y(absolute_current_point.y),\n            ),\n        )\n\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.generate_cc_arc_points","title":"generate_cc_arc_points","text":"<pre><code>generate_cc_arc_points(\n    command: CCArc2, points: list[tuple[int, int]]\n) -&gt; None\n</code></pre> <p>Generate points of counter clockwise arc region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def generate_cc_arc_points(\n    self,\n    command: CCArc2,\n    points: list[tuple[int, int]],\n) -&gt; None:\n    \"\"\"Generate points of counter clockwise arc region boundary.\"\"\"\n    points.append(\n        (\n            self.convert_x(command.start_point.x),\n            self.convert_y(command.start_point.y),\n        ),\n    )\n    angle = command.get_relative_start_point().angle_between(\n        command.get_relative_end_point(),\n    )\n    angle_ratio = angle / 360\n    arc_length = (command.get_radius() * 2 * math.pi) * angle_ratio\n    point_count = self.convert_size(arc_length / 2)\n    angle_step = Decimal(angle) / Decimal(point_count)\n\n    current_point = command.get_relative_start_point()\n    for i in range(point_count - 1):\n        rotated_current_point = current_point.rotate_around_origin(i * angle_step)\n        absolute_current_point = command.center_point + rotated_current_point\n        points.append(\n            (\n                self.convert_x(absolute_current_point.x),\n                self.convert_y(absolute_current_point.y),\n            ),\n        )\n\n    points.append(\n        (\n            self.convert_x(command.end_point.x),\n            self.convert_y(command.end_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize renderer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize renderer.\"\"\"\n    self.apertures.clear()\n    gc.collect(0)\n    gc.collect(1)\n    gc.collect(2)\n    self.frame.image = self.frame.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\n    gc.collect(0)\n    gc.collect(1)\n    gc.collect(2)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterRenderer2Hooks.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    return RasterImageRef(self.frame.image)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterImageRef","title":"RasterImageRef","text":"<p>             Bases: <code>ImageRef</code></p> <p>Reference to raster image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterImageRef(ImageRef):\n    \"\"\"Reference to raster image.\"\"\"\n\n    def __init__(self, image: Image.Image) -&gt; None:\n        self.image = image\n\n    def _save_to_io(\n        self,\n        output: BinaryIO,\n        options: FormatOptions | None = None,\n    ) -&gt; None:\n        if isinstance(options, RasterFormatOptions):\n            if self.image.mode.casefold() != options.pixel_format.value.casefold():\n                image = self.image.convert(options.pixel_format.value)\n            else:\n                image = self.image\n\n            kwargs = {}\n\n            if options.image_format != ImageFormat.AUTO:\n                kwargs[\"format\"] = options.image_format.value\n\n            if options.quality is not None:\n                kwargs[\"quality\"] = options.quality\n\n            image.save(output, **kwargs)\n            return\n\n        self.image.save(output)\n\n    def get_image(self) -&gt; Image.Image:\n        \"\"\"Get image reference.\"\"\"\n        return self.image\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterImageRef.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image.Image\n</code></pre> <p>Get image reference.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def get_image(self) -&gt; Image.Image:\n    \"\"\"Get image reference.\"\"\"\n    return self.image\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.ImageFormat","title":"ImageFormat","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported raster image formats.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class ImageFormat(Enum):\n    \"\"\"List of officially supported raster image formats.\"\"\"\n\n    PNG = \"png\"\n    JPEG = \"jpg\"\n    AUTO = \"auto\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.PixelFormat","title":"PixelFormat","text":"<p>             Bases: <code>Enum</code></p> <p>List of officially supported pixel formats.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class PixelFormat(Enum):\n    \"\"\"List of officially supported pixel formats.\"\"\"\n\n    RGB = \"RGB\"\n    RGBA = \"RGBA\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.RasterFormatOptions","title":"RasterFormatOptions","text":"<p>             Bases: <code>FormatOptions</code></p> <p>Raster Format specific options.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>class RasterFormatOptions(FormatOptions):\n    \"\"\"Raster Format specific options.\"\"\"\n\n    def __init__(\n        self,\n        image_format: ImageFormat = ImageFormat.AUTO,\n        pixel_format: PixelFormat = PixelFormat.RGBA,\n        quality: int = 85,\n    ) -&gt; None:\n        self.image_format = image_format\n        self.pixel_format = pixel_format\n        self.quality = quality\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/raster.html#pygerber.gerberx3.renderer2.raster.custom_round","title":"custom_round","text":"<pre><code>custom_round(value: Decimal | float) -&gt; int\n</code></pre> <p>Round value to jason integer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/raster.py</code> <pre><code>def custom_round(value: Decimal | float) -&gt; int:\n    \"\"\"Round value to jason integer.\"\"\"\n    int_val = int(value)\n    diff = abs(int_val - Decimal(value))\n\n    if diff &gt;= HALF:\n        return int_val\n\n    return int_val\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html","title":"svg","text":""},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg","title":"svg","text":"<p>Module contains implementation of Gerber rendering backend outputting SVG files.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2","title":"SvgRenderer2","text":"<p>             Bases: <code>Renderer2</code></p> <p>Rendering backend class for rendering SVG images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgRenderer2(Renderer2):\n    \"\"\"Rendering backend class for rendering SVG images.\"\"\"\n\n    def __init__(\n        self,\n        hooks: Optional[SvgRenderer2Hooks] = None,\n    ) -&gt; None:\n        hooks = SvgRenderer2Hooks() if hooks is None else hooks\n        super().__init__(hooks)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderingFrame","title":"SvgRenderingFrame  <code>dataclass</code>","text":"<p>Rendering variable container.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>@dataclass\nclass SvgRenderingFrame:\n    \"\"\"Rendering variable container.\"\"\"\n\n    bounding_box: BoundingBox\n    normalize_origin_to_0_0: bool\n    mask: drawsvg.Mask = field(default_factory=drawsvg.Mask)\n    group: drawsvg.Group = field(default_factory=drawsvg.Group)\n    polarity: Optional[Polarity] = None\n    is_region: bool = False\n    flip_y: bool = True\n\n    def get_group_or_mask(\n        self,\n        is_group: bool,  # noqa: FBT001\n    ) -&gt; drawsvg.Group | drawsvg.Mask:\n        \"\"\"Get group or mask.\"\"\"\n        if is_group:\n            return self.group\n        return self.mask\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderingFrame.get_group_or_mask","title":"get_group_or_mask","text":"<pre><code>get_group_or_mask(\n    is_group: bool,\n) -&gt; drawsvg.Group | drawsvg.Mask\n</code></pre> <p>Get group or mask.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_group_or_mask(\n    self,\n    is_group: bool,  # noqa: FBT001\n) -&gt; drawsvg.Group | drawsvg.Mask:\n    \"\"\"Get group or mask.\"\"\"\n    if is_group:\n        return self.group\n    return self.mask\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks","title":"SvgRenderer2Hooks","text":"<p>             Bases: <code>Renderer2HooksABC</code></p> <p>Rendering backend hooks used to render SVG images.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgRenderer2Hooks(Renderer2HooksABC):\n    \"\"\"Rendering backend hooks used to render SVG images.\"\"\"\n\n    renderer: SvgRenderer2\n\n    def __init__(\n        self,\n        color_scheme: ColorScheme = ColorScheme.DEBUG_1,\n        scale: Decimal = Decimal(\"1\"),\n        *,\n        flip_y: bool = True,\n    ) -&gt; None:\n        if not IS_SVG_BACKEND_AVAILABLE:\n            raise DRAWSVGNotAvailableError\n        self.color_scheme = color_scheme\n        self.scale = scale\n        self.flip_y = flip_y\n\n    def init(\n        self,\n        renderer: Renderer2,\n        command_buffer: ReadonlyCommandBuffer2,\n    ) -&gt; None:\n        \"\"\"Initialize rendering hooks.\"\"\"\n        if not isinstance(renderer, SvgRenderer2):\n            raise NotImplementedError\n\n        self.renderer = renderer\n        self.command_buffer = command_buffer\n        self.rendering_stack: list[SvgRenderingFrame] = [\n            SvgRenderingFrame(\n                bounding_box=self.command_buffer.get_bounding_box(),\n                normalize_origin_to_0_0=True,\n                flip_y=self.flip_y,\n            ),\n        ]\n        self.apertures: dict[str, drawsvg.Group] = {}\n\n    def push_render_frame(\n        self,\n        bbox: BoundingBox,\n        *,\n        normalize_origin_to_0_0: bool,\n        flip_y: bool,\n    ) -&gt; None:\n        \"\"\"Push new segment render frame.\"\"\"\n        self.rendering_stack.append(\n            SvgRenderingFrame(\n                bounding_box=bbox,\n                normalize_origin_to_0_0=normalize_origin_to_0_0,\n                flip_y=flip_y,\n            ),\n        )\n\n    def pop_render_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Pop segment render frame.\"\"\"\n        if len(self.rendering_stack) &lt;= 1:\n            raise RuntimeError\n        return self.rendering_stack.pop()\n\n    @property\n    def base_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Get base rendering stack frame.\"\"\"\n        return self.rendering_stack[0]\n\n    @property\n    def current_frame(self) -&gt; SvgRenderingFrame:\n        \"\"\"Get current rendering stack frame.\"\"\"\n        return self.rendering_stack[-1]\n\n    def add_element_to_frame(\n        self,\n        polarity: Polarity,\n        element: drawsvg.DrawingBasicElement,\n    ) -&gt; None:\n        \"\"\"Add element to current frame.\"\"\"\n        self.get_layer(polarity).append(element)\n\n    def get_layer(self, polarity: Polarity) -&gt; drawsvg.Group | drawsvg.Mask:\n        \"\"\"Get SVG layer object corresponding to polarity.\"\"\"\n        # In general what we want to do is to have a layer made of group with mask.\n        # First we fill the group with dark command, then after meeting first clear\n        # command we start filling mask with consecutive clear command until\n        # we meed dark command again. Then we create new group-mask layer to repeat the\n        # cycle.\n\n        # If frame is not initialized, initialize it.\n        if self.current_frame.polarity is None:\n            self.current_frame.polarity = polarity\n            self.add_masked_group_to_frame()\n\n            return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n        if polarity.is_solid() != self.current_frame.polarity.is_solid():\n            # If polarity of frame is solid it means that mask for this group is still\n            # empty and can be filled.\n            if self.current_frame.polarity.is_solid():\n                self.current_frame.polarity = polarity\n                return self.current_frame.mask\n            # If polarity of frame is clear, it means that we already filled\n            # both group and mask and we need to create new group-mask layer.\n            self.add_masked_group_to_frame()\n            self.current_frame.polarity = polarity\n            return self.current_frame.group\n\n        # We have the same polarity as layer (and as previous commands) so we can\n        # simply add it to current layer.\n        return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n    def add_masked_group_to_frame(self) -&gt; None:\n        \"\"\"Create new layer including previous layer.\"\"\"\n        self.current_frame.mask = self.create_full_mask()\n        new_layer = drawsvg.Group(mask=self.current_frame.mask)\n        new_layer.append(self.current_frame.group)\n        self.current_frame.group = new_layer\n\n    def create_full_mask(self) -&gt; drawsvg.Mask:\n        \"\"\"Create mask covering whole image.\"\"\"\n        bbox = self.base_frame.bounding_box\n        mask = drawsvg.Mask()\n        mask.append(\n            drawsvg.Rectangle(\n                x=self.convert_size(-bbox.width / 2),\n                y=self.convert_size(-bbox.height / 2),\n                width=self.convert_size(bbox.width * 2),\n                height=self.convert_size(bbox.height * 2),\n                fill=\"white\",\n            ),\n        )\n        return mask\n\n    def create_mask(self, bbox: BoundingBox) -&gt; drawsvg.Mask:\n        \"\"\"Create mask covering specified bounding box.\"\"\"\n        mask = drawsvg.Mask()\n        mask.append(\n            drawsvg.Rectangle(\n                x=self.convert_size(bbox.min_x),\n                y=self.convert_size(bbox.min_y),\n                width=self.convert_size(bbox.width),\n                height=self.convert_size(bbox.height),\n                fill=\"white\",\n            ),\n        )\n        return mask\n\n    def convert_x(self, x: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        if self.current_frame.normalize_origin_to_0_0:\n            origin_offset_x = self.current_frame.bounding_box.min_x.as_millimeters()\n        else:\n            origin_offset_x = Decimal(0)\n\n        corrected_position_x = x.as_millimeters() - origin_offset_x\n\n        return corrected_position_x * self.scale\n\n    def convert_y(self, y: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n        return self._convert_y(\n            y,\n            normalize_origin_to_0_0=self.current_frame.normalize_origin_to_0_0,\n            flip_y=self.current_frame.flip_y,\n        )\n\n    def _convert_y(\n        self,\n        y: Offset,\n        *,\n        normalize_origin_to_0_0: bool,\n        flip_y: bool,\n    ) -&gt; Decimal:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        if normalize_origin_to_0_0:\n            origin_offset_y = self.current_frame.bounding_box.min_y.as_millimeters()\n        else:\n            origin_offset_y = Decimal(0)\n\n        corrected_position_y = y.as_millimeters() - origin_offset_y\n\n        if flip_y:\n            flipped_position_y = (\n                self.current_frame.bounding_box.height.as_millimeters()\n                - corrected_position_y\n            )\n            return flipped_position_y * self.scale\n        return corrected_position_y * self.scale\n\n    def convert_size(self, diameter: Offset) -&gt; Decimal:\n        \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n        return diameter.as_millimeters() * self.scale\n\n    def get_color(self, polarity: Polarity) -&gt; str:\n        \"\"\"Get color for specified polarity.\"\"\"\n        if self.current_frame.is_region:\n            if polarity.is_solid():\n                return self.color_scheme.solid_region_color.to_hex()\n            return \"black\"\n\n        if polarity.is_solid():\n            return self.color_scheme.solid_color.to_hex()\n        return \"black\"\n\n    def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n        \"\"\"Get unique ID for aperture.\"\"\"\n        return (\n            f\"{aperture.identifier}%\"\n            f\"{transform.get_transform_key()}%{transform.polarity}\"\n        )\n\n    def get_aperture(self, aperture_id: str) -&gt; Optional[drawsvg.Group]:\n        \"\"\"Get SVG group representing aperture.\"\"\"\n        return self.apertures.get(aperture_id)\n\n    def set_aperture(\n        self,\n        aperture_id: str,\n        aperture: drawsvg.Group,\n    ) -&gt; None:\n        \"\"\"Set SVG group representing aperture.\"\"\"\n        self.apertures[aperture_id] = aperture\n\n    def render_line(self, command: Line2) -&gt; None:\n        \"\"\"Render line to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n\n        parallel_vector = command.start_point - command.end_point\n        perpendicular_vector = parallel_vector.perpendicular()\n        normalized_perpendicular_vector = perpendicular_vector.normalize()\n        point_offset = normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        p0 = command.start_point - point_offset\n        p1 = command.start_point + point_offset\n        p2 = command.end_point + point_offset\n        p3 = command.end_point - point_offset\n\n        rectangle = drawsvg.Lines(\n            f\"{self.convert_x(p0.x):.8f}\",\n            f\"{self.convert_y(p0.y):.8f}\",\n            f\"{self.convert_x(p1.x):.8f}\",\n            f\"{self.convert_y(p1.y):.8f}\",\n            f\"{self.convert_x(p2.x):.8f}\",\n            f\"{self.convert_y(p2.y):.8f}\",\n            f\"{self.convert_x(p3.x):.8f}\",\n            f\"{self.convert_y(p3.y):.8f}\",\n            fill=color,\n            close=True,\n        )\n        self.add_element_to_frame(command.transform.polarity, rectangle)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_arc(self, command: Arc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        # Arcs which start and end point overlaps are completely invisible in SVG.\n        # Therefore we need to replace them with two half-full-arcs.\n        # THB spec recommends doing it when exporting Gerber files, to avoid problems\n        # with floating point numbers, but I guess nobody does that.\n        if command.start_point == command.end_point:\n            # This is a vector from center to start point, so we can invert it and\n            # apply it twice to get the point on the opposite side of the center point.\n            relative = command.get_relative_start_point()\n            # Now we cen recursively invoke self with two modified copies of this\n            # command.\n            self.render_arc(\n                command.model_copy(\n                    update={\n                        \"start_point\": command.start_point,\n                        \"end_point\": command.start_point - (relative * 2),\n                    },\n                ),\n            )\n            self.render_arc(\n                command.model_copy(\n                    update={\n                        \"start_point\": command.start_point - (relative * 2),\n                        \"end_point\": command.start_point,\n                    },\n                ),\n            )\n            return\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.start_point,\n            ),\n        )\n        # First we calculate perpendicular vector. This vector is always pointing\n        # from the center, thus it is perpendicular to arc.\n        # Then we can normalize it and multiply by half of aperture diameter,\n        # effectively giving us vector pointing to inner/outer edge of line.\n        # We can ignore the fact that we don't know which point (inner/outer) we\n        # have, as long as we get the same every time, then we can pair it with\n        # corresponding vector made from end point and create single arc,\n        # Then invert both vectors and draw second arc.\n        start_perpendicular_vector = command.get_relative_start_point()\n        start_normalized_perpendicular_vector = start_perpendicular_vector.normalize()\n        start_point_offset = start_normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        end_perpendicular_vector = command.get_relative_end_point()\n        end_normalized_perpendicular_vector = end_perpendicular_vector.normalize()\n        end_point_offset = end_normalized_perpendicular_vector * (\n            command.aperture.get_stroke_width() / 2.0\n        )\n\n        arc_path = drawsvg.Path(fill=color)\n\n        # Determine start point of inner arc.\n        start_inner = command.start_point + start_point_offset\n        end_inner = command.end_point + end_point_offset\n        # Move path ptr to inner arc start point.\n        arc_path.M(\n            f\"{self.convert_x(start_inner.x):.8f}\",\n            f\"{self.convert_y(start_inner.y):.8f}\",\n        )\n        self.render_arc_to_path(\n            command.model_copy(\n                update={\n                    \"start_point\": start_inner,\n                    \"end_point\": end_inner,\n                },\n            ),\n            arc_path,\n        )\n        # Determine start point of outer arc.\n        # This arc have to be in reverse direction, so we swap start/end points.\n        start_outer = command.end_point - end_point_offset\n        end_outer = command.start_point - start_point_offset\n        # Draw line between end of inner arc and start of outer arc.\n        arc_path.L(\n            f\"{self.convert_x(start_outer.x):.8f}\",\n            f\"{self.convert_y(start_outer.y):.8f}\",\n        )\n        self.render_cc_arc_to_path(\n            CCArc2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                start_point=start_outer,\n                center_point=command.center_point,\n                end_point=end_outer,\n            ),\n            arc_path,\n        )\n        # Close arc box by drawing line between end of outer arc and start of inner\n        arc_path.Z()\n        self.add_element_to_frame(command.transform.polarity, arc_path)\n\n        command.aperture.render_flash(\n            self.renderer,\n            Flash2(\n                transform=command.transform,\n                attributes=command.attributes,\n                aperture=command.aperture,\n                flash_point=command.end_point,\n            ),\n        )\n\n    def render_cc_arc(self, command: CCArc2) -&gt; None:\n        \"\"\"Render arc to target image.\"\"\"\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.end_point,\n                    \"end_point\": command.start_point,\n                },\n            ),\n        )\n\n    def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n        \"\"\"Render flash circle to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            aperture_group.append(\n                drawsvg.Circle(\n                    cx=0,\n                    cy=0,\n                    r=self.convert_size(aperture.diameter) / Decimal(\"2.0\"),\n                    fill=color,\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                x=self.convert_x(command.flash_point.x),\n                y=self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def create_group_for_aperture(\n        self,\n        bbox: BoundingBox,\n        hole_diameter: Optional[Offset],\n    ) -&gt; drawsvg.Group:\n        \"\"\"Create SVG group for aperture.\"\"\"\n        if hole_diameter is None:\n            return drawsvg.Group()\n\n        mask = self.create_mask(bbox)\n        central_circle = drawsvg.Circle(\n            cx=0,\n            cy=0,\n            r=self.convert_size(hole_diameter) / 2,\n            fill=\"black\",\n        )\n        mask.append(central_circle)\n\n        return drawsvg.Group(mask=mask)\n\n    def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n        \"\"\"Render flash no circle aperture to target image.\"\"\"\n\n    def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n        \"\"\"Render flash rectangle to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            aperture_group.append(\n                drawsvg.Rectangle(\n                    -self.convert_size(aperture.x_size) / 2,\n                    -self.convert_size(aperture.y_size) / 2,\n                    self.convert_size(aperture.x_size),\n                    self.convert_size(aperture.y_size),\n                    fill=color,\n                    transform=f\"rotate(-{aperture.rotation})\",\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n        \"\"\"Render flash obround to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n            x_size = self.convert_size(aperture.x_size)\n            y_size = self.convert_size(aperture.y_size)\n            radius = x_size.min(y_size) / Decimal(\"2.0\")\n\n            aperture_group.append(\n                drawsvg.Rectangle(\n                    -self.convert_size(aperture.x_size) / 2,\n                    -self.convert_size(aperture.y_size) / 2,\n                    x_size,\n                    y_size,\n                    fill=color,\n                    rx=radius,\n                    ry=radius,\n                    transform=f\"rotate(-{aperture.rotation})\",\n                ),\n            )\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n        \"\"\"Render flash polygon to target image.\"\"\"\n        color = self.get_color(command.transform.polarity)\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            aperture_group = self.create_group_for_aperture(\n                aperture.get_bounding_box(),\n                aperture.hole_diameter,\n            )\n\n            number_of_vertices = aperture.number_vertices\n            initial_angle = aperture.rotation\n            inner_angle = Decimal(\"360\") / Decimal(number_of_vertices)\n\n            radius_vector = Vector2D.UNIT_X * (aperture.outer_diameter / Decimal(\"2.0\"))\n            rotated_radius_vector = radius_vector.rotate_around_origin(initial_angle)\n\n            p = drawsvg.Path(fill=color)\n            p.M(\n                f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n            )\n\n            for i in range(1, number_of_vertices):\n                rotation_angle = inner_angle * i + initial_angle\n                rotated_radius_vector = radius_vector.rotate_around_origin(\n                    rotation_angle,\n                )\n                p.L(\n                    f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                    f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n                )\n\n            p.Z()\n\n            aperture_group.append(p)\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                self.convert_x(command.flash_point.x),\n                self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n        \"\"\"Render flash macro aperture to target image.\"\"\"\n        transform = command.transform\n        aperture_id = self.get_aperture_id(aperture, transform)\n        aperture_group = self.get_aperture(aperture_id)\n\n        if aperture_group is None:\n            self.push_render_frame(\n                command.get_bounding_box(),\n                normalize_origin_to_0_0=False,\n                flip_y=False,\n            )\n            for cmd in aperture.command_buffer:\n                cmd.render(self.renderer)\n\n            frame = self.pop_render_frame()\n            aperture_group = frame.group\n            self.set_aperture(aperture_id, aperture_group)\n\n        self.add_element_to_frame(\n            command.transform.polarity,\n            drawsvg.Use(\n                aperture_group,\n                x=self.convert_x(command.flash_point.x),\n                y=self.convert_y(command.flash_point.y),\n            ),\n        )\n\n    def render_region(self, command: Region2) -&gt; None:\n        \"\"\"Render region to target image.\"\"\"\n        if len(command.command_buffer) == 0:\n            return\n\n        self.current_frame.is_region = True\n\n        color = self.get_color(command.transform.polarity)\n        region = drawsvg.Path(fill=color)\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, (Line2, Arc2, CCArc2)):\n                region.M(\n                    f\"{self.convert_x(cmd.start_point.x):.8f}\",\n                    f\"{self.convert_y(cmd.start_point.y):.8f}\",\n                )\n                break\n\n        for cmd in command.command_buffer:\n            if isinstance(cmd, Line2):\n                self.render_line_to_path(cmd, region)\n            elif isinstance(cmd, Arc2):\n                self.render_arc_to_path(cmd, region)\n            elif isinstance(cmd, CCArc2):\n                self.render_cc_arc_to_path(cmd, region)\n            else:\n                raise NotImplementedError\n\n        region.Z()\n        self.add_element_to_frame(command.transform.polarity, region)\n\n        self.current_frame.is_region = False\n\n    def render_line_to_path(self, command: Line2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        path.L(\n            f\"{self.convert_x(command.end_point.x):.8f}\",\n            f\"{self.convert_y(command.end_point.y):.8f}\",\n        )\n\n    def render_arc_to_path(self, command: Arc2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        relative_start_vector = command.get_relative_start_point()\n        relative_end_vector = command.get_relative_end_point()\n\n        angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n        angle_counter_clockwise = relative_start_vector.angle_between_cc(\n            relative_end_vector,\n        )\n        # We want to render clockwise angle, so if cc angle is bigger, we need to\n        # choose small angle.\n        large_arc = angle_clockwise &gt;= angle_counter_clockwise\n        sweep = 1\n\n        path.A(\n            rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n            ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n            rot=0,\n            large_arc=large_arc,\n            sweep=sweep,\n        )\n\n    def render_cc_arc_to_path(self, command: CCArc2, path: drawsvg.Path) -&gt; None:\n        \"\"\"Render line region boundary.\"\"\"\n        relative_start_vector = command.get_relative_start_point()\n        relative_end_vector = command.get_relative_end_point()\n\n        angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n        angle_counter_clockwise = relative_start_vector.angle_between_cc(\n            relative_end_vector,\n        )\n        # We want to render clockwise angle, so if cc angle is bigger, we need to\n        # choose small angle.\n        large_arc = not (angle_clockwise &gt;= angle_counter_clockwise)\n        sweep = 0\n\n        path.A(\n            rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n            ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n            ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n            rot=0,\n            large_arc=large_arc,\n            sweep=sweep,\n        )\n\n    def get_image_ref(self) -&gt; ImageRef:\n        \"\"\"Get reference to render image.\"\"\"\n        return SvgImageRef(self.drawing)\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize rendering.\"\"\"\n        if len(self.rendering_stack) &gt; 1:\n            self.rendering_stack = [self.rendering_stack[0]]\n        elif len(self.rendering_stack) &lt; 1:\n            raise RuntimeError\n\n        width = self.convert_size(self.current_frame.bounding_box.width)\n        height = self.convert_size(self.current_frame.bounding_box.height)\n        self.drawing = drawsvg.Drawing(\n            width=width,\n            height=height,\n        )\n        self.drawing.append(self.get_layer(Polarity.Dark))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.base_frame","title":"base_frame  <code>property</code>","text":"<pre><code>base_frame: SvgRenderingFrame\n</code></pre> <p>Get base rendering stack frame.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.current_frame","title":"current_frame  <code>property</code>","text":"<pre><code>current_frame: SvgRenderingFrame\n</code></pre> <p>Get current rendering stack frame.</p>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.init","title":"init","text":"<pre><code>init(\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None\n</code></pre> <p>Initialize rendering hooks.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def init(\n    self,\n    renderer: Renderer2,\n    command_buffer: ReadonlyCommandBuffer2,\n) -&gt; None:\n    \"\"\"Initialize rendering hooks.\"\"\"\n    if not isinstance(renderer, SvgRenderer2):\n        raise NotImplementedError\n\n    self.renderer = renderer\n    self.command_buffer = command_buffer\n    self.rendering_stack: list[SvgRenderingFrame] = [\n        SvgRenderingFrame(\n            bounding_box=self.command_buffer.get_bounding_box(),\n            normalize_origin_to_0_0=True,\n            flip_y=self.flip_y,\n        ),\n    ]\n    self.apertures: dict[str, drawsvg.Group] = {}\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.push_render_frame","title":"push_render_frame","text":"<pre><code>push_render_frame(\n    bbox: BoundingBox,\n    *,\n    normalize_origin_to_0_0: bool,\n    flip_y: bool\n) -&gt; None\n</code></pre> <p>Push new segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def push_render_frame(\n    self,\n    bbox: BoundingBox,\n    *,\n    normalize_origin_to_0_0: bool,\n    flip_y: bool,\n) -&gt; None:\n    \"\"\"Push new segment render frame.\"\"\"\n    self.rendering_stack.append(\n        SvgRenderingFrame(\n            bounding_box=bbox,\n            normalize_origin_to_0_0=normalize_origin_to_0_0,\n            flip_y=flip_y,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.pop_render_frame","title":"pop_render_frame","text":"<pre><code>pop_render_frame() -&gt; SvgRenderingFrame\n</code></pre> <p>Pop segment render frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def pop_render_frame(self) -&gt; SvgRenderingFrame:\n    \"\"\"Pop segment render frame.\"\"\"\n    if len(self.rendering_stack) &lt;= 1:\n        raise RuntimeError\n    return self.rendering_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.add_element_to_frame","title":"add_element_to_frame","text":"<pre><code>add_element_to_frame(\n    polarity: Polarity, element: drawsvg.DrawingBasicElement\n) -&gt; None\n</code></pre> <p>Add element to current frame.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def add_element_to_frame(\n    self,\n    polarity: Polarity,\n    element: drawsvg.DrawingBasicElement,\n) -&gt; None:\n    \"\"\"Add element to current frame.\"\"\"\n    self.get_layer(polarity).append(element)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_layer","title":"get_layer","text":"<pre><code>get_layer(\n    polarity: Polarity,\n) -&gt; drawsvg.Group | drawsvg.Mask\n</code></pre> <p>Get SVG layer object corresponding to polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_layer(self, polarity: Polarity) -&gt; drawsvg.Group | drawsvg.Mask:\n    \"\"\"Get SVG layer object corresponding to polarity.\"\"\"\n    # In general what we want to do is to have a layer made of group with mask.\n    # First we fill the group with dark command, then after meeting first clear\n    # command we start filling mask with consecutive clear command until\n    # we meed dark command again. Then we create new group-mask layer to repeat the\n    # cycle.\n\n    # If frame is not initialized, initialize it.\n    if self.current_frame.polarity is None:\n        self.current_frame.polarity = polarity\n        self.add_masked_group_to_frame()\n\n        return self.current_frame.get_group_or_mask(polarity.is_solid())\n\n    if polarity.is_solid() != self.current_frame.polarity.is_solid():\n        # If polarity of frame is solid it means that mask for this group is still\n        # empty and can be filled.\n        if self.current_frame.polarity.is_solid():\n            self.current_frame.polarity = polarity\n            return self.current_frame.mask\n        # If polarity of frame is clear, it means that we already filled\n        # both group and mask and we need to create new group-mask layer.\n        self.add_masked_group_to_frame()\n        self.current_frame.polarity = polarity\n        return self.current_frame.group\n\n    # We have the same polarity as layer (and as previous commands) so we can\n    # simply add it to current layer.\n    return self.current_frame.get_group_or_mask(polarity.is_solid())\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.add_masked_group_to_frame","title":"add_masked_group_to_frame","text":"<pre><code>add_masked_group_to_frame() -&gt; None\n</code></pre> <p>Create new layer including previous layer.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def add_masked_group_to_frame(self) -&gt; None:\n    \"\"\"Create new layer including previous layer.\"\"\"\n    self.current_frame.mask = self.create_full_mask()\n    new_layer = drawsvg.Group(mask=self.current_frame.mask)\n    new_layer.append(self.current_frame.group)\n    self.current_frame.group = new_layer\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_full_mask","title":"create_full_mask","text":"<pre><code>create_full_mask() -&gt; drawsvg.Mask\n</code></pre> <p>Create mask covering whole image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_full_mask(self) -&gt; drawsvg.Mask:\n    \"\"\"Create mask covering whole image.\"\"\"\n    bbox = self.base_frame.bounding_box\n    mask = drawsvg.Mask()\n    mask.append(\n        drawsvg.Rectangle(\n            x=self.convert_size(-bbox.width / 2),\n            y=self.convert_size(-bbox.height / 2),\n            width=self.convert_size(bbox.width * 2),\n            height=self.convert_size(bbox.height * 2),\n            fill=\"white\",\n        ),\n    )\n    return mask\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_mask","title":"create_mask","text":"<pre><code>create_mask(bbox: BoundingBox) -&gt; drawsvg.Mask\n</code></pre> <p>Create mask covering specified bounding box.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_mask(self, bbox: BoundingBox) -&gt; drawsvg.Mask:\n    \"\"\"Create mask covering specified bounding box.\"\"\"\n    mask = drawsvg.Mask()\n    mask.append(\n        drawsvg.Rectangle(\n            x=self.convert_size(bbox.min_x),\n            y=self.convert_size(bbox.min_y),\n            width=self.convert_size(bbox.width),\n            height=self.convert_size(bbox.height),\n            fill=\"white\",\n        ),\n    )\n    return mask\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_x","title":"convert_x","text":"<pre><code>convert_x(x: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_x(self, x: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    if self.current_frame.normalize_origin_to_0_0:\n        origin_offset_x = self.current_frame.bounding_box.min_x.as_millimeters()\n    else:\n        origin_offset_x = Decimal(0)\n\n    corrected_position_x = x.as_millimeters() - origin_offset_x\n\n    return corrected_position_x * self.scale\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_y","title":"convert_y","text":"<pre><code>convert_y(y: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to y coordinate in image space.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_y(self, y: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to y coordinate in image space.\"\"\"\n    return self._convert_y(\n        y,\n        normalize_origin_to_0_0=self.current_frame.normalize_origin_to_0_0,\n        flip_y=self.current_frame.flip_y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.convert_size","title":"convert_size","text":"<pre><code>convert_size(diameter: Offset) -&gt; Decimal\n</code></pre> <p>Convert y offset to pixel y coordinate.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def convert_size(self, diameter: Offset) -&gt; Decimal:\n    \"\"\"Convert y offset to pixel y coordinate.\"\"\"\n    return diameter.as_millimeters() * self.scale\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_color","title":"get_color","text":"<pre><code>get_color(polarity: Polarity) -&gt; str\n</code></pre> <p>Get color for specified polarity.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_color(self, polarity: Polarity) -&gt; str:\n    \"\"\"Get color for specified polarity.\"\"\"\n    if self.current_frame.is_region:\n        if polarity.is_solid():\n            return self.color_scheme.solid_region_color.to_hex()\n        return \"black\"\n\n    if polarity.is_solid():\n        return self.color_scheme.solid_color.to_hex()\n    return \"black\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_aperture_id","title":"get_aperture_id","text":"<pre><code>get_aperture_id(\n    aperture: Aperture2, transform: ApertureTransform\n) -&gt; str\n</code></pre> <p>Get unique ID for aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_aperture_id(self, aperture: Aperture2, transform: ApertureTransform) -&gt; str:\n    \"\"\"Get unique ID for aperture.\"\"\"\n    return (\n        f\"{aperture.identifier}%\"\n        f\"{transform.get_transform_key()}%{transform.polarity}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_aperture","title":"get_aperture","text":"<pre><code>get_aperture(aperture_id: str) -&gt; Optional[drawsvg.Group]\n</code></pre> <p>Get SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_aperture(self, aperture_id: str) -&gt; Optional[drawsvg.Group]:\n    \"\"\"Get SVG group representing aperture.\"\"\"\n    return self.apertures.get(aperture_id)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.set_aperture","title":"set_aperture","text":"<pre><code>set_aperture(\n    aperture_id: str, aperture: drawsvg.Group\n) -&gt; None\n</code></pre> <p>Set SVG group representing aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def set_aperture(\n    self,\n    aperture_id: str,\n    aperture: drawsvg.Group,\n) -&gt; None:\n    \"\"\"Set SVG group representing aperture.\"\"\"\n    self.apertures[aperture_id] = aperture\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_line","title":"render_line","text":"<pre><code>render_line(command: Line2) -&gt; None\n</code></pre> <p>Render line to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_line(self, command: Line2) -&gt; None:\n    \"\"\"Render line to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n\n    parallel_vector = command.start_point - command.end_point\n    perpendicular_vector = parallel_vector.perpendicular()\n    normalized_perpendicular_vector = perpendicular_vector.normalize()\n    point_offset = normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    p0 = command.start_point - point_offset\n    p1 = command.start_point + point_offset\n    p2 = command.end_point + point_offset\n    p3 = command.end_point - point_offset\n\n    rectangle = drawsvg.Lines(\n        f\"{self.convert_x(p0.x):.8f}\",\n        f\"{self.convert_y(p0.y):.8f}\",\n        f\"{self.convert_x(p1.x):.8f}\",\n        f\"{self.convert_y(p1.y):.8f}\",\n        f\"{self.convert_x(p2.x):.8f}\",\n        f\"{self.convert_y(p2.y):.8f}\",\n        f\"{self.convert_x(p3.x):.8f}\",\n        f\"{self.convert_y(p3.y):.8f}\",\n        fill=color,\n        close=True,\n    )\n    self.add_element_to_frame(command.transform.polarity, rectangle)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_arc","title":"render_arc","text":"<pre><code>render_arc(command: Arc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_arc(self, command: Arc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    # Arcs which start and end point overlaps are completely invisible in SVG.\n    # Therefore we need to replace them with two half-full-arcs.\n    # THB spec recommends doing it when exporting Gerber files, to avoid problems\n    # with floating point numbers, but I guess nobody does that.\n    if command.start_point == command.end_point:\n        # This is a vector from center to start point, so we can invert it and\n        # apply it twice to get the point on the opposite side of the center point.\n        relative = command.get_relative_start_point()\n        # Now we cen recursively invoke self with two modified copies of this\n        # command.\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.start_point,\n                    \"end_point\": command.start_point - (relative * 2),\n                },\n            ),\n        )\n        self.render_arc(\n            command.model_copy(\n                update={\n                    \"start_point\": command.start_point - (relative * 2),\n                    \"end_point\": command.start_point,\n                },\n            ),\n        )\n        return\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.start_point,\n        ),\n    )\n    # First we calculate perpendicular vector. This vector is always pointing\n    # from the center, thus it is perpendicular to arc.\n    # Then we can normalize it and multiply by half of aperture diameter,\n    # effectively giving us vector pointing to inner/outer edge of line.\n    # We can ignore the fact that we don't know which point (inner/outer) we\n    # have, as long as we get the same every time, then we can pair it with\n    # corresponding vector made from end point and create single arc,\n    # Then invert both vectors and draw second arc.\n    start_perpendicular_vector = command.get_relative_start_point()\n    start_normalized_perpendicular_vector = start_perpendicular_vector.normalize()\n    start_point_offset = start_normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    end_perpendicular_vector = command.get_relative_end_point()\n    end_normalized_perpendicular_vector = end_perpendicular_vector.normalize()\n    end_point_offset = end_normalized_perpendicular_vector * (\n        command.aperture.get_stroke_width() / 2.0\n    )\n\n    arc_path = drawsvg.Path(fill=color)\n\n    # Determine start point of inner arc.\n    start_inner = command.start_point + start_point_offset\n    end_inner = command.end_point + end_point_offset\n    # Move path ptr to inner arc start point.\n    arc_path.M(\n        f\"{self.convert_x(start_inner.x):.8f}\",\n        f\"{self.convert_y(start_inner.y):.8f}\",\n    )\n    self.render_arc_to_path(\n        command.model_copy(\n            update={\n                \"start_point\": start_inner,\n                \"end_point\": end_inner,\n            },\n        ),\n        arc_path,\n    )\n    # Determine start point of outer arc.\n    # This arc have to be in reverse direction, so we swap start/end points.\n    start_outer = command.end_point - end_point_offset\n    end_outer = command.start_point - start_point_offset\n    # Draw line between end of inner arc and start of outer arc.\n    arc_path.L(\n        f\"{self.convert_x(start_outer.x):.8f}\",\n        f\"{self.convert_y(start_outer.y):.8f}\",\n    )\n    self.render_cc_arc_to_path(\n        CCArc2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            start_point=start_outer,\n            center_point=command.center_point,\n            end_point=end_outer,\n        ),\n        arc_path,\n    )\n    # Close arc box by drawing line between end of outer arc and start of inner\n    arc_path.Z()\n    self.add_element_to_frame(command.transform.polarity, arc_path)\n\n    command.aperture.render_flash(\n        self.renderer,\n        Flash2(\n            transform=command.transform,\n            attributes=command.attributes,\n            aperture=command.aperture,\n            flash_point=command.end_point,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_cc_arc","title":"render_cc_arc","text":"<pre><code>render_cc_arc(command: CCArc2) -&gt; None\n</code></pre> <p>Render arc to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_cc_arc(self, command: CCArc2) -&gt; None:\n    \"\"\"Render arc to target image.\"\"\"\n    self.render_arc(\n        command.model_copy(\n            update={\n                \"start_point\": command.end_point,\n                \"end_point\": command.start_point,\n            },\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_circle","title":"render_flash_circle","text":"<pre><code>render_flash_circle(\n    command: Flash2, aperture: Circle2\n) -&gt; None\n</code></pre> <p>Render flash circle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_circle(self, command: Flash2, aperture: Circle2) -&gt; None:\n    \"\"\"Render flash circle to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        aperture_group.append(\n            drawsvg.Circle(\n                cx=0,\n                cy=0,\n                r=self.convert_size(aperture.diameter) / Decimal(\"2.0\"),\n                fill=color,\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            x=self.convert_x(command.flash_point.x),\n            y=self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.create_group_for_aperture","title":"create_group_for_aperture","text":"<pre><code>create_group_for_aperture(\n    bbox: BoundingBox, hole_diameter: Optional[Offset]\n) -&gt; drawsvg.Group\n</code></pre> <p>Create SVG group for aperture.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def create_group_for_aperture(\n    self,\n    bbox: BoundingBox,\n    hole_diameter: Optional[Offset],\n) -&gt; drawsvg.Group:\n    \"\"\"Create SVG group for aperture.\"\"\"\n    if hole_diameter is None:\n        return drawsvg.Group()\n\n    mask = self.create_mask(bbox)\n    central_circle = drawsvg.Circle(\n        cx=0,\n        cy=0,\n        r=self.convert_size(hole_diameter) / 2,\n        fill=\"black\",\n    )\n    mask.append(central_circle)\n\n    return drawsvg.Group(mask=mask)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_no_circle","title":"render_flash_no_circle","text":"<pre><code>render_flash_no_circle(\n    command: Flash2, aperture: NoCircle2\n) -&gt; None\n</code></pre> <p>Render flash no circle aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_no_circle(self, command: Flash2, aperture: NoCircle2) -&gt; None:\n    \"\"\"Render flash no circle aperture to target image.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_rectangle","title":"render_flash_rectangle","text":"<pre><code>render_flash_rectangle(\n    command: Flash2, aperture: Rectangle2\n) -&gt; None\n</code></pre> <p>Render flash rectangle to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_rectangle(self, command: Flash2, aperture: Rectangle2) -&gt; None:\n    \"\"\"Render flash rectangle to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        aperture_group.append(\n            drawsvg.Rectangle(\n                -self.convert_size(aperture.x_size) / 2,\n                -self.convert_size(aperture.y_size) / 2,\n                self.convert_size(aperture.x_size),\n                self.convert_size(aperture.y_size),\n                fill=color,\n                transform=f\"rotate(-{aperture.rotation})\",\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_obround","title":"render_flash_obround","text":"<pre><code>render_flash_obround(\n    command: Flash2, aperture: Obround2\n) -&gt; None\n</code></pre> <p>Render flash obround to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_obround(self, command: Flash2, aperture: Obround2) -&gt; None:\n    \"\"\"Render flash obround to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n        x_size = self.convert_size(aperture.x_size)\n        y_size = self.convert_size(aperture.y_size)\n        radius = x_size.min(y_size) / Decimal(\"2.0\")\n\n        aperture_group.append(\n            drawsvg.Rectangle(\n                -self.convert_size(aperture.x_size) / 2,\n                -self.convert_size(aperture.y_size) / 2,\n                x_size,\n                y_size,\n                fill=color,\n                rx=radius,\n                ry=radius,\n                transform=f\"rotate(-{aperture.rotation})\",\n            ),\n        )\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_polygon","title":"render_flash_polygon","text":"<pre><code>render_flash_polygon(\n    command: Flash2, aperture: Polygon2\n) -&gt; None\n</code></pre> <p>Render flash polygon to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_polygon(self, command: Flash2, aperture: Polygon2) -&gt; None:\n    \"\"\"Render flash polygon to target image.\"\"\"\n    color = self.get_color(command.transform.polarity)\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        aperture_group = self.create_group_for_aperture(\n            aperture.get_bounding_box(),\n            aperture.hole_diameter,\n        )\n\n        number_of_vertices = aperture.number_vertices\n        initial_angle = aperture.rotation\n        inner_angle = Decimal(\"360\") / Decimal(number_of_vertices)\n\n        radius_vector = Vector2D.UNIT_X * (aperture.outer_diameter / Decimal(\"2.0\"))\n        rotated_radius_vector = radius_vector.rotate_around_origin(initial_angle)\n\n        p = drawsvg.Path(fill=color)\n        p.M(\n            f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n            f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n        )\n\n        for i in range(1, number_of_vertices):\n            rotation_angle = inner_angle * i + initial_angle\n            rotated_radius_vector = radius_vector.rotate_around_origin(\n                rotation_angle,\n            )\n            p.L(\n                f\"{self.convert_size(rotated_radius_vector.x):.8f}\",\n                f\"{self.convert_size(rotated_radius_vector.y):.8f}\",\n            )\n\n        p.Z()\n\n        aperture_group.append(p)\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            self.convert_x(command.flash_point.x),\n            self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_flash_macro","title":"render_flash_macro","text":"<pre><code>render_flash_macro(\n    command: Flash2, aperture: Macro2\n) -&gt; None\n</code></pre> <p>Render flash macro aperture to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_flash_macro(self, command: Flash2, aperture: Macro2) -&gt; None:\n    \"\"\"Render flash macro aperture to target image.\"\"\"\n    transform = command.transform\n    aperture_id = self.get_aperture_id(aperture, transform)\n    aperture_group = self.get_aperture(aperture_id)\n\n    if aperture_group is None:\n        self.push_render_frame(\n            command.get_bounding_box(),\n            normalize_origin_to_0_0=False,\n            flip_y=False,\n        )\n        for cmd in aperture.command_buffer:\n            cmd.render(self.renderer)\n\n        frame = self.pop_render_frame()\n        aperture_group = frame.group\n        self.set_aperture(aperture_id, aperture_group)\n\n    self.add_element_to_frame(\n        command.transform.polarity,\n        drawsvg.Use(\n            aperture_group,\n            x=self.convert_x(command.flash_point.x),\n            y=self.convert_y(command.flash_point.y),\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_region","title":"render_region","text":"<pre><code>render_region(command: Region2) -&gt; None\n</code></pre> <p>Render region to target image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_region(self, command: Region2) -&gt; None:\n    \"\"\"Render region to target image.\"\"\"\n    if len(command.command_buffer) == 0:\n        return\n\n    self.current_frame.is_region = True\n\n    color = self.get_color(command.transform.polarity)\n    region = drawsvg.Path(fill=color)\n\n    for cmd in command.command_buffer:\n        if isinstance(cmd, (Line2, Arc2, CCArc2)):\n            region.M(\n                f\"{self.convert_x(cmd.start_point.x):.8f}\",\n                f\"{self.convert_y(cmd.start_point.y):.8f}\",\n            )\n            break\n\n    for cmd in command.command_buffer:\n        if isinstance(cmd, Line2):\n            self.render_line_to_path(cmd, region)\n        elif isinstance(cmd, Arc2):\n            self.render_arc_to_path(cmd, region)\n        elif isinstance(cmd, CCArc2):\n            self.render_cc_arc_to_path(cmd, region)\n        else:\n            raise NotImplementedError\n\n    region.Z()\n    self.add_element_to_frame(command.transform.polarity, region)\n\n    self.current_frame.is_region = False\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_line_to_path","title":"render_line_to_path","text":"<pre><code>render_line_to_path(\n    command: Line2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_line_to_path(self, command: Line2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    path.L(\n        f\"{self.convert_x(command.end_point.x):.8f}\",\n        f\"{self.convert_y(command.end_point.y):.8f}\",\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_arc_to_path","title":"render_arc_to_path","text":"<pre><code>render_arc_to_path(\n    command: Arc2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_arc_to_path(self, command: Arc2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    relative_start_vector = command.get_relative_start_point()\n    relative_end_vector = command.get_relative_end_point()\n\n    angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n    angle_counter_clockwise = relative_start_vector.angle_between_cc(\n        relative_end_vector,\n    )\n    # We want to render clockwise angle, so if cc angle is bigger, we need to\n    # choose small angle.\n    large_arc = angle_clockwise &gt;= angle_counter_clockwise\n    sweep = 1\n\n    path.A(\n        rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n        ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n        rot=0,\n        large_arc=large_arc,\n        sweep=sweep,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.render_cc_arc_to_path","title":"render_cc_arc_to_path","text":"<pre><code>render_cc_arc_to_path(\n    command: CCArc2, path: drawsvg.Path\n) -&gt; None\n</code></pre> <p>Render line region boundary.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def render_cc_arc_to_path(self, command: CCArc2, path: drawsvg.Path) -&gt; None:\n    \"\"\"Render line region boundary.\"\"\"\n    relative_start_vector = command.get_relative_start_point()\n    relative_end_vector = command.get_relative_end_point()\n\n    angle_clockwise = relative_start_vector.angle_between(relative_end_vector)\n    angle_counter_clockwise = relative_start_vector.angle_between_cc(\n        relative_end_vector,\n    )\n    # We want to render clockwise angle, so if cc angle is bigger, we need to\n    # choose small angle.\n    large_arc = not (angle_clockwise &gt;= angle_counter_clockwise)\n    sweep = 0\n\n    path.A(\n        rx=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ry=f\"{self.convert_size(command.get_radius()):.8f}\",\n        ex=f\"{self.convert_x(command.end_point.x):.8f}\",\n        ey=f\"{self.convert_y(command.end_point.y):.8f}\",\n        rot=0,\n        large_arc=large_arc,\n        sweep=sweep,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.get_image_ref","title":"get_image_ref","text":"<pre><code>get_image_ref() -&gt; ImageRef\n</code></pre> <p>Get reference to render image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def get_image_ref(self) -&gt; ImageRef:\n    \"\"\"Get reference to render image.\"\"\"\n    return SvgImageRef(self.drawing)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgRenderer2Hooks.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize rendering.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize rendering.\"\"\"\n    if len(self.rendering_stack) &gt; 1:\n        self.rendering_stack = [self.rendering_stack[0]]\n    elif len(self.rendering_stack) &lt; 1:\n        raise RuntimeError\n\n    width = self.convert_size(self.current_frame.bounding_box.width)\n    height = self.convert_size(self.current_frame.bounding_box.height)\n    self.drawing = drawsvg.Drawing(\n        width=width,\n        height=height,\n    )\n    self.drawing.append(self.get_layer(Polarity.Dark))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgImageRef","title":"SvgImageRef","text":"<p>             Bases: <code>ImageRef</code></p> <p>Generic container for reference to rendered image.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgImageRef(ImageRef):\n    \"\"\"Generic container for reference to rendered image.\"\"\"\n\n    def __init__(self, image: drawsvg.Drawing) -&gt; None:\n        self.image = image\n\n    def _save_to_io(\n        self,\n        output: BinaryIO,\n        options: Optional[FormatOptions] = None,  # noqa: ARG002\n    ) -&gt; None:\n        \"\"\"Save rendered image to bytes stream buffer.\"\"\"\n        svg = self.image.as_svg()\n        if svg is None:\n            return\n        output.write(svg.encode(\"utf-8\"))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/renderer2/svg.html#pygerber.gerberx3.renderer2.svg.SvgFormatOptions","title":"SvgFormatOptions","text":"<p>Format options for SVG format.</p> Source code in <code>src/pygerber/gerberx3/renderer2/svg.py</code> <pre><code>class SvgFormatOptions:\n    \"\"\"Format options for SVG format.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/spec/__init__.html#pygerber.gerberx3.spec","title":"spec","text":"<p>The <code>spec</code> package contains fragments from the Gerber X3 specifications in Markdown prepared to be used by different parts of PyGerber.</p>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html","title":"rev_2024_05","text":""},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05","title":"rev_2024_05","text":"<p>The <code>rev_2024_05</code> module contains selected fragments from The Gerber Layer Format Specification - Revision 2024.05 used to provide information about gerber standard in messages shown to users of PyGerber.</p>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.Page","title":"Page  <code>dataclass</code>","text":"<p>The <code>Page</code> class represents a page in the Gerber specification.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>@dataclass\nclass Page:\n    \"\"\"The `Page` class represents a page in the Gerber specification.\"\"\"\n\n    section: tuple[int, ...]\n    page_number: int\n    title: str\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"Get the URL of the page.\"\"\"\n        return spec_url() + f\"#page={self.page_number}\"\n\n    @property\n    def pretty_title(self) -&gt; str:\n        \"\"\"Get the pretty title of the page.\"\"\"\n        section_number = \".\".join(map(str, self.section))\n        return f\"{section_number}. {self.title}\"\n\n    @property\n    def markdown(self) -&gt; str:\n        \"\"\"Get the markdown of the page.\"\"\"\n        return f\"#### [{self.pretty_title}]({self.url})\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.Page.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre> <p>Get the URL of the page.</p>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.Page.pretty_title","title":"pretty_title  <code>property</code>","text":"<pre><code>pretty_title: str\n</code></pre> <p>Get the pretty title of the page.</p>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.Page.markdown","title":"markdown  <code>property</code>","text":"<pre><code>markdown: str\n</code></pre> <p>Get the markdown of the page.</p>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.Sections","title":"Sections","text":"<p>             Bases: <code>Namespace</code></p> <p>The <code>Sections</code> class contains map of sections of Gerber specification.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>class Sections(Namespace):\n    \"\"\"The `Sections` class contains map of sections of Gerber specification.\"\"\"\n\n    s_1 = Page((1,), 9, \"Introduction\")\n    s_1_1 = Page((1, 1), 9, \"Scope and Target Audience\")\n    s_1_2 = Page((1, 2), 9, \"Further Resources\")\n    s_1_3 = Page((1, 3), 9, \"Reference Gerber Viewer\")\n    s_1_4 = Page((1, 4), 9, \"Copyright and Intellectual Property\")\n    s_2 = Page((2,), 11, \"Overview\")\n    s_2_1 = Page((2, 1), 11, \"File Structure\")\n    s_2_2 = Page((2, 2), 11, \"Apertures\")\n    s_2_3 = Page((2, 3), 12, \"Graphical objects\")\n    s_2_3_1 = Page((2, 3, 1), 13, \"Draws and Arcs\")\n    s_2_3_2 = Page((2, 3, 2), 14, \"Polarity\")\n    s_2_4 = Page((2, 4), 15, \"Blocks\")\n    s_2_5 = Page((2, 5), 15, \"Attributes\")\n    s_2_6 = Page((2, 6), 16, \"Operations (D01, D02, D03)\")\n    s_2_7 = Page((2, 7), 17, \"Graphics State\")\n    s_2_8 = Page((2, 8), 19, \"Commands Overview\")\n    s_2_9 = Page((2, 9), 20, \"Processing a Gerber File\")\n    s_2_10 = Page((2, 10), 22, \"Glossary\")\n    s_2_11 = Page((2, 11), 25, \"Annotated Example Files\")\n    s_2_11_1 = Page((2, 11, 1), 25, \"Example: Two Square Boxes\")\n    s_2_11_2 = Page((2, 11, 2), 27, \"Example: Polarities and Apertures\")\n    s_2_12 = Page((2, 12), 31, \"Conformance\")\n    s_3 = Page((3,), 32, \"Syntax\")\n    s_3_1 = Page((3, 1), 32, \"Character Set\")\n    s_3_2 = Page((3, 2), 32, \"Formal Grammar\")\n    s_3_3 = Page((3, 3), 34, \"Commands\")\n    s_3_4 = Page((3, 4), 36, \"Data Types\")\n    s_3_4_1 = Page((3, 4, 1), 36, \"Integers\")\n    s_3_4_2 = Page((3, 4, 2), 36, \"Decimals\")\n    s_3_4_3 = Page((3, 4, 3), 36, \"Strings\")\n    s_3_4_4 = Page((3, 4, 4), 37, \"Fields\")\n    s_3_4_5 = Page((3, 4, 5), 37, \"Names\")\n    s_3_5 = Page((3, 5), 38, \"Grammar of the Gerber Layer Format\")\n    s_3_6 = Page((3, 6), 44, \"File Extension, MIME Type and UTI\")\n    s_4 = Page((4,), 45, \"Graphics\")\n    s_4_1 = Page((4, 1), 45, \"Comment (G04)\")\n    s_4_2 = Page((4, 2), 46, \"Coordinate Commands\")\n    s_4_2_1 = Page((4, 2, 1), 47, \"Unit (MO)\")\n    s_4_2_2 = Page((4, 2, 2), 48, \"Format Specification (FS)\")\n    s_4_3 = Page((4, 3), 49, \"Aperture Definition (AD)\")\n    s_4_3_1 = Page((4, 3, 1), 49, \"AD Command\")\n    s_4_3_2 = Page((4, 3, 2), 50, \"Examples\")\n    s_4_3_3 = Page((4, 3, 3), 50, \"Zero-size Apertures\")\n    s_4_4 = Page((4, 4), 51, \"Standard Aperture Templates\")\n    s_4_4_1 = Page((4, 4, 1), 51, \"Overview\")\n    s_4_4_2 = Page((4, 4, 2), 51, \"Circle\")\n    s_4_4_3 = Page((4, 4, 3), 53, \"Rectangle\")\n    s_4_4_4 = Page((4, 4, 4), 54, \"Obround\")\n    s_4_4_5 = Page((4, 4, 5), 55, \"Polygon\")\n    s_4_4_6 = Page((4, 4, 6), 56, \"Transparency of Holes\")\n    s_4_5 = Page((4, 5), 57, \"Aperture Macro (AM)\")\n    s_4_5_1 = Page((4, 5, 1), 59, \"Primitives\")\n    s_4_5_1_1 = Page((4, 5, 1, 2), 59, \"Overview\")\n    s_4_5_1_2 = Page((4, 5, 1, 2), 60, \"Comment, Code 0\")\n    s_4_5_1_3 = Page((4, 5, 1, 3), 61, \"Circle, Code 1\")\n    s_4_5_1_4 = Page((4, 5, 1, 4), 62, \"Vector Line, Code 20\")\n    s_4_5_1_5 = Page((4, 5, 1, 5), 63, \"Center Line, Code 21\")\n    s_4_5_1_6 = Page((4, 5, 1, 6), 64, \"Outline, Code 4\")\n    s_4_5_1_7 = Page((4, 5, 1, 7), 66, \"Polygon, Code 5\")\n    s_4_5_1_8 = Page((4, 5, 1, 8), 67, \"Thermal, Code 7\")\n    s_4_5_2 = Page((4, 5, 2), 68, \"Exposure Parameter\")\n    s_4_5_3 = Page((4, 5, 3), 69, \"Rotation Parameter\")\n    s_4_5_4 = Page((4, 5, 4), 70, \"Macro Variables and Expressions\")\n    s_4_5_5 = Page((4, 5, 5), 72, \"Examples\")\n    s_4_6 = Page((4, 6), 75, \"Set Current Aperture (Dnn)\")\n    s_4_7 = Page((4, 7), 76, \"Plot State Commands (G01,G02,G03,G75)\")\n    s_4_7_1 = Page((4, 7, 1), 76, \"Linear Plotting (G01)\")\n    s_4_7_2 = Page((4, 7, 2), 77, \"Circular Plotting (G02, G03, G75)\")\n    s_4_8 = Page((4, 8), 81, \"Operations (D01/D02/D03)\")\n    s_4_8_1 = Page((4, 8, 1), 81, \"Overview\")\n    s_4_8_2 = Page((4, 8, 2), 83, \"Plot (D01)\")\n    s_4_8_3 = Page((4, 8, 3), 83, \"Move (D02)\")\n    s_4_8_4 = Page((4, 8, 4), 83, \"Flash (D03)\")\n    s_4_8_5 = Page((4, 8, 5), 84, \"Example\")\n    s_4_9 = Page((4, 9), 85, \"Aperture Transformations (LP, LM, LR, LS)\")\n    s_4_9_1 = Page((4, 9, 1), 85, \"Overview\")\n    s_4_9_2 = Page((4, 9, 2), 87, \"Load Polarity (LP)\")\n    s_4_9_3 = Page((4, 9, 3), 87, \"Load Mirroring (LM)\")\n    s_4_9_4 = Page((4, 9, 4), 87, \"Load Rotation (LR)\")\n    s_4_9_5 = Page((4, 9, 5), 88, \"Load Scaling (LS)\")\n    s_4_9_6 = Page((4, 9, 6), 88, \"Example\")\n    s_4_10 = Page((4, 10), 90, \"Region Statement (G36/G37)\")\n    s_4_10_1 = Page((4, 10, 1), 90, \"Region Overview\")\n    s_4_10_2 = Page((4, 10, 2), 90, \"Region Statement Syntax\")\n    s_4_10_3 = Page((4, 10, 3), 91, \"Valid Contours\")\n    s_4_10_4 = Page((4, 10, 4), 93, \"Examples\")\n    s_4_10_5 = Page((4, 10, 5), 108, \"Copper Pours, Power and Ground Planes\")\n    s_4_11 = Page((4, 11), 111, \"Block Aperture (AB)\")\n    s_4_11_1 = Page((4, 11, 1), 111, \"Overview of block apertures\")\n    s_4_11_2 = Page((4, 11, 2), 111, \"AB Statement Syntax\")\n    s_4_11_3 = Page((4, 11, 3), 113, \"Usage of Block Apertures\")\n    s_4_11_4 = Page((4, 11, 4), 114, \"Example\")\n    s_4_12 = Page((4, 12), 116, \"Step and Repeat (SR)\")\n    s_4_13 = Page((4, 13), 119, \"End-of-file (M02)\")\n    s_4_14 = Page((4, 14), 120, \"Numerical Accuracy\")\n    s_4_14_1 = Page((4, 14, 1), 120, \"Visualization\")\n    s_4_14_2 = Page((4, 14, 2), 120, \"Image Processing\")\n    s_5 = Page((5,), 122, \"Attributes\")\n    s_5_1 = Page((5, 1), 122, \"Attributes Overview\")\n    s_5_2 = Page((5, 2), 125, \"File Attributes (TF)\")\n    s_5_3 = Page((5, 3), 125, \"Aperture Attributes (TA)\")\n    s_5_3_1 = Page((5, 3, 1), 126, \"Aperture Attributes on Regions\")\n    s_5_4 = Page((5, 4), 126, \"Object Attributes (TO)\")\n    s_5_5 = Page((5, 5), 127, \"Delete Attribute (TD)\")\n    s_5_6 = Page((5, 6), 128, \"Standard Attributes\")\n    s_5_6_1 = Page((5, 6, 1), 128, \"Overview\")\n    s_5_6_2 = Page((5, 6, 2), 130, \"Part\")\n    s_5_6_3 = Page((5, 6, 3), 131, \"FileFunction\")\n    s_5_6_4 = Page((5, 6, 4), 136, \"FilePolarity\")\n    s_5_6_5 = Page((5, 6, 5), 137, \"SameCoordinates\")\n    s_5_6_6 = Page((5, 6, 6), 137, \"CreationDate\")\n    s_5_6_7 = Page((5, 6, 7), 138, \"GenerationSoftware\")\n    s_5_6_8 = Page((5, 6, 8), 138, \"ProjectId\")\n    s_5_6_9 = Page((5, 6, 9), 139, \"MD5\")\n    s_5_6_10 = Page((5, 6, 10), 140, \"AperFunction\")\n    s_5_6_11 = Page((5, 6, 11), 148, \"DrillTolerance\")\n    s_5_6_12 = Page((5, 6, 12), 148, \"FlashText\")\n    s_5_6_13 = Page((5, 6, 13), 150, \"N (Net)\")\n    s_5_6_14 = Page((5, 6, 14), 152, \"P (Pin)\")\n    s_5_6_15 = Page((5, 6, 15), 153, \"C (Component Refdes)\")\n    s_5_6_16 = Page((5, 6, 16), 154, \"Cxxx (Component Characteristics)\")\n    s_5_7 = Page((5, 7), 156, \"Text in the Image\")\n    s_5_8 = Page((5, 8), 157, \"Examples\")\n    s_6 = Page((6,), 159, \"PCB Fabrication and Assembly Data\")\n    s_6_1 = Page((6, 1), 159, \"Structure\")\n    s_6_2 = Page((6, 2), 159, \"Mandatory Attributes\")\n    s_6_3 = Page((6, 3), 159, \"Alignment\")\n    s_6_4 = Page((6, 4), 159, \"Pads\")\n    s_6_5 = Page((6, 5), 159, \"The Profile\")\n    s_6_6 = Page((6, 6), 160, \"Drill/rout files\")\n    s_6_6_1 = Page((6, 6, 1), 160, \"Backdrilling\")\n    s_6_6_2 = Page((6, 6, 2), 161, \"Example Drill File\")\n    s_6_7 = Page((6, 7), 164, \"Drawings and Data\")\n    s_6_8 = Page((6, 8), 165, \"The CAD Netlist\")\n    s_6_8_1 = Page((6, 8, 1), 165, \"Benefits of Including the CAD Netlist\")\n    s_6_8_2 = Page((6, 8, 2), 166, \"IP Considerations\")\n    s_6_9 = Page((6, 9), 167, \"Component Data\")\n    s_6_9_1 = Page((6, 9, 1), 167, \"Overview\")\n    s_6_9_2 = Page((6, 9, 2), 167, \"Assembly Data Set\")\n    s_6_9_3 = Page((6, 9, 3), 168, \"Annotated Example Component Layer\")\n    s_7 = Page((7,), 170, \"Errors and Bad Practices\")\n    s_7_1 = Page((7, 1), 170, \"Errors\")\n    s_7_2 = Page((7, 2), 172, \"Bad Practices\")\n    s_8 = Page((8,), 174, \"Deprecated Format Elements\")\n    s_8_1 = Page((8, 1), 174, \"Deprecated Commands\")\n    s_8_1_1 = Page((8, 1, 1), 174, \"Overview\")\n    s_8_1_2 = Page((8, 1, 2), 176, \"Axis Select (AS)\")\n    s_8_1_3 = Page((8, 1, 3), 177, \"Image Name (IN)\")\n    s_8_1_4 = Page((8, 1, 4), 178, \"Image Polarity (IP)\")\n    s_8_1_5 = Page((8, 1, 5), 179, \"Image Rotation (IR)\")\n    s_8_1_6 = Page((8, 1, 6), 180, \"Load Name (LN)\")\n    s_8_1_7 = Page((8, 1, 7), 181, \"Mirror Image (MI)\")\n    s_8_1_8 = Page((8, 1, 8), 182, \"Offset (OF)\")\n    s_8_1_9 = Page((8, 1, 9), 183, \"Scale Factor (SF)\")\n    s_8_1_10 = Page((8, 1, 10), 184, \"Single-quadrant arc mode (G74)\")\n    s_8_2 = Page((8, 2), 188, \"Deprecated Command Options\")\n    s_8_2_1 = Page((8, 2, 1), 188, \"Format Specification (FS) Options\")\n    s_8_2_2 = Page((8, 2, 2), 189, \"Rectangular Hole in Standard Apertures\")\n    s_8_2_3 = Page((8, 2, 3), 190, \"Draws and Arcs with Rectangular Apertures\")\n    s_8_2_4 = Page((8, 2, 4), 191, \"Macro Primitive Code 2, Vector Line\")\n    s_8_2_5 = Page((8, 2, 5), 191, \"Macro Primitive Code 22, Lower Left Line\")\n    s_8_2_6 = Page((8, 2, 6), 192, \"Macro Primitive Code 6, Moir\u00e9\")\n    s_8_3 = Page((8, 3), 193, \"Deprecated Syntax Variations\")\n    s_8_3_1 = Page((8, 3, 1), 193, \"Combining G01/G02/G03 and D01 in a single command.\")\n    s_8_3_2 = Page((8, 3, 2), 193, \"Coordinate Data without Operation Code\")\n    s_8_3_3 = Page((8, 3, 3), 193, \"Style Variations in Command Codes\")\n    s_8_3_4 = Page((8, 3, 4), 194, \"Deprecated usage of SR\")\n    s_8_4 = Page((8, 4), 194, \"Deprecated Attribute Values\")\n    s_8_5 = Page((8, 5), 195, \"Standard Gerber (RS-274-D)\")\n    s_9 = Page((9,), 196, \"References\")\n    s_10 = Page((10,), 197, \"History\")\n    s_11 = Page((11,), 199, \"Revisions\")\n    s_11_1 = Page((11, 1), 199, \"Revision xxxx.xx\")\n    s_11_2 = Page((11, 2), 199, \"Revision 2023.08\")\n    s_11_3 = Page((11, 3), 199, \"Revision 2023.03\")\n    s_11_4 = Page((11, 4), 199, \"Revision 2022.02\")\n    s_11_5 = Page((11, 5), 199, \"Revision 2021.11\")\n    s_11_6 = Page((11, 6), 200, \"Revision 2021.04\")\n    s_11_7 = Page((11, 7), 200, \"Revision 2021.02 - Formal grammar\")\n    s_11_8 = Page((11, 8), 200, \"Revision 2020.09 - X3\")\n    s_11_9 = Page((11, 9), 200, \"Revision 2019.09\")\n    s_11_10 = Page((11, 10), 201, \"Revision 2019.06\")\n    s_11_11 = Page((11, 11), 201, \"Revision 2018.11\")\n    s_11_12 = Page((11, 12), 201, \"Revision 2018.09\")\n    s_11_13 = Page((11, 13), 201, \"Revision 2018.06\")\n    s_11_14 = Page((11, 14), 201, \"Revision 2018.05\")\n    s_11_15 = Page((11, 15), 202, \"Revision 2017.11\")\n    s_11_16 = Page((11, 16), 202, \"Revision 2017.05\")\n    s_11_17 = Page((11, 17), 202, \"Revision 2017.03\")\n    s_11_18 = Page((11, 18), 202, \"Revision 2016.12 - Nested step and repeat\")\n    s_11_19 = Page((11, 19), 203, \"Revision 2016.11\")\n    s_11_20 = Page((11, 20), 203, \"Revision 2016.09\")\n    s_11_21 = Page((11, 21), 203, \"Revision 2016.06\")\n    s_11_22 = Page((11, 22), 203, \"Revision 2016.04\")\n    s_11_23 = Page((11, 23), 204, \"Revision 2016.01\")\n    s_11_24 = Page((11, 24), 204, \"Revision 2015.10\")\n    s_11_25 = Page((11, 25), 204, \"Revision 2015.07\")\n    s_11_26 = Page((11, 26), 204, \"Revision 2015.06\")\n    s_11_27 = Page((11, 27), 204, \"Revision J4 (2015 02)\")\n    s_11_28 = Page((11, 28), 205, \"Revision J3 (2014 10)\")\n    s_11_29 = Page((11, 29), 205, \"Revision J2 (2014 07)\")\n    s_11_30 = Page((11, 30), 205, \"Revision J1 (2014 02) - X2\")\n    s_11_31 = Page((11, 31), 205, \"Revision I4 (2013 10)\")\n    s_11_32 = Page((11, 32), 205, \"Revision I3 (2013 06)\")\n    s_11_33 = Page((11, 33), 205, \"Revision I2 (2013 04)\")\n    s_11_34 = Page((11, 34), 205, \"Revision I1 (2012 12)\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.spec_url","title":"spec_url","text":"<pre><code>spec_url() -&gt; str\n</code></pre> <p>Get the URL of the Gerber specification.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def spec_url() -&gt; str:\n    \"\"\"Get the URL of the Gerber specification.\"\"\"\n    return \"https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2024-05_en.pdf\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.spec_title","title":"spec_title","text":"<pre><code>spec_title() -&gt; str\n</code></pre> <p>Get the title of the Gerber specification.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def spec_title() -&gt; str:\n    \"\"\"Get the title of the Gerber specification.\"\"\"\n    return \"### The Gerber Layer Format Specification - Revision 2024.05\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.d01","title":"d01","text":"<pre><code>d01() -&gt; str\n</code></pre> <p>Get doc about D01 command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def d01() -&gt; str:\n    \"\"\"Get doc about D01 command.\"\"\"\n    return f\"\"\"\n- {Sections.s_2_6.markdown}\n- {Sections.s_4_8_2.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.d02","title":"d02","text":"<pre><code>d02() -&gt; str\n</code></pre> <p>Get doc about D02 command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def d02() -&gt; str:\n    \"\"\"Get doc about D02 command.\"\"\"\n    return f\"\"\"\n- {Sections.s_2_6.markdown}\n- {Sections.s_4_8_3.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.d03","title":"d03","text":"<pre><code>d03() -&gt; str\n</code></pre> <p>Get doc about D03 command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def d03() -&gt; str:\n    \"\"\"Get doc about D03 command.\"\"\"\n    return f\"\"\"\n- {Sections.s_2_6.markdown}\n- {Sections.s_4_8_4.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.to","title":"to","text":"<pre><code>to() -&gt; str\n</code></pre> <p>Get doc about TO command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def to() -&gt; str:\n    \"\"\"Get doc about TO command.\"\"\"\n    return f\"\"\"\n- {Sections.s_5_4.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.ta","title":"ta","text":"<pre><code>ta() -&gt; str\n</code></pre> <p>Get doc about TA command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def ta() -&gt; str:\n    \"\"\"Get doc about TA command.\"\"\"\n    return f\"\"\"\n- {Sections.s_5_3.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.tf","title":"tf","text":"<pre><code>tf() -&gt; str\n</code></pre> <p>Get doc about TF command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def tf() -&gt; str:\n    \"\"\"Get doc about TF command.\"\"\"\n    return f\"\"\"\n- {Sections.s_5_2.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.td","title":"td","text":"<pre><code>td() -&gt; str\n</code></pre> <p>Get doc about TD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def td() -&gt; str:\n    \"\"\"Get doc about TD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_5_5.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.dnn","title":"dnn","text":"<pre><code>dnn() -&gt; str\n</code></pre> <p>Get doc about Dnn command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def dnn() -&gt; str:\n    \"\"\"Get doc about Dnn command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_6.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.adc","title":"adc","text":"<pre><code>adc() -&gt; str\n</code></pre> <p>Get doc about AD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def adc() -&gt; str:\n    \"\"\"Get doc about AD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_3.markdown}\n- {Sections.s_4_4_2.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.adr","title":"adr","text":"<pre><code>adr() -&gt; str\n</code></pre> <p>Get doc about AD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def adr() -&gt; str:\n    \"\"\"Get doc about AD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_3.markdown}\n- {Sections.s_4_4_3.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.ado","title":"ado","text":"<pre><code>ado() -&gt; str\n</code></pre> <p>Get doc about AD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def ado() -&gt; str:\n    \"\"\"Get doc about AD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_3.markdown}\n- {Sections.s_4_4_4.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.adp","title":"adp","text":"<pre><code>adp() -&gt; str\n</code></pre> <p>Get doc about AD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def adp() -&gt; str:\n    \"\"\"Get doc about AD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_3.markdown}\n- {Sections.s_4_4_5.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.ad_macro","title":"ad_macro","text":"<pre><code>ad_macro() -&gt; str\n</code></pre> <p>Get doc about AD command.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def ad_macro() -&gt; str:\n    \"\"\"Get doc about AD command.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_3.markdown}\n- {Sections.s_4_5.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/spec/rev_2024_05.html#pygerber.gerberx3.spec.rev_2024_05.code_1","title":"code_1","text":"<pre><code>code_1() -&gt; str\n</code></pre> <p>Get doc about Code 1 primitive.</p> Source code in <code>src/pygerber/gerberx3/spec/rev_2024_05.py</code> <pre><code>def code_1() -&gt; str:\n    \"\"\"Get doc about Code 1 primitive.\"\"\"\n    return f\"\"\"\n- {Sections.s_4_5.markdown}\n- {Sections.s_4_5_1_2.markdown}\n- {Sections.s_4_5_1.markdown}\n- {Sections.s_4_5_2.markdown}\n- {Sections.s_4_5_3.markdown}\n- {Sections.s_4_5_4.markdown}\n\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/__init__.html#pygerber.gerberx3.tokenizer","title":"tokenizer","text":"<p>Gerber X3 tokenizer.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/aperture_id.html","title":"aperture_id","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/aperture_id.html#pygerber.gerberx3.tokenizer.aperture_id","title":"aperture_id","text":"<p>Defines a class used to identify aperture objects created by parser.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/aperture_id.html#pygerber.gerberx3.tokenizer.aperture_id.ApertureID","title":"ApertureID","text":"<p>             Bases: <code>str</code>, <code>GerberCode</code></p> <p>Aperture ID wrapper.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/aperture_id.py</code> <pre><code>class ApertureID(str, GerberCode):\n    \"\"\"Aperture ID wrapper.\"\"\"\n\n    __slots__ = ()\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls,\n        source_type: Any,\n        handler: GetCoreSchemaHandler,\n    ) -&gt; CoreSchema:\n        \"\"\"Generate the pydantic-core schema.\"\"\"\n        return core_schema.no_info_after_validator_function(cls, handler(str))\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{self}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/aperture_id.html#pygerber.gerberx3.tokenizer.aperture_id.ApertureID.__get_pydantic_core_schema__","title":"__get_pydantic_core_schema__  <code>classmethod</code>","text":"<pre><code>__get_pydantic_core_schema__(\n    source_type: Any, handler: GetCoreSchemaHandler\n) -&gt; CoreSchema\n</code></pre> <p>Generate the pydantic-core schema.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/aperture_id.py</code> <pre><code>@classmethod\ndef __get_pydantic_core_schema__(\n    cls,\n    source_type: Any,\n    handler: GetCoreSchemaHandler,\n) -&gt; CoreSchema:\n    \"\"\"Generate the pydantic-core schema.\"\"\"\n    return core_schema.no_info_after_validator_function(cls, handler(str))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/aperture_id.html#pygerber.gerberx3.tokenizer.aperture_id.ApertureID.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/aperture_id.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{self}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/decorators.html","title":"decorators","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/decorators.html#pygerber.gerberx3.tokenizer.decorators","title":"decorators","text":"<p>Decorators for reducing boilerplate required to implement token features.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/decorators.html#pygerber.gerberx3.tokenizer.decorators.UseType","title":"UseType","text":"<p>             Bases: <code>Generic[T]</code></p> <p>Placeholder for passing type parameter specification as param.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/decorators.py</code> <pre><code>class UseType(Generic[T]):\n    \"\"\"Placeholder for passing type parameter specification as param.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/decorators.html#pygerber.gerberx3.tokenizer.decorators.AnnotateSpecSection","title":"AnnotateSpecSection","text":"<p>Add Gerber specification reference link to docstring.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/decorators.py</code> <pre><code>class AnnotateSpecSection:\n    \"\"\"Add Gerber specification reference link to docstring.\"\"\"\n\n    def __init__(self, spec_section: Revision202308) -&gt; None:\n        self.spec_section = spec_section\n\n    def __call__(self, class_: type[TokenT]) -&gt; type[TokenT]:\n        \"\"\"Update docstring with specification reference.\"\"\"\n        class_.__doc__ = (class_.__doc__ or \"\") + (\n            \"\\n\\n\"\n            f\"See section {self.spec_section.get_sec_id()} of \"\n            \"The Gerber Layer Format Specification \"\n            f\"{Revision.Revision_2023_08} - \"\n            f\"{self.spec_section.get_url()}\"\n        )\n        return class_\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/decorators.html#pygerber.gerberx3.tokenizer.decorators.AnnotateSpecSection.__call__","title":"__call__","text":"<pre><code>__call__(class_: type[TokenT]) -&gt; type[TokenT]\n</code></pre> <p>Update docstring with specification reference.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/decorators.py</code> <pre><code>def __call__(self, class_: type[TokenT]) -&gt; type[TokenT]:\n    \"\"\"Update docstring with specification reference.\"\"\"\n    class_.__doc__ = (class_.__doc__ or \"\") + (\n        \"\\n\\n\"\n        f\"See section {self.spec_section.get_sec_id()} of \"\n        \"The Gerber Layer Format Specification \"\n        f\"{Revision.Revision_2023_08} - \"\n        f\"{self.spec_section.get_url()}\"\n    )\n    return class_\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/errors.html#pygerber.gerberx3.tokenizer.errors","title":"errors","text":"<p>Base error classes used in this module.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/errors.html#pygerber.gerberx3.tokenizer.errors.TokenizerError","title":"TokenizerError","text":"<p>             Bases: <code>ValueError</code></p> <p>Base class for tokenizer errors.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/errors.py</code> <pre><code>class TokenizerError(ValueError):\n    \"\"\"Base class for tokenizer errors.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html","title":"grammar","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar","title":"grammar","text":"<p>GerberX3 grammar.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.TokenWrapper","title":"TokenWrapper","text":"<p>Class for wrapping ParserElements with Token classes.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>class TokenWrapper:\n    \"\"\"Class for wrapping ParserElements with Token classes.\"\"\"\n\n    def __init__(self, *, is_raw: bool) -&gt; None:\n        self.is_raw = is_raw\n\n    def __call__(\n        self,\n        token_cls: Type[Token],\n        parser_element: ParserElement,\n    ) -&gt; ParserElement:\n        \"\"\"Wrap ParserElement with Token class.\"\"\"\n        if self.is_raw:\n            return parser_element\n\n        return token_cls.wrap(parser_element)\n\n    @classmethod\n    def build(\n        cls,\n        wrapper: Optional[Self] = None,\n        *,\n        is_raw: bool = False,\n    ) -&gt; Self:\n        \"\"\"Build TokenWrapper instance.\"\"\"\n        if wrapper is not None:\n            return wrapper\n\n        return cls(is_raw=is_raw)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.TokenWrapper.__call__","title":"__call__","text":"<pre><code>__call__(\n    token_cls: Type[Token], parser_element: ParserElement\n) -&gt; ParserElement\n</code></pre> <p>Wrap ParserElement with Token class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>def __call__(\n    self,\n    token_cls: Type[Token],\n    parser_element: ParserElement,\n) -&gt; ParserElement:\n    \"\"\"Wrap ParserElement with Token class.\"\"\"\n    if self.is_raw:\n        return parser_element\n\n    return token_cls.wrap(parser_element)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.TokenWrapper.build","title":"build  <code>classmethod</code>","text":"<pre><code>build(\n    wrapper: Optional[Self] = None, *, is_raw: bool = False\n) -&gt; Self\n</code></pre> <p>Build TokenWrapper instance.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>@classmethod\ndef build(\n    cls,\n    wrapper: Optional[Self] = None,\n    *,\n    is_raw: bool = False,\n) -&gt; Self:\n    \"\"\"Build TokenWrapper instance.\"\"\"\n    if wrapper is not None:\n        return wrapper\n\n    return cls(is_raw=is_raw)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GrammarBuilderOptions","title":"GrammarBuilderOptions","text":"<p>Grammar builder options.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>class GrammarBuilderOptions:\n    \"\"\"Grammar builder options.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GrammarBuilder","title":"GrammarBuilder  <code>dataclass</code>","text":"<p>Base class for all grammar builder classes.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>@dataclass\nclass GrammarBuilder:\n    \"\"\"Base class for all grammar builder classes.\"\"\"\n\n    def __init__(\n        self,\n        wrapper: Optional[TokenWrapper] = None,\n        *,\n        is_raw: bool = False,\n        options: Optional[GrammarBuilderOptions] = None,\n    ) -&gt; None:\n        self.wrapper = TokenWrapper.build(wrapper=wrapper, is_raw=is_raw)\n        self.options = options if options is not None else GrammarBuilderOptions()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GerberGrammarBuilderOptions","title":"GerberGrammarBuilderOptions  <code>dataclass</code>","text":"<p>             Bases: <code>GrammarBuilderOptions</code></p> <p>Grammar builder options.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>@dataclass\nclass GerberGrammarBuilderOptions(GrammarBuilderOptions):\n    \"\"\"Grammar builder options.\"\"\"\n\n    ast_token_cls: Type[Token] = AST\n    block_aperture_begin_token_cls: Type[Token] = BlockApertureBegin\n    block_aperture_end_token_cls: Type[Token] = BlockApertureEnd\n    define_circle_token_cls: Type[Token] = DefineCircle\n    define_macro_token_cls: Type[Token] = DefineMacro\n    define_obround_token_cls: Type[Token] = DefineObround\n    define_polygon_token_cls: Type[Token] = DefinePolygon\n    define_rectangle_token_cls: Type[Token] = DefineRectangle\n    axis_select_token_cls: Type[Token] = AxisSelect\n    d01_draw_token_cls: Type[Token] = D01Draw\n    d02_move_token_cls: Type[Token] = D02Move\n    d03_flash_token_cls: Type[Token] = D03Flash\n    dnn_select_aperture_token_cls: Type[Token] = DNNSelectAperture\n    end_of_expression_token_cls: Type[Token] = EndOfExpression\n    fs_coordinate_format_token_cls: Type[Token] = CoordinateFormat\n    g01_set_linear_token_cls: Type[Token] = SetLinear\n    g02_set_clockwise_circular_token_cls: Type[Token] = SetClockwiseCircular\n    g03_set_counterclockwise_circular_token_cls: Type[Token] = (\n        SetCounterclockwiseCircular\n    )\n    g04_comment_token_cls: Type[Token] = Comment\n    g36_begin_region_token_cls: Type[Token] = BeginRegion\n    g37_end_region_token_cls: Type[Token] = EndRegion\n    g54_select_aperture_token_cls: Type[Token] = G54SelectAperture\n    g70_set_unit_inch_token_cls: Type[Token] = SetUnitInch\n    g71_set_unit_mm_token_cls: Type[Token] = SetUnitMillimeters\n    g74_single_quadrant_token_cls: Type[Token] = SetSingleQuadrantMode\n    g75_multi_quadrant_token_cls: Type[Token] = SetMultiQuadrantMode\n    g90_set_coordinate_absolute_token_cls: Type[Token] = SetAbsoluteNotation\n    g91_set_coordinate_incremental_token_cls: Type[Token] = SetIncrementalNotation\n    statement_token_cls: Type[Token] = Statement\n    in_image_name_token_cls: Type[Token] = ImageName\n    invalid_token_cls: Type[Token] = InvalidToken\n    ip_image_polarity_token_cls: Type[Token] = ImagePolarity\n    lm_load_mirroring_token_cls: Type[Token] = LoadMirroring\n    ln_load_name_token_cls: Type[Token] = LoadName\n    lp_load_polarity_token_cls: Type[Token] = LoadPolarity\n    lr_load_rotation_token_cls: Type[Token] = LoadRotation\n    ls_load_scaling_token_cls: Type[Token] = LoadScaling\n    of_image_offset_token_cls: Type[Token] = ImageOffset\n    as_axes_select_token_cls: Type[Token] = AxisSelect\n    m00_program_stop_token_cls: Type[Token] = M00ProgramStop\n    m01_optional_stop_token_cls: Type[Token] = M01OptionalStop\n    m02_end_of_file_token_cls: Type[Token] = M02EndOfFile\n    macro_definition_token_cls: Type[Token] = MacroDefinition\n    macro_addition_operator_token_cls: Type[Token] = AdditionOperator\n    macro_division_operator_token_cls: Type[Token] = DivisionOperator\n    macro_multiplication_operator_token_cls: Type[Token] = MultiplicationOperator\n    macro_negation_operator_token_cls: Type[Token] = NegationOperator\n    macro_positive_operator_token_cls: Type[Token] = PositiveOperator\n    macro_subtraction_operator_token_cls: Type[Token] = SubtractionOperator\n    macro_comment_token_cls: Type[Token] = MacroComment\n    macro_begin_token_cls: Type[Token] = MacroBegin\n    macro_numeric_constant_token_cls: Type[Token] = NumericConstant\n    macro_point_token_cls: Type[Token] = Point\n    macro_primitive_center_line_token_cls: Type[Token] = Code21CenterLineToken\n    macro_primitive_circle_token_cls: Type[Token] = Code1CircleToken\n    macro_primitive_outline_token_cls: Type[Token] = Code4OutlineToken\n    macro_primitive_polygon_token_cls: Type[Token] = Code5PolygonToken\n    macro_primitive_thermal_token_cls: Type[Token] = Code7ThermalToken\n    macro_primitive_vector_line_token_cls: Type[Token] = Code20VectorLineToken\n    macro_variable_definition_token_cls: Type[Token] = MacroVariableAssignment\n    macro_variable_name_token_cls: Type[Token] = MacroVariableName\n    mo_unit_mode_token_cls: Type[Token] = UnitMode\n    step_repeat_begin_token_cls: Type[Token] = StepRepeatBegin\n    step_repeat_end_token_cls: Type[Token] = StepRepeatEnd\n    ta_aperture_attribute_token_cls: Type[Token] = ApertureAttribute\n    td_delete_attribute_token_cls: Type[Token] = DeleteAttribute\n    tf_file_attribute_token_cls: Type[Token] = FileAttribute\n    to_object_attribute_token_cls: Type[Token] = ObjectAttribute\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GerberGrammarBuilder","title":"GerberGrammarBuilder","text":"<p>             Bases: <code>GrammarBuilder</code></p> <p>Base class for all Gerber grammar builders.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>class GerberGrammarBuilder(GrammarBuilder):\n    \"\"\"Base class for all Gerber grammar builders.\"\"\"\n\n    options: GerberGrammarBuilderOptions\n\n    def __init__(\n        self,\n        wrapper: Optional[TokenWrapper] = None,\n        *,\n        is_raw: bool = False,\n        options: Optional[GerberGrammarBuilderOptions] = None,\n    ) -&gt; None:\n        super().__init__(\n            wrapper=wrapper,\n            is_raw=is_raw,\n            options=options if options is not None else GerberGrammarBuilderOptions(),\n        )\n\n    def build(self) -&gt; GerberGrammar:\n        \"\"\"Build grammar object.\"\"\"\n        wrapper = self.wrapper\n        eoex = self._build_eoex()\n\n        load_commands = self._build_load_commands()\n        # Sets the polarity of the whole image.\n        ip = self._build_stmt(\n            wrapper(\n                self.options.ip_image_polarity_token_cls,\n                Literal(\"IP\") + oneOf(\"POS NEG\").set_results_name(\"image_polarity\"),\n            ),\n        )\n        # End of file.\n        m02 = wrapper(\n            self.options.m02_end_of_file_token_cls,\n            Literal(\"M02\").set_name(\"End of file\") + eoex,\n        )\n        # Optional stop.\n        m01 = wrapper(\n            self.options.m01_optional_stop_token_cls,\n            Literal(\"M01\").set_name(\"Optional stop\") + eoex,\n        )\n        # Program stop.\n        m00 = wrapper(\n            self.options.m00_program_stop_token_cls,\n            Literal(\"M00\").set_name(\"Program stop\") + eoex,\n        )\n\n        dnn = wrapper(\n            self.options.dnn_select_aperture_token_cls,\n            self._build_aperture_identifier() + eoex,\n        )\n        \"\"\"Sets the current aperture to D code nn.\"\"\"\n\n        fs = self._build_format_specifier()\n        # Sets the unit to mm or inch.\n        mo = self._build_stmt(\n            wrapper(\n                self.options.mo_unit_mode_token_cls,\n                Literal(\"MO\")\n                + oneOf(\"MM IN\").set_results_name(\"unit\").set_name(\"unit\"),\n            ),\n        )\n\n        # Open a step and repeat statement.\n        sr = self._build_step_repeat()\n\n        # Opens a block aperture statement and assigns its aperture number\n        ab_open = self._build_stmt(\n            wrapper(\n                self.options.block_aperture_begin_token_cls,\n                Literal(\"AB\") + self._build_aperture_identifier(),\n            ),\n        )\n        # Closes a block aperture statement.\n        ab_close = self._build_stmt(\n            wrapper(self.options.block_aperture_end_token_cls, Literal(\"AB\")),\n        )\n\n        g_codes = self._build_g_codes()\n        d_codes = self._build_d_codes()\n        comment = self._build_comment_token()\n        attributes = self._build_attribute_tokens()\n        macro = self._build_macro_tokens()\n        define_aperture = self._build_define_aperture()\n\n        common = (\n            mo\n            | fs\n            | macro\n            | define_aperture\n            | dnn\n            | (d_codes + eoex)\n            | (g_codes + d_codes + eoex)\n            | (g_codes + eoex)\n            | load_commands\n            | ip\n            | ab_open\n            | ab_close\n            | sr\n            | attributes\n            | m01\n            | eoex\n            | comment\n        )\n\n        invalid_token = self.wrapper(\n            self.options.invalid_token_cls,\n            Regex(\".+\").set_results_name(\"content\"),\n        )\n\n        resilient = self.wrapper(\n            self.options.ast_token_cls,\n            (common | m02 | m00 | invalid_token)[0, ...],\n        )\n        expressions = self.wrapper(\n            self.options.ast_token_cls,\n            (common | m02 | m00)[0, ...],\n        )\n        grammar = self.wrapper(\n            self.options.ast_token_cls,\n            common[0, ...] + (m02 | m00),\n        )\n\n        return GerberGrammar(grammar, expressions, resilient)\n\n    def _build_load_commands(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        lm = self._build_stmt(\n            wrapper(\n                self.options.lm_load_mirroring_token_cls,\n                Literal(\"LM\") + oneOf(\"N XY Y X\").set_results_name(\"mirroring\"),\n            ),\n        )\n        lp = self._build_stmt(\n            wrapper(\n                self.options.lp_load_polarity_token_cls,\n                Literal(\"LP\") + oneOf(\"C D\").set_results_name(\"polarity\"),\n            ),\n        )\n        ls = self._build_stmt(\n            wrapper(\n                self.options.ls_load_scaling_token_cls,\n                Literal(\"LS\") + self._build_decimal(\"scaling\"),\n            ),\n        )\n        lr = self._build_stmt(\n            wrapper(\n                self.options.lr_load_rotation_token_cls,\n                Literal(\"LR\") + self._build_decimal(\"rotation\"),\n            ),\n        )\n        ln = self._build_stmt(\n            wrapper(\n                self.options.ln_load_name_token_cls,\n                Literal(\"LN\") + self._build_string(),\n            ),\n        )\n        in_ = self._build_stmt(\n            wrapper(\n                self.options.in_image_name_token_cls,\n                Literal(\"IN\") + self._build_string(),\n            ),\n        )\n        as_ = self._build_stmt(\n            wrapper(\n                self.options.as_axes_select_token_cls,\n                Literal(\"AS\") + oneOf(\"AXBY AYBX\").set_results_name(\"correspondence\"),\n            ),\n        )\n        of = self._build_stmt(\n            wrapper(\n                self.options.of_image_offset_token_cls,\n                Literal(\"OF\")\n                + Opt(Literal(\"A\") + self._build_decimal(\"a\"))\n                + Opt(Literal(\"B\") + self._build_decimal(\"b\")),\n            ),\n        )\n\n        return lm | lp | ls | lr | as_ | of | in_ | ln\n\n    def _build_format_specifier(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        coord_digits = Regex(r\"[1-9][1-9]\")\n\n        # Sets the coordinate format, e.g. the number of decimals.\n        return self._build_stmt(\n            wrapper(\n                self.options.fs_coordinate_format_token_cls,\n                Literal(\"FS\")\n                + oneOf(\"L T\").set_results_name(\"zeros_mode\").set_name(\"zeros mode\")\n                + oneOf(\"A I\")\n                .set_results_name(\"coordinate_mode\")\n                .set_name(\"coordinate mode\")\n                + \"X\"\n                + coord_digits.set_results_name(\"x_format\").set_name(\n                    \"X coordinate format\",\n                )\n                + \"Y\"\n                + coord_digits.set_results_name(\"y_format\").set_name(\n                    \"Y coordinate format\",\n                ),\n            ),\n        )\n\n    def _build_step_repeat(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        sr_open = self._build_stmt(\n            wrapper(\n                self.options.step_repeat_begin_token_cls,\n                Literal(\"SR\")\n                + \"X\"\n                + self._build_integer(\"x_repeat\")\n                + \"Y\"\n                + self._build_integer(\"y_repeat\")\n                + \"I\"\n                + self._build_decimal(\"x_step\")\n                + \"J\"\n                + self._build_decimal(\"y_step\"),\n            ),\n        )\n        # Closes a step and repeat statement.\n        sr_close = self._build_stmt(\n            wrapper(self.options.step_repeat_end_token_cls, Literal(\"SR\")),\n        )\n\n        return sr_open | sr_close\n\n    def _build_g_codes(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        g54dnn = wrapper(\n            self.options.g54_select_aperture_token_cls,\n            Regex(\"G0*54\") + self._build_aperture_identifier(),\n        )\n        g01 = wrapper(self.options.g01_set_linear_token_cls, Regex(\"G0*1\"))\n        g02 = wrapper(self.options.g02_set_clockwise_circular_token_cls, Regex(\"G0*2\"))\n        g03 = wrapper(\n            self.options.g03_set_counterclockwise_circular_token_cls,\n            Regex(\"G0*3\"),\n        )\n        g36 = wrapper(self.options.g36_begin_region_token_cls, Regex(\"G0*36\"))\n        g37 = wrapper(self.options.g37_end_region_token_cls, Regex(\"G0*37\"))\n        g70 = wrapper(self.options.g70_set_unit_inch_token_cls, Regex(\"G0*70\"))\n        g71 = wrapper(self.options.g71_set_unit_mm_token_cls, Regex(\"G0*71\"))\n        g74 = wrapper(self.options.g74_single_quadrant_token_cls, Regex(\"G0*74\"))\n        g75 = wrapper(self.options.g75_multi_quadrant_token_cls, Regex(\"G0*75\"))\n        g90 = wrapper(\n            self.options.g90_set_coordinate_absolute_token_cls,\n            Regex(\"G0*90\"),\n        )\n        g91 = wrapper(\n            self.options.g91_set_coordinate_incremental_token_cls,\n            Regex(\"G0*91\"),\n        )\n\n        # Order is important, as g03 would match g36 if checked before g36 regex.\n        return g54dnn | g36 | g37 | g70 | g71 | g74 | g75 | g90 | g91 | g01 | g02 | g03\n\n    def _build_d_codes(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        x_coordinate = Literal(\"X\") + self._build_integer(\"x\", \"X coordinate\")\n        y_coordinate = Literal(\"Y\") + self._build_integer(\"y\", \"Y coordinate\")\n\n        i_coordinate = Literal(\"I\") + self._build_integer(\"i\", \"I offset\")\n        j_coordinate = Literal(\"J\") + self._build_integer(\"j\", \"J offset\")\n\n        xy = (x_coordinate + Opt(y_coordinate)) | (Opt(x_coordinate) + y_coordinate)\n        ij = (i_coordinate + Opt(j_coordinate)) | (Opt(i_coordinate) + j_coordinate)\n\n        d01 = wrapper(\n            self.options.d01_draw_token_cls,\n            ((Opt(xy) + Opt(ij) + Regex(\"D0*1\")) | (xy + Opt(ij))),\n        )\n        d02 = wrapper(\n            self.options.d02_move_token_cls,\n            Opt(xy) + Regex(\"D0*2\"),\n        )\n        d03 = wrapper(\n            self.options.d03_flash_token_cls,\n            Opt(xy) + Regex(\"D0*3\"),\n        )\n\n        return d03 | d02 | d01\n\n    def _build_comment_token(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n        eoex = self._build_eoex()\n\n        # A human readable comment, does not affect the image.\n        return wrapper(\n            self.options.g04_comment_token_cls,\n            Regex(\"G0*4\") + Opt(self._build_string(), default=\"\") + eoex,\n        )\n\n    def _build_define_aperture(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        ad = Literal(\"AD\").set_name(\"AD code\")\n\n        circle = wrapper(\n            self.options.define_circle_token_cls,\n            ad\n            + self._build_aperture_identifier()\n            + Literal(\"C\").set_results_name(\"aperture_type\")\n            + \",\"\n            + self._build_decimal(\"diameter\")\n            + Opt(\"X\" + self._build_decimal(\"hole_diameter\")),\n        ).set_name(\"define aperture circle\")\n\n        rectangle = wrapper(\n            self.options.define_rectangle_token_cls,\n            ad\n            + self._build_aperture_identifier()\n            + Literal(\"R\").set_results_name(\"aperture_type\")\n            + \",\"\n            + self._build_decimal(\"x_size\")\n            + \"X\"\n            + self._build_decimal(\"y_size\")\n            + Opt(\"X\" + self._build_decimal(\"hole_diameter\")),\n        ).set_name(\"define aperture rectangle\")\n\n        obround = wrapper(\n            self.options.define_obround_token_cls,\n            ad\n            + self._build_aperture_identifier()\n            + Literal(\"O\").set_results_name(\"aperture_type\")\n            + \",\"\n            + self._build_decimal(\"x_size\")\n            + \"X\"\n            + self._build_decimal(\"y_size\")\n            + Opt(\"X\" + self._build_decimal(\"hole_diameter\")),\n        ).set_name(\"define aperture obround\")\n\n        polygon = wrapper(\n            self.options.define_polygon_token_cls,\n            ad\n            + self._build_aperture_identifier()\n            + Literal(\"P\").set_results_name(\"aperture_type\")\n            + \",\"\n            + self._build_decimal(\"outer_diameter\")\n            + \"X\"\n            + self._build_decimal(\"number_of_vertices\")\n            + Opt(\n                \"X\"\n                + self._build_decimal(\"rotation\")\n                + Opt(\"X\" + self._build_decimal(\"hole_diameter\")),\n            ),\n        ).set_name(\"define aperture polygon\")\n\n        am_param = self._build_decimal(\"am_param\", list_all_matches=True)\n        # Defines a template-based aperture, assigns a D code to it.\n\n        macro = wrapper(\n            self.options.define_macro_token_cls,\n            ad\n            + self._build_aperture_identifier()\n            + self._build_name(\"aperture_type\")\n            + Opt(\",\" + am_param + ZeroOrMore(\"X\" + am_param)),\n        ).set_name(\"define aperture macro\")\n\n        return self._build_stmt(circle | rectangle | obround | polygon | macro)\n\n    def _build_macro_tokens(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        primitive = self._build_macro_primitive()\n        variable_definition = self._build_macro_variable_definition()\n        comment = self._build_comment_token()\n\n        macro_body = (\n            (primitive | variable_definition | comment)\n            .set_results_name(\"macro_body\", list_all_matches=True)\n            .set_name(\"macro body expression\")\n        )[1, ...]\n\n        am_start = (\n            self._annotate_parser_element(\n                wrapper(\n                    self.options.macro_begin_token_cls,\n                    Literal(\"AM\") + self._build_name(\"macro_name\"),\n                ),\n                \"macro_begin\",\n            )\n            + self._build_eoex()\n        )\n\n        # Defines a macro aperture template.\n        return self._build_stmt(\n            wrapper(\n                self.options.macro_definition_token_cls,\n                am_start + macro_body,\n            ),\n            eoex=False,\n        ).set_name(\"macro definition\")\n\n    def _build_macro_variable_definition(self) -&gt; ParserElement:\n        return self.wrapper(\n            self.options.macro_variable_definition_token_cls,\n            self._build_macro_variable()\n            + \"=\"\n            + self._build_macro_expr(\"value\")\n            + self._build_eoex(),\n        )\n\n    def _build_macro_primitive(self) -&gt; ParserElement:\n        cs = Suppress(Literal(\",\").set_name(\"comma\"))\n        primitive_comment = self.wrapper(\n            self.options.macro_comment_token_cls,\n            \"0\" + self._build_string(),\n        )\n        primitive_circle = self.wrapper(\n            self.options.macro_primitive_circle_token_cls,\n            \"1\"  # Circle\n            + cs\n            + self._build_macro_expr(\"exposure\")  # Exposure\n            + cs\n            + self._build_macro_expr(\"diameter\")  # Diameter\n            + cs\n            + self._build_macro_expr(\"center_x\")  # Center X\n            + cs\n            + self._build_macro_expr(\"center_y\")  # Center Y\n            + Opt(cs + self._build_macro_expr(\"rotation\")),  # Rotation\n        )\n        primitive_vector_line = self.wrapper(\n            self.options.macro_primitive_vector_line_token_cls,\n            \"20\"  # Vector Line\n            + cs\n            + self._build_macro_expr(\"exposure\")  # Exposure\n            + cs\n            + self._build_macro_expr(\"width\")  # Width\n            + cs\n            + self._build_macro_expr(\"start_x\")  # Start X\n            + cs\n            + self._build_macro_expr(\"start_y\")  # Start Y\n            + cs\n            + self._build_macro_expr(\"end_x\")  # End X\n            + cs\n            + self._build_macro_expr(\"end_y\")  # End Y\n            + cs\n            + self._build_macro_expr(\"rotation\"),  # Rotation\n        )\n        primitive_center_line = self.wrapper(\n            self.options.macro_primitive_center_line_token_cls,\n            \"21\"  # Center Line\n            + cs\n            + self._build_macro_expr(\"exposure\")  # Exposure\n            + cs\n            + self._build_macro_expr(\"width\")  # Width\n            + cs\n            + self._build_macro_expr(\"height\")  # height\n            + cs\n            + self._build_macro_expr(\"center_x\")  # Center X\n            + cs\n            + self._build_macro_expr(\"center_y\")  # Center Y\n            + cs\n            + self._build_macro_expr(\"rotation\"),  # Rotation\n        )\n        primitive_outline = self.wrapper(\n            self.options.macro_primitive_outline_token_cls,\n            \"4\"  # Outline\n            + cs\n            + self._build_macro_expr(\"exposure\")  # Exposure\n            + cs\n            + self._build_macro_expr(\"number_of_vertices\")  # Number of vertices\n            + cs\n            + self._build_macro_expr(\"start_x\")  # Start X\n            + cs\n            + self._build_macro_expr(\"start_y\")  # Start Y\n            + OneOrMore(  # Subsequent points...\n                self._build_macro_point().set_results_name(\n                    \"point\",\n                    list_all_matches=True,\n                ),\n            )\n            + cs\n            + self._build_macro_expr(\"rotation\"),  # Rotation\n        )\n        primitive_polygon = self.wrapper(\n            self.options.macro_primitive_polygon_token_cls,\n            \"5\"  # Polygon\n            + cs\n            + self._build_macro_expr(\"exposure\")  # Exposure\n            + cs\n            + self._build_macro_expr(\"number_of_vertices\")  # Number of vertices\n            + cs\n            + self._build_macro_expr(\"center_x\")  # Center X\n            + cs\n            + self._build_macro_expr(\"center_y\")  # Center Y\n            + cs\n            + self._build_macro_expr(\"diameter\")  # Diameter\n            + cs\n            + self._build_macro_expr(\"rotation\"),  # Rotation\n        )\n        primitive_thermal = self.wrapper(\n            self.options.macro_primitive_thermal_token_cls,\n            \"7\"  # Thermal\n            + cs\n            + self._build_macro_expr(\"center_x\")  # Center X\n            + cs\n            + self._build_macro_expr(\"center_y\")  # Center Y\n            + cs\n            + self._build_macro_expr(\"outer_diameter\")  # Outer diameter\n            + cs\n            + self._build_macro_expr(\"inner_diameter\")  # Inner diameter\n            + cs\n            + self._build_macro_expr(\"gap\")  # Gap\n            + cs\n            + self._build_macro_expr(\"rotation\"),  # Rotation\n        )\n\n        return (\n            (primitive_comment + self._build_eoex()).set_name(\"primitive comment\")\n            | (primitive_circle + self._build_eoex()).set_name(\"primitive circle\")\n            | (primitive_vector_line + self._build_eoex()).set_name(\n                \"primitive vector line\",\n            )\n            | (primitive_center_line + self._build_eoex()).set_name(\n                \"primitive center line\",\n            )\n            | (primitive_outline + self._build_eoex()).set_name(\"primitive outline\")\n            | (primitive_polygon + self._build_eoex()).set_name(\"primitive polygon\")\n            | (primitive_thermal + self._build_eoex()).set_name(\"primitive thermal\")\n        )\n\n    def _build_macro_point(self) -&gt; ParserElement:\n        cs = Suppress(Literal(\",\").set_name(\"comma\"))\n        return self.wrapper(\n            self.options.macro_point_token_cls,\n            cs + self._build_macro_expr(\"x\") + cs + self._build_macro_expr(\"y\"),\n        )\n\n    _macro_expr: Optional[ParserElement] = None\n\n    def _build_macro_expr(self, expr_name: str = \"expr\") -&gt; ParserElement:\n        macro_variable = self._build_macro_variable()\n        numeric_constant = self.wrapper(\n            self.options.macro_numeric_constant_token_cls,\n            Regex(r\"((([0-9]+)(\\.[0-9]*)?)|(\\.[0-9]+))\").set_results_name(\n                \"numeric_constant_value\",\n            ),\n        )\n\n        arithmetic_expression = Forward()\n\n        factor = macro_variable | numeric_constant\n\n        if self.wrapper.is_raw:\n            arithmetic_expression &lt;&lt;= ungroup(\n                infix_notation(\n                    factor,\n                    [\n                        (\"-\", 1, OpAssoc.RIGHT),\n                        (\"+\", 1, OpAssoc.RIGHT),\n                        (\"/\", 2, OpAssoc.RIGHT),\n                        (oneOf(\"x X\"), 2, OpAssoc.RIGHT),\n                        (\"-\", 2, OpAssoc.RIGHT),\n                        (\"+\", 2, OpAssoc.RIGHT),\n                    ],\n                ),\n            )\n        else:\n            arithmetic_expression &lt;&lt;= ungroup(\n                infix_notation(\n                    factor,\n                    [\n                        (\n                            Suppress(\"-\"),\n                            1,\n                            OpAssoc.RIGHT,\n                            self.options.macro_negation_operator_token_cls.new,\n                        ),\n                        (\n                            Suppress(\"+\"),\n                            1,\n                            OpAssoc.RIGHT,\n                            self.options.macro_positive_operator_token_cls.new,\n                        ),\n                        (\n                            Suppress(\"/\"),\n                            2,\n                            OpAssoc.RIGHT,\n                            self.options.macro_division_operator_token_cls.new,\n                        ),\n                        (\n                            Suppress(oneOf(\"x X\")),\n                            2,\n                            OpAssoc.RIGHT,\n                            self.options.macro_multiplication_operator_token_cls.new,\n                        ),\n                        (\n                            Suppress(\"-\"),\n                            2,\n                            OpAssoc.RIGHT,\n                            self.options.macro_subtraction_operator_token_cls.new,\n                        ),\n                        (\n                            Suppress(\"+\"),\n                            2,\n                            OpAssoc.RIGHT,\n                            self.options.macro_addition_operator_token_cls.new,\n                        ),\n                    ],\n                ),\n            )\n\n        expr = arithmetic_expression | factor\n\n        return expr.set_results_name(expr_name).set_name(expr_name)\n\n    def _build_macro_variable(self) -&gt; ParserElement:\n        return self.wrapper(\n            self.options.macro_variable_name_token_cls,\n            Regex(r\"\\$[0-9]*[1-9][0-9]*\")(\"macro_variable_name\"),\n        )\n\n    def _build_attribute_tokens(self) -&gt; ParserElement:\n        wrapper = self.wrapper\n\n        file_attribute_name = self._build_name().set_name(\"file attribute name\")\n        aperture_attribute_name = self._build_name().set_name(\"aperture attribute name\")\n        object_attribute_name = self._build_name().set_name(\"object attribute name\")\n\n        comma = Literal(\",\")\n        comma_with_field = comma + self._build_field()\n        maybe_comma_or_maybe_comma_with_field = Opt(comma_with_field | comma)\n\n        # Set a file attribute.\n        tf = wrapper(\n            self.options.tf_file_attribute_token_cls,\n            Literal(\"TF\")\n            + file_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Add an aperture attribute to the dictionary or modify it.\n        ta = wrapper(\n            self.options.ta_aperture_attribute_token_cls,\n            Literal(\"TA\")\n            + aperture_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Add an object attribute to the dictionary or modify it.\n        to = wrapper(\n            self.options.to_object_attribute_token_cls,\n            Literal(\"TO\")\n            + object_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Delete one or all attributes in the dictionary.\n        td = wrapper(\n            self.options.td_delete_attribute_token_cls,\n            Literal(\"TD\")\n            + Opt(\n                file_attribute_name | aperture_attribute_name | object_attribute_name,\n            ).set_results_name(\"attribute_name\"),\n        )\n\n        # Set a file attribute.\n        tf_comment = wrapper(\n            self.options.tf_file_attribute_token_cls,\n            Regex(\"G0*4\")\n            + Literal(\"#@!\")\n            + Literal(\"TF\")\n            + file_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Add an aperture attribute to the dictionary or modify it.\n        ta_comment = wrapper(\n            self.options.ta_aperture_attribute_token_cls,\n            Regex(\"G0*4\")\n            + Literal(\"#@!\")\n            + Literal(\"TA\")\n            + aperture_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Add an object attribute to the dictionary or modify it.\n        to_comment = wrapper(\n            self.options.to_object_attribute_token_cls,\n            Regex(\"G0*4\")\n            + Literal(\"#@!\")\n            + Literal(\"TO\")\n            + object_attribute_name.set_results_name(\"attribute_name\")\n            + maybe_comma_or_maybe_comma_with_field,\n        )\n        # Delete one or all attributes in the dictionary.\n        td_comment = wrapper(\n            self.options.td_delete_attribute_token_cls,\n            Regex(\"G0*4\")\n            + Literal(\"#@!\")\n            + Literal(\"TD\")\n            + Opt(\n                file_attribute_name | aperture_attribute_name | object_attribute_name,\n            ).set_results_name(\"attribute_name\"),\n        )\n\n        attrs = tf | ta | to | td\n        comment_attrs = tf_comment | ta_comment | to_comment | td_comment\n\n        return self._build_stmt(attrs) | comment_attrs\n\n    _build_eoex_cache: Optional[ParserElement] = None\n\n    def _build_eoex(self) -&gt; ParserElement:\n        if self._build_eoex_cache is None:\n            self._build_eoex_cache = self.wrapper(\n                self.options.end_of_expression_token_cls,\n                Literal(\"*\").set_name(\"end of expression\"),\n            )\n        return self._build_eoex_cache\n\n    def _build_stmt(\n        self,\n        expr: ParserElement,\n        *,\n        eoex: bool = True,\n    ) -&gt; ParserElement:\n        begin_stmt = Literal(\"%\")\n        end_stmt = Literal(\"%\")\n\n        return self.wrapper(\n            self.options.statement_token_cls,\n            begin_stmt + expr + ((self._build_eoex() + end_stmt) if eoex else end_stmt),\n        )\n\n    def _build_integer(\n        self,\n        result_name: str = \"integer\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            Combine(Opt(oneOf(\"+ -\")) + Word(nums)),\n            result_name,\n            name,\n            **kwargs,\n        )\n\n    def _annotate_parser_element(\n        self,\n        element: ParserElement,\n        result_name: str,\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        if name is None:\n            name = result_name\n        return element.set_name(name).set_results_name(result_name, **kwargs)\n\n    def _build_decimal(\n        self,\n        result_name: str = \"decimal\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            Regex(r\"[+-]?((([0-9]+)(\\.[0-9]*)?)|(\\.[0-9]+))\"),\n            result_name,\n            name,\n            **kwargs,\n        )\n\n    def _build_aperture_identifier(\n        self,\n        result_name: str = \"aperture_identifier\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            Combine(\"D\" + Regex(r\"[1-9][0-9]+\")),\n            result_name,\n            name,\n            **kwargs,\n        )\n\n    def _build_name(\n        self,\n        result_name: str = \"name\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            Regex(r\"[._a-zA-Z$][\\._a-zA-Z0-9]*\"),\n            result_name,\n            name,\n            **kwargs,\n        )\n\n    def _build_string(\n        self,\n        result_name: str = \"string\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            CharsNotIn(\"%*\"),\n            result_name,\n            name,\n            **kwargs,\n        )\n\n    def _build_field(\n        self,\n        result_name: str = \"field\",\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; ParserElement:\n        return self._annotate_parser_element(\n            CharsNotIn(\"%*\"),\n            result_name,\n            name,\n            **kwargs,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GerberGrammarBuilder.build","title":"build","text":"<pre><code>build() -&gt; GerberGrammar\n</code></pre> <p>Build grammar object.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>def build(self) -&gt; GerberGrammar:\n    \"\"\"Build grammar object.\"\"\"\n    wrapper = self.wrapper\n    eoex = self._build_eoex()\n\n    load_commands = self._build_load_commands()\n    # Sets the polarity of the whole image.\n    ip = self._build_stmt(\n        wrapper(\n            self.options.ip_image_polarity_token_cls,\n            Literal(\"IP\") + oneOf(\"POS NEG\").set_results_name(\"image_polarity\"),\n        ),\n    )\n    # End of file.\n    m02 = wrapper(\n        self.options.m02_end_of_file_token_cls,\n        Literal(\"M02\").set_name(\"End of file\") + eoex,\n    )\n    # Optional stop.\n    m01 = wrapper(\n        self.options.m01_optional_stop_token_cls,\n        Literal(\"M01\").set_name(\"Optional stop\") + eoex,\n    )\n    # Program stop.\n    m00 = wrapper(\n        self.options.m00_program_stop_token_cls,\n        Literal(\"M00\").set_name(\"Program stop\") + eoex,\n    )\n\n    dnn = wrapper(\n        self.options.dnn_select_aperture_token_cls,\n        self._build_aperture_identifier() + eoex,\n    )\n    \"\"\"Sets the current aperture to D code nn.\"\"\"\n\n    fs = self._build_format_specifier()\n    # Sets the unit to mm or inch.\n    mo = self._build_stmt(\n        wrapper(\n            self.options.mo_unit_mode_token_cls,\n            Literal(\"MO\")\n            + oneOf(\"MM IN\").set_results_name(\"unit\").set_name(\"unit\"),\n        ),\n    )\n\n    # Open a step and repeat statement.\n    sr = self._build_step_repeat()\n\n    # Opens a block aperture statement and assigns its aperture number\n    ab_open = self._build_stmt(\n        wrapper(\n            self.options.block_aperture_begin_token_cls,\n            Literal(\"AB\") + self._build_aperture_identifier(),\n        ),\n    )\n    # Closes a block aperture statement.\n    ab_close = self._build_stmt(\n        wrapper(self.options.block_aperture_end_token_cls, Literal(\"AB\")),\n    )\n\n    g_codes = self._build_g_codes()\n    d_codes = self._build_d_codes()\n    comment = self._build_comment_token()\n    attributes = self._build_attribute_tokens()\n    macro = self._build_macro_tokens()\n    define_aperture = self._build_define_aperture()\n\n    common = (\n        mo\n        | fs\n        | macro\n        | define_aperture\n        | dnn\n        | (d_codes + eoex)\n        | (g_codes + d_codes + eoex)\n        | (g_codes + eoex)\n        | load_commands\n        | ip\n        | ab_open\n        | ab_close\n        | sr\n        | attributes\n        | m01\n        | eoex\n        | comment\n    )\n\n    invalid_token = self.wrapper(\n        self.options.invalid_token_cls,\n        Regex(\".+\").set_results_name(\"content\"),\n    )\n\n    resilient = self.wrapper(\n        self.options.ast_token_cls,\n        (common | m02 | m00 | invalid_token)[0, ...],\n    )\n    expressions = self.wrapper(\n        self.options.ast_token_cls,\n        (common | m02 | m00)[0, ...],\n    )\n    grammar = self.wrapper(\n        self.options.ast_token_cls,\n        common[0, ...] + (m02 | m00),\n    )\n\n    return GerberGrammar(grammar, expressions, resilient)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/grammar.html#pygerber.gerberx3.tokenizer.grammar.GerberGrammar","title":"GerberGrammar","text":"<p>Gerber grammar container.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/grammar.py</code> <pre><code>class GerberGrammar:\n    \"\"\"Gerber grammar container.\"\"\"\n\n    def __init__(\n        self,\n        strict_grammar: ParserElement,\n        expression_grammar: ParserElement,\n        resilient_grammar: ParserElement,\n    ) -&gt; None:\n        self.strict_grammar = strict_grammar\n        self.expression_grammar = expression_grammar\n        self.resilient_grammar = resilient_grammar\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html","title":"tokenizer","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer","title":"tokenizer","text":"<p>GerberX3 format tokenizer.</p> <p>Parser is based on GerberX3 format described in Ucamco's <code>The Gerber Layer Format Specification</code>.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.TokenizerOptions","title":"TokenizerOptions  <code>dataclass</code>","text":"<p>Tokenizer options.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>@dataclass\nclass TokenizerOptions:\n    \"\"\"Tokenizer options.\"\"\"\n\n    grammar_options: GerberGrammarBuilderOptions = field(\n        default_factory=GerberGrammarBuilderOptions,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.Tokenizer","title":"Tokenizer","text":"<p>GerberX3 format tokenizer.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>class Tokenizer:\n    \"\"\"GerberX3 format tokenizer.\"\"\"\n\n    def __init__(self, options: Optional[TokenizerOptions] = None) -&gt; None:\n        \"\"\"GerberX3 format tokenizer.\"\"\"\n        logging.debug(\"Created %s GerberX3 tokenizer.\")\n        self.options = TokenizerOptions() if options is None else options\n        self.grammar = GerberGrammarBuilder(\n            options=self.options.grammar_options,\n        ).build()\n\n    def tokenize(self, source: str) -&gt; AST:\n        \"\"\"Convert source code into token stack.\n\n        Supports only full, valid GerberX3 files.\n        \"\"\"\n        return self._tokenize_grammar(\n            source,\n            self.grammar.strict_grammar,\n            parse_all=False,\n        )\n\n    def tokenize_expressions(self, source: str) -&gt; AST:\n        \"\"\"Convert source code into token stack.\n\n        Supports arbitrary sequences of valid GerberX3 expressions.\n        \"\"\"\n        return self._tokenize_grammar(\n            source,\n            self.grammar.expression_grammar,\n            parse_all=True,\n        )\n\n    def tokenize_resilient(self, source: str) -&gt; AST:\n        \"\"\"Convert source code into token stack.\n\n        Supports arbitrary sequences of valid GerberX3 expressions.\n        \"\"\"\n        return self._tokenize_grammar(\n            source,\n            self.grammar.resilient_grammar,\n            parse_all=True,\n        )\n\n    def _tokenize_grammar(\n        self,\n        source: str,\n        grammar: ParserElement,\n        *,\n        parse_all: bool,\n    ) -&gt; AST:\n        ast = grammar.parse_string(source, parse_all=parse_all)[0]\n        if not isinstance(ast, AST):\n            raise TypeError(ast)\n        return ast\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.Tokenizer.__init__","title":"__init__","text":"<pre><code>__init__(\n    options: Optional[TokenizerOptions] = None,\n) -&gt; None\n</code></pre> <p>GerberX3 format tokenizer.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>def __init__(self, options: Optional[TokenizerOptions] = None) -&gt; None:\n    \"\"\"GerberX3 format tokenizer.\"\"\"\n    logging.debug(\"Created %s GerberX3 tokenizer.\")\n    self.options = TokenizerOptions() if options is None else options\n    self.grammar = GerberGrammarBuilder(\n        options=self.options.grammar_options,\n    ).build()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.Tokenizer.tokenize","title":"tokenize","text":"<pre><code>tokenize(source: str) -&gt; AST\n</code></pre> <p>Convert source code into token stack.</p> <p>Supports only full, valid GerberX3 files.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>def tokenize(self, source: str) -&gt; AST:\n    \"\"\"Convert source code into token stack.\n\n    Supports only full, valid GerberX3 files.\n    \"\"\"\n    return self._tokenize_grammar(\n        source,\n        self.grammar.strict_grammar,\n        parse_all=False,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.Tokenizer.tokenize_expressions","title":"tokenize_expressions","text":"<pre><code>tokenize_expressions(source: str) -&gt; AST\n</code></pre> <p>Convert source code into token stack.</p> <p>Supports arbitrary sequences of valid GerberX3 expressions.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>def tokenize_expressions(self, source: str) -&gt; AST:\n    \"\"\"Convert source code into token stack.\n\n    Supports arbitrary sequences of valid GerberX3 expressions.\n    \"\"\"\n    return self._tokenize_grammar(\n        source,\n        self.grammar.expression_grammar,\n        parse_all=True,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokenizer.html#pygerber.gerberx3.tokenizer.tokenizer.Tokenizer.tokenize_resilient","title":"tokenize_resilient","text":"<pre><code>tokenize_resilient(source: str) -&gt; AST\n</code></pre> <p>Convert source code into token stack.</p> <p>Supports arbitrary sequences of valid GerberX3 expressions.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokenizer.py</code> <pre><code>def tokenize_resilient(self, source: str) -&gt; AST:\n    \"\"\"Convert source code into token stack.\n\n    Supports arbitrary sequences of valid GerberX3 expressions.\n    \"\"\"\n    return self._tokenize_grammar(\n        source,\n        self.grammar.resilient_grammar,\n        parse_all=True,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/__init__.html#pygerber.gerberx3.tokenizer.helpers","title":"helpers","text":"<p>Helper classes.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.html","title":"gerber_code_enum","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.html#pygerber.gerberx3.tokenizer.helpers.gerber_code_enum","title":"gerber_code_enum","text":"<p>Enum with GerberCode interface implementation.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.html#pygerber.gerberx3.tokenizer.helpers.gerber_code_enum.GerberCodeEnum","title":"GerberCodeEnum","text":"<p>             Bases: <code>GerberCode</code>, <code>Enum</code></p> <p>Enum with GerberCode interface implementation.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.py</code> <pre><code>class GerberCodeEnum(GerberCode, Enum):\n    \"\"\"Enum with GerberCode interface implementation.\"\"\"\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}{self.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.html#pygerber.gerberx3.tokenizer.helpers.gerber_code_enum.GerberCodeEnum.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/helpers/gerber_code_enum.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}{self.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/__init__.html#pygerber.gerberx3.tokenizer.tokens","title":"tokens","text":"<p>Gerber X3 token wrappers.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html","title":"ab_block_aperture","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture","title":"ab_block_aperture","text":"<p>Block Aperture (AB) logic.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin","title":"BlockApertureBegin","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin--411-block-aperture-ab","title":"4.11 Block Aperture (AB).","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin--4111-overview-of-block-apertures","title":"4.11.1 Overview of block apertures","text":"<p>The AB command creates a block aperture. The command stream between the opening and closing AB command defines a block aperture which is stored in the aperture dictionary. Thus the AB commands add an aperture to the dictionary directly, without needing an AD command. The LM, LR, LS and LP commands affect the flashes of block apertures as any other aperture: when a block aperture is flashed, it is first transformed according to the transformation parameters in the graphics state and then added to the object stream.</p> <p>The origin of the block aperture is the (0,0) point of the file.</p> <p>A block aperture is not a single graphical object but a set of objects. While a standard or macro aperture always adds a single graphical object to the stream, a block aperture can add any number of objects, each with their own polarity. Standard and macro apertures always have a single polarity while block apertures can contain both dark and clear objects.</p> <p>If the polarity is dark (LPD) when the block is flashed then the block aperture is inserted as is. If the polarity is clear (LPC) then the polarity of all objects in the block is toggled (clear becomes dark, and dark becomes clear). This toggle propagates through all nesting levels. In the following example the polarity of objects in the flash of block D12 will be toggled.</p> <pre><code>%ABD12*%\n\u2026\n%AB*%\n\u2026\nD12*\n%LPC*%\nX-2500000Y-1000000D03*\n</code></pre> <p>A D03 of a block aperture updates the current point but otherwise leaves the graphics state unmodified, as with any other aperture.</p> <p>See section 4.11 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>class BlockApertureBegin(CommandToken):\n    \"\"\"## 4.11 Block Aperture (AB).\n\n    ### 4.11.1 Overview of block apertures\n\n    The AB command creates a block aperture. The command stream between the opening and\n    closing AB command defines a block aperture which is stored in the aperture dictionary. Thus\n    the AB commands add an aperture to the dictionary directly, without needing an AD command.\n    The LM, LR, LS and LP commands affect the flashes of block apertures as any other aperture:\n    when a block aperture is flashed, it is first transformed according to the transformation\n    parameters in the graphics state and then added to the object stream.\n\n    The origin of the block aperture is the (0,0) point of the file.\n\n    A block aperture is not a single graphical object but a set of objects. While a standard or macro\n    aperture always adds a single graphical object to the stream, a block aperture can add any\n    number of objects, each with their own polarity. Standard and macro apertures always have a\n    single polarity while block apertures can contain both dark and clear objects.\n\n    If the polarity is dark (LPD) when the block is flashed then the block aperture is inserted as is. If\n    the polarity is clear (LPC) then the polarity of all objects in the block is toggled (clear becomes\n    dark, and dark becomes clear). This toggle propagates through all nesting levels. In the\n    following example the polarity of objects in the flash of block D12 will be toggled.\n\n    ```gerber\n    %ABD12*%\n    \u2026\n    %AB*%\n    \u2026\n    D12*\n    %LPC*%\n    X-2500000Y-1000000D03*\n    ```\n\n    A D03 of a block aperture updates the current point but otherwise leaves the graphics state\n    unmodified, as with any other aperture.\n\n    ---\n\n    See section 4.11 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=111)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(self, string: str, location: int, identifier: ApertureID) -&gt; None:\n        super().__init__(string, location)\n        self.identifier = identifier\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        return cls(string, location, ApertureID(tokens[\"aperture_identifier\"]))\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().begin_block_aperture.pre_parser_visit_token(self, context)\n        context.get_hooks().begin_block_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().begin_block_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}AB{self.identifier.get_gerber_code()}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    return cls(string, location, ApertureID(tokens[\"aperture_identifier\"]))\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().begin_block_aperture.pre_parser_visit_token(self, context)\n    context.get_hooks().begin_block_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().begin_block_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureBegin.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}AB{self.identifier.get_gerber_code()}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureEnd","title":"BlockApertureEnd","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureEnd--411-block-aperture-ab","title":"4.11 Block Aperture (AB).","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureEnd--4111-overview-of-block-apertures","title":"4.11.1 Overview of block apertures","text":"<p>The AB command creates a block aperture. The command stream between the opening and closing AB command defines a block aperture which is stored in the aperture dictionary. Thus the AB commands add an aperture to the dictionary directly, without needing an AD command. The LM, LR, LS and LP commands affect the flashes of block apertures as any other aperture: when a block aperture is flashed, it is first transformed according to the transformation parameters in the graphics state and then added to the object stream.</p> <p>The origin of the block aperture is the (0,0) point of the file.</p> <p>A block aperture is not a single graphical object but a set of objects. While a standard or macro aperture always adds a single graphical object to the stream, a block aperture can add any number of objects, each with their own polarity. Standard and macro apertures always have a single polarity while block apertures can contain both dark and clear objects.</p> <p>If the polarity is dark (LPD) when the block is flashed then the block aperture is inserted as is. If the polarity is clear (LPC) then the polarity of all objects in the block is toggled (clear becomes dark, and dark becomes clear). This toggle propagates through all nesting levels. In the following example the polarity of objects in the flash of block D12 will be toggled.</p> <pre><code>%ABD12*%\n\u2026\n%AB*%\n\u2026\nD12*\n%LPC*%\nX-2500000Y-1000000D03*\n</code></pre> <p>A D03 of a block aperture updates the current point but otherwise leaves the graphics state unmodified, as with any other aperture.</p> <p>See section 4.11 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>class BlockApertureEnd(CommandToken):\n    \"\"\"## 4.11 Block Aperture (AB).\n\n    ### 4.11.1 Overview of block apertures\n\n    The AB command creates a block aperture. The command stream between the opening and\n    closing AB command defines a block aperture which is stored in the aperture dictionary. Thus\n    the AB commands add an aperture to the dictionary directly, without needing an AD command.\n    The LM, LR, LS and LP commands affect the flashes of block apertures as any other aperture:\n    when a block aperture is flashed, it is first transformed according to the transformation\n    parameters in the graphics state and then added to the object stream.\n\n    The origin of the block aperture is the (0,0) point of the file.\n\n    A block aperture is not a single graphical object but a set of objects. While a standard or macro\n    aperture always adds a single graphical object to the stream, a block aperture can add any\n    number of objects, each with their own polarity. Standard and macro apertures always have a\n    single polarity while block apertures can contain both dark and clear objects.\n\n    If the polarity is dark (LPD) when the block is flashed then the block aperture is inserted as is. If\n    the polarity is clear (LPC) then the polarity of all objects in the block is toggled (clear becomes\n    dark, and dark becomes clear). This toggle propagates through all nesting levels. In the\n    following example the polarity of objects in the flash of block D12 will be toggled.\n\n    ```gerber\n    %ABD12*%\n    \u2026\n    %AB*%\n    \u2026\n    D12*\n    %LPC*%\n    X-2500000Y-1000000D03*\n    ```\n\n    A D03 of a block aperture updates the current point but otherwise leaves the graphics state\n    unmodified, as with any other aperture.\n\n    ---\n\n    See section 4.11 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=111)\n\n    \"\"\"  # noqa: E501\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().end_block_aperture.pre_parser_visit_token(self, context)\n        context.get_hooks().end_block_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().end_block_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}AB\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureEnd.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().end_block_aperture.pre_parser_visit_token(self, context)\n    context.get_hooks().end_block_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().end_block_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.html#pygerber.gerberx3.tokenizer.tokens.ab_block_aperture.BlockApertureEnd.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ab_block_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}AB\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html","title":"ad_define_aperture","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture","title":"ad_define_aperture","text":"<p>AD Command logic.</p> <p>Generally, apertures with size zero are invalid, and so are objects created with them. There is one exception. The C (circular) standard aperture with zero diameter is allowed, and so are objects created with it. Attributes can be attached to them. For the avoidance of doubt, zero size is only allowed for the C aperture, not another aperture type whose shape is fortuitously circular.</p> <p>Zero-size objects do not affect the image. They can be used to provide meta-information to locations in the image plane.</p> <p>Allowed does not mean recommended, quite the contrary. If you are tempted to use a zero-size object, consider whether it is useful, and whether there is no proper way to convey the meta information. Certainly do not abuse a zero-size object to indicate the absence of an object, e.g. by flashing a zero-size aperture to indicate the absence of a pad. This is just confusing. If there is nothing, put nothing.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineAperture","title":"DefineAperture","text":"<p>             Bases: <code>ExtendedCommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineAperture--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineAperture--example","title":"Example","text":"<pre><code>%ADD10C,.025*%\n%ADD10C,0.5X0.25*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefineAperture(ExtendedCommandToken):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %ADD10C,.025*%\n    %ADD10C,0.5X0.25*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    \"\"\"  # noqa: E501\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle","title":"DefineCircle","text":"<p>             Bases: <code>DefineAperture</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle--example","title":"Example","text":"<pre><code>%ADD10C,.025*%\n%ADD10C,0.5X0.25*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle--442-circle","title":"4.4.2 Circle","text":"<p>The syntax of the circle standard template call is:</p> <pre><code>template_call = 'C' ',' diameter 'X' hole_diameter\n</code></pre> <ul> <li><code>C</code> - Indicates the circle aperture template.</li> <li><code>diameter</code> - Diameter. A decimal \u22650.</li> <li><code>hole_diameter</code> - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section 4.4.6.</li> </ul> <p>See section 4.4.2 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefineCircle(DefineAperture):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %ADD10C,.025*%\n    %ADD10C,0.5X0.25*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    ---\n\n    ## 4.4.2 Circle\n\n    The syntax of the circle standard template call is:\n\n    ```ebnf\n    template_call = 'C' ',' diameter 'X' hole_diameter\n    ```\n\n    - `C` - Indicates the circle aperture template.\n    - `diameter` - Diameter. A decimal \u22650.\n    - `hole_diameter` - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section [4.4.6](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=55).\n\n    ---\n\n    See section 4.4.2 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=50)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        aperture_id: ApertureID,\n        diameter: Decimal,\n        hole_diameter: Optional[Decimal],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_id = aperture_id\n        self.diameter = diameter\n        self.hole_diameter = hole_diameter\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n        diameter: Decimal = Decimal(str(tokens[\"diameter\"]))\n        hole_diameter: Optional[Decimal] = (\n            Decimal(str(tokens[\"hole_diameter\"]))\n            if tokens.get(\"hole_diameter\") is not None\n            else None\n        )\n        return cls(\n            string=string,\n            location=location,\n            aperture_id=aperture_id,\n            diameter=diameter,\n            hole_diameter=hole_diameter,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().define_circle_aperture.pre_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n        context.get_hooks().define_circle_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n        context.get_hooks().define_circle_aperture.post_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        suffix = \"\"\n        if self.hole_diameter is not None:\n            suffix += f\"X{self.hole_diameter}\"\n        return (\n            f\"AD{self.aperture_id.get_gerber_code(indent, endline)}C,\"\n            f\"{self.diameter}{suffix}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n    diameter: Decimal = Decimal(str(tokens[\"diameter\"]))\n    hole_diameter: Optional[Decimal] = (\n        Decimal(str(tokens[\"hole_diameter\"]))\n        if tokens.get(\"hole_diameter\") is not None\n        else None\n    )\n    return cls(\n        string=string,\n        location=location,\n        aperture_id=aperture_id,\n        diameter=diameter,\n        hole_diameter=hole_diameter,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().define_circle_aperture.pre_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n    context.get_hooks().define_circle_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n    context.get_hooks().define_circle_aperture.post_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineCircle.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    suffix = \"\"\n    if self.hole_diameter is not None:\n        suffix += f\"X{self.hole_diameter}\"\n    return (\n        f\"AD{self.aperture_id.get_gerber_code(indent, endline)}C,\"\n        f\"{self.diameter}{suffix}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle","title":"DefineRectangle","text":"<p>             Bases: <code>DefineAperture</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle--example","title":"Example:","text":"<pre><code>%ADD22R,0.044X0.025*%\n%ADD23R,0.044X0.025X0.019*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle--443-rectangle","title":"4.4.3 Rectangle","text":"<p>The syntax of the rectangle or square standard template call is:</p> <pre><code>template_call = 'R' ',' x_size 'X' y_size 'X' hole_diameter\n</code></pre> <ul> <li><code>T</code> - Indicates the rectangle aperture template.</li> <li><code>x_size</code>, <code>x_size</code> - X and Y sizes of the rectangle. Decimals &gt;0. If x_size = y_size the effective shape is a square</li> <li><code>hole_diameter</code> - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section 4.4.6.</li> </ul> <p>See section 4.4.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefineRectangle(DefineAperture):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ### Example:\n\n    ```gerber\n    %ADD22R,0.044X0.025*%\n    %ADD23R,0.044X0.025X0.019*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    ---\n\n    ## 4.4.3 Rectangle\n\n    The syntax of the rectangle or square standard template call is:\n\n    ```ebnf\n    template_call = 'R' ',' x_size 'X' y_size 'X' hole_diameter\n    ```\n\n    - `T` - Indicates the rectangle aperture template.\n    - `x_size`, `x_size` - X and Y sizes of the rectangle. Decimals &gt;0. If x_size = y_size the effective shape is a square\n    - `hole_diameter` - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section [4.4.6](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=55).\n\n    ---\n\n    See section 4.4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=52)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        aperture_id: ApertureID,\n        x_size: Decimal,\n        y_size: Decimal,\n        hole_diameter: Optional[Decimal],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_id = aperture_id\n        self.x_size = x_size\n        self.y_size = y_size\n        self.hole_diameter = hole_diameter\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n        x_size: Decimal = Decimal(str(tokens[\"x_size\"]))\n        y_size: Decimal = Decimal(str(tokens[\"y_size\"]))\n        hole_diameter: Optional[Decimal] = (\n            Decimal(str(tokens[\"hole_diameter\"]))\n            if tokens.get(\"hole_diameter\") is not None\n            else None\n        )\n        return cls(\n            string=string,\n            location=location,\n            aperture_id=aperture_id,\n            x_size=x_size,\n            y_size=y_size,\n            hole_diameter=hole_diameter,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().define_rectangle_aperture.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n        context.get_hooks().define_rectangle_aperture.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n        context.get_hooks().define_rectangle_aperture.post_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        suffix = \"\"\n        if self.hole_diameter is not None:\n            suffix += f\"X{self.hole_diameter}\"\n        return (\n            f\"AD{self.aperture_id.get_gerber_code(indent, endline)}R,\"\n            f\"{self.x_size}X{self.y_size}{suffix}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n    x_size: Decimal = Decimal(str(tokens[\"x_size\"]))\n    y_size: Decimal = Decimal(str(tokens[\"y_size\"]))\n    hole_diameter: Optional[Decimal] = (\n        Decimal(str(tokens[\"hole_diameter\"]))\n        if tokens.get(\"hole_diameter\") is not None\n        else None\n    )\n    return cls(\n        string=string,\n        location=location,\n        aperture_id=aperture_id,\n        x_size=x_size,\n        y_size=y_size,\n        hole_diameter=hole_diameter,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().define_rectangle_aperture.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n    context.get_hooks().define_rectangle_aperture.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n    context.get_hooks().define_rectangle_aperture.post_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineRectangle.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    suffix = \"\"\n    if self.hole_diameter is not None:\n        suffix += f\"X{self.hole_diameter}\"\n    return (\n        f\"AD{self.aperture_id.get_gerber_code(indent, endline)}R,\"\n        f\"{self.x_size}X{self.y_size}{suffix}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround","title":"DefineObround","text":"<p>             Bases: <code>DefineAperture</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround--example","title":"Example:","text":"<pre><code>%ADD22O,0.046X0.026*%\n%ADD22O,0.046X0.026X0.019*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround--444-obround","title":"4.4.4 Obround","text":"<p>Obround (oval) is a rectangle where the smallest side is rounded to a half-circle. The syntax is:</p> <pre><code>template_call = 'O' ',' x_size 'X' y_size 'X' hole_diameter\n</code></pre> <ul> <li><code>O</code> - Indicates the obround aperture template.</li> <li><code>x_size</code>, <code>x_size</code> - X and Y sizes of enclosing box. Decimals &gt;0. If x_size = y_size the effective shape is a circle.</li> <li><code>hole_diameter</code> - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section 4.4.6.</li> </ul> <p>See section 4.4.4 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefineObround(DefineAperture):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ### Example:\n\n    ```gerber\n    %ADD22O,0.046X0.026*%\n    %ADD22O,0.046X0.026X0.019*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    ---\n\n    ## 4.4.4 Obround\n\n    Obround (oval) is a rectangle where the smallest side is rounded to a half-circle. The syntax is:\n\n    ```ebnf\n    template_call = 'O' ',' x_size 'X' y_size 'X' hole_diameter\n    ```\n\n    - `O` - Indicates the obround aperture template.\n    - `x_size`, `x_size` - X and Y sizes of enclosing box. Decimals &gt;0. If x_size = y_size the effective shape is a circle.\n    - `hole_diameter` - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section [4.4.6](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=55).\n\n    ---\n\n    See section 4.4.4 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=53)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        aperture_id: ApertureID,\n        x_size: Decimal,\n        y_size: Decimal,\n        hole_diameter: Optional[Decimal],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_id = aperture_id\n        self.x_size = x_size\n        self.y_size = y_size\n        self.hole_diameter = hole_diameter\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n        x_size: Decimal = Decimal(str(tokens[\"x_size\"]))\n        y_size: Decimal = Decimal(str(tokens[\"y_size\"]))\n        hole_diameter: Optional[Decimal] = (\n            Decimal(str(tokens[\"hole_diameter\"]))\n            if tokens.get(\"hole_diameter\") is not None\n            else None\n        )\n        return cls(\n            string=string,\n            location=location,\n            aperture_id=aperture_id,\n            x_size=x_size,\n            y_size=y_size,\n            hole_diameter=hole_diameter,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().define_obround_aperture.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n        context.get_hooks().define_obround_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n        context.get_hooks().define_obround_aperture.post_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        suffix = \"\"\n        if self.hole_diameter is not None:\n            suffix += f\"X{self.hole_diameter}\"\n        return (\n            f\"AD{self.aperture_id.get_gerber_code(indent, endline)}O,\"\n            f\"{self.x_size}X{self.y_size}{suffix}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n    x_size: Decimal = Decimal(str(tokens[\"x_size\"]))\n    y_size: Decimal = Decimal(str(tokens[\"y_size\"]))\n    hole_diameter: Optional[Decimal] = (\n        Decimal(str(tokens[\"hole_diameter\"]))\n        if tokens.get(\"hole_diameter\") is not None\n        else None\n    )\n    return cls(\n        string=string,\n        location=location,\n        aperture_id=aperture_id,\n        x_size=x_size,\n        y_size=y_size,\n        hole_diameter=hole_diameter,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().define_obround_aperture.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n    context.get_hooks().define_obround_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n    context.get_hooks().define_obround_aperture.post_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineObround.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    suffix = \"\"\n    if self.hole_diameter is not None:\n        suffix += f\"X{self.hole_diameter}\"\n    return (\n        f\"AD{self.aperture_id.get_gerber_code(indent, endline)}O,\"\n        f\"{self.x_size}X{self.y_size}{suffix}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon","title":"DefinePolygon","text":"<p>             Bases: <code>DefineAperture</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon--example","title":"Example:","text":"<pre><code>%ADD17P,.040X6*%\n%ADD17P,.040X6X0.0X0.019*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon--445-polygon","title":"4.4.5 Polygon","text":"<p>Creates a regular polygon aperture. The syntax of the polygon template is:</p> <pre><code>template_call = 'P' ',' outer_diameter 'X' vertices 'X' rotation 'X' hole_diameter\n</code></pre> <ul> <li><code>P</code> - Indicates the polygon aperture template.</li> <li><code>outer_diameter</code> - Diameter of the circle circumscribing the regular polygon, i.e. the circle through the polygon vertices. A decimal &gt; 0.</li> <li><code>vertices</code> - Number of vertices n, 3 \u2264 n \u2264 12. An integer.</li> <li><code>rotation</code> - The rotation angle, in degrees counterclockwise. A decimal. With rotation angle zero there is a vertex on the positive X-axis through the aperture center.</li> <li><code>hole_diameter</code> - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section 4.4.6.</li> </ul> <p>See section 4.4.5 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefinePolygon(DefineAperture):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ### Example:\n\n    ```gerber\n    %ADD17P,.040X6*%\n    %ADD17P,.040X6X0.0X0.019*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    ---\n\n    ## 4.4.5 Polygon\n\n    Creates a regular polygon aperture. The syntax of the polygon template is:\n\n    ```ebnf\n    template_call = 'P' ',' outer_diameter 'X' vertices 'X' rotation 'X' hole_diameter\n    ```\n\n    - `P` - Indicates the polygon aperture template.\n    - `outer_diameter` - Diameter of the circle circumscribing the regular polygon, i.e. the circle through the polygon vertices. A decimal &gt; 0.\n    - `vertices` - Number of vertices n, 3 \u2264 n \u2264 12. An integer.\n    - `rotation` - The rotation angle, in degrees counterclockwise. A decimal. With rotation angle zero there is a vertex on the positive X-axis through the aperture center.\n    - `hole_diameter` - Diameter of a round hole. A decimal &gt;0. If omitted the aperture is solid. See also section [4.4.6](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=55).\n\n    ---\n\n    See section 4.4.5 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=54)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        aperture_id: ApertureID,\n        outer_diameter: Decimal,\n        number_of_vertices: int,\n        rotation: Optional[Decimal],\n        hole_diameter: Optional[Decimal],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_id = aperture_id\n        self.outer_diameter = outer_diameter\n        self.number_of_vertices = number_of_vertices\n        self.rotation = rotation\n        self.hole_diameter = hole_diameter\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n        outer_diameter: Decimal = Decimal(str(tokens[\"outer_diameter\"]))\n        number_of_vertices: int = int(str(tokens[\"number_of_vertices\"]))\n        rotation: Optional[Decimal] = (\n            Decimal(str(tokens[\"rotation\"]))\n            if tokens.get(\"rotation\") is not None\n            else None\n        )\n        hole_diameter: Optional[Decimal] = (\n            Decimal(str(tokens[\"hole_diameter\"]))\n            if tokens.get(\"hole_diameter\") is not None\n            else None\n        )\n        return cls(\n            string=string,\n            location=location,\n            aperture_id=aperture_id,\n            outer_diameter=outer_diameter,\n            number_of_vertices=number_of_vertices,\n            rotation=rotation,\n            hole_diameter=hole_diameter,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().define_polygon_aperture.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n        context.get_hooks().define_polygon_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n        context.get_hooks().define_polygon_aperture.post_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        suffix = \"\"\n        if self.hole_diameter is not None:\n            suffix += f\"X{self.hole_diameter}\"\n        return (\n            f\"AD{self.aperture_id.get_gerber_code(indent, endline)}P,\"\n            f\"{self.outer_diameter}X{self.number_of_vertices}X{self.rotation}{suffix}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n    outer_diameter: Decimal = Decimal(str(tokens[\"outer_diameter\"]))\n    number_of_vertices: int = int(str(tokens[\"number_of_vertices\"]))\n    rotation: Optional[Decimal] = (\n        Decimal(str(tokens[\"rotation\"]))\n        if tokens.get(\"rotation\") is not None\n        else None\n    )\n    hole_diameter: Optional[Decimal] = (\n        Decimal(str(tokens[\"hole_diameter\"]))\n        if tokens.get(\"hole_diameter\") is not None\n        else None\n    )\n    return cls(\n        string=string,\n        location=location,\n        aperture_id=aperture_id,\n        outer_diameter=outer_diameter,\n        number_of_vertices=number_of_vertices,\n        rotation=rotation,\n        hole_diameter=hole_diameter,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().define_polygon_aperture.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n    context.get_hooks().define_polygon_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n    context.get_hooks().define_polygon_aperture.post_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefinePolygon.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    suffix = \"\"\n    if self.hole_diameter is not None:\n        suffix += f\"X{self.hole_diameter}\"\n    return (\n        f\"AD{self.aperture_id.get_gerber_code(indent, endline)}P,\"\n        f\"{self.outer_diameter}X{self.number_of_vertices}X{self.rotation}{suffix}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro","title":"DefineMacro","text":"<p>             Bases: <code>DefineAperture</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro--431-ad-command","title":"4.3.1 AD Command.","text":"<p>The AD command creates an aperture, attaches the aperture attributes at that moment in the attribute dictionary to it and adds it to the apertures dictionary.</p> <pre><code>AD = '%' ('AD' aperture_ident template_call) '*%';\ntemplate_call = template_name [',' parameter {'X' parameter}*];\n</code></pre> <p>The AD command must precede the first use of the aperture. It is recommended to put all AD commands in the file header.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro--example","title":"Example","text":"<pre><code>%ADD10C,.025*%\n%ADD10C,0.5X0.25*%\n</code></pre> <p>See section 4.3 of The Gerber Layer Format Specification</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro--45-aperture-macro-am","title":"4.5 Aperture Macro (AM)","text":"<p>The AM command creates a macro aperture template and adds it to the aperture template dictionary (see 2.2). A template is a parametrized shape. The AD command instantiates a template into an aperture by supplying values to the template parameters.</p> <p>Templates of any shape or parametrization can be created. Multiple simple shapes called primitives can be combined in a single template. An aperture macro can contain variables whose actual values are defined by:</p> <ul> <li>Values provided by the AD command,</li> <li>Arithmetic expressions with other variables.</li> </ul> <p>The template is created by positioning primitives in a coordinate space. The origin of that coordinate space will be the origin of all apertures created with the state.</p> <p>A template must be defined before the first AD that refers to it. The AM command can be used multiple times in a file.</p> <p>Attributes are not attached to templates. They are attached to the aperture at the time of its creation with the AD command.</p> <p>An AM command contains the following words:</p> <ul> <li>The AM declaration with the macro name</li> <li>Primitives with their comma-separated parameters</li> <li>Macro variables, defined by an arithmetic expression</li> </ul> <pre><code>AM = '%' ('AM' macro_name macro_body) '%';\nmacro_name = name '*';\nmacro_body = {in_macro_block}+;\nin_macro_block =\n|primitive\n|variable_definition\n;\nvariable_definition = (macro_variable '=' expression) '*';\nmacro_variable = '$' positive_integer;\nprimitive = primitive_code {',' par}*\npar = ',' (expression);\n</code></pre> <p>See section 4.5 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>class DefineMacro(DefineAperture):\n    \"\"\"## 4.3.1 AD Command.\n\n    The AD command creates an aperture, attaches the aperture attributes at that moment in the\n    attribute dictionary to it and adds it to the apertures dictionary.\n\n    ```ebnf\n    AD = '%' ('AD' aperture_ident template_call) '*%';\n    template_call = template_name [',' parameter {'X' parameter}*];\n    ```\n\n    The AD command must precede the first use of the aperture. It is recommended to put all AD\n    commands in the file header.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %ADD10C,.025*%\n    %ADD10C,0.5X0.25*%\n    ```\n\n    ---\n\n    See section 4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=48)\n\n    ---\n\n    ## 4.5 Aperture Macro (AM)\n\n    The AM command creates a macro aperture template and adds it to the aperture template\n    dictionary (see 2.2). A template is a parametrized shape. The AD command instantiates a\n    template into an aperture by supplying values to the template parameters.\n\n    Templates of any shape or parametrization can be created. Multiple simple shapes called\n    primitives can be combined in a single template. An aperture macro can contain variables\n    whose actual values are defined by:\n\n    - Values provided by the AD command,\n    - Arithmetic expressions with other variables.\n\n    The template is created by positioning primitives in a coordinate space. The origin of that\n    coordinate space will be the origin of all apertures created with the state.\n\n    A template must be defined before the first AD that refers to it. The AM command can be used\n    multiple times in a file.\n\n    Attributes are not attached to templates. They are attached to the aperture at the time of its\n    creation with the AD command.\n\n    An AM command contains the following words:\n\n    - The AM declaration with the macro name\n    - Primitives with their comma-separated parameters\n    - Macro variables, defined by an arithmetic expression\n\n    ```ebnf\n    AM = '%' ('AM' macro_name macro_body) '%';\n    macro_name = name '*';\n    macro_body = {in_macro_block}+;\n    in_macro_block =\n    |primitive\n    |variable_definition\n    ;\n    variable_definition = (macro_variable '=' expression) '*';\n    macro_variable = '$' positive_integer;\n    primitive = primitive_code {',' par}*\n    par = ',' (expression);\n    ```\n\n    ---\n\n    See section 4.5 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=56)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        aperture_type: str,\n        aperture_id: ApertureID,\n        am_param: List[str],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_type = aperture_type\n        self.aperture_id = aperture_id\n        self.am_param = am_param\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        aperture_type: str = str(tokens[\"aperture_type\"])\n        aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n\n        raw_am_param = e if (e := tokens.get(\"am_param\")) is not None else []\n        am_param: List[str] = [str(p) for p in raw_am_param]\n\n        return cls(\n            string=string,\n            location=location,\n            aperture_type=aperture_type,\n            aperture_id=aperture_id,\n            am_param=am_param,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().define_macro_aperture.pre_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n        context.get_hooks().define_macro_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n        context.get_hooks().define_macro_aperture.post_parser_visit_token(self, context)\n        context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"AD{self.aperture_id.get_gerber_code(indent, endline)}\"\n            f\"{self.aperture_type},{'X'.join(self.am_param)}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    aperture_type: str = str(tokens[\"aperture_type\"])\n    aperture_id = ApertureID(tokens[\"aperture_identifier\"])\n\n    raw_am_param = e if (e := tokens.get(\"am_param\")) is not None else []\n    am_param: List[str] = [str(p) for p in raw_am_param]\n\n    return cls(\n        string=string,\n        location=location,\n        aperture_type=aperture_type,\n        aperture_id=aperture_id,\n        am_param=am_param,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().define_macro_aperture.pre_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.pre_parser_visit_token(self, context)\n\n    context.get_hooks().define_macro_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.on_parser_visit_token(self, context)\n\n    context.get_hooks().define_macro_aperture.post_parser_visit_token(self, context)\n    context.get_hooks().define_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.html#pygerber.gerberx3.tokenizer.tokens.ad_define_aperture.DefineMacro.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ad_define_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"AD{self.aperture_id.get_gerber_code(indent, endline)}\"\n        f\"{self.aperture_type},{'X'.join(self.am_param)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html","title":"as_axis_select","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select","title":"as_axis_select","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select--load-name-ln","title":"Load Name (LN).","text":"<p>Note: The LN command was deprecated in revision I4 from October 2013.</p> <p>The historic <code>LN</code> command doesn't influence the image in any manner and can safely be overlooked.</p> <p>Function of the <code>LN</code> command: - <code>LN</code> is designed to allocate a name to the following section of the file. - It was originally conceptualized to serve as a human-readable comment. - For creating human-readable comments, it's advisable to utilize the standard <code>G04</code>     command. - The <code>LN</code> command has the flexibility to be executed multiple times within a file.</p> <p>SPEC: <code>2023.03</code> SECTION: <code>8.1.6</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect","title":"AxisSelect","text":"<p>             Bases: <code>ExtendedCommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect--812-axis-select-as","title":"8.1.2 Axis Select (AS).","text":"<p>The AS command is deprecated since revision I1 from December 2012.</p> <p>The historic AS command sets the correspondence between the X, Y data axes and the A, B output device axes. It does not affect the image in computer to computer data exchange. It only has an effect how the image is positioned on an output device.</p> <p>The order of execution is always MI, SF, OF, IR and AS, independent of their order of appearance in the file.</p> <p>The AS command can only be used once, at the beginning of the file.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect--8121-as-command","title":"8.1.2.1 AS Command.","text":"<p>The syntax for the AS command is:</p> <pre><code>AS = '%' (AS' ('AXBY'|'AYBX')) '*%';\n</code></pre> <ul> <li><code>AS</code> - AS for Axis Select</li> <li><code>AXBY</code> - Assign output device axis A to data axis X, output device axis B to data axis Y. This is the default.</li> <li><code>AYBX</code> - Assign output device axis A to data axis Y, output device axis B to data axis X.</li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect--example","title":"Example","text":"<p>Assign output device axis A to data axis X and output device axis B to data axis Y</p> <pre><code>%ASAXBY*%\n</code></pre> <p>Assign output device axis A to data axis Y and output device axis B to data axis X</p> <pre><code>%ASAYBX*%\n</code></pre> <p>See section 8.1.2 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/as_axis_select.py</code> <pre><code>class AxisSelect(ExtendedCommandToken):\n    \"\"\"## 8.1.2 Axis Select (AS).\n\n    The AS command is deprecated since revision I1 from December 2012.\n\n    The historic AS command sets the correspondence between the X, Y data axes and the\n    A, B output device axes. It does not affect the image in computer to computer data\n    exchange. It only has an effect how the image is positioned on an output device.\n\n    The order of execution is always MI, SF, OF, IR and AS, independent of their order\n    of appearance in the file.\n\n    The AS command can only be used once, at the beginning of the file.\n\n    ### 8.1.2.1 AS Command.\n\n    The syntax for the AS command is:\n\n    ```ebnf\n    AS = '%' (AS' ('AXBY'|'AYBX')) '*%';\n    ```\n\n    - `AS` - AS for Axis Select\n    - `AXBY` - Assign output device axis A to data axis X, output device axis B to data axis Y. This is the default.\n    - `AYBX` - Assign output device axis A to data axis Y, output device axis B to data axis X.\n\n    ---\n\n    ## Example\n\n    Assign output device axis A to data axis X and output device axis B\n    to data axis Y\n\n    ```gerber\n    %ASAXBY*%\n    ```\n\n    Assign output device axis A to data axis Y and output device axis B\n    to data axis X\n\n    ```gerber\n    %ASAYBX*%\n    ```\n\n    ---\n\n    See section 8.1.2 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=175)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        correspondence: AxisCorrespondence,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.correspondence = correspondence\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        correspondence = tokens[\"correspondence\"]\n        if not isinstance(correspondence, str):\n            raise TypeError(correspondence)\n        return cls(\n            string=string,\n            location=location,\n            correspondence=AxisCorrespondence(correspondence),\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().axis_select.pre_parser_visit_token(self, context)\n        context.get_hooks().axis_select.on_parser_visit_token(self, context)\n        context.get_hooks().axis_select.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"IN{self.correspondence}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/as_axis_select.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    correspondence = tokens[\"correspondence\"]\n    if not isinstance(correspondence, str):\n        raise TypeError(correspondence)\n    return cls(\n        string=string,\n        location=location,\n        correspondence=AxisCorrespondence(correspondence),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/as_axis_select.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().axis_select.pre_parser_visit_token(self, context)\n    context.get_hooks().axis_select.on_parser_visit_token(self, context)\n    context.get_hooks().axis_select.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/as_axis_select.html#pygerber.gerberx3.tokenizer.tokens.as_axis_select.AxisSelect.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/as_axis_select.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"IN{self.correspondence}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html","title":"attribute_token","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token","title":"attribute_token","text":"<p>Base class for attribute tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token.AttributeToken","title":"AttributeToken","text":"<p>             Bases: <code>ExtendedCommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token.AttributeToken--51-attributes-overview","title":"5.1 Attributes Overview,.","text":"<p>Attributes add meta-information to a Gerber file. Attributes are akin to labels providing information about the file or features within them. Examples of meta-information conveyed by attributes are:</p> <ul> <li>The function of the file in the layer structure. Is the file the top solder mask, the bottom copper layer, \u2026?</li> <li>The function of a pad. Is the pad an SMD pad, or a via pad, or a fiducial, ...?</li> </ul> <p>The attribute syntax provides a flexible and standardized way to add meta-information to a Gerber file, independent of the specific semantics or application.</p> <p>Attributes do not affect the image. A Gerber reader will generate the correct image if it simply ignores the attributes.</p> <p>Each attribute consists of an attribute name and an optional attribute value:</p> <pre><code>&lt;Attribute&gt; = &lt;AttributeName&gt;[,&lt;AttributeValue&gt;]*\n</code></pre> <p>Attribute names follow the name syntax in section 3.4.3.</p> <p>The attribute value consists of one or more comma-separated fields, see section 3.4.4.</p> <pre><code>&lt;AttributeValue&gt; = &lt;Field&gt;{,&lt;Field&gt;}\n</code></pre> <p>There are three types of attributes by the item they attach to:</p> <ul> <li><code>Attachment type</code> - The item to which they attach meta-information.</li> <li><code>File attributes</code> - Attach meta-information to the file as a whole.</li> <li><code>Aperture attributes</code> - Attach meta-information to an aperture or a region. Objects created by the aperture inherit the aperture meta-information.</li> <li><code>Object attributes</code> - Attach meta-information to on object directly.</li> </ul> <p>There are two types of attributes by the scope of their use:</p> <ul> <li> <p><code>Standard attributes</code>. Standard attribute names, values and semantics are defined in this specification and are part of it. As they are standardized, they can exchange meta information between all applications.</p> </li> <li> <p><code>User attributes</code>. User attributes can be chosen freely by users to extend the format with custom meta-information. Use custom attributes only for unequivocally defined machine-readable information, use G04 for mere human-readable comments.</p> </li> </ul> <p>In accordance with the general rule in 3.4.3 standard attribute names must begin with a dot \".\" while user attribute names cannot begin with a dot. The dot, if present, is part of the attribute name and indicates that it is a standard attribute whose syntax and semantics are defined in section 5.6.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token.AttributeToken--example","title":"Example","text":"<pre><code>%TFMyAttribute,Yes*%\n%TFZap*%\n%TFZonk*%\n</code></pre> <p>See section 5.1 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/attribute_token.py</code> <pre><code>class AttributeToken(ExtendedCommandToken):\n    \"\"\"## 5.1 Attributes Overview,.\n\n    Attributes add meta-information to a Gerber file. Attributes are akin to labels providing\n    information about the file or features within them. Examples of meta-information conveyed by\n    attributes are:\n\n    - The function of the file in the layer structure. Is the file the top solder mask, the bottom\n    copper layer, \u2026?\n    - The function of a pad. Is the pad an SMD pad, or a via pad, or a fiducial, ...?\n\n    The attribute syntax provides a flexible and standardized way to add meta-information to a\n    Gerber file, independent of the specific semantics or application.\n\n    Attributes do not affect the image. A Gerber reader will generate the correct image if it simply\n    ignores the attributes.\n\n    Each attribute consists of an attribute name and an optional attribute value:\n\n    ```ebnf\n    &lt;Attribute&gt; = &lt;AttributeName&gt;[,&lt;AttributeValue&gt;]*\n    ```\n\n    Attribute names follow the name syntax in section 3.4.3.\n\n    The attribute value consists of one or more comma-separated fields, see section 3.4.4.\n\n    ```ebnf\n    &lt;AttributeValue&gt; = &lt;Field&gt;{,&lt;Field&gt;}\n    ```\n\n    There are three types of attributes by the item they attach to:\n\n    - `Attachment type` - The item to which they attach meta-information.\n    - `File attributes` - Attach meta-information to the file as a whole.\n    - `Aperture attributes` - Attach meta-information to an aperture or a region. Objects created by\n    the aperture inherit the aperture meta-information.\n    - `Object attributes` - Attach meta-information to on object directly.\n\n    There are two types of attributes by the scope of their use:\n\n    - `Standard attributes`. Standard attribute names, values and semantics are defined in this\n    specification and are part of it. As they are standardized, they can exchange meta information between all applications.\n\n    - `User attributes`. User attributes can be chosen freely by users to extend the format with\n    custom meta-information. Use custom attributes only for unequivocally defined\n    machine-readable information, use G04 for mere human-readable comments.\n\n    In accordance with the general rule in 3.4.3 standard attribute names must begin with a dot \".\"\n    while user attribute names cannot begin with a dot. The dot, if present, is part of the attribute\n    name and indicates that it is a standard attribute whose syntax and semantics are defined in\n    section 5.6.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %TFMyAttribute,Yes*%\n    %TFZap*%\n    %TFZonk*%\n    ```\n\n    ---\n\n    See section 5.1 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=122)\n\n    \"\"\"  # noqa: E501\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token.SetAttributeToken","title":"SetAttributeToken","text":"<p>             Bases: <code>AttributeToken</code></p> <p>Base class for all classes which set some kind of attribute.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/attribute_token.py</code> <pre><code>class SetAttributeToken(AttributeToken):\n    \"\"\"Base class for all classes which set some kind of attribute.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        name: str,\n        value: Optional[str],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.name = name\n        self.value = value\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        name: str = str(tokens[\"attribute_name\"])\n        value = tokens.get(\"field\", None)\n        if value is not None:\n            value = str(value)\n\n        return cls(\n            string=string,\n            location=location,\n            name=name,\n            value=value,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/attribute_token.html#pygerber.gerberx3.tokenizer.tokens.attribute_token.SetAttributeToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/attribute_token.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    name: str = str(tokens[\"attribute_name\"])\n    value = tokens.get(\"field\", None)\n    if value is not None:\n        value = str(value)\n\n    return cls(\n        string=string,\n        location=location,\n        name=name,\n        value=value,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html","title":"coordinate","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate","title":"coordinate","text":"<p>Coordinate wrapper class.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.Coordinate","title":"Coordinate","text":"<p>             Bases: <code>GerberCode</code>, <code>FrozenGeneralModel</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.Coordinate--coordinate-data","title":"Coordinate data.","text":"<p>A number whose interpretation is determined by the FS command. It is used to specify the X and Y coordinates of a point in the image plane and a distance or offset in the X and Y direction.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>class Coordinate(GerberCode, FrozenGeneralModel):\n    \"\"\"## Coordinate data.\n\n    A number whose interpretation is determined by the FS command. It is used to specify\n    the X and Y coordinates of a point in the image plane and a distance\n    or offset in the X and Y direction.\n    \"\"\"\n\n    coordinate_type: CoordinateType\n    sign: CoordinateSign\n    offset: str\n\n    @classmethod\n    def new(cls, coordinate_type: CoordinateType, offset: Optional[str]) -&gt; Self:\n        \"\"\"Create new Coordinate object.\"\"\"\n        if offset is None:\n            coordinate_type = coordinate_type.to_missing()\n            offset = \"\"\n            sign = CoordinateSign.Positive\n\n        elif len(offset) &gt; 0 and offset[0] in \"+-\":\n            sign = CoordinateSign(offset[0])\n            offset = offset[1:].ljust(1, \"0\")\n\n        else:\n            sign = CoordinateSign.Positive\n\n        return cls(coordinate_type=coordinate_type, sign=sign, offset=offset)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            \"\"\n            if self.coordinate_type.is_missing()\n            else f\"{indent}{self.coordinate_type}{self.sign}{self.offset}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.Coordinate.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    coordinate_type: CoordinateType, offset: Optional[str]\n) -&gt; Self\n</code></pre> <p>Create new Coordinate object.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>@classmethod\ndef new(cls, coordinate_type: CoordinateType, offset: Optional[str]) -&gt; Self:\n    \"\"\"Create new Coordinate object.\"\"\"\n    if offset is None:\n        coordinate_type = coordinate_type.to_missing()\n        offset = \"\"\n        sign = CoordinateSign.Positive\n\n    elif len(offset) &gt; 0 and offset[0] in \"+-\":\n        sign = CoordinateSign(offset[0])\n        offset = offset[1:].ljust(1, \"0\")\n\n    else:\n        sign = CoordinateSign.Positive\n\n    return cls(coordinate_type=coordinate_type, sign=sign, offset=offset)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.Coordinate.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        \"\"\n        if self.coordinate_type.is_missing()\n        else f\"{indent}{self.coordinate_type}{self.sign}{self.offset}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.CoordinateType","title":"CoordinateType","text":"<p>             Bases: <code>Enum</code></p> <p>Type of coordinate axis/meaning.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>class CoordinateType(Enum):\n    \"\"\"Type of coordinate axis/meaning.\"\"\"\n\n    X = \"X\"\n    Y = \"Y\"\n    I = \"I\"  # noqa: E741\n    J = \"J\"\n    NULL = \"\"\n    MISSING_X = \"MISSING_X\"\n    MISSING_Y = \"MISSING_Y\"\n    MISSING_I = \"MISSING_I\"\n    MISSING_J = \"MISSING_J\"\n\n    def to_missing(self) -&gt; CoordinateType:\n        \"\"\"Map &lt;coordinate&gt; to MISSING_&lt;coordinate&gt;.\"\"\"\n        return _coordinate_type_to_missing_map[self]\n\n    def is_missing(self) -&gt; bool:\n        \"\"\"Check if coordinate is one of variants of missing coordinates.\"\"\"\n        return self in (\n            CoordinateType.MISSING_X,\n            CoordinateType.MISSING_Y,\n            CoordinateType.MISSING_I,\n            CoordinateType.MISSING_J,\n        )\n\n    def __str__(self) -&gt; str:\n        return self.value\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.CoordinateType.to_missing","title":"to_missing","text":"<pre><code>to_missing() -&gt; CoordinateType\n</code></pre> <p>Map  to MISSING_. Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>def to_missing(self) -&gt; CoordinateType:\n    \"\"\"Map &lt;coordinate&gt; to MISSING_&lt;coordinate&gt;.\"\"\"\n    return _coordinate_type_to_missing_map[self]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.CoordinateType.is_missing","title":"is_missing","text":"<pre><code>is_missing() -&gt; bool\n</code></pre> <p>Check if coordinate is one of variants of missing coordinates.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>def is_missing(self) -&gt; bool:\n    \"\"\"Check if coordinate is one of variants of missing coordinates.\"\"\"\n    return self in (\n        CoordinateType.MISSING_X,\n        CoordinateType.MISSING_Y,\n        CoordinateType.MISSING_I,\n        CoordinateType.MISSING_J,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/coordinate.html#pygerber.gerberx3.tokenizer.tokens.coordinate.CoordinateSign","title":"CoordinateSign","text":"<p>             Bases: <code>Enum</code></p> <p>Coordinate sign.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/coordinate.py</code> <pre><code>class CoordinateSign(Enum):\n    \"\"\"Coordinate sign.\"\"\"\n\n    Positive = \"+\"\n    Negative = \"-\"\n\n    def __str__(self) -&gt; str:\n        return \"-\" if self == CoordinateSign.Negative else \"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html","title":"d01_draw","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw","title":"d01_draw","text":"<p>Plot (D01) logic.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw","title":"D01Draw","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw--482-plot-d01","title":"4.8.2 Plot (D01).","text":"<p>Performs a plotting operation, creating a draw or an arc segment. The plot state defines which type of segment is created, see 4.7. The syntax depends on the required parameters, and, hence, on the plot state.</p> <p>D01 creates a linear or circular line segment by plotting from the current point to the coordinate pair in the command. Outside a region statement (see 2.3.2) these segments are converted to draw or arc objects by stroking them with the current aperture (see 2.3.1). Within a region statement these segments form a contour defining a region (see 4.10). The effect of D01, e.g. whether a straight or circular segment is created, depends on the graphics state (see 2.3.2).</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw--syntax","title":"Syntax","text":"<p>For linear (G01):</p> <pre><code>D01 = (['X' x_coordinate] ['Y' y_coordinate] 'D01') '*';\n</code></pre> <p>For Circular (G02|G03)</p> <pre><code>D01 = (['X' x_coordinate] ['Y' y_coordinate] 'I' x_offset 'J' y-offset ) 'D01' '*';\n</code></pre> <ul> <li>x_coordinate - <code>&lt;Coordinate&gt;</code> is coordinate data - see section 0. It defines the X coordinate of the     new current point. The default is the X coordinate of the old current point.</li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw--example","title":"Example","text":"<pre><code>X275000Y115000D02*\nG01*\nX2512000Y115000D01*\nG75*\nG03*\nX5005000Y3506000I3000J0D01*\nG01*\nX15752000D01*\nY12221000D01*\n</code></pre> <p>See section 4.8.2 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d01_draw.py</code> <pre><code>class D01Draw(CommandToken):\n    \"\"\"## 4.8.2 Plot (D01).\n\n    Performs a plotting operation, creating a draw or an arc segment. The plot state defines which\n    type of segment is created, see 4.7. The syntax depends on the required parameters, and,\n    hence, on the plot state.\n\n    D01 creates a linear or circular line segment by plotting from the current point to the\n    coordinate pair in the command. Outside a region statement (see 2.3.2) these segments\n    are converted to draw or arc objects by stroking them with the current aperture (see 2.3.1).\n    Within a region statement these segments form a contour defining a region (see 4.10). The\n    effect of D01, e.g. whether a straight or circular segment is created, depends on the\n    graphics state (see 2.3.2).\n\n    ### Syntax\n\n    For linear (G01):\n\n    ```ebnf\n    D01 = (['X' x_coordinate] ['Y' y_coordinate] 'D01') '*';\n    ```\n\n    For Circular (G02|G03)\n\n    ```ebnf\n    D01 = (['X' x_coordinate] ['Y' y_coordinate] 'I' x_offset 'J' y-offset ) 'D01' '*';\n    ```\n\n    - x_coordinate - `&lt;Coordinate&gt;` is coordinate data - see section 0. It defines the X coordinate of the\n        new current point. The default is the X coordinate of the old current point.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    X275000Y115000D02*\n    G01*\n    X2512000Y115000D01*\n    G75*\n    G03*\n    X5005000Y3506000I3000J0D01*\n    G01*\n    X15752000D01*\n    Y12221000D01*\n    ```\n\n    ---\n\n    See section 4.8.2 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=83)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        x: Coordinate,\n        y: Coordinate,\n        i: Coordinate,\n        j: Coordinate,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.x = x\n        self.y = y\n        self.i = i\n        self.j = j\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        x = tokens.get(\"x\")\n        x = Coordinate.new(\n            coordinate_type=CoordinateType.X,\n            offset=str(x) if x is not None else None,\n        )\n        y = tokens.get(\"y\")\n        y = Coordinate.new(\n            coordinate_type=CoordinateType.Y,\n            offset=str(y) if y is not None else None,\n        )\n        i = tokens.get(\"i\")\n        i = Coordinate.new(\n            coordinate_type=CoordinateType.I,\n            offset=str(i) if i is not None else None,\n        )\n        j = tokens.get(\"j\")\n        j = Coordinate.new(\n            coordinate_type=CoordinateType.J,\n            offset=str(j) if j is not None else None,\n        )\n\n        return cls(\n            string=string,\n            location=location,\n            x=x,\n            y=y,\n            i=i,\n            j=j,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().command_draw.pre_parser_visit_token(self, context)\n        context.get_hooks().command_draw.on_parser_visit_token(self, context)\n        context.get_hooks().command_draw.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"{indent}\"\n            f\"{self.x.get_gerber_code(indent, endline)}\"\n            f\"{self.y.get_gerber_code(indent, endline)}\"\n            f\"{self.i.get_gerber_code(indent, endline)}\"\n            f\"{self.j.get_gerber_code(indent, endline)}\"\n            \"D01\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d01_draw.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    x = tokens.get(\"x\")\n    x = Coordinate.new(\n        coordinate_type=CoordinateType.X,\n        offset=str(x) if x is not None else None,\n    )\n    y = tokens.get(\"y\")\n    y = Coordinate.new(\n        coordinate_type=CoordinateType.Y,\n        offset=str(y) if y is not None else None,\n    )\n    i = tokens.get(\"i\")\n    i = Coordinate.new(\n        coordinate_type=CoordinateType.I,\n        offset=str(i) if i is not None else None,\n    )\n    j = tokens.get(\"j\")\n    j = Coordinate.new(\n        coordinate_type=CoordinateType.J,\n        offset=str(j) if j is not None else None,\n    )\n\n    return cls(\n        string=string,\n        location=location,\n        x=x,\n        y=y,\n        i=i,\n        j=j,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d01_draw.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().command_draw.pre_parser_visit_token(self, context)\n    context.get_hooks().command_draw.on_parser_visit_token(self, context)\n    context.get_hooks().command_draw.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d01_draw.html#pygerber.gerberx3.tokenizer.tokens.d01_draw.D01Draw.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d01_draw.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"{indent}\"\n        f\"{self.x.get_gerber_code(indent, endline)}\"\n        f\"{self.y.get_gerber_code(indent, endline)}\"\n        f\"{self.i.get_gerber_code(indent, endline)}\"\n        f\"{self.j.get_gerber_code(indent, endline)}\"\n        \"D01\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html","title":"d02_move","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move","title":"d02_move","text":"<p>Wrapper for move operation token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move","title":"D02Move","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move--483-move-d02","title":"4.8.3 Move (D02).","text":"<p>Moves the current point to the (X,Y) in the comment. The syntax is:</p> <pre><code>D02 = (['X' x_coordinate] ['Y' y_coordinate] 'D02') '*';\n</code></pre> <ul> <li>x_coordinate - <code>&lt;Coordinate&gt;</code> is coordinate data - see section 0. It defines the X     coordinate of the new current point. The default is the X coordinate of     the old current point.</li> <li>y_coordinate - As above, but for the Y coordinate.</li> <li>D02 - Move operation code</li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move--example","title":"Example","text":"<pre><code>X2152000Y1215000D02*\n</code></pre> <p>See section 4.8.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d02_move.py</code> <pre><code>class D02Move(CommandToken):\n    \"\"\"## 4.8.3 Move (D02).\n\n    Moves the current point to the (X,Y) in the comment. The syntax is:\n\n    ```ebnf\n    D02 = (['X' x_coordinate] ['Y' y_coordinate] 'D02') '*';\n    ```\n\n    - x_coordinate - `&lt;Coordinate&gt;` is coordinate data - see section 0. It defines the X\n        coordinate of the new current point. The default is the X coordinate of\n        the old current point.\n    - y_coordinate - As above, but for the Y coordinate.\n    - D02 - Move operation code\n\n    ---\n\n    ## Example\n\n    ```gerber\n    X2152000Y1215000D02*\n    ```\n\n    ---\n\n    See section 4.8.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=83)\n\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        x: Coordinate,\n        y: Coordinate,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.x = x\n        self.y = y\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        x = tokens.get(\"x\")\n        x = Coordinate.new(\n            coordinate_type=CoordinateType.X,\n            offset=str(x) if x is not None else None,\n        )\n        y = tokens.get(\"y\")\n        y = Coordinate.new(\n            coordinate_type=CoordinateType.Y,\n            offset=str(y) if y is not None else None,\n        )\n\n        return cls(\n            string=string,\n            location=location,\n            x=x,\n            y=y,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().command_move.pre_parser_visit_token(self, context)\n        context.get_hooks().command_move.on_parser_visit_token(self, context)\n        context.get_hooks().command_move.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"{indent}\"\n            f\"{self.x.get_gerber_code(indent, endline)}\"\n            f\"{self.y.get_gerber_code(indent, endline)}\"\n            \"D02\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d02_move.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    x = tokens.get(\"x\")\n    x = Coordinate.new(\n        coordinate_type=CoordinateType.X,\n        offset=str(x) if x is not None else None,\n    )\n    y = tokens.get(\"y\")\n    y = Coordinate.new(\n        coordinate_type=CoordinateType.Y,\n        offset=str(y) if y is not None else None,\n    )\n\n    return cls(\n        string=string,\n        location=location,\n        x=x,\n        y=y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d02_move.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().command_move.pre_parser_visit_token(self, context)\n    context.get_hooks().command_move.on_parser_visit_token(self, context)\n    context.get_hooks().command_move.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d02_move.html#pygerber.gerberx3.tokenizer.tokens.d02_move.D02Move.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d02_move.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"{indent}\"\n        f\"{self.x.get_gerber_code(indent, endline)}\"\n        f\"{self.y.get_gerber_code(indent, endline)}\"\n        \"D02\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html","title":"d03_flash","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html#pygerber.gerberx3.tokenizer.tokens.d03_flash","title":"d03_flash","text":"<p>Wrapper for flash operation token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html#pygerber.gerberx3.tokenizer.tokens.d03_flash.D03Flash","title":"D03Flash","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for flash operation token.</p> <p>Creates a flash object with the current aperture. The current point is moved to the flash point.</p> <p>See section 4.8.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d03_flash.py</code> <pre><code>class D03Flash(CommandToken):\n    \"\"\"Wrapper for flash operation token.\n\n    Creates a flash object with the current aperture. The current point is moved to the\n    flash point.\n\n    See section 4.8.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        x: Coordinate,\n        y: Coordinate,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.x = x\n        self.y = y\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        x = tokens.get(\"x\")\n        x = Coordinate.new(\n            coordinate_type=CoordinateType.X,\n            offset=str(x) if x is not None else None,\n        )\n        y = tokens.get(\"y\")\n        y = Coordinate.new(\n            coordinate_type=CoordinateType.Y,\n            offset=str(y) if y is not None else None,\n        )\n\n        return cls(\n            string=string,\n            location=location,\n            x=x,\n            y=y,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"{indent}\"\n            f\"{self.x.get_gerber_code(indent, endline)}\"\n            f\"{self.y.get_gerber_code(indent, endline)}\"\n            \"D03\"\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().command_flash.pre_parser_visit_token(self, context)\n        context.get_hooks().command_flash.on_parser_visit_token(self, context)\n        context.get_hooks().command_flash.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html#pygerber.gerberx3.tokenizer.tokens.d03_flash.D03Flash.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d03_flash.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    x = tokens.get(\"x\")\n    x = Coordinate.new(\n        coordinate_type=CoordinateType.X,\n        offset=str(x) if x is not None else None,\n    )\n    y = tokens.get(\"y\")\n    y = Coordinate.new(\n        coordinate_type=CoordinateType.Y,\n        offset=str(y) if y is not None else None,\n    )\n\n    return cls(\n        string=string,\n        location=location,\n        x=x,\n        y=y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html#pygerber.gerberx3.tokenizer.tokens.d03_flash.D03Flash.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d03_flash.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"{indent}\"\n        f\"{self.x.get_gerber_code(indent, endline)}\"\n        f\"{self.y.get_gerber_code(indent, endline)}\"\n        \"D03\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/d03_flash.html#pygerber.gerberx3.tokenizer.tokens.d03_flash.D03Flash.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/d03_flash.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().command_flash.pre_parser_visit_token(self, context)\n    context.get_hooks().command_flash.on_parser_visit_token(self, context)\n    context.get_hooks().command_flash.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html","title":"dnn_select_aperture","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture","title":"dnn_select_aperture","text":"<p>Wrapper for aperture select token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture","title":"DNNSelectAperture","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture--46-current-aperture-dnn","title":"4.6 Current Aperture (Dnn).","text":"<p>The command Dnn (nn\u226510) sets the current aperture graphics state parameter. The syntax is:</p> <pre><code>Dnn = 'D unsigned_integer '*';\n</code></pre> <ul> <li><code>D</code> - Command code.</li> <li><code>&lt;aperture number&gt;</code> - The aperture number (integer \u226510). An aperture with that number must be in the apertures dictionary.</li> </ul> <p>D-commands 0 to 9 are reserved and cannot be used for apertures. The D01 and D03 commands use the current aperture to create track and flash graphical objects.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture--example","title":"Example","text":"<pre><code>D10*\n</code></pre> <p>See section 4.6 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.py</code> <pre><code>class DNNSelectAperture(CommandToken):\n    \"\"\"## 4.6 Current Aperture (Dnn).\n\n    The command Dnn (nn\u226510) sets the current aperture graphics state parameter. The syntax is:\n\n    ```ebnf\n    Dnn = 'D unsigned_integer '*';\n    ```\n\n    - `D` - Command code.\n    - `&lt;aperture number&gt;` - The aperture number (integer \u226510). An aperture with that number must be in the apertures dictionary.\n\n    D-commands 0 to 9 are reserved and cannot be used for apertures. The D01 and D03\n    commands use the current aperture to create track and flash graphical objects.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    D10*\n    ```\n\n    ---\n\n    See section 4.6 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=75)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(self, string: str, location: int, aperture_id: ApertureID) -&gt; None:\n        super().__init__(string, location)\n        self.aperture_id = aperture_id\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        return cls(\n            string=string,\n            location=location,\n            aperture_id=ApertureID(tokens[\"aperture_identifier\"]),\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().select_aperture.pre_parser_visit_token(self, context)\n        context.get_hooks().select_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().select_aperture.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}{self.aperture_id.get_gerber_code(indent, endline)}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    return cls(\n        string=string,\n        location=location,\n        aperture_id=ApertureID(tokens[\"aperture_identifier\"]),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().select_aperture.pre_parser_visit_token(self, context)\n    context.get_hooks().select_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().select_aperture.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.dnn_select_aperture.DNNSelectAperture.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/dnn_select_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}{self.aperture_id.get_gerber_code(indent, endline)}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html","title":"end_of_expression","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html#pygerber.gerberx3.tokenizer.tokens.end_of_expression","title":"end_of_expression","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html#pygerber.gerberx3.tokenizer.tokens.end_of_expression.EndOfExpression","title":"EndOfExpression","text":"<p>             Bases: <code>Token</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html#pygerber.gerberx3.tokenizer.tokens.end_of_expression.EndOfExpression--33-commands-end-of-command","title":"3.3 Commands (<code>'*' - end of command</code>).","text":"<p>Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of commands. Commands define the graphics state, create graphical objects, defines apertures, manage attributes and so on.</p> <p>Commands are built with words, the basic syntactic building block of a Gerber file. A word is a non-empty character string, excluding the reserved characters '' and '%', terminated with an ''</p> <pre><code>word = {free_character}+ '*';\n</code></pre> <p>For historic reasons, there are two command syntax styles: word commands and extended commands.</p> <p>(...)</p> <p>The example below shows a stream of Gerber commands.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html#pygerber.gerberx3.tokenizer.tokens.end_of_expression.EndOfExpression--example","title":"Example","text":"<pre><code>G04 Different command styles*\nG75*\nG02*\nD10*\nX0Y0D02*\nX2000000Y0I1000000J0D01*\nD11*\nX0Y2000000D03*\nM02*\n</code></pre> <p>See section 3.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/end_of_expression.py</code> <pre><code>class EndOfExpression(Token):\n    \"\"\"## 3.3 Commands (`'*' - end of command`).\n\n    Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of\n    commands. Commands define the graphics state, create graphical objects, defines apertures,\n    manage attributes and so on.\n\n    Commands are built with words, the basic syntactic building block of a Gerber file. A word is a\n    non-empty character string, excluding the reserved characters '*' and '%', terminated with an '*'\n\n    ```ebnf\n    word = {free_character}+ '*';\n    ```\n\n    For historic reasons, there are two command syntax styles: word commands and extended\n    commands.\n\n    (...)\n\n    The example below shows a stream of Gerber commands.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    G04 Different command styles*\n    G75*\n    G02*\n    D10*\n    X0Y0D02*\n    X2000000Y0I1000000J0D01*\n    D11*\n    X0Y2000000D03*\n    M02*\n    ```\n\n    ---\n\n    See section 3.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=33)\n\n    \"\"\"  # noqa: E501\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return \"*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/end_of_expression.html#pygerber.gerberx3.tokenizer.tokens.end_of_expression.EndOfExpression.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/end_of_expression.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return \"*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html","title":"fs_coordinate_format","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format","title":"fs_coordinate_format","text":"<p>Coordinate format token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateFormat","title":"CoordinateFormat","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Description of coordinate format token.</p> <p>See: -   section 4.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html -   section 4.2.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>class CoordinateFormat(ExtendedCommandToken):\n    \"\"\"Description of coordinate format token.\n\n    See:\n    -   section 4.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    -   section 4.2.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        zeros_mode: TrailingZerosMode,\n        coordinate_mode: CoordinateMode,\n        x_format: AxisFormat,\n        y_format: AxisFormat,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.zeros_mode = zeros_mode\n        self.coordinate_mode = coordinate_mode\n        self.x_format = x_format\n        self.y_format = y_format\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        zeros_mode = TrailingZerosMode(tokens[\"zeros_mode\"])\n        coordinate_mode = CoordinateMode(tokens[\"coordinate_mode\"])\n        x_format = AxisFormat(\n            integer=int(str(tokens[\"x_format\"][0])),\n            decimal=int(str(tokens[\"x_format\"][1])),\n        )\n        y_format = AxisFormat(\n            integer=int(str(tokens[\"y_format\"][0])),\n            decimal=int(str(tokens[\"y_format\"][1])),\n        )\n        return cls(\n            string=string,\n            location=location,\n            zeros_mode=zeros_mode,\n            coordinate_mode=coordinate_mode,\n            x_format=x_format,\n            y_format=y_format,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().coordinate_format.pre_parser_visit_token(self, context)\n        context.get_hooks().coordinate_format.on_parser_visit_token(self, context)\n        context.get_hooks().coordinate_format.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"FS\"\n            f\"{self.zeros_mode.get_gerber_code(indent, endline)}\"\n            f\"{self.coordinate_mode.get_gerber_code(indent, endline)}\"\n            f\"X{self.x_format.get_gerber_code(indent, endline)}\"\n            f\"Y{self.y_format.get_gerber_code(indent, endline)}\"\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateFormat.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    zeros_mode = TrailingZerosMode(tokens[\"zeros_mode\"])\n    coordinate_mode = CoordinateMode(tokens[\"coordinate_mode\"])\n    x_format = AxisFormat(\n        integer=int(str(tokens[\"x_format\"][0])),\n        decimal=int(str(tokens[\"x_format\"][1])),\n    )\n    y_format = AxisFormat(\n        integer=int(str(tokens[\"y_format\"][0])),\n        decimal=int(str(tokens[\"y_format\"][1])),\n    )\n    return cls(\n        string=string,\n        location=location,\n        zeros_mode=zeros_mode,\n        coordinate_mode=coordinate_mode,\n        x_format=x_format,\n        y_format=y_format,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateFormat.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().coordinate_format.pre_parser_visit_token(self, context)\n    context.get_hooks().coordinate_format.on_parser_visit_token(self, context)\n    context.get_hooks().coordinate_format.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateFormat.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"FS\"\n        f\"{self.zeros_mode.get_gerber_code(indent, endline)}\"\n        f\"{self.coordinate_mode.get_gerber_code(indent, endline)}\"\n        f\"X{self.x_format.get_gerber_code(indent, endline)}\"\n        f\"Y{self.y_format.get_gerber_code(indent, endline)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.TrailingZerosMode","title":"TrailingZerosMode","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Coordinate format mode.</p> <p>GerberX3 supports only one, L, the other is required for backwards compatibility.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>class TrailingZerosMode(GerberCodeEnum):\n    \"\"\"Coordinate format mode.\n\n    GerberX3 supports only one, L, the other is required for backwards compatibility.\n    \"\"\"\n\n    OmitLeading = \"L\"\n    OmitTrailing = \"T\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateMode","title":"CoordinateMode","text":"<p>             Bases: <code>GerberCodeEnum</code></p> <p>Coordinate format mode.</p> <p>GerberX3 supports only one, A, the other required for backwards compatibility.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>class CoordinateMode(GerberCodeEnum):\n    \"\"\"Coordinate format mode.\n\n    GerberX3 supports only one, A, the other required for backwards compatibility.\n    \"\"\"\n\n    Absolute = \"A\"\n    Incremental = \"I\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.AxisFormat","title":"AxisFormat","text":"<p>             Bases: <code>FrozenGeneralModel</code>, <code>GerberCode</code></p> <p>Wrapper for single axis format.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>class AxisFormat(FrozenGeneralModel, GerberCode):\n    \"\"\"Wrapper for single axis format.\"\"\"\n\n    integer: int\n    decimal: int\n\n    @property\n    def total_length(self) -&gt; int:\n        \"\"\"Total format length.\"\"\"\n        return self.integer + self.decimal\n\n    def __str__(self) -&gt; str:\n        return f\"{self.integer}{self.decimal}\"\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}{self.integer}{self.decimal}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.AxisFormat.total_length","title":"total_length  <code>property</code>","text":"<pre><code>total_length: int\n</code></pre> <p>Total format length.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.AxisFormat.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}{self.integer}{self.decimal}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateParser","title":"CoordinateParser","text":"<p>             Bases: <code>FrozenGeneralModel</code></p> <p>Coordinate Parser class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>class CoordinateParser(FrozenGeneralModel):\n    \"\"\"Coordinate Parser class.\"\"\"\n\n    x_format: AxisFormat\n    y_format: AxisFormat\n\n    @classmethod\n    def new(\n        cls,\n        x_format: AxisFormat,\n        y_format: AxisFormat,\n        coordinate_mode: CoordinateMode = CoordinateMode.Absolute,\n        zeros_mode: TrailingZerosMode = TrailingZerosMode.OmitLeading,\n    ) -&gt; Self:\n        \"\"\"Update coordinate parser format configuration.\"\"\"\n        if coordinate_mode != CoordinateMode.Absolute:\n            raise IncrementalCoordinatesNotSupported2Error\n\n        if zeros_mode != TrailingZerosMode.OmitLeading:\n            raise ZeroOmissionNotSupported2Error\n\n        for axis, axis_format in ((\"X\", x_format), (\"Y\", y_format)):\n            if axis_format.decimal &lt; RECOMMENDED_MINIMAL_DECIMAL_PLACES:\n                logging.warning(\n                    \"It is recommended to use at least 5 decimal places for coordinate \"\n                    \"data when using metric units and 6 decimal places for imperial \"\n                    \"units. (Detected for %s)\"\n                    \"(See 4.2.2 in Gerber Layer Format Specification)\",\n                    axis,\n                )\n\n        return cls(x_format=x_format, y_format=y_format)\n\n    def parse(self, coordinate: Coordinate) -&gt; Decimal:\n        \"\"\"Parse raw coordinate data.\"\"\"\n        if coordinate.coordinate_type in (CoordinateType.X, CoordinateType.I):\n            return self._parse(self.x_format, coordinate.offset, coordinate.sign)\n\n        if coordinate.coordinate_type in (CoordinateType.Y, CoordinateType.J):\n            return self._parse(self.y_format, coordinate.offset, coordinate.sign)\n\n        raise UnsupportedCoordinateType2Error(coordinate.coordinate_type)\n\n    def _parse(\n        self,\n        axis_format: AxisFormat,\n        offset: str,\n        sign: CoordinateSign,\n    ) -&gt; Decimal:\n        total_length = axis_format.total_length\n\n        if len(offset) &gt; total_length:\n            msg = f\"Got {offset!r} with length {len(offset)} expected {total_length}.\"\n            raise InvalidCoordinateLength2Error(msg)\n\n        offset = offset.rjust(axis_format.total_length, \"0\")\n        integer, decimal = offset[: axis_format.integer], offset[axis_format.integer :]\n\n        return Decimal(f\"{sign.value}{integer}.{decimal}\")\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateParser.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    x_format: AxisFormat,\n    y_format: AxisFormat,\n    coordinate_mode: CoordinateMode = CoordinateMode.Absolute,\n    zeros_mode: TrailingZerosMode = TrailingZerosMode.OmitLeading,\n) -&gt; Self\n</code></pre> <p>Update coordinate parser format configuration.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    x_format: AxisFormat,\n    y_format: AxisFormat,\n    coordinate_mode: CoordinateMode = CoordinateMode.Absolute,\n    zeros_mode: TrailingZerosMode = TrailingZerosMode.OmitLeading,\n) -&gt; Self:\n    \"\"\"Update coordinate parser format configuration.\"\"\"\n    if coordinate_mode != CoordinateMode.Absolute:\n        raise IncrementalCoordinatesNotSupported2Error\n\n    if zeros_mode != TrailingZerosMode.OmitLeading:\n        raise ZeroOmissionNotSupported2Error\n\n    for axis, axis_format in ((\"X\", x_format), (\"Y\", y_format)):\n        if axis_format.decimal &lt; RECOMMENDED_MINIMAL_DECIMAL_PLACES:\n            logging.warning(\n                \"It is recommended to use at least 5 decimal places for coordinate \"\n                \"data when using metric units and 6 decimal places for imperial \"\n                \"units. (Detected for %s)\"\n                \"(See 4.2.2 in Gerber Layer Format Specification)\",\n                axis,\n            )\n\n    return cls(x_format=x_format, y_format=y_format)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.html#pygerber.gerberx3.tokenizer.tokens.fs_coordinate_format.CoordinateParser.parse","title":"parse","text":"<pre><code>parse(coordinate: Coordinate) -&gt; Decimal\n</code></pre> <p>Parse raw coordinate data.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/fs_coordinate_format.py</code> <pre><code>def parse(self, coordinate: Coordinate) -&gt; Decimal:\n    \"\"\"Parse raw coordinate data.\"\"\"\n    if coordinate.coordinate_type in (CoordinateType.X, CoordinateType.I):\n        return self._parse(self.x_format, coordinate.offset, coordinate.sign)\n\n    if coordinate.coordinate_type in (CoordinateType.Y, CoordinateType.J):\n        return self._parse(self.y_format, coordinate.offset, coordinate.sign)\n\n    raise UnsupportedCoordinateType2Error(coordinate.coordinate_type)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.html","title":"g01_set_linear","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.html#pygerber.gerberx3.tokenizer.tokens.g01_set_linear","title":"g01_set_linear","text":"<p>Wrapper for G01 mode set token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.html#pygerber.gerberx3.tokenizer.tokens.g01_set_linear.SetLinear","title":"SetLinear","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G01 mode set token.</p> <p>Sets linear/circular mode to linear. See: -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.py</code> <pre><code>class SetLinear(CommandToken):\n    \"\"\"Wrapper for G01 mode set token.\n\n    Sets linear/circular mode to linear.\n    See:\n    -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html\n    -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_linear.pre_parser_visit_token(self, context)\n        context.get_hooks().set_linear.on_parser_visit_token(self, context)\n        context.get_hooks().set_linear.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G01\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.html#pygerber.gerberx3.tokenizer.tokens.g01_set_linear.SetLinear.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_linear.pre_parser_visit_token(self, context)\n    context.get_hooks().set_linear.on_parser_visit_token(self, context)\n    context.get_hooks().set_linear.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.html#pygerber.gerberx3.tokenizer.tokens.g01_set_linear.SetLinear.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g01_set_linear.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G01\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.html","title":"g02_set_clockwise_circular","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g02_set_clockwise_circular","title":"g02_set_clockwise_circular","text":"<p>Wrapper for G01 mode set token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g02_set_clockwise_circular.SetClockwiseCircular","title":"SetClockwiseCircular","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G02 mode set token.</p> <p>Sets linear/circular mode to clockwise circular.</p> <p>See: -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.py</code> <pre><code>class SetClockwiseCircular(CommandToken):\n    \"\"\"Wrapper for G02 mode set token.\n\n    Sets linear/circular mode to clockwise circular.\n\n    See:\n    -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html\n    -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_clockwise_circular.pre_parser_visit_token(self, context)\n        context.get_hooks().set_clockwise_circular.on_parser_visit_token(self, context)\n        context.get_hooks().set_clockwise_circular.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G02\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g02_set_clockwise_circular.SetClockwiseCircular.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_clockwise_circular.pre_parser_visit_token(self, context)\n    context.get_hooks().set_clockwise_circular.on_parser_visit_token(self, context)\n    context.get_hooks().set_clockwise_circular.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g02_set_clockwise_circular.SetClockwiseCircular.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g02_set_clockwise_circular.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G02\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.html","title":"g03_set_counterclockwise_circular","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g03_set_counterclockwise_circular","title":"g03_set_counterclockwise_circular","text":"<p>Wrapper for G01 mode set token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g03_set_counterclockwise_circular.SetCounterclockwiseCircular","title":"SetCounterclockwiseCircular","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G03 mode set token.</p> <p>Sets linear/circular mode to counterclockwise circular.</p> <p>See: -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.py</code> <pre><code>class SetCounterclockwiseCircular(CommandToken):\n    \"\"\"Wrapper for G03 mode set token.\n\n    Sets linear/circular mode to counterclockwise circular.\n\n    See:\n    -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html\n    -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_counter_clockwise_circular.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_counter_clockwise_circular.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_counter_clockwise_circular.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G03\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g03_set_counterclockwise_circular.SetCounterclockwiseCircular.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_counter_clockwise_circular.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_counter_clockwise_circular.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_counter_clockwise_circular.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.html#pygerber.gerberx3.tokenizer.tokens.g03_set_counterclockwise_circular.SetCounterclockwiseCircular.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g03_set_counterclockwise_circular.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G03\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html","title":"g04_comment","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment","title":"g04_comment","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment","title":"Comment","text":"<p>             Bases: <code>CommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment--41-comment-g04","title":"4.1 Comment (G04).","text":"<p>The G04 command is used for human readable comments. It does not affect the image. The syntax for G04 is as follows.</p> <pre><code>G04 = ('G04' string) '*';\n</code></pre> <p>The string must follow the string syntax in 3.4.3.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment--example","title":"Example","text":"<pre><code>G04 This is a comment*\nG04 The space characters as well as \",\" and \";\" are allowed here.*\n</code></pre> <p>See section 4.1 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g04_comment.py</code> <pre><code>class Comment(CommandToken):\n    \"\"\"## 4.1 Comment (G04).\n\n    The G04 command is used for human readable comments. It does not affect the image.\n    The syntax for G04 is as follows.\n\n    ```ebnf\n    G04 = ('G04' string) '*';\n    ```\n\n    The string must follow the string syntax in [3.4.3](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=35).\n\n    ---\n\n    ## Example\n\n    ```gerber\n    G04 This is a comment*\n    G04 The space characters as well as \",\" and \";\" are allowed here.*\n    ```\n\n    ---\n\n    See section 4.1 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=44)\n\n    \"\"\"\n\n    def __init__(self, string: str, location: int, content: str) -&gt; None:\n        super().__init__(string, location)\n        self.content = content\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"string\"])\n        return cls(string=string, location=location, content=content)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().comment.pre_parser_visit_token(self, context)\n        context.get_hooks().comment.on_parser_visit_token(self, context)\n        context.get_hooks().comment.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G04 {self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g04_comment.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"string\"])\n    return cls(string=string, location=location, content=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g04_comment.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().comment.pre_parser_visit_token(self, context)\n    context.get_hooks().comment.on_parser_visit_token(self, context)\n    context.get_hooks().comment.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g04_comment.html#pygerber.gerberx3.tokenizer.tokens.g04_comment.Comment.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g04_comment.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G04 {self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.html","title":"g36_begin_region","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.html#pygerber.gerberx3.tokenizer.tokens.g36_begin_region","title":"g36_begin_region","text":"<p>Wrapper for aperture select token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.html#pygerber.gerberx3.tokenizer.tokens.g36_begin_region.BeginRegion","title":"BeginRegion","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G36 token.</p> <p>Starts a region statement which creates a region by defining its contours.</p> <p>See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.py</code> <pre><code>class BeginRegion(CommandToken):\n    \"\"\"Wrapper for G36 token.\n\n    Starts a region statement which creates a region by defining its contours.\n\n    See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().begin_region.pre_parser_visit_token(self, context)\n        context.get_hooks().begin_region.on_parser_visit_token(self, context)\n        context.get_hooks().begin_region.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G36\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.html#pygerber.gerberx3.tokenizer.tokens.g36_begin_region.BeginRegion.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().begin_region.pre_parser_visit_token(self, context)\n    context.get_hooks().begin_region.on_parser_visit_token(self, context)\n    context.get_hooks().begin_region.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.html#pygerber.gerberx3.tokenizer.tokens.g36_begin_region.BeginRegion.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g36_begin_region.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G36\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g37_end_region.html","title":"g37_end_region","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g37_end_region.html#pygerber.gerberx3.tokenizer.tokens.g37_end_region","title":"g37_end_region","text":"<p>Wrapper for aperture select token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g37_end_region.html#pygerber.gerberx3.tokenizer.tokens.g37_end_region.EndRegion","title":"EndRegion","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G37 token.</p> <p>Ends the region statement.</p> <p>See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g37_end_region.py</code> <pre><code>class EndRegion(CommandToken):\n    \"\"\"Wrapper for G37 token.\n\n    Ends the region statement.\n\n    See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().end_region.pre_parser_visit_token(self, context)\n        context.get_hooks().end_region.on_parser_visit_token(self, context)\n        context.get_hooks().end_region.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G37\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g37_end_region.html#pygerber.gerberx3.tokenizer.tokens.g37_end_region.EndRegion.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g37_end_region.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().end_region.pre_parser_visit_token(self, context)\n    context.get_hooks().end_region.on_parser_visit_token(self, context)\n    context.get_hooks().end_region.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g37_end_region.html#pygerber.gerberx3.tokenizer.tokens.g37_end_region.EndRegion.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g37_end_region.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G37\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.html","title":"g54_select_aperture","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.g54_select_aperture","title":"g54_select_aperture","text":"<p>Wrapper for G70 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.g54_select_aperture.G54SelectAperture","title":"G54SelectAperture","text":"<p>             Bases: <code>DNNSelectAperture</code></p> <p>Wrapper for G54DNN token.</p> <p>Select aperture.</p> <p>This historic code optionally precedes an aperture selection Dnn command. It has no effect. Sometimes used. Deprecated in 2012.</p> <p>See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.py</code> <pre><code>class G54SelectAperture(DNNSelectAperture):\n    \"\"\"Wrapper for G54DNN token.\n\n    Select aperture.\n\n    This historic code optionally precedes an aperture selection Dnn command. It has no\n    effect. Sometimes used. Deprecated in 2012.\n\n    See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().prepare_select_aperture.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().prepare_select_aperture.on_parser_visit_token(self, context)\n        context.get_hooks().prepare_select_aperture.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G54{self.aperture_id}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.g54_select_aperture.G54SelectAperture.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().prepare_select_aperture.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().prepare_select_aperture.on_parser_visit_token(self, context)\n    context.get_hooks().prepare_select_aperture.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.html#pygerber.gerberx3.tokenizer.tokens.g54_select_aperture.G54SelectAperture.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g54_select_aperture.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G54{self.aperture_id}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.html","title":"g70_set_unit_inch","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.html#pygerber.gerberx3.tokenizer.tokens.g70_set_unit_inch","title":"g70_set_unit_inch","text":"<p>Wrapper for G70 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.html#pygerber.gerberx3.tokenizer.tokens.g70_set_unit_inch.SetUnitInch","title":"SetUnitInch","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G70 token.</p> <p>Set the <code>Unit</code> to inch.</p> <p>This historic codes perform a function handled by the MO command. See 4.2.1. Sometimes used. Deprecated in 2012</p> <p>See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.py</code> <pre><code>class SetUnitInch(CommandToken):\n    \"\"\"Wrapper for G70 token.\n\n    Set the `Unit` to inch.\n\n    This historic codes perform a function handled by the MO command. See 4.2.1.\n    Sometimes used. Deprecated in 2012\n\n    See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_unit_inch.pre_parser_visit_token(self, context)\n        context.get_hooks().set_unit_inch.on_parser_visit_token(self, context)\n        context.get_hooks().set_unit_inch.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G70\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.html#pygerber.gerberx3.tokenizer.tokens.g70_set_unit_inch.SetUnitInch.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_unit_inch.pre_parser_visit_token(self, context)\n    context.get_hooks().set_unit_inch.on_parser_visit_token(self, context)\n    context.get_hooks().set_unit_inch.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.html#pygerber.gerberx3.tokenizer.tokens.g70_set_unit_inch.SetUnitInch.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g70_set_unit_inch.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G70\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.html","title":"g71_set_unit_mm","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.html#pygerber.gerberx3.tokenizer.tokens.g71_set_unit_mm","title":"g71_set_unit_mm","text":"<p>Wrapper for G71 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.html#pygerber.gerberx3.tokenizer.tokens.g71_set_unit_mm.SetUnitMillimeters","title":"SetUnitMillimeters","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G71 token.</p> <p>Set the <code>Unit</code> to millimeter.</p> <p>This historic codes perform a function handled by the MO command. Sometimes used. Deprecated in 2012</p> <p>See section 4.2.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.py</code> <pre><code>class SetUnitMillimeters(CommandToken):\n    \"\"\"Wrapper for G71 token.\n\n    Set the `Unit` to millimeter.\n\n    This historic codes perform a function handled by the MO command.\n    Sometimes used. Deprecated in 2012\n\n    See section 4.2.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_unit_millimeters.pre_parser_visit_token(self, context)\n        context.get_hooks().set_unit_millimeters.on_parser_visit_token(self, context)\n        context.get_hooks().set_unit_millimeters.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G71\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.html#pygerber.gerberx3.tokenizer.tokens.g71_set_unit_mm.SetUnitMillimeters.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_unit_millimeters.pre_parser_visit_token(self, context)\n    context.get_hooks().set_unit_millimeters.on_parser_visit_token(self, context)\n    context.get_hooks().set_unit_millimeters.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.html#pygerber.gerberx3.tokenizer.tokens.g71_set_unit_mm.SetUnitMillimeters.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g71_set_unit_mm.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G71\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.html","title":"g74_single_quadrant","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g74_single_quadrant","title":"g74_single_quadrant","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g74_single_quadrant.SetSingleQuadrantMode","title":"SetSingleQuadrantMode","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G74 token.</p> <p>Sets single quadrant mode - Rarely used, and then typically without effect. Deprecated in 2020.</p> <p>In single quadrant mode the arc is not allowed to extend over more than 90\u00b0.</p> <p>See: -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html -   section 8.1.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.py</code> <pre><code>class SetSingleQuadrantMode(CommandToken):\n    \"\"\"Wrapper for G74 token.\n\n    Sets single quadrant mode - Rarely used, and then typically without effect.\n    Deprecated in 2020.\n\n    In single quadrant mode the arc is not allowed to extend over more than 90\u00b0.\n\n    See:\n    -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    -   section 8.1.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_single_quadrant_mode.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_single_quadrant_mode.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_single_quadrant_mode.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G74\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g74_single_quadrant.SetSingleQuadrantMode.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_single_quadrant_mode.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_single_quadrant_mode.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_single_quadrant_mode.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g74_single_quadrant.SetSingleQuadrantMode.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g74_single_quadrant.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G74\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.html","title":"g75_multi_quadrant","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g75_multi_quadrant","title":"g75_multi_quadrant","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g75_multi_quadrant.SetMultiQuadrantMode","title":"SetMultiQuadrantMode","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G75 token.</p> <p>In multi quadrant mode the arc is allowed to extend over more than 90\u00b0. To avoid ambiguity between 0\u00b0 and 360\u00b0 arcs the following relation must hold:</p> <p>0\u00b0 &lt; A \u2264360\u00b0, where A is the arc angle</p> <p>If the start point of the arc is equal to the end point, the arc is a full circle of 360\u00b0.</p> <p>0\u00b0 \u2264A \u226490\u00b0, where A is the arc angle</p> <p>angleIf the start point of the arc is equal to the end point, the arc has length zero, i.e. it covers 0\u00b0. A separate operation is required for each quadrant. A minimum of four operations is required for a full circle.</p> <p>See: -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html -   section 8.1.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.py</code> <pre><code>class SetMultiQuadrantMode(CommandToken):\n    \"\"\"Wrapper for G75 token.\n\n    In multi quadrant mode the arc is allowed to extend over more than 90\u00b0.\n    To avoid ambiguity between 0\u00b0 and 360\u00b0 arcs the following relation must hold:\n\n    0\u00b0 &lt; A \u2264360\u00b0, where A is the arc angle\n\n    If the start point of the arc is equal to the\n    end point, the arc is a full circle of 360\u00b0.\n\n    0\u00b0 \u2264A \u226490\u00b0, where A is the arc angle\n\n    angleIf the start point of the arc is equal to the end point, the arc has length\n    zero, i.e. it covers 0\u00b0. A separate operation is required for each quadrant. A\n    minimum of four operations is required for a full circle.\n\n    See:\n    -   section 4.8 of The Gerber Layer Format Specification Revision 2020.09 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2020_09.html\n    -   section 4.7 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    -   section 8.1.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_multi_quadrant_mode.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_multi_quadrant_mode.on_parser_visit_token(self, context)\n        context.get_hooks().set_multi_quadrant_mode.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G75\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g75_multi_quadrant.SetMultiQuadrantMode.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_multi_quadrant_mode.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_multi_quadrant_mode.on_parser_visit_token(self, context)\n    context.get_hooks().set_multi_quadrant_mode.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.html#pygerber.gerberx3.tokenizer.tokens.g75_multi_quadrant.SetMultiQuadrantMode.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g75_multi_quadrant.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G75\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.html","title":"g90_set_coordinate_absolute","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.html#pygerber.gerberx3.tokenizer.tokens.g90_set_coordinate_absolute","title":"g90_set_coordinate_absolute","text":"<p>Wrapper for G90 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.html#pygerber.gerberx3.tokenizer.tokens.g90_set_coordinate_absolute.SetAbsoluteNotation","title":"SetAbsoluteNotation","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G90 token.</p> <p>Set the <code>Coordinate format</code> to <code>Absolute notation</code>.</p> <p>This historic code performs a function handled by the FS command. See 4.1. Very rarely used nowadays. Deprecated in 2012.</p> <p>See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.py</code> <pre><code>class SetAbsoluteNotation(CommandToken):\n    \"\"\"Wrapper for G90 token.\n\n    Set the `Coordinate format` to `Absolute notation`.\n\n    This historic code performs a function handled by the FS command. See 4.1. Very\n    rarely used nowadays. Deprecated in 2012.\n\n    See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_coordinate_absolute.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_coordinate_absolute.on_parser_visit_token(self, context)\n        context.get_hooks().set_coordinate_absolute.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G90\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.html#pygerber.gerberx3.tokenizer.tokens.g90_set_coordinate_absolute.SetAbsoluteNotation.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_coordinate_absolute.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_coordinate_absolute.on_parser_visit_token(self, context)\n    context.get_hooks().set_coordinate_absolute.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.html#pygerber.gerberx3.tokenizer.tokens.g90_set_coordinate_absolute.SetAbsoluteNotation.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g90_set_coordinate_absolute.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G90\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.html","title":"g91_set_coordinate_incremental","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.html#pygerber.gerberx3.tokenizer.tokens.g91_set_coordinate_incremental","title":"g91_set_coordinate_incremental","text":"<p>Wrapper for G91 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.html#pygerber.gerberx3.tokenizer.tokens.g91_set_coordinate_incremental.SetIncrementalNotation","title":"SetIncrementalNotation","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for G91 token.</p> <p>Set the <code>Coordinate format</code> to <code>Incremental notation</code>.</p> <p>This historic code performs a function handled by the FS command. See 4.1. Very rarely used nowadays. Deprecated in 2012.</p> <p>See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.py</code> <pre><code>class SetIncrementalNotation(CommandToken):\n    \"\"\"Wrapper for G91 token.\n\n    Set the `Coordinate format` to `Incremental notation`.\n\n    This historic code performs a function handled by the FS command. See 4.1. Very\n    rarely used nowadays. Deprecated in 2012.\n\n    See section 8.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().set_coordinate_incremental.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_coordinate_incremental.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().set_coordinate_incremental.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G91\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.html#pygerber.gerberx3.tokenizer.tokens.g91_set_coordinate_incremental.SetIncrementalNotation.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().set_coordinate_incremental.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_coordinate_incremental.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().set_coordinate_incremental.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.html#pygerber.gerberx3.tokenizer.tokens.g91_set_coordinate_incremental.SetIncrementalNotation.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/g91_set_coordinate_incremental.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G91\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html","title":"in_image_name","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name","title":"in_image_name","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name--load-name-ln","title":"Load Name (LN).","text":"<p>Note: The LN command was deprecated in revision I4 from October 2013.</p> <p>The historic <code>LN</code> command doesn't influence the image in any manner and can safely be overlooked.</p> <p>Function of the <code>LN</code> command: - <code>LN</code> is designed to allocate a name to the following section of the file. - It was originally conceptualized to serve as a human-readable comment. - For creating human-readable comments, it's advisable to utilize the standard <code>G04</code>     command. - The <code>LN</code> command has the flexibility to be executed multiple times within a file.</p> <p>SPEC: <code>2023.03</code> SECTION: <code>8.1.6</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name.ImageName","title":"ImageName","text":"<p>             Bases: <code>ExtendedCommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name.ImageName--image-name-in","title":"Image Name (IN).","text":"<p>The IN command is deprecated since revision I4 from October 2013.</p> <p>The historic IN command gives a name to the image contained in the Gerber file. The name must comply with the syntax rules for a string as described in section 3.4.3. This command can only be used once, at the beginning of the file.</p> <p>IN has no effect on the image. A reader can ignore this command. The informal information provide by IN can also be put a G04 comment.</p> <p>See section 8.1.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/in_image_name.py</code> <pre><code>class ImageName(ExtendedCommandToken):\n    \"\"\"### Image Name (IN).\n\n    The IN command is deprecated since revision I4 from October 2013.\n\n    The historic IN command gives a name to the image contained in the Gerber file.\n    The name must comply with the syntax rules for a string as described in section\n    3.4.3. This command can only be used once, at the beginning of the file.\n\n    IN has no effect on the image. A reader can ignore this command. The informal\n    information provide by IN can also be put a G04 comment.\n\n    See section 8.1.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(self, string: str, location: int, content: str) -&gt; None:\n        super().__init__(string, location)\n        self.content = content\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"string\"])\n        return cls(string=string, location=location, content=content)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().image_name.pre_parser_visit_token(self, context)\n        context.get_hooks().image_name.on_parser_visit_token(self, context)\n        context.get_hooks().image_name.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"IN{self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name.ImageName.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/in_image_name.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"string\"])\n    return cls(string=string, location=location, content=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name.ImageName.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/in_image_name.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().image_name.pre_parser_visit_token(self, context)\n    context.get_hooks().image_name.on_parser_visit_token(self, context)\n    context.get_hooks().image_name.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/in_image_name.html#pygerber.gerberx3.tokenizer.tokens.in_image_name.ImageName.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/in_image_name.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"IN{self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html","title":"invalid_token","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token","title":"invalid_token","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token.InvalidToken","title":"InvalidToken","text":"<p>             Bases: <code>Token</code></p> <p>Invalid syntax.</p> <p>This is not a valid Gerber X3/X2 expression.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/invalid_token.py</code> <pre><code>class InvalidToken(Token):\n    \"\"\"Invalid syntax.\n\n    This is not a valid Gerber X3/X2 expression.\n    \"\"\"\n\n    def __init__(self, string: str, location: int, content: str) -&gt; None:\n        super().__init__(string, location)\n        self.content = content\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"content\"])\n        return cls(string=string, location=location, content=content)\n\n    def get_token_diagnostics(self) -&gt; Iterable[diagnostic.Diagnostic]:\n        \"\"\"Get diagnostics for this token.\"\"\"\n        yield diagnostic.Diagnostic(\n            range=(\n                diagnostic.Range(\n                    start=self.get_token_position(),\n                    end=self.get_token_end_position(),\n                )\n            ),\n            message=\"Invalid syntax.\",\n            severity=diagnostic.DiagnosticSeverity.Error,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().invalid_token.pre_parser_visit_token(self, context)\n        context.get_hooks().invalid_token.on_parser_visit_token(self, context)\n        context.get_hooks().invalid_token.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return self.content\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token.InvalidToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/invalid_token.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"content\"])\n    return cls(string=string, location=location, content=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token.InvalidToken.get_token_diagnostics","title":"get_token_diagnostics","text":"<pre><code>get_token_diagnostics() -&gt; Iterable[diagnostic.Diagnostic]\n</code></pre> <p>Get diagnostics for this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/invalid_token.py</code> <pre><code>def get_token_diagnostics(self) -&gt; Iterable[diagnostic.Diagnostic]:\n    \"\"\"Get diagnostics for this token.\"\"\"\n    yield diagnostic.Diagnostic(\n        range=(\n            diagnostic.Range(\n                start=self.get_token_position(),\n                end=self.get_token_end_position(),\n            )\n        ),\n        message=\"Invalid syntax.\",\n        severity=diagnostic.DiagnosticSeverity.Error,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token.InvalidToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/invalid_token.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().invalid_token.pre_parser_visit_token(self, context)\n    context.get_hooks().invalid_token.on_parser_visit_token(self, context)\n    context.get_hooks().invalid_token.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/invalid_token.html#pygerber.gerberx3.tokenizer.tokens.invalid_token.InvalidToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/invalid_token.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return self.content\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html","title":"ip_image_polarity","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html#pygerber.gerberx3.tokenizer.tokens.ip_image_polarity","title":"ip_image_polarity","text":"<p>Wrapper for image polarity token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html#pygerber.gerberx3.tokenizer.tokens.ip_image_polarity.ImagePolarity","title":"ImagePolarity","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for image polarity token.</p> <p>The IP command is deprecated.</p> <p>IP sets positive or negative polarity for the entire image. It can only be used once, at the beginning of the file.</p> <p>See section 8.1.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.py</code> <pre><code>class ImagePolarity(ExtendedCommandToken):\n    \"\"\"Wrapper for image polarity token.\n\n    The IP command is deprecated.\n\n    IP sets positive or negative polarity for the entire image. It can only be used\n    once, at the beginning of the file.\n\n    See section 8.1.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        image_polarity: ImagePolarityEnum,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.image_polarity = image_polarity\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        image_polarity = ImagePolarityEnum(tokens[\"image_polarity\"])\n        return cls(\n            string=string,\n            location=location,\n            image_polarity=image_polarity,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().image_polarity.pre_parser_visit_token(self, context)\n        context.get_hooks().image_polarity.on_parser_visit_token(self, context)\n        context.get_hooks().image_polarity.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"IP{self.image_polarity.get_gerber_code(indent, endline)}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html#pygerber.gerberx3.tokenizer.tokens.ip_image_polarity.ImagePolarity.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    image_polarity = ImagePolarityEnum(tokens[\"image_polarity\"])\n    return cls(\n        string=string,\n        location=location,\n        image_polarity=image_polarity,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html#pygerber.gerberx3.tokenizer.tokens.ip_image_polarity.ImagePolarity.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().image_polarity.pre_parser_visit_token(self, context)\n    context.get_hooks().image_polarity.on_parser_visit_token(self, context)\n    context.get_hooks().image_polarity.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.html#pygerber.gerberx3.tokenizer.tokens.ip_image_polarity.ImagePolarity.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ip_image_polarity.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"IP{self.image_polarity.get_gerber_code(indent, endline)}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html","title":"lm_load_mirroring","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html#pygerber.gerberx3.tokenizer.tokens.lm_load_mirroring","title":"lm_load_mirroring","text":"<p>Wrapper for load mirroring token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html#pygerber.gerberx3.tokenizer.tokens.lm_load_mirroring.LoadMirroring","title":"LoadMirroring","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for load mirroring token.</p> <p>Loads the mirror object transformation parameter.</p> <p>See section 4.9.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.py</code> <pre><code>class LoadMirroring(ExtendedCommandToken):\n    \"\"\"Wrapper for load mirroring token.\n\n    Loads the mirror object transformation parameter.\n\n    See section 4.9.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        mirroring: Mirroring,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.mirroring = mirroring\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        mirroring = Mirroring(tokens[\"mirroring\"])\n        return cls(string=string, location=location, mirroring=mirroring)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().load_mirroring.pre_parser_visit_token(self, context)\n        context.get_hooks().load_mirroring.on_parser_visit_token(self, context)\n        context.get_hooks().load_mirroring.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"LM{self.mirroring.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html#pygerber.gerberx3.tokenizer.tokens.lm_load_mirroring.LoadMirroring.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    mirroring = Mirroring(tokens[\"mirroring\"])\n    return cls(string=string, location=location, mirroring=mirroring)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html#pygerber.gerberx3.tokenizer.tokens.lm_load_mirroring.LoadMirroring.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().load_mirroring.pre_parser_visit_token(self, context)\n    context.get_hooks().load_mirroring.on_parser_visit_token(self, context)\n    context.get_hooks().load_mirroring.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.html#pygerber.gerberx3.tokenizer.tokens.lm_load_mirroring.LoadMirroring.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lm_load_mirroring.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"LM{self.mirroring.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html","title":"ln_load_name","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name","title":"ln_load_name","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name--load-name-ln","title":"Load Name (LN).","text":"<p>Note: The LN command was deprecated in revision I4 from October 2013.</p> <p>The historic <code>LN</code> command doesn't influence the image in any manner and can safely be overlooked.</p> <p>Function of the <code>LN</code> command: - <code>LN</code> is designed to allocate a name to the following section of the file. - It was originally conceptualized to serve as a human-readable comment. - For creating human-readable comments, it's advisable to utilize the standard <code>G04</code>     command. - The <code>LN</code> command has the flexibility to be executed multiple times within a file.</p> <p>SPEC: <code>2023.03</code> SECTION: <code>8.1.6</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name.LoadName","title":"LoadName","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name.LoadName--load-name-ln","title":"Load Name (LN)","text":"<p>Note: The LN command was deprecated in revision I4 from October 2013.</p> <p>The historic <code>LN</code> command doesn't influence the image in any manner and can safely be overlooked.</p> <p>Function of the <code>LN</code> command: - <code>LN</code> is designed to allocate a name to the following section of the file. - It was originally conceptualized to serve as a human-readable comment. - For creating human-readable comments, it's advisable to utilize the standard <code>G04</code>     command. - The <code>LN</code> command has the flexibility to be executed multiple times within a file.</p> <p>See section 8.1.6 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ln_load_name.py</code> <pre><code>class LoadName(ExtendedCommandToken):\n    \"\"\"Comment token.\n\n    ### Load Name (LN)\n\n    Note: The LN command was deprecated in revision I4 from October 2013.\n\n    The historic `LN` command doesn't influence the image in any manner and can safely\n    be overlooked.\n\n    Function of the `LN` command:\n    - `LN` is designed to allocate a name to the following section of the file.\n    - It was originally conceptualized to serve as a human-readable comment.\n    - For creating human-readable comments, it's advisable to utilize the standard `G04`\n        command.\n    - The `LN` command has the flexibility to be executed multiple times within a file.\n\n    See section 8.1.6 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(self, string: str, location: int, content: str) -&gt; None:\n        super().__init__(string, location)\n        self.content = content\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"string\"])\n        return cls(string=string, location=location, content=content)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().load_name.pre_parser_visit_token(self, context)\n        context.get_hooks().load_name.on_parser_visit_token(self, context)\n        context.get_hooks().load_name.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"LN{self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name.LoadName.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ln_load_name.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"string\"])\n    return cls(string=string, location=location, content=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name.LoadName.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ln_load_name.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().load_name.pre_parser_visit_token(self, context)\n    context.get_hooks().load_name.on_parser_visit_token(self, context)\n    context.get_hooks().load_name.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ln_load_name.html#pygerber.gerberx3.tokenizer.tokens.ln_load_name.LoadName.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ln_load_name.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"LN{self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html","title":"lp_load_polarity","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html#pygerber.gerberx3.tokenizer.tokens.lp_load_polarity","title":"lp_load_polarity","text":"<p>Wrapper for load polarity token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html#pygerber.gerberx3.tokenizer.tokens.lp_load_polarity.LoadPolarity","title":"LoadPolarity","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for load polarity token.</p> <p>Loads the scale object transformation parameter.</p> <p>See section 4.9.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.py</code> <pre><code>class LoadPolarity(ExtendedCommandToken):\n    \"\"\"Wrapper for load polarity token.\n\n    Loads the scale object transformation parameter.\n\n    See section 4.9.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        polarity: Polarity,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.polarity = polarity\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        polarity = Polarity(tokens[\"polarity\"])\n        return cls(string=string, location=location, polarity=polarity)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().load_polarity.pre_parser_visit_token(self, context)\n        context.get_hooks().load_polarity.on_parser_visit_token(self, context)\n        context.get_hooks().load_polarity.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"LP{self.polarity.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html#pygerber.gerberx3.tokenizer.tokens.lp_load_polarity.LoadPolarity.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    polarity = Polarity(tokens[\"polarity\"])\n    return cls(string=string, location=location, polarity=polarity)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html#pygerber.gerberx3.tokenizer.tokens.lp_load_polarity.LoadPolarity.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().load_polarity.pre_parser_visit_token(self, context)\n    context.get_hooks().load_polarity.on_parser_visit_token(self, context)\n    context.get_hooks().load_polarity.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.html#pygerber.gerberx3.tokenizer.tokens.lp_load_polarity.LoadPolarity.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lp_load_polarity.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"LP{self.polarity.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html","title":"lr_load_rotation","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation","title":"lr_load_rotation","text":"<p>Wrapper for load rotation token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation.LoadRotation","title":"LoadRotation","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for load rotation token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation.LoadRotation--lr-command-rotation-graphics-state-parameter","title":"LR Command: Rotation Graphics State Parameter","text":"<p>The <code>LR</code> command is utilized to configure the rotation graphics state parameter.</p> <p>Functionality: - This command specifies the rotation angle to be applied when crafting objects. - The aperture is rotated centered on its origin, which might either coincide with     or differ from its geometric center.</p> <p>Usage and Persistence: - The <code>LR</code> command can be invoked numerous times throughout a file. - Once defined, the object rotation retains its configuration unless overridden by     an ensuing <code>LR</code> command. - Rotation is strictly determined by the exact value mentioned in the command and     doesn't integrate with any prior rotation values.</p> <p>The LR command was introduced in revision 2016.12.</p> <p>See section 4.9.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.py</code> <pre><code>class LoadRotation(ExtendedCommandToken):\n    \"\"\"Wrapper for load rotation token.\n\n    ### LR Command: Rotation Graphics State Parameter\n\n    The `LR` command is utilized to configure the rotation graphics state parameter.\n\n    Functionality:\n    - This command specifies the rotation angle to be applied when crafting objects.\n    - The aperture is rotated centered on its origin, which might either coincide with\n        or differ from its geometric center.\n\n    Usage and Persistence:\n    - The `LR` command can be invoked numerous times throughout a file.\n    - Once defined, the object rotation retains its configuration unless overridden by\n        an ensuing `LR` command.\n    - Rotation is strictly determined by the exact value mentioned in the command and\n        doesn't integrate with any prior rotation values.\n\n    The LR command was introduced in revision 2016.12.\n\n    See section 4.9.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        rotation: Decimal,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        rotation = Decimal(str(tokens[\"rotation\"]))\n        return cls(string=string, location=location, rotation=rotation)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().load_rotation.pre_parser_visit_token(self, context)\n        context.get_hooks().load_rotation.on_parser_visit_token(self, context)\n        context.get_hooks().load_rotation.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"LR{self.rotation}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation.LoadRotation.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    rotation = Decimal(str(tokens[\"rotation\"]))\n    return cls(string=string, location=location, rotation=rotation)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation.LoadRotation.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().load_rotation.pre_parser_visit_token(self, context)\n    context.get_hooks().load_rotation.on_parser_visit_token(self, context)\n    context.get_hooks().load_rotation.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.html#pygerber.gerberx3.tokenizer.tokens.lr_load_rotation.LoadRotation.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/lr_load_rotation.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"LR{self.rotation}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html","title":"ls_load_scaling","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling","title":"ls_load_scaling","text":"<p>Wrapper for load scaling token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling.LoadScaling","title":"LoadScaling","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for load scaling token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling.LoadScaling--ls-command-scaling-graphics-state-parameter","title":"LS Command: Scaling Graphics State Parameter","text":"<p>The <code>LS</code> command is employed to establish the scaling graphics state parameter.</p> <p>Functionality: - The command dictates the scale factor utilized during object creation. - The aperture undergoes scaling, anchored at its origin. It's crucial to note that     this origin might not always align with its geometric center.</p> <p>Usage and Persistence: - The <code>LS</code> command can be invoked multiple times within a single file. - Once set, the object scaling retains its value unless a subsequent <code>LS</code> command     modifies it. - The scaling gets adjusted based on the specific value mentioned in the command and     doesn't accumulate with the preceding scale factor.</p> <p>The LS command was introduced in revision 2016.12.</p> <p>See section 4.9.5 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.py</code> <pre><code>class LoadScaling(ExtendedCommandToken):\n    \"\"\"Wrapper for load scaling token.\n\n    ### LS Command: Scaling Graphics State Parameter\n\n    The `LS` command is employed to establish the scaling graphics state parameter.\n\n    Functionality:\n    - The command dictates the scale factor utilized during object creation.\n    - The aperture undergoes scaling, anchored at its origin. It's crucial to note that\n        this origin might not always align with its geometric center.\n\n    Usage and Persistence:\n    - The `LS` command can be invoked multiple times within a single file.\n    - Once set, the object scaling retains its value unless a subsequent `LS` command\n        modifies it.\n    - The scaling gets adjusted based on the specific value mentioned in the command and\n        doesn't accumulate with the preceding scale factor.\n\n    The LS command was introduced in revision 2016.12.\n\n    See section 4.9.5 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        scaling: Decimal,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.scaling = scaling\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        scaling = Decimal(str(tokens[\"scaling\"]))\n        return cls(string=string, location=location, scaling=scaling)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().load_scaling.pre_parser_visit_token(self, context)\n        context.get_hooks().load_scaling.on_parser_visit_token(self, context)\n        context.get_hooks().load_scaling.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"LS{self.scaling}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling.LoadScaling.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    scaling = Decimal(str(tokens[\"scaling\"]))\n    return cls(string=string, location=location, scaling=scaling)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling.LoadScaling.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().load_scaling.pre_parser_visit_token(self, context)\n    context.get_hooks().load_scaling.on_parser_visit_token(self, context)\n    context.get_hooks().load_scaling.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.html#pygerber.gerberx3.tokenizer.tokens.ls_load_scaling.LoadScaling.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ls_load_scaling.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"LS{self.scaling}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.html","title":"m00_program_stop","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.html#pygerber.gerberx3.tokenizer.tokens.m00_program_stop","title":"m00_program_stop","text":"<p>Wrapper for program stop token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.html#pygerber.gerberx3.tokenizer.tokens.m00_program_stop.M00ProgramStop","title":"M00ProgramStop","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for program stop token.</p> <p>See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.py</code> <pre><code>class M00ProgramStop(CommandToken):\n    \"\"\"Wrapper for program stop token.\n\n    See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().program_stop.pre_parser_visit_token(self, context)\n        context.get_hooks().program_stop.on_parser_visit_token(self, context)\n        context.get_hooks().program_stop.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}M00\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.html#pygerber.gerberx3.tokenizer.tokens.m00_program_stop.M00ProgramStop.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().program_stop.pre_parser_visit_token(self, context)\n    context.get_hooks().program_stop.on_parser_visit_token(self, context)\n    context.get_hooks().program_stop.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.html#pygerber.gerberx3.tokenizer.tokens.m00_program_stop.M00ProgramStop.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m00_program_stop.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}M00\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.html","title":"m01_optional_stop","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.html#pygerber.gerberx3.tokenizer.tokens.m01_optional_stop","title":"m01_optional_stop","text":"<p>Wrapper for optional stop token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.html#pygerber.gerberx3.tokenizer.tokens.m01_optional_stop.M01OptionalStop","title":"M01OptionalStop","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for optional stop token.</p> <p>See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.py</code> <pre><code>class M01OptionalStop(CommandToken):\n    \"\"\"Wrapper for optional stop token.\n\n    See section 8.1.1 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().optional_stop.pre_parser_visit_token(self, context)\n        context.get_hooks().optional_stop.on_parser_visit_token(self, context)\n        context.get_hooks().optional_stop.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}M01\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.html#pygerber.gerberx3.tokenizer.tokens.m01_optional_stop.M01OptionalStop.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().optional_stop.pre_parser_visit_token(self, context)\n    context.get_hooks().optional_stop.on_parser_visit_token(self, context)\n    context.get_hooks().optional_stop.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.html#pygerber.gerberx3.tokenizer.tokens.m01_optional_stop.M01OptionalStop.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m01_optional_stop.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}M01\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.html","title":"m02_end_of_file","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.html#pygerber.gerberx3.tokenizer.tokens.m02_end_of_file","title":"m02_end_of_file","text":"<p>Wrapper for end of file token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.html#pygerber.gerberx3.tokenizer.tokens.m02_end_of_file.M02EndOfFile","title":"M02EndOfFile","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for end of file token.</p> <p>See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.py</code> <pre><code>class M02EndOfFile(CommandToken):\n    \"\"\"Wrapper for end of file token.\n\n    See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().end_of_file.pre_parser_visit_token(self, context)\n        context.get_hooks().end_of_file.on_parser_visit_token(self, context)\n        context.get_hooks().end_of_file.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}M02\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.html#pygerber.gerberx3.tokenizer.tokens.m02_end_of_file.M02EndOfFile.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().end_of_file.pre_parser_visit_token(self, context)\n    context.get_hooks().end_of_file.on_parser_visit_token(self, context)\n    context.get_hooks().end_of_file.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.html#pygerber.gerberx3.tokenizer.tokens.m02_end_of_file.M02EndOfFile.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/m02_end_of_file.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}M02\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html","title":"mo_unit_mode","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html#pygerber.gerberx3.tokenizer.tokens.mo_unit_mode","title":"mo_unit_mode","text":"<p>Wrapper for set unit mode token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html#pygerber.gerberx3.tokenizer.tokens.mo_unit_mode.UnitMode","title":"UnitMode","text":"<p>             Bases: <code>ExtendedCommandToken</code></p> <p>Wrapper for set unit mode token.</p> <p>Sets the unit to mm or inch.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.py</code> <pre><code>class UnitMode(ExtendedCommandToken):\n    \"\"\"Wrapper for set unit mode token.\n\n    Sets the unit to mm or inch.\n    \"\"\"\n\n    def __init__(self, string: str, location: int, unit: Unit) -&gt; None:\n        super().__init__(string, location)\n        self.unit = unit\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        unit: Unit = Unit(tokens[\"unit\"])\n        return cls(string=string, location=location, unit=unit)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().unit_mode.pre_parser_visit_token(self, context)\n        context.get_hooks().unit_mode.on_parser_visit_token(self, context)\n        context.get_hooks().unit_mode.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"MO{self.unit.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html#pygerber.gerberx3.tokenizer.tokens.mo_unit_mode.UnitMode.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    unit: Unit = Unit(tokens[\"unit\"])\n    return cls(string=string, location=location, unit=unit)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html#pygerber.gerberx3.tokenizer.tokens.mo_unit_mode.UnitMode.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().unit_mode.pre_parser_visit_token(self, context)\n    context.get_hooks().unit_mode.on_parser_visit_token(self, context)\n    context.get_hooks().unit_mode.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.html#pygerber.gerberx3.tokenizer.tokens.mo_unit_mode.UnitMode.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/mo_unit_mode.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"MO{self.unit.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html","title":"of_image_offset","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset","title":"of_image_offset","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset--load-name-ln","title":"Load Name (LN).","text":"<p>Note: The LN command was deprecated in revision I4 from October 2013.</p> <p>The historic <code>LN</code> command doesn't influence the image in any manner and can safely be overlooked.</p> <p>Function of the <code>LN</code> command: - <code>LN</code> is designed to allocate a name to the following section of the file. - It was originally conceptualized to serve as a human-readable comment. - For creating human-readable comments, it's advisable to utilize the standard <code>G04</code>     command. - The <code>LN</code> command has the flexibility to be executed multiple times within a file.</p> <p>SPEC: <code>2023.03</code> SECTION: <code>8.1.6</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset.ImageOffset","title":"ImageOffset","text":"<p>             Bases: <code>ExtendedCommandToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset.ImageOffset--image-offset-of","title":"Image Offset (OF).","text":"<p>The OF command is deprecated since revision I1 from December 2012.</p> <p>OF moves the final image up to plus or minus 99999.99999 units from the imaging device (0, 0) point. The image can be moved along the imaging device A or B axis, or both. The offset values used by OF command are absolute. If the A or B part is missing, the corresponding offset is 0. The offset values are expressed in units specified by MO command.  This command affects the entire image. It can only be used once, at the beginning of the file. The order of execution is always MI, SF, OF, IR and AS, independent of their order of appearance in the file.</p> <p>See section 8.1.8 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/of_image_offset.py</code> <pre><code>class ImageOffset(ExtendedCommandToken):\n    \"\"\"### Image Offset (OF).\n\n    The OF command is deprecated since revision I1 from December 2012.\n\n    OF moves the final image up to plus or minus 99999.99999 units from the imaging\n    device (0, 0) point. The image can be moved along the imaging device A or B axis,\n    or both. The offset values used by OF command are absolute. If the A or B part is\n    missing, the corresponding offset is 0. The offset values are expressed in units\n    specified by MO command.  This command affects the entire image. It can only be\n    used once, at the beginning of the file. The order of execution is always MI, SF,\n    OF, IR and AS, independent of their order of appearance in the file.\n\n    See section 8.1.8 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        a: Optional[Decimal],\n        b: Optional[Decimal],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.a = a\n        self.b = b\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        a = Decimal(str(tmp)) if (tmp := tokens.get(\"a\")) is not None else None\n        b = Decimal(str(tmp)) if (tmp := tokens.get(\"b\")) is not None else None\n        return cls(string=string, location=location, a=a, b=b)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().image_offset.pre_parser_visit_token(self, context)\n        context.get_hooks().image_offset.on_parser_visit_token(self, context)\n        context.get_hooks().image_offset.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        a = f\"A{self.a}\" if self.a is not None else \"\"\n        b = f\"B{self.b}\" if self.b is not None else \"\"\n        return f\"OF{a}{b}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset.ImageOffset.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/of_image_offset.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    a = Decimal(str(tmp)) if (tmp := tokens.get(\"a\")) is not None else None\n    b = Decimal(str(tmp)) if (tmp := tokens.get(\"b\")) is not None else None\n    return cls(string=string, location=location, a=a, b=b)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset.ImageOffset.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/of_image_offset.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().image_offset.pre_parser_visit_token(self, context)\n    context.get_hooks().image_offset.on_parser_visit_token(self, context)\n    context.get_hooks().image_offset.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/of_image_offset.html#pygerber.gerberx3.tokenizer.tokens.of_image_offset.ImageOffset.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/of_image_offset.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    a = f\"A{self.a}\" if self.a is not None else \"\"\n    b = f\"B{self.b}\" if self.b is not None else \"\"\n    return f\"OF{a}{b}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html","title":"sr_step_repeat","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat","title":"sr_step_repeat","text":"<p>Wrapper for aperture select token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatBegin","title":"StepRepeatBegin","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for SR begin token.</p> <p>Opens an SR statement and starts block accumulation.</p> <p>See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>class StepRepeatBegin(CommandToken):\n    \"\"\"Wrapper for SR begin token.\n\n    Opens an SR statement and starts block accumulation.\n\n    See section 4.10 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        x_repeat: int,\n        y_repeat: int,\n        x_step: Decimal,\n        y_step: Decimal,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.x_repeat = x_repeat\n        self.y_repeat = y_repeat\n        self.x_step = x_step\n        self.y_step = y_step\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        x_repeat = int(str(tokens.get(\"x_repeat\", \"0\")))\n        y_repeat = int(str(tokens.get(\"y_repeat\", \"0\")))\n        x_step = Decimal(str(tokens.get(\"x_step\", \"0\")))\n        y_step = Decimal(str(tokens.get(\"y_step\", \"0\")))\n        return cls(\n            string=string,\n            location=location,\n            x_repeat=x_repeat,\n            y_repeat=y_repeat,\n            x_step=x_step,\n            y_step=y_step,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().step_repeat_begin.pre_parser_visit_token(self, context)\n        context.get_hooks().step_repeat_begin.on_parser_visit_token(self, context)\n        context.get_hooks().step_repeat_begin.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"SRX{self.x_repeat}Y{self.y_repeat}I{self.x_step}J{self.y_step}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatBegin.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    x_repeat = int(str(tokens.get(\"x_repeat\", \"0\")))\n    y_repeat = int(str(tokens.get(\"y_repeat\", \"0\")))\n    x_step = Decimal(str(tokens.get(\"x_step\", \"0\")))\n    y_step = Decimal(str(tokens.get(\"y_step\", \"0\")))\n    return cls(\n        string=string,\n        location=location,\n        x_repeat=x_repeat,\n        y_repeat=y_repeat,\n        x_step=x_step,\n        y_step=y_step,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatBegin.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().step_repeat_begin.pre_parser_visit_token(self, context)\n    context.get_hooks().step_repeat_begin.on_parser_visit_token(self, context)\n    context.get_hooks().step_repeat_begin.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatBegin.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"SRX{self.x_repeat}Y{self.y_repeat}I{self.x_step}J{self.y_step}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatEnd","title":"StepRepeatEnd","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for SR end token.</p> <p>Ends step and repeat statement.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>class StepRepeatEnd(CommandToken):\n    \"\"\"Wrapper for SR end token.\n\n    Ends step and repeat statement.\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().step_repeat_end.pre_parser_visit_token(self, context)\n        context.get_hooks().step_repeat_end.on_parser_visit_token(self, context)\n        context.get_hooks().step_repeat_end.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return \"SR\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatEnd.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().step_repeat_end.pre_parser_visit_token(self, context)\n    context.get_hooks().step_repeat_end.on_parser_visit_token(self, context)\n    context.get_hooks().step_repeat_end.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.html#pygerber.gerberx3.tokenizer.tokens.sr_step_repeat.StepRepeatEnd.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/sr_step_repeat.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return \"SR\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.html","title":"ta_aperture_attribute","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.html#pygerber.gerberx3.tokenizer.tokens.ta_aperture_attribute","title":"ta_aperture_attribute","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.html#pygerber.gerberx3.tokenizer.tokens.ta_aperture_attribute.ApertureAttribute","title":"ApertureAttribute","text":"<p>             Bases: <code>SetAttributeToken</code></p> <p>Add an aperture attribute to the dictionary or modify it.</p> <p>An aperture attribute is attached to an aperture or a region. They are a method to assign attributes to graphical objects in bulk: all objects that are created with an aperture inherit its attributes; for example, a via attribute on an aperture means that all pads flashed with this aperture are via pads. Providing information about graphical objects via their apertures is elegant, compact and efficient. As region objects are created without intermediary aperture, aperture objects can be assigned to regions directly.</p> <p>See section 5.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.py</code> <pre><code>class ApertureAttribute(SetAttributeToken):\n    \"\"\"Add an aperture attribute to the dictionary or modify it.\n\n    An aperture attribute is attached to an aperture or a region. They are a method to\n    assign attributes to graphical objects in bulk: all objects that are created with\n    an aperture inherit its attributes; for example, a via attribute on an aperture\n    means that all pads flashed with this aperture are via pads. Providing information\n    about graphical objects via their apertures is elegant, compact and efficient. As\n    region objects are created without intermediary aperture, aperture objects can be\n    assigned to regions directly.\n\n    See section 5.3 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().aperture_attribute.pre_parser_visit_token(self, context)\n        context.get_hooks().aperture_attribute.on_parser_visit_token(self, context)\n        context.get_hooks().aperture_attribute.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        value = f\",{self.value}\" if self.value else \"\"\n        return f\"TA{self.name}{value}\"\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.name} -&gt; {self.value}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.html#pygerber.gerberx3.tokenizer.tokens.ta_aperture_attribute.ApertureAttribute.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().aperture_attribute.pre_parser_visit_token(self, context)\n    context.get_hooks().aperture_attribute.on_parser_visit_token(self, context)\n    context.get_hooks().aperture_attribute.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.html#pygerber.gerberx3.tokenizer.tokens.ta_aperture_attribute.ApertureAttribute.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/ta_aperture_attribute.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    value = f\",{self.value}\" if self.value else \"\"\n    return f\"TA{self.name}{value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html","title":"td_delete_attribute","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html#pygerber.gerberx3.tokenizer.tokens.td_delete_attribute","title":"td_delete_attribute","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html#pygerber.gerberx3.tokenizer.tokens.td_delete_attribute.DeleteAttribute","title":"DeleteAttribute","text":"<p>             Bases: <code>AttributeToken</code></p> <p>Delete one or all attributes in the dictionary.</p> <p>The TD command deletes an aperture attribute or object attribute from the attributes dictionary. (File attributes are immutable and are not deleted.)</p> <p>See section 5.5 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.py</code> <pre><code>class DeleteAttribute(AttributeToken):\n    \"\"\"Delete one or all attributes in the dictionary.\n\n    The TD command deletes an aperture attribute or object attribute from the attributes\n    dictionary. (File attributes are immutable and are not deleted.)\n\n    See section 5.5 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def __init__(self, string: str, location: int, name: Optional[str]) -&gt; None:\n        super().__init__(string, location)\n        self.name = name\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        name = tokens.get(\"attribute_name\")\n        if name is not None:\n            name = str(name)\n\n        return cls(\n            string=string,\n            location=location,\n            name=name,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().delete_attribute.pre_parser_visit_token(self, context)\n        context.get_hooks().delete_attribute.on_parser_visit_token(self, context)\n        context.get_hooks().delete_attribute.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        name = self.name if self.name is not None else \"\"\n        return f\"TD{name}\"\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.name}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html#pygerber.gerberx3.tokenizer.tokens.td_delete_attribute.DeleteAttribute.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    name = tokens.get(\"attribute_name\")\n    if name is not None:\n        name = str(name)\n\n    return cls(\n        string=string,\n        location=location,\n        name=name,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html#pygerber.gerberx3.tokenizer.tokens.td_delete_attribute.DeleteAttribute.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().delete_attribute.pre_parser_visit_token(self, context)\n    context.get_hooks().delete_attribute.on_parser_visit_token(self, context)\n    context.get_hooks().delete_attribute.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.html#pygerber.gerberx3.tokenizer.tokens.td_delete_attribute.DeleteAttribute.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/td_delete_attribute.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    name = self.name if self.name is not None else \"\"\n    return f\"TD{name}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.html","title":"tf_file_attribute","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.html#pygerber.gerberx3.tokenizer.tokens.tf_file_attribute","title":"tf_file_attribute","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.html#pygerber.gerberx3.tokenizer.tokens.tf_file_attribute.FileAttribute","title":"FileAttribute","text":"<p>             Bases: <code>SetAttributeToken</code></p> <p>File attribute token.</p> <p>The semantics of a file attribute specifies where it must be defined, typically in the header of the file. File attributes are immutable. They cannot be redefined or deleted.</p> <p>See section 5.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.py</code> <pre><code>class FileAttribute(SetAttributeToken):\n    \"\"\"File attribute token.\n\n    The semantics of a file attribute specifies where it must be defined, typically in\n    the header of the file. File attributes are immutable. They cannot be redefined or\n    deleted.\n\n    See section 5.2 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().file_attribute.pre_parser_visit_token(self, context)\n        context.get_hooks().file_attribute.on_parser_visit_token(self, context)\n        context.get_hooks().file_attribute.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        value = f\",{self.value}\" if self.value else \"\"\n        return f\"TF{self.name}{value}\"\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.name} -&gt; {self.value}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.html#pygerber.gerberx3.tokenizer.tokens.tf_file_attribute.FileAttribute.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().file_attribute.pre_parser_visit_token(self, context)\n    context.get_hooks().file_attribute.on_parser_visit_token(self, context)\n    context.get_hooks().file_attribute.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.html#pygerber.gerberx3.tokenizer.tokens.tf_file_attribute.FileAttribute.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/tf_file_attribute.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    value = f\",{self.value}\" if self.value else \"\"\n    return f\"TF{self.name}{value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.html","title":"to_object_attribute","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.html#pygerber.gerberx3.tokenizer.tokens.to_object_attribute","title":"to_object_attribute","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.html#pygerber.gerberx3.tokenizer.tokens.to_object_attribute.ObjectAttribute","title":"ObjectAttribute","text":"<p>             Bases: <code>SetAttributeToken</code></p> <p>Add an object attribute to the dictionary or modify it.</p> <p>An object attribute is attached to graphical objects. When a D01, D03 or region statement (G36/G37) creates an object all object attributes in the attribute dictionary are attached to it. As attribute commands are not allowed inside a region statement, all regions created by that statement have the same object attributes. Once attached to an object they cannot be chan</p> <p>See section 5.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.py</code> <pre><code>class ObjectAttribute(SetAttributeToken):\n    \"\"\"Add an object attribute to the dictionary or modify it.\n\n    An object attribute is attached to graphical objects. When a D01, D03 or region\n    statement (G36/G37) creates an object all object attributes in the attribute\n    dictionary are attached to it. As attribute commands are not allowed inside a region\n    statement, all regions created by that statement have the same object attributes.\n    Once attached to an object they cannot be chan\n\n    See section 5.4 of The Gerber Layer Format Specification Revision 2023.03 - https://argmaster.github.io/pygerber/latest/gerber_specification/revision_2023_03.html\n    \"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().object_attribute.pre_parser_visit_token(self, context)\n        context.get_hooks().object_attribute.on_parser_visit_token(self, context)\n        context.get_hooks().object_attribute.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        value = f\",{self.value}\" if self.value else \"\"\n        return f\"TO{self.name}{value}\"\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.name} -&gt; {self.value}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.html#pygerber.gerberx3.tokenizer.tokens.to_object_attribute.ObjectAttribute.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().object_attribute.pre_parser_visit_token(self, context)\n    context.get_hooks().object_attribute.on_parser_visit_token(self, context)\n    context.get_hooks().object_attribute.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.html#pygerber.gerberx3.tokenizer.tokens.to_object_attribute.ObjectAttribute.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/to_object_attribute.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    value = f\",{self.value}\" if self.value else \"\"\n    return f\"TO{self.name}{value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/__init__.html#pygerber.gerberx3.tokenizer.tokens.bases","title":"bases","text":"<p>All generic base classes for tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html","title":"command","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command","title":"command","text":"<p>Base class for all commands.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command.CommandToken","title":"CommandToken","text":"<p>             Bases: <code>Token</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command.CommandToken--33-commands","title":"3.3 Commands.","text":"<p>Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of commands. Commands define the graphics state, create graphical objects, defines apertures, manage attributes and so on.</p> <p>Commands are built with words, the basic syntactic building block of a Gerber file. A word is a non-empty character string, excluding the reserved characters '' and '%', terminated with an ''</p> <pre><code>free_character = /[^%*]/; # All characters but * and %\nword = {free_character}+ '*';\n</code></pre> <p>For historic reasons, there are two command syntax styles: word commands and extended commands.</p> <pre><code>command =\n| extended_command\n| word_command\n;\nword_command = word;\nextended_command = '%' {word}+ '%';\n</code></pre> <p>Word commands are identified by a command code, the letter G, D or M followed by a positive integer, e.g. <code>G02</code>. Most word commands only consist of the command code, some also contain coordinates.</p> <p>Extended commands are identified by a two-character command code that is followed by parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters</p> <p>An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command.CommandToken--example-1","title":"Example 1","text":"<p>The example below shows a stream of Gerber commands.</p> <pre><code>G04 Different command styles*\nG75*\nG02*\nD10*\nX0Y0D02*\nX2000000Y0I1000000J0D01*\nD11*\nX0Y2000000D03*\nM02*\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command.CommandToken--example-2","title":"Example 2","text":"<p>The example below shows a stream of Gerber extended commands.</p> <pre><code>%FSLAX26Y26*%\n%MOMM*%\n%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*\n%\n%ADD11Donut,0.30X0X0*%\n%ADD10C,0.1*%\n</code></pre> <p>See section 3.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/command.py</code> <pre><code>class CommandToken(Token):\n    \"\"\"## 3.3 Commands.\n\n    Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of\n    commands. Commands define the graphics state, create graphical objects, defines apertures,\n    manage attributes and so on.\n\n    Commands are built with words, the basic syntactic building block of a Gerber file. A word is a\n    non-empty character string, excluding the reserved characters '*' and '%', terminated with an '*'\n\n    ```ebnf\n    free_character = /[^%*]/; # All characters but * and %\n    word = {free_character}+ '*';\n    ```\n\n    For historic reasons, there are two command syntax styles: word commands and extended\n    commands.\n\n    ```ebnf\n    command =\n    | extended_command\n    | word_command\n    ;\n    word_command = word;\n    extended_command = '%' {word}+ '%';\n    ```\n\n\n    Word commands are identified by a command code, the letter G, D or M followed by a positive\n    integer, e.g. `G02`. Most word commands only consist of the command code, some also contain\n    coordinates.\n\n    Extended commands are identified by a two-character command code that is followed by\n    parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters\n\n    An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.\n\n\n    ---\n\n    ## Example 1\n\n    The example below shows a stream of Gerber commands.\n\n    ```gerber\n    G04 Different command styles*\n    G75*\n    G02*\n    D10*\n    X0Y0D02*\n    X2000000Y0I1000000J0D01*\n    D11*\n    X0Y2000000D03*\n    M02*\n    ```\n\n\n    ---\n\n    ## Example 2\n\n    The example below shows a stream of Gerber extended commands.\n\n    ```gerber\n    %FSLAX26Y26*%\n    %MOMM*%\n    %AMDonut*\n    1,1,$1,$2,$3*\n    $4=$1x0.75*\n    1,0,$4,$2,$3*\n    %\n    %ADD11Donut,0.30X0X0*%\n    %ADD10C,0.1*%\n    ```\n\n    ---\n\n    See section 3.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=33)\n\n    \"\"\"  # noqa: E501\n\n    def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{self.get_gerber_code()}*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/command.html#pygerber.gerberx3.tokenizer.tokens.bases.command.CommandToken.get_gerber_code_one_line_pretty_display","title":"get_gerber_code_one_line_pretty_display","text":"<pre><code>get_gerber_code_one_line_pretty_display() -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/command.py</code> <pre><code>def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{self.get_gerber_code()}*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html","title":"extended_command","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command","title":"extended_command","text":"<p>Base class for all extended commands.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command.ExtendedCommandToken","title":"ExtendedCommandToken","text":"<p>             Bases: <code>Token</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command.ExtendedCommandToken--33-commands","title":"3.3 Commands.","text":"<p>Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of commands. Commands define the graphics state, create graphical objects, defines apertures, manage attributes and so on.</p> <p>Commands are built with words, the basic syntactic building block of a Gerber file. A word is a non-empty character string, excluding the reserved characters '' and '%', terminated with an ''</p> <pre><code>free_character = /[^%*]/; # All characters but * and %\nword = {free_character}+ '*';\n</code></pre> <p>For historic reasons, there are two command syntax styles: word commands and extended commands.</p> <pre><code>command =\n| extended_command\n| word_command\n;\nword_command = word;\nextended_command = '%' {word}+ '%';\n</code></pre> <p>Word commands are identified by a command code, the letter G, D or M followed by a positive integer, e.g. <code>G02</code>. Most word commands only consist of the command code, some also contain coordinates.</p> <p>Extended commands are identified by a two-character command code that is followed by parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters</p> <p>An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command.ExtendedCommandToken--example-1","title":"Example 1","text":"<p>The example below shows a stream of Gerber commands.</p> <pre><code>G04 Different command styles*\nG75*\nG02*\nD10*\nX0Y0D02*\nX2000000Y0I1000000J0D01*\nD11*\nX0Y2000000D03*\nM02*\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command.ExtendedCommandToken--example-2","title":"Example 2","text":"<p>The example below shows a stream of Gerber extended commands.</p> <pre><code>%FSLAX26Y26*%\n%MOMM*%\n%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*\n%\n%ADD11Donut,0.30X0X0*%\n%ADD10C,0.1*%\n</code></pre> <p>See section 3.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.py</code> <pre><code>class ExtendedCommandToken(Token):\n    \"\"\"## 3.3 Commands.\n\n    Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of\n    commands. Commands define the graphics state, create graphical objects, defines apertures,\n    manage attributes and so on.\n\n    Commands are built with words, the basic syntactic building block of a Gerber file. A word is a\n    non-empty character string, excluding the reserved characters '*' and '%', terminated with an '*'\n\n    ```ebnf\n    free_character = /[^%*]/; # All characters but * and %\n    word = {free_character}+ '*';\n    ```\n\n    For historic reasons, there are two command syntax styles: word commands and extended\n    commands.\n\n    ```ebnf\n    command =\n    | extended_command\n    | word_command\n    ;\n    word_command = word;\n    extended_command = '%' {word}+ '%';\n    ```\n\n\n    Word commands are identified by a command code, the letter G, D or M followed by a positive\n    integer, e.g. `G02`. Most word commands only consist of the command code, some also contain\n    coordinates.\n\n    Extended commands are identified by a two-character command code that is followed by\n    parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters\n\n    An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.\n\n\n    ---\n\n    ## Example 1\n\n    The example below shows a stream of Gerber commands.\n\n    ```gerber\n    G04 Different command styles*\n    G75*\n    G02*\n    D10*\n    X0Y0D02*\n    X2000000Y0I1000000J0D01*\n    D11*\n    X0Y2000000D03*\n    M02*\n    ```\n\n\n    ---\n\n    ## Example 2\n\n    The example below shows a stream of Gerber extended commands.\n\n    ```gerber\n    %FSLAX26Y26*%\n    %MOMM*%\n    %AMDonut*\n    1,1,$1,$2,$3*\n    $4=$1x0.75*\n    1,0,$4,$2,$3*\n    %\n    %ADD11Donut,0.30X0X0*%\n    %ADD10C,0.1*%\n    ```\n\n    ---\n\n    See section 3.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=33)\n\n    \"\"\"  # noqa: E501\n\n    def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"%{self.get_gerber_code()}*%\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.html#pygerber.gerberx3.tokenizer.tokens.bases.extended_command.ExtendedCommandToken.get_gerber_code_one_line_pretty_display","title":"get_gerber_code_one_line_pretty_display","text":"<pre><code>get_gerber_code_one_line_pretty_display() -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/extended_command.py</code> <pre><code>def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"%{self.get_gerber_code()}*%\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html","title":"gerber_code","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html#pygerber.gerberx3.tokenizer.tokens.bases.gerber_code","title":"gerber_code","text":"<p>Base class providing GerberCode interface.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html#pygerber.gerberx3.tokenizer.tokens.bases.gerber_code.GerberCode","title":"GerberCode","text":"<p>Interface of object which can be converted to gerber code.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.py</code> <pre><code>class GerberCode:\n    \"\"\"Interface of object which can be converted to gerber code.\"\"\"\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}G04 {self.__class__.__qualname__} no formatting available*\"\n\n    def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"G04 {self.__class__.__qualname__} no formatting available*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html#pygerber.gerberx3.tokenizer.tokens.bases.gerber_code.GerberCode.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}G04 {self.__class__.__qualname__} no formatting available*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html#pygerber.gerberx3.tokenizer.tokens.bases.gerber_code.GerberCode.get_gerber_code_one_line_pretty_display","title":"get_gerber_code_one_line_pretty_display","text":"<pre><code>get_gerber_code_one_line_pretty_display() -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.py</code> <pre><code>def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"G04 {self.__class__.__qualname__} no formatting available*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.html#pygerber.gerberx3.tokenizer.tokens.bases.gerber_code.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    tokens: Iterable[GerberCode],\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str\n</code></pre> <p>Get gerber code from iterable of tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/gerber_code.py</code> <pre><code>def get_gerber_code(\n    tokens: Iterable[GerberCode],\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code from iterable of tokens.\"\"\"\n    return endline.join(t.get_gerber_code(indent, endline) for t in tokens)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html","title":"group","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html#pygerber.gerberx3.tokenizer.tokens.bases.group","title":"group","text":"<p>Wrapper for flash operation token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html#pygerber.gerberx3.tokenizer.tokens.bases.group.TokenGroup","title":"TokenGroup","text":"<p>             Bases: <code>Token</code></p> <p>Token consisting of multiple nested tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/group.py</code> <pre><code>class TokenGroup(Token):\n    \"\"\"Token consisting of multiple nested tokens.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        tokens: Sequence[Token],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.tokens = tokens\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n\n        def _() -&gt; Iterable[Token]:\n            for token in tokens.as_list():\n                if isinstance(token, Token):\n                    yield token\n\n        return cls(\n            string=string,\n            location=location,\n            tokens=list(_()),\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return endline.join(t.get_gerber_code(indent) for t in self.tokens)\n\n    def __str__(self) -&gt; str:\n        prefix = super().__str__()\n        tokens = \", \".join(str(t) for t in self.tokens)\n        return f\"{prefix}[{tokens}]\"\n\n    def find_closest_token(\n        self,\n        pos: Position,\n        parent: Optional[TokenAccessor] = None,\n    ) -&gt; TokenAccessor:\n        \"\"\"Find token closest to specified position.\"\"\"\n        if parent is None:\n            parent = TokenAccessor(self)\n\n        token_accessor = self._find_closest_token(pos, parent)\n        token = token_accessor.token\n\n        if token and isinstance(token, TokenGroup):\n            token_accessor = token.find_closest_token(pos, token_accessor)\n\n        return token_accessor\n\n    def _find_closest_token(\n        self,\n        pos: Position,\n        parent: TokenAccessor,\n    ) -&gt; TokenAccessor:\n        threshold = 10\n        if len(self.tokens) &gt; threshold:\n            return self._find_closest_token_binary(pos, parent)\n\n        return self._find_closest_token_linear(pos, parent)\n\n    def _find_closest_token_binary(\n        self,\n        pos: Position,\n        parent: TokenAccessor,\n    ) -&gt; TokenAccessor:\n        left = 0\n        right = len(self.tokens) - 1\n        center = (left + right) // 2\n\n        while left &lt;= right:\n            center = (left + right) // 2\n            token = self.tokens[center]\n            token_pos = token.get_token_position()\n\n            if token_pos &lt; pos:\n                left = center + 1\n            elif token_pos &gt; pos:\n                right = center - 1\n            else:\n                break\n\n        while ((token := self.tokens[center]).get_token_position()) &gt; pos:\n            center -= 1\n\n        return TokenAccessor(\n            self.tokens[center],\n            parent,\n            self.tokens,\n            center,\n        )\n\n    def _find_closest_token_linear(\n        self,\n        pos: Position,\n        parent: TokenAccessor,\n    ) -&gt; TokenAccessor:\n        i = 0\n        search_pos = pos\n        token = prev_token = self.tokens[i]\n\n        for i, token in enumerate(self.tokens):\n            token_pos = token.get_token_position()\n            if token_pos &gt; search_pos:\n                return TokenAccessor(\n                    prev_token,\n                    parent,\n                    self.tokens,\n                    i,\n                )\n\n            prev_token = token\n\n        return TokenAccessor(prev_token, parent, self.tokens, i)\n\n    def __iter__(self) -&gt; Iterator[Token]:\n        for token in self.tokens:\n            yield from token\n\n    def __len__(self) -&gt; int:\n        return self.tokens.__len__()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html#pygerber.gerberx3.tokenizer.tokens.bases.group.TokenGroup.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/group.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n\n    def _() -&gt; Iterable[Token]:\n        for token in tokens.as_list():\n            if isinstance(token, Token):\n                yield token\n\n    return cls(\n        string=string,\n        location=location,\n        tokens=list(_()),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html#pygerber.gerberx3.tokenizer.tokens.bases.group.TokenGroup.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/group.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return endline.join(t.get_gerber_code(indent) for t in self.tokens)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/group.html#pygerber.gerberx3.tokenizer.tokens.bases.group.TokenGroup.find_closest_token","title":"find_closest_token","text":"<pre><code>find_closest_token(\n    pos: Position, parent: Optional[TokenAccessor] = None\n) -&gt; TokenAccessor\n</code></pre> <p>Find token closest to specified position.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/group.py</code> <pre><code>def find_closest_token(\n    self,\n    pos: Position,\n    parent: Optional[TokenAccessor] = None,\n) -&gt; TokenAccessor:\n    \"\"\"Find token closest to specified position.\"\"\"\n    if parent is None:\n        parent = TokenAccessor(self)\n\n    token_accessor = self._find_closest_token(pos, parent)\n    token = token_accessor.token\n\n    if token and isinstance(token, TokenGroup):\n        token_accessor = token.find_closest_token(pos, token_accessor)\n\n    return token_accessor\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html","title":"token","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token","title":"token","text":"<p>Base class for creating token classes.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token","title":"Token","text":"<p>             Bases: <code>GerberCode</code></p> <p>Base class for creating Gerber token classes.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>class Token(GerberCode):\n    \"\"\"Base class for creating Gerber token classes.\"\"\"\n\n    @classmethod\n    def wrap(cls, expr: ParserElement) -&gt; ParserElement:\n        \"\"\"Set parse result to be instance of this class.\"\"\"\n        return expr.set_parse_action(cls.new)\n\n    @classmethod\n    def new(cls, string: str, location: int, _tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        return cls(string, location)\n\n    def __init__(self, string: str, location: int) -&gt; None:\n        \"\"\"Initialize token instance.\"\"\"\n        self.string = string\n        self.location = location\n\n    def __str__(self) -&gt; str:\n        return f\"GerberCode::Token::{self.__class__.__qualname__}\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return pretty representation of comment token.\"\"\"\n        return self.__str__()\n\n    def get_debug_format(self) -&gt; str:\n        \"\"\"Return debug formatted token object.\"\"\"\n        return super().__repr__()\n\n    @classmethod\n    def ensure_type(cls, thing: Any) -&gt; Self:\n        \"\"\"Ensure that &lt;thing&gt; is a instance of this class.\n\n        Raise TypeError otherwise.\n        \"\"\"\n        if not isinstance(thing, cls):\n            raise TypeError(thing)\n\n        return thing\n\n    def parser2_visit_token(\n        self,\n        context: Parser2Context,\n    ) -&gt; None:\n        \"\"\"Update drawing state for Gerber AST parser, version 2.\"\"\"\n\n    def get_token_position(self) -&gt; Position:\n        \"\"\"Get position of token.\"\"\"\n        return self._token_position\n\n    @cached_property\n    def _token_position(self) -&gt; Position:\n        return Position(\n            lineno(self.location, self.string),\n            col(self.location, self.string),\n        )\n\n    def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return self.get_gerber_code()\n\n    def get_token_diagnostics(self) -&gt; Iterable[diagnostic.Diagnostic]:\n        \"\"\"Get diagnostics for this token.\"\"\"\n        return\n        yield  # type: ignore[unreachable]\n\n    def get_token_end_position(self) -&gt; Position:\n        \"\"\"Get position of the end of the token.\"\"\"\n        s = str(self)\n        first, *_ = s.split(\"\\n\")\n        lines_offset = 0\n        column_offset = len(first)\n        return self.get_token_position().offset(lines_offset, column_offset)\n\n    def __iter__(self) -&gt; Iterator[Token]:\n        yield self\n\n    def __hash__(self) -&gt; int:\n        return id(self)\n\n    def __eq__(self, __value: object) -&gt; bool:\n        if not isinstance(__value, Token):\n            return NotImplemented\n        return id(__value) == id(self)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.wrap","title":"wrap  <code>classmethod</code>","text":"<pre><code>wrap(expr: ParserElement) -&gt; ParserElement\n</code></pre> <p>Set parse result to be instance of this class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>@classmethod\ndef wrap(cls, expr: ParserElement) -&gt; ParserElement:\n    \"\"\"Set parse result to be instance of this class.\"\"\"\n    return expr.set_parse_action(cls.new)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, _tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, _tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    return cls(string, location)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.__init__","title":"__init__","text":"<pre><code>__init__(string: str, location: int) -&gt; None\n</code></pre> <p>Initialize token instance.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def __init__(self, string: str, location: int) -&gt; None:\n    \"\"\"Initialize token instance.\"\"\"\n    self.string = string\n    self.location = location\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return pretty representation of comment token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return pretty representation of comment token.\"\"\"\n    return self.__str__()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.get_debug_format","title":"get_debug_format","text":"<pre><code>get_debug_format() -&gt; str\n</code></pre> <p>Return debug formatted token object.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def get_debug_format(self) -&gt; str:\n    \"\"\"Return debug formatted token object.\"\"\"\n    return super().__repr__()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.ensure_type","title":"ensure_type  <code>classmethod</code>","text":"<pre><code>ensure_type(thing: Any) -&gt; Self\n</code></pre> <p>Ensure that  is a instance of this class. <p>Raise TypeError otherwise.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>@classmethod\ndef ensure_type(cls, thing: Any) -&gt; Self:\n    \"\"\"Ensure that &lt;thing&gt; is a instance of this class.\n\n    Raise TypeError otherwise.\n    \"\"\"\n    if not isinstance(thing, cls):\n        raise TypeError(thing)\n\n    return thing\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Update drawing state for Gerber AST parser, version 2.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def parser2_visit_token(\n    self,\n    context: Parser2Context,\n) -&gt; None:\n    \"\"\"Update drawing state for Gerber AST parser, version 2.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.get_token_position","title":"get_token_position","text":"<pre><code>get_token_position() -&gt; Position\n</code></pre> <p>Get position of token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def get_token_position(self) -&gt; Position:\n    \"\"\"Get position of token.\"\"\"\n    return self._token_position\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.get_gerber_code_one_line_pretty_display","title":"get_gerber_code_one_line_pretty_display","text":"<pre><code>get_gerber_code_one_line_pretty_display() -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return self.get_gerber_code()\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.get_token_diagnostics","title":"get_token_diagnostics","text":"<pre><code>get_token_diagnostics() -&gt; Iterable[diagnostic.Diagnostic]\n</code></pre> <p>Get diagnostics for this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def get_token_diagnostics(self) -&gt; Iterable[diagnostic.Diagnostic]:\n    \"\"\"Get diagnostics for this token.\"\"\"\n    return\n    yield  # type: ignore[unreachable]\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token.html#pygerber.gerberx3.tokenizer.tokens.bases.token.Token.get_token_end_position","title":"get_token_end_position","text":"<pre><code>get_token_end_position() -&gt; Position\n</code></pre> <p>Get position of the end of the token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token.py</code> <pre><code>def get_token_end_position(self) -&gt; Position:\n    \"\"\"Get position of the end of the token.\"\"\"\n    s = str(self)\n    first, *_ = s.split(\"\\n\")\n    lines_offset = 0\n    column_offset = len(first)\n    return self.get_token_position().offset(lines_offset, column_offset)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token_accessor.html","title":"token_accessor","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token_accessor.html#pygerber.gerberx3.tokenizer.tokens.bases.token_accessor","title":"token_accessor","text":"<p>Accessor for token objects in AST.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/bases/token_accessor.html#pygerber.gerberx3.tokenizer.tokens.bases.token_accessor.TokenAccessor","title":"TokenAccessor","text":"<p>Accessor containing reference to token and its parent group.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/bases/token_accessor.py</code> <pre><code>class TokenAccessor:\n    \"\"\"Accessor containing reference to token and its parent group.\"\"\"\n\n    def __init__(\n        self,\n        token: Optional[Token],\n        parent: Optional[TokenAccessor] = None,\n        tokens: Sequence[Token] = (),\n        token_index: int = 0,\n    ) -&gt; None:\n        self.token = token\n        self.parent = parent\n        self.tokens = tokens\n        self.token_index = token_index\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/__init__.html#pygerber.gerberx3.tokenizer.tokens.groups","title":"groups","text":"<p>Group tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/ast.html","title":"ast","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/ast.html#pygerber.gerberx3.tokenizer.tokens.groups.ast","title":"ast","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/ast.html#pygerber.gerberx3.tokenizer.tokens.groups.ast.AST","title":"AST","text":"<p>             Bases: <code>TokenGroup</code></p> <p>Gerber format abstract syntax tree.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/groups/ast.py</code> <pre><code>class AST(TokenGroup):\n    \"\"\"Gerber format abstract syntax tree.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html","title":"statement","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html#pygerber.gerberx3.tokenizer.tokens.groups.statement","title":"statement","text":"<p>Wrapper for G74 token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html#pygerber.gerberx3.tokenizer.tokens.groups.statement.Statement","title":"Statement","text":"<p>             Bases: <code>TokenGroup</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html#pygerber.gerberx3.tokenizer.tokens.groups.statement.Statement--33-commands-something-extended-command","title":"3.3 Commands (<code>'%&lt;something&gt;%' - extended command</code>).","text":"<p>Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of commands. Commands define the graphics state, create graphical objects, defines apertures, manage attributes and so on.</p> <p>Commands are built with words, the basic syntactic building block of a Gerber file. A word is a non-empty character string, excluding the reserved characters '' and '%', terminated with an ''</p> <pre><code>free_character = /[^%*]/; # All characters but * and %\nword = {free_character}+ '*';\n</code></pre> <p>For historic reasons, there are two command syntax styles: word commands and extended commands.</p> <pre><code>command =\n| extended_command\n| word_command\n;\nword_command = word;\nextended_command = '%' {word}+ '%';\n</code></pre> <p>(...)</p> <p>Extended commands are identified by a two-character command code that is followed by parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters.</p> <p>An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.</p> <p>The example below shows a stream of Gerber extended commands.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html#pygerber.gerberx3.tokenizer.tokens.groups.statement.Statement--example","title":"Example","text":"<pre><code>%FSLAX26Y26*%\n%MOMM*%\n%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*\n%\n%ADD11Donut,0.30X0X0*%\n%ADD10C,0.1*%\n</code></pre> <p>See section 3.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/groups/statement.py</code> <pre><code>class Statement(TokenGroup):\n    \"\"\"## 3.3 Commands (`'%&lt;something&gt;%' - extended command`).\n\n    Commands are the core syntactic element of the Gerber format. A Gerber file is a stream of\n    commands. Commands define the graphics state, create graphical objects, defines apertures,\n    manage attributes and so on.\n\n    Commands are built with words, the basic syntactic building block of a Gerber file. A word is a\n    non-empty character string, excluding the reserved characters '*' and '%', terminated with an '*'\n\n    ```ebnf\n    free_character = /[^%*]/; # All characters but * and %\n    word = {free_character}+ '*';\n    ```\n\n    For historic reasons, there are two command syntax styles: word commands and extended\n    commands.\n\n    ```ebnf\n    command =\n    | extended_command\n    | word_command\n    ;\n    word_command = word;\n    extended_command = '%' {word}+ '%';\n    ```\n\n    (...)\n\n    Extended commands are identified by a two-character command code that is followed by\n    parameters specific to the code. An extended command is enclosed by a pair of \"%\" delimiters.\n\n    An overview of all commands is in section 2.8, a full description in chapters 3.5 and 5.\n\n    The example below shows a stream of Gerber extended commands.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %FSLAX26Y26*%\n    %MOMM*%\n    %AMDonut*\n    1,1,$1,$2,$3*\n    $4=$1x0.75*\n    1,0,$4,$2,$3*\n    %\n    %ADD11Donut,0.30X0X0*%\n    %ADD10C,0.1*%\n    ```\n\n    ---\n\n    See section 3.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=33)\n\n    \"\"\"  # noqa: E501\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return \"%\" + \"\".join(t.get_gerber_code(indent) for t in self.tokens) + \"%\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/groups/statement.html#pygerber.gerberx3.tokenizer.tokens.groups.statement.Statement.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/groups/statement.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return \"%\" + \"\".join(t.get_gerber_code(indent) for t in self.tokens) + \"%\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/__init__.html#pygerber.gerberx3.tokenizer.tokens.macro","title":"macro","text":"<p>The AM command creates a macro aperture template and adds it to the aperture template dictionary (see 2.2). A template is a parametrized shape. The AD command instantiates a template into an aperture by supplying values to the template parameters.</p> <p>Templates of any shape or parametrization can be created. Multiple simple shapes called primitives can be combined in a single template. An aperture macro can contain variables whose actual values are defined by:</p> <ul> <li> <p>Values provided by the AD command</p> </li> <li> <p>Arithmetic expressions with other variables</p> </li> </ul> <p>The template is created by positioning primitives in a coordinate space. The origin of that coordinate space will be the origin of all apertures created with the state.</p> <p>A template must be defined before the first AD that refers to it. The AM command can be used multiple times in a file.</p> <p>Attributes are not attached to templates. They are attached to the aperture at the time of its creation with the AD command.</p> <p>An AM command contains the following words:</p> <ul> <li> <p>The AM declaration with the macro name</p> </li> <li> <p>Primitives with their comma-separated parameters</p> </li> <li> <p>Macro variables, defined by an arithmetic expression</p> </li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html","title":"am_macro","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro","title":"am_macro","text":"<p>Container token for macro definition.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition","title":"MacroDefinition","text":"<p>             Bases: <code>TokenGroup</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition--45-aperture-macro-am","title":"4.5 Aperture Macro (AM).","text":"<p>The AM command creates a macro aperture template and adds it to the aperture template dictionary (see 2.2). A template is a parametrized shape. The AD command instantiates a template into an aperture by supplying values to the template parameters.</p> <p>Templates of any shape or parametrization can be created. Multiple simple shapes called primitives can be combined in a single template. An aperture macro can contain variables whose actual values are defined by:</p> <ul> <li>Values provided by the AD command,</li> <li>Arithmetic expressions with other variables.</li> </ul> <p>The template is created by positioning primitives in a coordinate space. The origin of that coordinate space will be the origin of all apertures created with the state.</p> <p>A template must be defined before the first AD that refers to it. The AM command can be used multiple times in a file.</p> <p>Attributes are not attached to templates. They are attached to the aperture at the time of its creation with the AD command.</p> <p>An AM command contains the following words:</p> <ul> <li>The AM declaration with the macro name</li> <li>Primitives with their comma-separated parameters</li> <li>Macro variables, defined by an arithmetic expression</li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition--syntax","title":"Syntax","text":"<pre><code>AM = '%' ('AM' macro_name macro_body) '%';\nmacro_name = name '*';\nmacro_body = {in_macro_block}+;\nin_macro_block =\n|primitive\n|variable_definition\n;\nvariable_definition = (macro_variable '=' expression) '*';\nmacro_variable = '$' positive_integer;\nprimitive = primitive_code {',' par}*\npar = ',' (expression);\n</code></pre> <ul> <li><code>AM</code> - AM for Aperture Macro</li> <li><code>&lt;Macro name&gt;</code> - Name of the aperture macro. The name must be unique, it     cannot be reused for another macro. See 3.4.5     for the syntax rules.</li> <li><code>&lt;Macro body&gt;</code> - The macro body contains the primitives generating the image     and the calculation of their parameters.</li> <li><code>&lt;Variable definition&gt;</code> - <code>$n=&lt;Arithmetic expression&gt;</code>. An arithmetic expression may     use arithmetic operators (described later), constants and     variables $m defined previously.</li> <li><code>&lt;Primitive&gt;</code> - A primitive is a basic shape to create the macro. It includes     primitive code identifying the primitive and primitive-specific     parameters (e.g. center of a circle). See 4.5.1.     The primitives are positioned in a coordinates system whose origin is the     origin of the resulting apertures.</li> <li><code>&lt;Primitive code&gt;</code> - A code specifying the primitive (e.g. polygon).</li> <li><code>&lt;Parameter&gt;</code> - Parameter can be a decimal number (e.g. <code>0.050</code>), a variable     (e.g. <code>$1</code>) or an arithmetic expression based on numbers and     variables. The actual value is calculated as explained in     4.5.4.3.</li> </ul> <p>Coordinates and sizes are expressed in the unit set by the MO command.</p> <p>A parameter can be either:</p> <ul> <li>A decimal number</li> <li>A macro variable</li> <li>An arithmetic expression</li> </ul> <p>A macro variable name must be a <code>$</code> character followed by an integer &gt;0, for example <code>$12</code>. (This is a subset of names allowed in 3.4.3.)</p> <p>Note: New lines can be added between words of a single command to enhance readability. They do not affect the macro definition.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition--example","title":"Example","text":"<p>The following AM command defines an aperture macro named 'Triangle_30'.</p> <pre><code>%AMTriangle_30*\n4,1,3,\n1,-1,\n1,1,\n2,1,\n1,-1,\n30*\n%\n</code></pre> <p>See section 4.5 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.py</code> <pre><code>class MacroDefinition(TokenGroup):\n    \"\"\"## 4.5 Aperture Macro (AM).\n\n    The AM command creates a macro aperture template and adds it to the aperture template\n    dictionary (see 2.2). A template is a parametrized shape. The AD command instantiates a\n    template into an aperture by supplying values to the template parameters.\n\n    Templates of any shape or parametrization can be created. Multiple simple shapes called\n    primitives can be combined in a single template. An aperture macro can contain variables\n    whose actual values are defined by:\n\n    - Values provided by the AD command,\n    - Arithmetic expressions with other variables.\n\n    The template is created by positioning primitives in a coordinate space. The origin of that\n    coordinate space will be the origin of all apertures created with the state.\n\n    A template must be defined before the first AD that refers to it. The AM command can be used\n    multiple times in a file.\n\n    Attributes are not attached to templates. They are attached to the aperture at the time of its\n    creation with the AD command.\n\n    An AM command contains the following words:\n\n    - The AM declaration with the macro name\n    - Primitives with their comma-separated parameters\n    - Macro variables, defined by an arithmetic expression\n\n    ---\n\n    ### Syntax\n\n    ```ebnf\n    AM = '%' ('AM' macro_name macro_body) '%';\n    macro_name = name '*';\n    macro_body = {in_macro_block}+;\n    in_macro_block =\n    |primitive\n    |variable_definition\n    ;\n    variable_definition = (macro_variable '=' expression) '*';\n    macro_variable = '$' positive_integer;\n    primitive = primitive_code {',' par}*\n    par = ',' (expression);\n    ```\n\n    - `AM` - AM for Aperture Macro\n    - `&lt;Macro name&gt;` - Name of the aperture macro. The name must be unique, it\n        cannot be reused for another macro. See [3.4.5](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=36)\n        for the syntax rules.\n    - `&lt;Macro body&gt;` - The macro body contains the primitives generating the image\n        and the calculation of their parameters.\n    - `&lt;Variable definition&gt;` - `$n=&lt;Arithmetic expression&gt;`. An arithmetic expression may\n        use arithmetic operators (described later), constants and\n        variables $m defined previously.\n    - `&lt;Primitive&gt;` - A primitive is a basic shape to create the macro. It includes\n        primitive code identifying the primitive and primitive-specific\n        parameters (e.g. center of a circle). See [4.5.1](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=58).\n        The primitives are positioned in a coordinates system whose origin is the\n        origin of the resulting apertures.\n    - `&lt;Primitive code&gt;` - A code specifying the primitive (e.g. polygon).\n    - `&lt;Parameter&gt;` - Parameter can be a decimal number (e.g. `0.050`), a variable\n        (e.g. `$1`) or an arithmetic expression based on numbers and\n        variables. The actual value is calculated as explained in\n        [4.5.4.3](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=71).\n\n    Coordinates and sizes are expressed in the unit set by the MO command.\n\n    A parameter can be either:\n\n    - A decimal number\n    - A macro variable\n    - An arithmetic expression\n\n    A macro variable name must be a `$` character followed by an integer &gt;0, for example `$12`.\n    (This is a subset of names allowed in [3.4.3](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=35).)\n\n    **Note:** New lines can be added between words of a single command to enhance\n    readability. They do not affect the macro definition.\n\n    ### Example\n\n    The following AM command defines an aperture macro named 'Triangle_30'.\n\n    ```gerber\n    %AMTriangle_30*\n    4,1,3,\n    1,-1,\n    1,1,\n    2,1,\n    1,-1,\n    30*\n    %\n    ```\n\n    ---\n\n    See section 4.5 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=56)\n\n    \"\"\"  # noqa: E501\n\n    begin: MacroBegin\n    tokens: List[Token]\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        macro_begin: MacroBegin,\n        tokens: List[Token],\n    ) -&gt; None:\n        super().__init__(string, location, tokens)\n        self.macro_begin = macro_begin\n\n    @property\n    def macro_name(self) -&gt; str:\n        \"\"\"Name of macro item.\"\"\"\n        return self.macro_begin.name\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        macro_begin = tokens[\"macro_begin\"]\n        if not isinstance(macro_begin, MacroBegin):\n            raise TypeError(macro_begin)\n\n        macro_body_raw = tokens[\"macro_body\"]\n        macro_body_tokens: list[Token] = []\n\n        for e in macro_body_raw:\n            token = e[0]\n            if not isinstance(token, Token):\n                raise TypeError(token)\n            macro_body_tokens.append(token)\n\n        return cls(\n            string=string,\n            location=location,\n            macro_begin=macro_begin,\n            tokens=macro_body_tokens,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_definition.pre_parser_visit_token(self, context)\n        context.get_hooks().macro_definition.on_parser_visit_token(self, context)\n        context.get_hooks().macro_definition.post_parser_visit_token(self, context)\n\n    def __iter__(self) -&gt; Iterator[Token]:\n        yield self.macro_begin\n        for token in self.tokens:\n            yield from token\n        yield self\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition.macro_name","title":"macro_name  <code>property</code>","text":"<pre><code>macro_name: str\n</code></pre> <p>Name of macro item.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    macro_begin = tokens[\"macro_begin\"]\n    if not isinstance(macro_begin, MacroBegin):\n        raise TypeError(macro_begin)\n\n    macro_body_raw = tokens[\"macro_body\"]\n    macro_body_tokens: list[Token] = []\n\n    for e in macro_body_raw:\n        token = e[0]\n        if not isinstance(token, Token):\n            raise TypeError(token)\n        macro_body_tokens.append(token)\n\n    return cls(\n        string=string,\n        location=location,\n        macro_begin=macro_begin,\n        tokens=macro_body_tokens,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.html#pygerber.gerberx3.tokenizer.tokens.macro.am_macro.MacroDefinition.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/am_macro.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_definition.pre_parser_visit_token(self, context)\n    context.get_hooks().macro_definition.on_parser_visit_token(self, context)\n    context.get_hooks().macro_definition.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html","title":"macro_begin","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin","title":"macro_begin","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin","title":"MacroBegin","text":"<p>             Bases: <code>Token</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin--45-aperture-macro-am","title":"4.5 Aperture Macro (AM).","text":"<p>The AM command creates a macro aperture <code>template</code> and adds it to the aperture <code>template</code> dictionary (see 2.2). A <code>template</code> is a parametrized shape. The AD command instantiates a <code>template</code> into an aperture by supplying values to the template <code>parameters</code>.</p> <p>Templates of any shape or parametrization can be created. Multiple simple shapes called <code>primitives</code> can be combined in a single <code>template</code>. An aperture macro can contain <code>variables</code> whose actual values are defined by:</p> <ul> <li>Values provided by the AD command</li> <li><code>Arithmetic expressions</code> with other <code>variables</code></li> </ul> <p>The template is created by positioning <code>primitives</code> in a coordinate space. The origin of that coordinate space will be the origin of all apertures created with the state.</p> <p>A <code>template</code> must be defined before the first AD that refers to it. The AM command can be used multiple times in a file.</p> <p><code>Attributes</code> are not attached to templates. They are attached to the aperture at the time of its creation with the AD command.</p> <p>An AM command contains the following words:</p> <ul> <li>The AM declaration with the macro name</li> <li><code>Primitives</code> with their comma-separated <code>parameters</code></li> <li><code>Macro variables</code>, defined by an <code>arithmetic expression</code></li> </ul> <p>Coordinates and sizes are expressed in the unit set by the MO command.</p> <p>A parameter can be either:</p> <ul> <li>A <code>decimal</code> number</li> <li>A <code>macro variable</code></li> <li>An <code>arithmetic expression</code></li> </ul> <p>A <code>macro variable</code> name must be a \"$\" character followed by an integer &gt;0, for example <code>$12</code>. (This is a subset of names allowed in 3.4.3.)</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin--example","title":"Example","text":"<p>The following AM command defines an aperture macro named \"Triangle_30\".</p> <pre><code>%AMTriangle_30*\n4,1,3,\n1,-1,\n1,1,\n2,1,\n1,-1,\n30*\n%\n</code></pre> <p>See section 4.5 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.py</code> <pre><code>class MacroBegin(Token):\n    \"\"\"## 4.5 Aperture Macro (AM).\n\n    The AM command creates a macro aperture `template` and adds it to the aperture `template`\n    dictionary (see 2.2). A `template` is a parametrized shape. The AD command instantiates a\n    `template` into an aperture by supplying values to the template `parameters`.\n\n    Templates of any shape or parametrization can be created. Multiple simple shapes called\n    `primitives` can be combined in a single `template`. An aperture macro can contain `variables`\n    whose actual values are defined by:\n\n    - Values provided by the AD command\n    - `Arithmetic expressions` with other `variables`\n\n    The template is created by positioning `primitives` in a coordinate space. The origin of that\n    coordinate space will be the origin of all apertures created with the state.\n\n    A `template` must be defined before the first AD that refers to it. The AM command can be used\n    multiple times in a file.\n\n    `Attributes` are not attached to templates. They are attached to the aperture at the time of its\n    creation with the AD command.\n\n    An AM command contains the following words:\n\n    - The AM declaration with the macro name\n    - `Primitives` with their comma-separated `parameters`\n    - `Macro variables`, defined by an `arithmetic expression`\n\n    Coordinates and sizes are expressed in the unit set by the MO command.\n\n    A parameter can be either:\n\n    - A `decimal` number\n    - A `macro variable`\n    - An `arithmetic expression`\n\n    A `macro variable` name must be a \"$\" character followed by an integer &gt;0, for example `$12`.\n    (This is a subset of names allowed in 3.4.3.)\n\n    ---\n\n    ## Example\n\n    The following AM command defines an aperture macro named \"Triangle_30\".\n\n    ```gerber\n    %AMTriangle_30*\n    4,1,3,\n    1,-1,\n    1,1,\n    2,1,\n    1,-1,\n    30*\n    %\n    ```\n\n    ---\n\n    See section 4.5 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=56)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(self, string: str, location: int, name: str) -&gt; None:\n        super().__init__(string, location)\n        self.name = name\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"macro_name\"])\n        return cls(string=string, location=location, name=content)\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_begin.pre_parser_visit_token(self, context)\n        context.get_hooks().macro_begin.on_parser_visit_token(self, context)\n        context.get_hooks().macro_begin.post_parser_visit_token(self, context)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"AM{self.name}\"\n\n    def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"%{self.get_gerber_code()}*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"macro_name\"])\n    return cls(string=string, location=location, name=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_begin.pre_parser_visit_token(self, context)\n    context.get_hooks().macro_begin.on_parser_visit_token(self, context)\n    context.get_hooks().macro_begin.post_parser_visit_token(self, context)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"AM{self.name}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_begin.MacroBegin.get_gerber_code_one_line_pretty_display","title":"get_gerber_code_one_line_pretty_display","text":"<pre><code>get_gerber_code_one_line_pretty_display() -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_begin.py</code> <pre><code>def get_gerber_code_one_line_pretty_display(self) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"%{self.get_gerber_code()}*\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_context.html","title":"macro_context","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_context.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_context","title":"macro_context","text":"<p>Module contains MacroContext class definition.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/macro_context.html#pygerber.gerberx3.tokenizer.tokens.macro.macro_context.MacroContext","title":"MacroContext","text":"<p>             Bases: <code>BaseModel</code></p> <p>Macro context object used during macro evaluation.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/macro_context.py</code> <pre><code>class MacroContext(BaseModel):\n    \"\"\"Macro context object used during macro evaluation.\"\"\"\n\n    variables: Dict[str, Offset] = Field(default_factory=dict)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html","title":"point","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html#pygerber.gerberx3.tokenizer.tokens.macro.point","title":"point","text":"<p>Point wrapper token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html#pygerber.gerberx3.tokenizer.tokens.macro.point.Point","title":"Point","text":"<p>             Bases: <code>Token</code></p> <p>Point wrapper token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/point.py</code> <pre><code>class Point(Token):\n    \"\"\"Point wrapper token.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        x: MacroExpressionToken,\n        y: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.x = x\n        self.y = y\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        x = MacroExpressionToken.ensure_type(tokens[\"x\"])\n        y = MacroExpressionToken.ensure_type(tokens[\"y\"])\n\n        return cls(\n            string=string,\n            location=location,\n            x=x,\n            y=y,\n        )\n\n    def to_parser2_point2(self, context: Parser2Context) -&gt; Point2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return Point2(\n            x=self.x.to_parser2_expression(context=context),\n            y=self.y.to_parser2_expression(context=context),\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code from iterable of tokens.\"\"\"\n        return (\n            f\"{self.x.get_gerber_code(indent, endline)},\"\n            f\"{self.y.get_gerber_code(indent, endline)}\"\n        )\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.x}, {self.y}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html#pygerber.gerberx3.tokenizer.tokens.macro.point.Point.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/point.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    x = MacroExpressionToken.ensure_type(tokens[\"x\"])\n    y = MacroExpressionToken.ensure_type(tokens[\"y\"])\n\n    return cls(\n        string=string,\n        location=location,\n        x=x,\n        y=y,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html#pygerber.gerberx3.tokenizer.tokens.macro.point.Point.to_parser2_point2","title":"to_parser2_point2","text":"<pre><code>to_parser2_point2(context: Parser2Context) -&gt; Point2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/point.py</code> <pre><code>def to_parser2_point2(self, context: Parser2Context) -&gt; Point2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return Point2(\n        x=self.x.to_parser2_expression(context=context),\n        y=self.y.to_parser2_expression(context=context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/point.html#pygerber.gerberx3.tokenizer.tokens.macro.point.Point.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code from iterable of tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/point.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code from iterable of tokens.\"\"\"\n    return (\n        f\"{self.x.get_gerber_code(indent, endline)},\"\n        f\"{self.y.get_gerber_code(indent, endline)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/__init__.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions","title":"expressions","text":"<p><code>expressions</code> package contains macro expression tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html","title":"binary","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary","title":"binary","text":"<p>Arithmetic expression token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.BinaryOperator","title":"BinaryOperator","text":"<p>             Bases: <code>MacroExpressionToken</code></p> <p>Operation with two operands.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>class BinaryOperator(MacroExpressionToken):\n    \"\"\"Operation with two operands.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        left: MacroExpressionToken,\n        right: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.left = left\n        self.right = right\n        self.operator: Callable[[Any, Any], Any] = add\n        self.sign = \"+\"\n\n    @classmethod\n    def new(\n        cls,\n        string: str,\n        location: int,\n        tokens: ParseResults,\n    ) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        left, right = tokens[0]\n        return cls(\n            string,\n            location,\n            MacroExpressionToken.ensure_type(left),\n            MacroExpressionToken.ensure_type(right),\n        )\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        raise NotImplementedError\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code from iterable of tokens.\"\"\"\n        return (\n            f\"{self.left.get_gerber_code(indent=indent, endline=endline)}{self.sign}\"\n            f\"{self.right.get_gerber_code(indent=indent, endline=endline)}\"\n        )\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.left}, {self.right}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.BinaryOperator.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    string: str,\n    location: int,\n    tokens: ParseResults,\n) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    left, right = tokens[0]\n    return cls(\n        string,\n        location,\n        MacroExpressionToken.ensure_type(left),\n        MacroExpressionToken.ensure_type(right),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.BinaryOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.BinaryOperator.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code from iterable of tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code from iterable of tokens.\"\"\"\n    return (\n        f\"{self.left.get_gerber_code(indent=indent, endline=endline)}{self.sign}\"\n        f\"{self.right.get_gerber_code(indent=indent, endline=endline)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.MultiplicationOperator","title":"MultiplicationOperator","text":"<p>             Bases: <code>BinaryOperator</code></p> <p>Operation with two operands.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>class MultiplicationOperator(BinaryOperator):\n    \"\"\"Operation with two operands.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        left: MacroExpressionToken,\n        right: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, left, right)\n        self.operator: Callable[[Any, Any], Any] = mul\n        self.sign = \"x\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.multiplication(\n            lhs=self.left.to_parser2_expression(context),\n            rhs=self.right.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.MultiplicationOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.multiplication(\n        lhs=self.left.to_parser2_expression(context),\n        rhs=self.right.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.DivisionOperator","title":"DivisionOperator","text":"<p>             Bases: <code>BinaryOperator</code></p> <p>Operation with two operands.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>class DivisionOperator(BinaryOperator):\n    \"\"\"Operation with two operands.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        left: MacroExpressionToken,\n        right: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, left, right)\n        self.operator: Callable[[Any, Any], Any] = truediv\n        self.sign = \"/\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.division(\n            lhs=self.left.to_parser2_expression(context),\n            rhs=self.right.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.DivisionOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.division(\n        lhs=self.left.to_parser2_expression(context),\n        rhs=self.right.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.AdditionOperator","title":"AdditionOperator","text":"<p>             Bases: <code>BinaryOperator</code></p> <p>Operation with two operands.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>class AdditionOperator(BinaryOperator):\n    \"\"\"Operation with two operands.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        left: MacroExpressionToken,\n        right: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, left, right)\n        self.operator: Callable[[Any, Any], Any] = add\n        self.sign = \"+\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.addition(\n            lhs=self.left.to_parser2_expression(context),\n            rhs=self.right.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.AdditionOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.addition(\n        lhs=self.left.to_parser2_expression(context),\n        rhs=self.right.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.SubtractionOperator","title":"SubtractionOperator","text":"<p>             Bases: <code>BinaryOperator</code></p> <p>Operation with two operands.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>class SubtractionOperator(BinaryOperator):\n    \"\"\"Operation with two operands.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        left: MacroExpressionToken,\n        right: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, left, right)\n        self.operator: Callable[[Any, Any], Any] = sub\n        self.sign = \"-\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.subtraction(\n            lhs=self.left.to_parser2_expression(context),\n            rhs=self.right.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.binary.SubtractionOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/binary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.subtraction(\n        lhs=self.left.to_parser2_expression(context),\n        rhs=self.right.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/errors.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.errors","title":"errors","text":"<p>Arithmetic expression token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/errors.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.errors.InvalidArithmeticExpressionError","title":"InvalidArithmeticExpressionError","text":"<p>             Bases: <code>TokenizerError</code></p> <p>Raised when it's not possible to construct valid arithmetic expression.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/errors.py</code> <pre><code>class InvalidArithmeticExpressionError(TokenizerError):\n    \"\"\"Raised when it's not possible to construct valid arithmetic expression.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html","title":"macro_expression","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.macro_expression","title":"macro_expression","text":"<p>In-macro numeric expression token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.macro_expression.MacroExpressionToken","title":"MacroExpressionToken","text":"<p>             Bases: <code>Token</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.macro_expression.MacroExpressionToken--4542-arithmetic-expressions","title":"4.5.4.2 Arithmetic Expressions.","text":"<p>A parameter value can also be defined by an arithmetic expression consisting of integer and decimal constants, other variables, arithmetic operators and the brackets \"(\" and \")\". The standard arithmetic precedence rules apply. The following arithmetic operators are available:</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.macro_expression.MacroExpressionToken--example","title":"Example","text":"<pre><code>%AMRect*\n21,1,$1,$2-2x$3,-$4,-$5+$2,0*%\n</code></pre> <p>The corresponding AD command could be:</p> <pre><code>%ADD146Rect,0.0807087X0.1023622X0.0118110X0.5000000X0.3000000*%\n</code></pre> <p>See section 4.5.4.2 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.py</code> <pre><code>class MacroExpressionToken(Token):\n    \"\"\"## 4.5.4.2 Arithmetic Expressions.\n\n    A parameter value can also be defined by an arithmetic expression consisting of integer and\n    decimal constants, other variables, arithmetic operators and the brackets \"(\" and \")\". The\n    standard arithmetic precedence rules apply. The following arithmetic operators are available:\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMRect*\n    21,1,$1,$2-2x$3,-$4,-$5+$2,0*%\n    ```\n\n    The corresponding AD command could be:\n\n    ```gerber\n    %ADD146Rect,0.0807087X0.1023622X0.0118110X0.5000000X0.3000000*%\n    ```\n\n    ---\n\n    See section 4.5.4.2 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=70)\n\n    \"\"\"  # noqa: E501\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.macro_expression.MacroExpressionToken.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/macro_expression.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html","title":"numeric_constant","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.numeric_constant","title":"numeric_constant","text":"<p>Arithmetic expression token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.numeric_constant.NumericConstant","title":"NumericConstant","text":"<p>             Bases: <code>MacroExpressionToken</code></p> <p>Wrapper around numeric constant expression token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.py</code> <pre><code>class NumericConstant(MacroExpressionToken):\n    \"\"\"Wrapper around numeric constant expression token.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        value: Decimal,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.value = value\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        value = Decimal(str(tokens[\"numeric_constant_value\"]))\n\n        return cls(\n            string=string,\n            location=location,\n            value=value,\n        )\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.constant(\n            value=self.value,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code from iterable of tokens.\"\"\"\n        return f\"{self.value}\"\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.value}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.numeric_constant.NumericConstant.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    value = Decimal(str(tokens[\"numeric_constant_value\"]))\n\n    return cls(\n        string=string,\n        location=location,\n        value=value,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.numeric_constant.NumericConstant.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.constant(\n        value=self.value,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.numeric_constant.NumericConstant.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code from iterable of tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/numeric_constant.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code from iterable of tokens.\"\"\"\n    return f\"{self.value}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html","title":"unary","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary","title":"unary","text":"<p>Arithmetic expression token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.UnaryOperator","title":"UnaryOperator","text":"<p>             Bases: <code>MacroExpressionToken</code></p> <p>Operator with one operand.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>class UnaryOperator(MacroExpressionToken):\n    \"\"\"Operator with one operand.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        operand: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.operand = operand\n        self.operator: Callable[[Any], Any] = neg\n        self.sign = \"-\"\n\n    @classmethod\n    def new(\n        cls,\n        string: str,\n        location: int,\n        tokens: ParseResults,\n    ) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        operand, *_ = tokens.as_list()[0]\n\n        if not isinstance(operand, MacroExpressionToken):\n            raise TypeError(operand)\n\n        return cls(string, location, operand)\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        raise NotImplementedError\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code from iterable of tokens.\"\"\"\n        return (\n            f\"{self.sign}{self.operand.get_gerber_code(indent=indent, endline=endline)}\"\n        )\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.operand}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.UnaryOperator.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    string: str,\n    location: int,\n    tokens: ParseResults,\n) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    operand, *_ = tokens.as_list()[0]\n\n    if not isinstance(operand, MacroExpressionToken):\n        raise TypeError(operand)\n\n    return cls(string, location, operand)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.UnaryOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.UnaryOperator.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code from iterable of tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code from iterable of tokens.\"\"\"\n    return (\n        f\"{self.sign}{self.operand.get_gerber_code(indent=indent, endline=endline)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.NegationOperator","title":"NegationOperator","text":"<p>             Bases: <code>UnaryOperator</code></p> <p>Negation operation.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>class NegationOperator(UnaryOperator):\n    \"\"\"Negation operation.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        operand: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, operand)\n        self.operator = neg\n        self.sign = \"-\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `UnaryMinusExpression2`.\"\"\"\n        return context.macro_expressions.negation(\n            op=self.operand.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.NegationOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>UnaryMinusExpression2</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `UnaryMinusExpression2`.\"\"\"\n    return context.macro_expressions.negation(\n        op=self.operand.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.PositiveOperator","title":"PositiveOperator","text":"<p>             Bases: <code>UnaryOperator</code></p> <p>Negation operation.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>class PositiveOperator(UnaryOperator):\n    \"\"\"Negation operation.\"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        operand: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location, operand)\n        self.operator = pos\n        self.sign = \"+\"\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `UnaryPlusExpression2`.\"\"\"\n        return context.macro_expressions.positive(\n            op=self.operand.to_parser2_expression(context),\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.unary.PositiveOperator.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>UnaryPlusExpression2</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/unary.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `UnaryPlusExpression2`.\"\"\"\n    return context.macro_expressions.positive(\n        op=self.operand.to_parser2_expression(context),\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html","title":"variable_name","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name","title":"variable_name","text":"<p>Macro variable use token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName","title":"MacroVariableName","text":"<p>             Bases: <code>MacroExpressionToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName--4541-variable-values-from-the-ad-command","title":"4.5.4.1 Variable Values from the AD Command.","text":"<p>description</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName--example","title":"Example","text":"<p><pre><code>%AMDONUTVAR*1,1,$1,$2,$3*1,0,$4,$2,$3*%\n</code></pre> <code>$1</code>, <code>$2</code>, <code>$3</code> and <code>$4</code> are macro variables. With the following calling AD.</p> <pre><code>%ADD34DONUTVAR,0.100X0X0X0.080*%\n</code></pre> <p>the variables take the following values:</p> <pre><code>$1 = 0.100\n$2 = 0\n$3 = 0\n$4 = 0.080\n</code></pre> <p>See section 4.5.4.1 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.py</code> <pre><code>class MacroVariableName(MacroExpressionToken):\n    \"\"\"## 4.5.4.1 Variable Values from the AD Command.\n\n    description\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMDONUTVAR*1,1,$1,$2,$3*1,0,$4,$2,$3*%\n    ```\n    `$1`, `$2`, `$3` and `$4` are macro variables. With the following calling AD.\n\n    ```gerber\n    %ADD34DONUTVAR,0.100X0X0X0.080*%\n    ```\n\n    the variables take the following values:\n\n    ```yaml\n    $1 = 0.100\n    $2 = 0\n    $3 = 0\n    $4 = 0.080\n    ```\n\n    ---\n\n    See section 4.5.4.1 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=70)\n\n    \"\"\"\n\n    def __init__(self, string: str, location: int, name: str) -&gt; None:\n        super().__init__(string, location)\n        self.name = name\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        name = str(tokens[\"macro_variable_name\"])\n        return cls(string=string, location=location, name=name)\n\n    def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n        \"\"\"Convert to `Expression2` descendant class.\"\"\"\n        return context.macro_expressions.variable_name(name=self.name)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",  # noqa: ARG002\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return self.name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    name = str(tokens[\"macro_variable_name\"])\n    return cls(string=string, location=location, name=name)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName.to_parser2_expression","title":"to_parser2_expression","text":"<pre><code>to_parser2_expression(\n    context: Parser2Context,\n) -&gt; Expression2\n</code></pre> <p>Convert to <code>Expression2</code> descendant class.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.py</code> <pre><code>def to_parser2_expression(self, context: Parser2Context) -&gt; Expression2:\n    \"\"\"Convert to `Expression2` descendant class.\"\"\"\n    return context.macro_expressions.variable_name(name=self.name)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.html#pygerber.gerberx3.tokenizer.tokens.macro.expressions.variable_name.MacroVariableName.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/expressions/variable_name.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",  # noqa: ARG002\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return self.name\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/__init__.html#pygerber.gerberx3.tokenizer.tokens.macro.statements","title":"statements","text":"<p><code>statements</code> package contains macro statement tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html","title":"code_1_circle","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle","title":"code_1_circle","text":"<p>Macro primitives tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken","title":"Code1CircleToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken--4513-circle-code-1","title":"4.5.1.3 Circle, Code 1.","text":"<p>A circle primitive is defined by its center point and diameter.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken--example","title":"Example","text":"<pre><code>%AMCircle*\n1,1,1.5,0,0,0*%\n</code></pre> <p>See section 4.5.1.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.py</code> <pre><code>class Code1CircleToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.3 Circle, Code 1.\n\n    A circle primitive is defined by its center point and diameter.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMCircle*\n    1,1,1.5,0,0,0*%\n    ```\n\n    ---\n\n    See section 4.5.1.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=60)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"1\"\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        exposure: MacroExpressionToken,\n        diameter: MacroExpressionToken,\n        center_x: MacroExpressionToken,\n        center_y: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.exposure = exposure\n        self.diameter = diameter\n        self.center_x = center_x\n        self.center_y = center_y\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n        diameter = MacroExpressionToken.ensure_type(tokens[\"diameter\"])\n        center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n        center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n\n        r = tokens.get(\"rotation\")\n        rotation: Optional[MacroExpressionToken] = (\n            MacroExpressionToken.ensure_type(r) if r is not None else None\n        )\n        if rotation is None:\n            rotation = NumericConstant(string, location, value=Decimal(\"0.0\"))\n\n        return cls(\n            string=string,\n            location=location,\n            exposure=exposure,\n            diameter=diameter,\n            center_x=center_x,\n            center_y=center_y,\n            rotation=rotation,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_1_circle.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_1_circle.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_1_circle.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n        string += f\",{self.diameter.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n\n        if self.rotation is not None:\n            string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.exposure}\"\n        string += f\"\\n  {self.diameter}\"\n        string += f\"\\n  {self.center_x}\"\n        string += f\"\\n  {self.center_y}\"\n\n        if self.rotation is not None:\n            string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n    diameter = MacroExpressionToken.ensure_type(tokens[\"diameter\"])\n    center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n    center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n\n    r = tokens.get(\"rotation\")\n    rotation: Optional[MacroExpressionToken] = (\n        MacroExpressionToken.ensure_type(r) if r is not None else None\n    )\n    if rotation is None:\n        rotation = NumericConstant(string, location, value=Decimal(\"0.0\"))\n\n    return cls(\n        string=string,\n        location=location,\n        exposure=exposure,\n        diameter=diameter,\n        center_x=center_x,\n        center_y=center_y,\n        rotation=rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_1_circle.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_1_circle.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_1_circle.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_1_circle.Code1CircleToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_1_circle.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n    string += f\",{self.diameter.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n\n    if self.rotation is not None:\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html","title":"code_20_vector_line","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line","title":"code_20_vector_line","text":"<p>Macro primitive vector line.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken","title":"Code20VectorLineToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken--4514-vector-line-code-20","title":"4.5.1.4 Vector Line, Code 20.","text":"<p>A vector line is a rectangle defined by its line width, start and end points. The line ends are rectangular.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken--example","title":"Example","text":"<pre><code>%AMLine*\n20,1,0.9,0,0.45,12,0.45,0*\n%\n</code></pre> <p>See section 4.5.1.4 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.py</code> <pre><code>class Code20VectorLineToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.4 Vector Line, Code 20.\n\n    A vector line is a rectangle defined by its line width, start and end points. The\n    line ends are rectangular.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMLine*\n    20,1,0.9,0,0.45,12,0.45,0*\n    %\n    ```\n\n    ---\n\n    See section 4.5.1.4 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=61)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"20\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        string: str,\n        location: int,\n        exposure: MacroExpressionToken,\n        width: MacroExpressionToken,\n        start_x: MacroExpressionToken,\n        start_y: MacroExpressionToken,\n        end_x: MacroExpressionToken,\n        end_y: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.exposure = exposure\n        self.width = width\n        self.start_x = start_x\n        self.start_y = start_y\n        self.end_x = end_x\n        self.end_y = end_y\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n        width = MacroExpressionToken.ensure_type(tokens[\"width\"])\n        start_x = MacroExpressionToken.ensure_type(tokens[\"start_x\"])\n        start_y = MacroExpressionToken.ensure_type(tokens[\"start_y\"])\n        end_x = MacroExpressionToken.ensure_type(tokens[\"end_x\"])\n        end_y = MacroExpressionToken.ensure_type(tokens[\"end_y\"])\n        rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n        return cls(\n            string=string,\n            location=location,\n            exposure=exposure,\n            width=width,\n            start_x=start_x,\n            start_y=start_y,\n            end_x=end_x,\n            end_y=end_y,\n            rotation=rotation,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_20_vector_line.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_20_vector_line.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_20_vector_line.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n        string += f\",{self.width.get_gerber_code(indent, endline)}\"\n        string += f\",{self.start_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.start_y.get_gerber_code(indent, endline)}\"\n        string += f\",{self.end_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.end_y.get_gerber_code(indent, endline)}\"\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.exposure}\"\n        string += f\"\\n  {self.width}\"\n        string += f\"\\n  {self.start_x}\"\n        string += f\"\\n  {self.start_y}\"\n        string += f\"\\n  {self.end_x}\"\n        string += f\"\\n  {self.end_y}\"\n        string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n    width = MacroExpressionToken.ensure_type(tokens[\"width\"])\n    start_x = MacroExpressionToken.ensure_type(tokens[\"start_x\"])\n    start_y = MacroExpressionToken.ensure_type(tokens[\"start_y\"])\n    end_x = MacroExpressionToken.ensure_type(tokens[\"end_x\"])\n    end_y = MacroExpressionToken.ensure_type(tokens[\"end_y\"])\n    rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n    return cls(\n        string=string,\n        location=location,\n        exposure=exposure,\n        width=width,\n        start_x=start_x,\n        start_y=start_y,\n        end_x=end_x,\n        end_y=end_y,\n        rotation=rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_20_vector_line.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_20_vector_line.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_20_vector_line.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_20_vector_line.Code20VectorLineToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_20_vector_line.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n    string += f\",{self.width.get_gerber_code(indent, endline)}\"\n    string += f\",{self.start_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.start_y.get_gerber_code(indent, endline)}\"\n    string += f\",{self.end_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.end_y.get_gerber_code(indent, endline)}\"\n    string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html","title":"code_21_center_line","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line","title":"code_21_center_line","text":"<p>Macro primitive center line.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken","title":"Code21CenterLineToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken--4515-center-line-code-21","title":"4.5.1.5 Center Line, Code 21.","text":"<p>A center line primitive is a rectangle defined by its width, height, and center point.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken--example","title":"Example","text":"<pre><code>%AMRECTANGLE*\n21,1,6.8,1.2,3.4,0.6,30*%\n</code></pre> <p>See section 4.5.1.5 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.py</code> <pre><code>class Code21CenterLineToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.5 Center Line, Code 21.\n\n    A center line primitive is a rectangle defined by its width, height, and center\n    point.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMRECTANGLE*\n    21,1,6.8,1.2,3.4,0.6,30*%\n    ```\n\n    ---\n\n    See section 4.5.1.5 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=62)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"21\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        string: str,\n        location: int,\n        exposure: MacroExpressionToken,\n        width: MacroExpressionToken,\n        height: MacroExpressionToken,\n        center_x: MacroExpressionToken,\n        center_y: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.exposure = exposure\n        self.width = width\n        self.height = height\n        self.center_x = center_x\n        self.center_y = center_y\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n        width = MacroExpressionToken.ensure_type(tokens[\"width\"])\n        height = MacroExpressionToken.ensure_type(tokens[\"height\"])\n        center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n        center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n        rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n        return cls(\n            string=string,\n            location=location,\n            exposure=exposure,\n            width=width,\n            height=height,\n            center_x=center_x,\n            center_y=center_y,\n            rotation=rotation,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_21_center_line.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_21_center_line.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_21_center_line.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n        string += f\",{self.width.get_gerber_code(indent, endline)}\"\n        string += f\",{self.height.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.exposure}\"\n        string += f\"\\n  {self.width}\"\n        string += f\"\\n  {self.height}\"\n        string += f\"\\n  {self.center_x}\"\n        string += f\"\\n  {self.center_y}\"\n        string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n    width = MacroExpressionToken.ensure_type(tokens[\"width\"])\n    height = MacroExpressionToken.ensure_type(tokens[\"height\"])\n    center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n    center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n    rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n    return cls(\n        string=string,\n        location=location,\n        exposure=exposure,\n        width=width,\n        height=height,\n        center_x=center_x,\n        center_y=center_y,\n        rotation=rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_21_center_line.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_21_center_line.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_21_center_line.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_21_center_line.Code21CenterLineToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_21_center_line.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n    string += f\",{self.width.get_gerber_code(indent, endline)}\"\n    string += f\",{self.height.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n    string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.html","title":"code_22_lower_left_line","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_22_lower_left_line","title":"code_22_lower_left_line","text":"<p>Code 22 lower left line macro primitive.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_22_lower_left_line.Code22LowerLeftLineToken","title":"Code22LowerLeftLineToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p> <p>Code 22 lower left line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.py</code> <pre><code>class Code22LowerLeftLineToken(MacroPrimitiveToken):\n    \"\"\"Code 22 lower left line macro primitive.\"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_22_lower_left_line.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_22_lower_left_line.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_22_lower_left_line.post_parser_visit_token(\n            self,\n            context,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_22_lower_left_line.Code22LowerLeftLineToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_22_lower_left_line.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_22_lower_left_line.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_22_lower_left_line.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_22_lower_left_line.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.html","title":"code_2_vector_line","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_2_vector_line","title":"code_2_vector_line","text":"<p>Macro primitives tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_2_vector_line.Code2VectorLineToken","title":"Code2VectorLineToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p> <p>Vector line macro primitive.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.py</code> <pre><code>class Code2VectorLineToken(MacroPrimitiveToken):\n    \"\"\"Vector line macro primitive.\"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_2_vector_line.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_2_vector_line.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_2_vector_line.post_parser_visit_token(\n            self,\n            context,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_2_vector_line.Code2VectorLineToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_2_vector_line.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_2_vector_line.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_2_vector_line.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_2_vector_line.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html","title":"code_4_outline","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline","title":"code_4_outline","text":"<p>Macro primitives tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken","title":"Code4OutlineToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken--4516-outline-code-4","title":"4.5.1.6 Outline, Code 4.","text":"<p>An outline primitive is an area defined by its outline or contour. The outline is a polygon, consisting of linear segments only, defined by its start vertex and n subsequent vertices. The outline must be closed, i.e. the last vertex must be equal to the start vertex. The outline must comply with all the requirements of a contour according to 4.10.3.</p> <p>The maximum number of vertices is 5000. The purpose of this primitive is to create apertures to flash pads with special shapes. The purpose is not to create copper pours. Use the region statement for copper pours; see 4.10.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken--example","title":"Example","text":"<pre><code>%AMTriangle_30*\n4,1,3,\n1,-1,\n1,1,\n2,1,\n1,-1,\n30*\n%\n</code></pre> <p>See section 4.5.1.6 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.py</code> <pre><code>class Code4OutlineToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.6 Outline, Code 4.\n\n    An outline primitive is an area defined by its outline or contour. The outline is a\n    polygon, consisting of linear segments only, defined by its start vertex and n\n    subsequent vertices. The outline must be closed, i.e. the last vertex must be equal\n    to the start vertex. The outline must comply with all the requirements of a contour\n    according to [4.10.3](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=91).\n\n    The maximum number of vertices is 5000. The purpose of this primitive is to create\n    apertures to flash pads with special shapes. The purpose is not to create copper\n    pours. Use the region statement for copper pours; see\n    [4.10](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=90).\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMTriangle_30*\n    4,1,3,\n    1,-1,\n    1,1,\n    2,1,\n    1,-1,\n    30*\n    %\n    ```\n\n    ---\n\n    See section 4.5.1.6 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=63)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"4\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        string: str,\n        location: int,\n        exposure: MacroExpressionToken,\n        number_of_vertices: MacroExpressionToken,\n        start_x: MacroExpressionToken,\n        start_y: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n        point: List[Point],\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.exposure = exposure\n        self.number_of_vertices = number_of_vertices\n        self.start_x = start_x\n        self.start_y = start_y\n        self.rotation = rotation\n        self.point = point\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n        number_of_vertices = MacroExpressionToken.ensure_type(\n            tokens[\"number_of_vertices\"],\n        )\n        start_x = MacroExpressionToken.ensure_type(tokens[\"start_x\"])\n        start_y = MacroExpressionToken.ensure_type(tokens[\"start_y\"])\n        rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n        p = p if (p := tokens.get(\"point\")) is not None else []\n        point = [Point.ensure_type(e) for e in p]\n\n        return cls(\n            string=string,\n            location=location,\n            exposure=exposure,\n            number_of_vertices=number_of_vertices,\n            start_x=start_x,\n            start_y=start_y,\n            rotation=rotation,\n            point=point,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_4_outline.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_4_outline.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_4_outline.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n        string += f\",{self.number_of_vertices.get_gerber_code(indent, endline)}\"\n        string += f\",{self.start_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.start_y.get_gerber_code(indent, endline)}\"\n\n        for point in self.point:\n            string += f\",{point.get_gerber_code(indent, endline)}\"\n\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.exposure}\"\n        string += f\"\\n  {self.number_of_vertices}\"\n        string += f\"\\n  {self.start_x}\"\n        string += f\"\\n  {self.start_y}\"\n\n        for point in self.point:\n            string += f\"\\n    {point}\"\n\n        string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n    number_of_vertices = MacroExpressionToken.ensure_type(\n        tokens[\"number_of_vertices\"],\n    )\n    start_x = MacroExpressionToken.ensure_type(tokens[\"start_x\"])\n    start_y = MacroExpressionToken.ensure_type(tokens[\"start_y\"])\n    rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n    p = p if (p := tokens.get(\"point\")) is not None else []\n    point = [Point.ensure_type(e) for e in p]\n\n    return cls(\n        string=string,\n        location=location,\n        exposure=exposure,\n        number_of_vertices=number_of_vertices,\n        start_x=start_x,\n        start_y=start_y,\n        rotation=rotation,\n        point=point,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_4_outline.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_4_outline.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_4_outline.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_4_outline.Code4OutlineToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_4_outline.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n    string += f\",{self.number_of_vertices.get_gerber_code(indent, endline)}\"\n    string += f\",{self.start_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.start_y.get_gerber_code(indent, endline)}\"\n\n    for point in self.point:\n        string += f\",{point.get_gerber_code(indent, endline)}\"\n\n    string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html","title":"code_5_polygon","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon","title":"code_5_polygon","text":"<p>Macro primitive polygon token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken","title":"Code5PolygonToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken--4517-polygon-code-5","title":"4.5.1.7 Polygon, Code 5.","text":"<p>A polygon primitive is a regular polygon defined by the number of vertices n, the center point and the diameter of the circumscribed circle.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken--example","title":"Example","text":"<pre><code>%AMPolygon*\n5,1,8,0,0,8,0*%\n</code></pre> <p>See section 4.5.1.7 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.py</code> <pre><code>class Code5PolygonToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.7 Polygon, Code 5.\n\n    A polygon primitive is a regular polygon defined by the number of vertices n, the\n    center point and the diameter of the circumscribed circle.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMPolygon*\n    5,1,8,0,0,8,0*%\n    ```\n\n    ---\n\n    See section 4.5.1.7 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=65)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"5\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        string: str,\n        location: int,\n        exposure: MacroExpressionToken,\n        number_of_vertices: MacroExpressionToken,\n        center_x: MacroExpressionToken,\n        center_y: MacroExpressionToken,\n        diameter: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.exposure = exposure\n        self.number_of_vertices = number_of_vertices\n        self.center_x = center_x\n        self.center_y = center_y\n        self.diameter = diameter\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n        number_of_vertices = MacroExpressionToken.ensure_type(\n            tokens[\"number_of_vertices\"],\n        )\n        center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n        center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n        diameter = MacroExpressionToken.ensure_type(tokens[\"diameter\"])\n        rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n        return cls(\n            string=string,\n            location=location,\n            exposure=exposure,\n            number_of_vertices=number_of_vertices,\n            center_x=center_x,\n            center_y=center_y,\n            diameter=diameter,\n            rotation=rotation,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_5_polygon.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_5_polygon.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_5_polygon.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n        string += f\",{self.number_of_vertices.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n        string += f\",{self.diameter.get_gerber_code(indent, endline)}\"\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.exposure}\"\n        string += f\"\\n  {self.number_of_vertices}\"\n        string += f\"\\n  {self.center_x}\"\n        string += f\"\\n  {self.center_y}\"\n        string += f\"\\n  {self.diameter}\"\n        string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    exposure = MacroExpressionToken.ensure_type(tokens[\"exposure\"])\n    number_of_vertices = MacroExpressionToken.ensure_type(\n        tokens[\"number_of_vertices\"],\n    )\n    center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n    center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n    diameter = MacroExpressionToken.ensure_type(tokens[\"diameter\"])\n    rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n    return cls(\n        string=string,\n        location=location,\n        exposure=exposure,\n        number_of_vertices=number_of_vertices,\n        center_x=center_x,\n        center_y=center_y,\n        diameter=diameter,\n        rotation=rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_5_polygon.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_5_polygon.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_5_polygon.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_5_polygon.Code5PolygonToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_5_polygon.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.exposure.get_gerber_code(indent, endline)}\"\n    string += f\",{self.number_of_vertices.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n    string += f\",{self.diameter.get_gerber_code(indent, endline)}\"\n    string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.html","title":"code_6_moire","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_6_moire","title":"code_6_moire","text":"<p>Macro primitive Moire.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_6_moire.Code6MoireToken","title":"Code6MoireToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p> <p>Moire macro primitive.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.py</code> <pre><code>class Code6MoireToken(MacroPrimitiveToken):\n    \"\"\"Moire macro primitive.\"\"\"\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_6_moire.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_6_moire.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_6_moire.post_parser_visit_token(\n            self,\n            context,\n        )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_6_moire.Code6MoireToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_6_moire.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_6_moire.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_6_moire.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_6_moire.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html","title":"code_7_thermal","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal","title":"code_7_thermal","text":"<p>Macro primitives tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken","title":"Code7ThermalToken","text":"<p>             Bases: <code>MacroPrimitiveToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken--4518-thermal-code-7","title":"4.5.1.8 Thermal, Code 7.","text":"<p>The thermal primitive is a ring (annulus) interrupted by four gaps. Exposure is always on.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken--example","title":"Example","text":"<pre><code>%AMThermal*\n7,0,0,0.95,0.75,0.175,0.0*%\n</code></pre> <p>See section 4.5.1.8 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.py</code> <pre><code>class Code7ThermalToken(MacroPrimitiveToken):\n    \"\"\"## 4.5.1.8 Thermal, Code 7.\n\n    The thermal primitive is a ring (annulus) interrupted by four gaps. Exposure is\n    always on.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMThermal*\n    7,0,0,0.95,0.75,0.175,0.0*%\n    ```\n\n    ---\n\n    See section 4.5.1.8 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=66)\n\n    \"\"\"\n\n    symbol: ClassVar[str] = \"7\"\n\n    def __init__(  # noqa: PLR0913\n        self,\n        string: str,\n        location: int,\n        center_x: MacroExpressionToken,\n        center_y: MacroExpressionToken,\n        outer_diameter: MacroExpressionToken,\n        inner_diameter: MacroExpressionToken,\n        gap: MacroExpressionToken,\n        rotation: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.center_x = center_x\n        self.center_y = center_y\n        self.outer_diameter = outer_diameter\n        self.inner_diameter = inner_diameter\n        self.gap = gap\n        self.rotation = rotation\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Initialize token object.\"\"\"\n        center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n        center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n        outer_diameter = MacroExpressionToken.ensure_type(tokens[\"outer_diameter\"])\n        inner_diameter = MacroExpressionToken.ensure_type(tokens[\"inner_diameter\"])\n        gap = MacroExpressionToken.ensure_type(tokens[\"gap\"])\n        rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n        return cls(\n            string,\n            location,\n            center_x=center_x,\n            center_y=center_y,\n            outer_diameter=outer_diameter,\n            inner_diameter=inner_diameter,\n            gap=gap,\n            rotation=rotation,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_code_7_thermal.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_7_thermal.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_code_7_thermal.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        string = self.symbol\n\n        string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n        string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n        string += f\",{self.outer_diameter.get_gerber_code(indent, endline)}\"\n        string += f\",{self.inner_diameter.get_gerber_code(indent, endline)}\"\n        string += f\",{self.gap.get_gerber_code(indent, endline)}\"\n        string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n        return indent + string\n\n    def __str__(self) -&gt; str:\n        string = super().__str__()\n\n        string += f\"\\n  {self.center_x}\"\n        string += f\"\\n  {self.center_y}\"\n        string += f\"\\n  {self.outer_diameter}\"\n        string += f\"\\n  {self.inner_diameter}\"\n        string += f\"\\n  {self.gap}\"\n        string += f\"\\n  {self.rotation}\"\n\n        return string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Initialize token object.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Initialize token object.\"\"\"\n    center_x = MacroExpressionToken.ensure_type(tokens[\"center_x\"])\n    center_y = MacroExpressionToken.ensure_type(tokens[\"center_y\"])\n    outer_diameter = MacroExpressionToken.ensure_type(tokens[\"outer_diameter\"])\n    inner_diameter = MacroExpressionToken.ensure_type(tokens[\"inner_diameter\"])\n    gap = MacroExpressionToken.ensure_type(tokens[\"gap\"])\n    rotation = MacroExpressionToken.ensure_type(tokens[\"rotation\"])\n\n    return cls(\n        string,\n        location,\n        center_x=center_x,\n        center_y=center_y,\n        outer_diameter=outer_diameter,\n        inner_diameter=inner_diameter,\n        gap=gap,\n        rotation=rotation,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_code_7_thermal.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_7_thermal.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_code_7_thermal.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.code_7_thermal.Code7ThermalToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/code_7_thermal.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    string = self.symbol\n\n    string += f\",{self.center_x.get_gerber_code(indent, endline)}\"\n    string += f\",{self.center_y.get_gerber_code(indent, endline)}\"\n    string += f\",{self.outer_diameter.get_gerber_code(indent, endline)}\"\n    string += f\",{self.inner_diameter.get_gerber_code(indent, endline)}\"\n    string += f\",{self.gap.get_gerber_code(indent, endline)}\"\n    string += f\",{self.rotation.get_gerber_code(indent, endline)}\"\n\n    return indent + string\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html","title":"comment","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment","title":"comment","text":"<p>Comment token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment.MacroComment","title":"MacroComment","text":"<p>             Bases: <code>MacroStatementToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment.MacroComment--4512-comment-code-0","title":"4.5.1.2 Comment, Code 0.","text":"<p>The comment primitive has no effect on the image but adds human-readable comments in an AM command. The comment primitive starts with the '0' code followed by a space and then a single-line text string. The text string follows the syntax for strings in section 3.4.3.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment.MacroComment--example","title":"Example","text":"<pre><code>%AMBox*\n0 Rectangle with rounded corners, with rotation*\n0 The origin of the aperture is its center*\n0 $1 X-size*\n0 $2 Y-size*\n0 $3 Rounding radius*\n0 $4 Rotation angle, in degrees counterclockwise*\n0 Add two overlapping rectangle primitives as box body*\n21,1,$1, $2-$3-$3,0,0,$4\n21,1,$1-$3-$3,$2,0,0,$4*\n0 Add four circle primitives for the rounded corners*\n$5-$1/2*\n$6-$2/2*\n$7=2x$3*\n1,1, $7, $5-$3, $6-$3, $4*\n1,1, $7-$5+$3,$6-$3, $4*\n1,1, $7-$5+$3,-$6+$3, $4*\n1,1, $7, $5-$3,-$6+$3, $4*%\n</code></pre> <p>See section 4.5.1.2 of The Gerber Layer Format Specification Revision 2023.03</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.py</code> <pre><code>class MacroComment(MacroStatementToken):\n    \"\"\"## 4.5.1.2 Comment, Code 0.\n\n    The comment primitive has no effect on the image but adds human-readable comments\n    in an AM command. The comment primitive starts with the '0' code followed by a space\n    and then a single-line text string. The text string follows the syntax for strings\n    in section 3.4.3.\n\n    ---\n\n    ## Example\n\n    ```gerber\n    %AMBox*\n    0 Rectangle with rounded corners, with rotation*\n    0 The origin of the aperture is its center*\n    0 $1 X-size*\n    0 $2 Y-size*\n    0 $3 Rounding radius*\n    0 $4 Rotation angle, in degrees counterclockwise*\n    0 Add two overlapping rectangle primitives as box body*\n    21,1,$1, $2-$3-$3,0,0,$4\n    21,1,$1-$3-$3,$2,0,0,$4*\n    0 Add four circle primitives for the rounded corners*\n    $5-$1/2*\n    $6-$2/2*\n    $7=2x$3*\n    1,1, $7, $5-$3, $6-$3, $4*\n    1,1, $7-$5+$3,$6-$3, $4*\n    1,1, $7-$5+$3,-$6+$3, $4*\n    1,1, $7, $5-$3,-$6+$3, $4*%\n    ```\n\n    ---\n\n    See section 4.5.1.2 of [The Gerber Layer Format Specification Revision 2023.03](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-03_en.pdf#page=59)\n    \"\"\"\n\n    def __init__(self, string: str, location: int, content: str) -&gt; None:\n        super().__init__(string, location)\n        self.content = content\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        content: str = str(tokens[\"string\"])\n        return cls(string=string, location=location, content=content)\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}0 {self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment.MacroComment.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    content: str = str(tokens[\"string\"])\n    return cls(string=string, location=location, content=content)\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.comment.MacroComment.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/comment.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}0 {self.content}\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/primitive.html","title":"primitive","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/primitive.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.primitive","title":"primitive","text":"<p>Macro primitives tokens.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/primitive.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.primitive.MacroPrimitiveToken","title":"MacroPrimitiveToken","text":"<p>             Bases: <code>MacroStatementToken</code></p> <p>Wrapper for macro primitive token, common base class for specialized tokens.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/primitive.py</code> <pre><code>class MacroPrimitiveToken(MacroStatementToken):\n    \"\"\"Wrapper for macro primitive token, common base class for specialized tokens.\"\"\"\n\n    symbol: ClassVar[str] = \"X\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.html","title":"statement","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.statement","title":"statement","text":"<p>Macro statement token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.statement.MacroStatementToken","title":"MacroStatementToken","text":"<p>             Bases: <code>CommandToken</code></p> <p>Wrapper for in-macro expression.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.py</code> <pre><code>class MacroStatementToken(CommandToken):\n    \"\"\"Wrapper for in-macro expression.\"\"\"\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",  # noqa: ARG002\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return f\"{indent}0 {self.__class__.__qualname__} no formatting available\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.statement.MacroStatementToken.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/statement.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",  # noqa: ARG002\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return f\"{indent}0 {self.__class__.__qualname__} no formatting available\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html","title":"variable_assignment","text":""},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment","title":"variable_assignment","text":"<p>Macro variable definition token.</p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment","title":"MacroVariableAssignment","text":"<p>             Bases: <code>MacroStatementToken</code></p>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment--4543-definition-of-new-variable","title":"4.5.4.3 Definition of New Variable.","text":"<p>New variables can be defined by an assign statement as follows: <code>$4=$1x1.25-$3</code>. The right-hand side is any arithmetic expression as in the previous section.</p> <p>The variable values are determined as follows:</p> <ul> <li><code>$1</code>, <code>$2</code>, ..., <code>$n</code> take the values of the n parameters of the calling AD command.</li> <li>New variables get their value from their defining expression.</li> <li>The undefined variables are 0.</li> <li>Macro variables cannot be redefined.</li> </ul>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment--example-1","title":"Example #1","text":"<pre><code>%AMDONUTCAL*\n1,1,$1,$2,$3*\n$4=$1x1.25*\n1,0,$4,$2,$3*%\n</code></pre> <p>The AD command contains four parameters which define the first four macro variables:</p> <pre><code>$1 = 0.02\n$2 = 0\n$3 = 0\n$4 = 0.06\n</code></pre> <p>The variable <code>$5</code> is defined in the macro body and becomes</p> <pre><code>$5 = 0.06 x 0.25 = 0.015\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment--example-2","title":"Example #2","text":"<pre><code>%AMTEST1*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n$5=($2+100)x1.75*\n1,0,$4,$5,$3*%\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment--example-3","title":"Example #3","text":"<pre><code>%AMTEST2*\n$4=$1x0.75*\n$5=100+$3*\n1,1,$1,$2,$3*\n1,0,$4,$2,$5*\n$6=$4x0.5*\n1,0,$6,$2,$5*%\n</code></pre> <p>See section 4.5.4.3 of The Gerber Layer Format Specification</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.py</code> <pre><code>class MacroVariableAssignment(MacroStatementToken):\n    \"\"\"## 4.5.4.3 Definition of New Variable.\n\n    New variables can be defined by an assign statement as follows: `$4=$1x1.25-$3`. The\n    right-hand side is any arithmetic expression as in the previous section.\n\n    The variable values are determined as follows:\n\n    - `$1`, `$2`, ..., `$n` take the values of the n parameters of the calling AD command.\n    - New variables get their value from their defining expression.\n    - The undefined variables are 0.\n    - Macro variables cannot be redefined.\n\n    ---\n\n    ## Example #1\n\n    ```gerber\n    %AMDONUTCAL*\n    1,1,$1,$2,$3*\n    $4=$1x1.25*\n    1,0,$4,$2,$3*%\n    ```\n\n    The AD command contains four parameters which define the first four macro variables:\n\n    ```yaml\n    $1 = 0.02\n    $2 = 0\n    $3 = 0\n    $4 = 0.06\n    ```\n\n    The variable `$5` is defined in the macro body and becomes\n\n    ```yaml\n    $5 = 0.06 x 0.25 = 0.015\n    ```\n\n    ## Example #2\n\n    ```gerber\n    %AMTEST1*\n    1,1,$1,$2,$3*\n    $4=$1x0.75*\n    $5=($2+100)x1.75*\n    1,0,$4,$5,$3*%\n    ```\n\n    ## Example #3\n\n    ```\n    %AMTEST2*\n    $4=$1x0.75*\n    $5=100+$3*\n    1,1,$1,$2,$3*\n    1,0,$4,$2,$5*\n    $6=$4x0.5*\n    1,0,$6,$2,$5*%\n    ```\n\n    ---\n\n    See section 4.5.4.3 of [The Gerber Layer Format Specification](https://www.ucamco.com/files/downloads/file_en/456/gerber-layer-format-specification-revision-2023-08_en.pdf#page=71)\n\n    \"\"\"  # noqa: E501\n\n    def __init__(\n        self,\n        string: str,\n        location: int,\n        variable: MacroVariableName,\n        value: MacroExpressionToken,\n    ) -&gt; None:\n        super().__init__(string, location)\n        self.variable = variable\n        self.value = value\n\n    @classmethod\n    def new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n        \"\"\"Create instance of this class.\n\n        Created to be used as callback in `ParserElement.set_parse_action()`.\n        \"\"\"\n        variable = MacroVariableName.ensure_type(tokens[\"macro_variable_name\"])\n        value = MacroExpressionToken.ensure_type(tokens[\"value\"])\n        return cls(\n            string=string,\n            location=location,\n            variable=variable,\n            value=value,\n        )\n\n    def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n        \"\"\"Perform actions on the context implicated by this token.\"\"\"\n        context.get_hooks().macro_variable_assignment.pre_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_variable_assignment.on_parser_visit_token(\n            self,\n            context,\n        )\n        context.get_hooks().macro_variable_assignment.post_parser_visit_token(\n            self,\n            context,\n        )\n\n    def get_gerber_code(\n        self,\n        indent: str = \"\",\n        endline: str = \"\\n\",\n    ) -&gt; str:\n        \"\"\"Get gerber code represented by this token.\"\"\"\n        return (\n            f\"{indent}{self.variable.get_gerber_code(endline=endline)}=\"\n            f\"{self.value.get_gerber_code(endline=endline)}\"\n        )\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()}::[{self.variable} = {self.value}]\"\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    string: str, location: int, tokens: ParseResults\n) -&gt; Self\n</code></pre> <p>Create instance of this class.</p> <p>Created to be used as callback in <code>ParserElement.set_parse_action()</code>.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.py</code> <pre><code>@classmethod\ndef new(cls, string: str, location: int, tokens: ParseResults) -&gt; Self:\n    \"\"\"Create instance of this class.\n\n    Created to be used as callback in `ParserElement.set_parse_action()`.\n    \"\"\"\n    variable = MacroVariableName.ensure_type(tokens[\"macro_variable_name\"])\n    value = MacroExpressionToken.ensure_type(tokens[\"value\"])\n    return cls(\n        string=string,\n        location=location,\n        variable=variable,\n        value=value,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment.parser2_visit_token","title":"parser2_visit_token","text":"<pre><code>parser2_visit_token(context: Parser2Context) -&gt; None\n</code></pre> <p>Perform actions on the context implicated by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.py</code> <pre><code>def parser2_visit_token(self, context: Parser2Context) -&gt; None:\n    \"\"\"Perform actions on the context implicated by this token.\"\"\"\n    context.get_hooks().macro_variable_assignment.pre_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_variable_assignment.on_parser_visit_token(\n        self,\n        context,\n    )\n    context.get_hooks().macro_variable_assignment.post_parser_visit_token(\n        self,\n        context,\n    )\n</code></pre>"},{"location":"reference/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.html#pygerber.gerberx3.tokenizer.tokens.macro.statements.variable_assignment.MacroVariableAssignment.get_gerber_code","title":"get_gerber_code","text":"<pre><code>get_gerber_code(\n    indent: str = \"\", endline: str = \"\\n\"\n) -&gt; str\n</code></pre> <p>Get gerber code represented by this token.</p> Source code in <code>src/pygerber/gerberx3/tokenizer/tokens/macro/statements/variable_assignment.py</code> <pre><code>def get_gerber_code(\n    self,\n    indent: str = \"\",\n    endline: str = \"\\n\",\n) -&gt; str:\n    \"\"\"Get gerber code represented by this token.\"\"\"\n    return (\n        f\"{indent}{self.variable.get_gerber_code(endline=endline)}=\"\n        f\"{self.value.get_gerber_code(endline=endline)}\"\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm","title":"vm","text":"<p><code>vm</code> package contains all logic related to the virtual machines used for rendering images with use of simple generic stateless commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Builder","title":"Builder","text":"<p>RVMC builder class.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>class Builder:\n    \"\"\"RVMC builder class.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self._commands: list[Command] = []\n\n    @contextmanager\n    def layer(\n        self, box: Optional[Box] = None, origin: Optional[tuple[float, float]] = None\n    ) -&gt; Generator[LayerBuilder, None, None]:\n        \"\"\"Create a new layer.\"\"\"\n        layer = LayerBuilder(\n            layer_id=VirtualMachine.MAIN_LAYER_ID, box=box, origin=origin\n        )\n        yield layer\n        layer.finalize()\n        self._commands.extend(layer.commands)\n\n    @property\n    def commands(self) -&gt; RVMC:\n        \"\"\"Return commands.\"\"\"\n        return RVMC(commands=self._commands)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Builder.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: RVMC\n</code></pre> <p>Return commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Builder.layer","title":"layer","text":"<pre><code>layer(\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create a new layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>@contextmanager\ndef layer(\n    self, box: Optional[Box] = None, origin: Optional[tuple[float, float]] = None\n) -&gt; Generator[LayerBuilder, None, None]:\n    \"\"\"Create a new layer.\"\"\"\n    layer = LayerBuilder(\n        layer_id=VirtualMachine.MAIN_LAYER_ID, box=box, origin=origin\n    )\n    yield layer\n    layer.finalize()\n    self._commands.extend(layer.commands)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder","title":"LayerBuilder","text":"<p>Layer builder class.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>class LayerBuilder:\n    \"\"\"Layer builder class.\"\"\"\n\n    def __init__(\n        self,\n        layer_id: LayerID,\n        box: Optional[Box],\n        origin: Optional[tuple[float, float]],\n    ) -&gt; None:\n        self._layer_id = layer_id\n        self._box = box\n        self._origin = origin or Vector(x=0, y=0)\n        self._active_layer_id: Optional[LayerID] = None\n        self._finalized = False\n\n        self._commands: list[Command] = [\n            StartLayer(\n                id=self._layer_id,\n                box=box,\n                origin=(\n                    Vector(x=0, y=0)\n                    if origin is None\n                    else Vector(x=origin[0], y=origin[1])\n                ),\n            )\n        ]\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize the layer.\"\"\"\n        self._commands.append(EndLayer())\n        self._finalized = True\n\n    @contextmanager\n    def layer(\n        self,\n        id_: str,\n        box: Optional[Box] = None,\n        origin: Optional[tuple[float, float]] = None,\n    ) -&gt; Generator[LayerBuilder, None, None]:\n        \"\"\"Create a new layer.\"\"\"\n        if self._active_layer_id is not None:\n            msg = \"Use _LayerContext to create a nested layer.\"\n            raise RuntimeError(msg)\n\n        if self._finalized:\n            msg = \"Cannot create a new layer from finalized layer.\"\n            raise RuntimeError(msg)\n\n        self._active_layer_id = LayerID(id=id_)\n        layer_context = LayerBuilder(\n            layer_id=self._active_layer_id, box=box, origin=origin\n        )\n        yield layer_context\n\n        layer_context.finalize()\n        self._commands.extend(layer_context.commands)\n        self._active_layer_id = None\n\n    @property\n    def commands(self) -&gt; Sequence[Command]:\n        \"\"\"Return commands.\"\"\"\n        return self._commands\n\n    def circle(\n        self, center: tuple[float, float], diameter: float, *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_circle(center=center, diameter=diameter, is_negative=is_negative)\n        )\n\n    def _check_not_finalized_in_add(self) -&gt; None:\n        if self._finalized:\n            msg = \"Cannot add shapes to finalized layer.\"\n            raise RuntimeError(msg)\n\n    def rectangle(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=width, height=height, is_negative=is_negative\n            )\n        )\n\n    def obround(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_obround(\n                center=center, width=width, height=height, is_negative=is_negative\n            )\n        )\n\n    def polygon(\n        self,\n        center: tuple[float, float],\n        outer_diameter: float,\n        vertices_count: int,\n        base_rotation: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add Shape object containing a regular polygon inscribed in bounding_circle\n        of diameter `outer_diameter`, with vertices count equal to `vertices_count`,\n        and starting rotation (counterclockwise) of `base_rotation` degrees.\n\n        Parameters\n        ----------\n        center : tuple[float, float]\n            Center of the polygon. A tuple of two floats.\n        outer_diameter : float\n            Diameter of the circle circumscribing the regular polygon, i.e.\n            the circle through the polygon vertices. A decimal &gt; 0.\n        vertices_count : int\n            Number of vertices n, 3 \u2264 n \u2264 12. An integer.\n        base_rotation : float\n            The rotation angle, in degrees counterclockwise. A decimal.\n            With rotation angle zero there is a vertex on the positive X-axis\n            through the aperture center.\n        is_negative : bool\n            Toggle switch for the negative polarity. If True, the aperture is\n            considered solid, otherwise a hole, possibly subtracting from existing\n            solid shapes.\n\n        \"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_polygon(\n                center=center,\n                outer_diameter=outer_diameter,\n                vertices_count=vertices_count,\n                base_rotation=base_rotation,\n                is_negative=is_negative,\n            )\n        )\n\n    def line(\n        self,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_line(\n                start=start, end=end, thickness=thickness, is_negative=is_negative\n            )\n        )\n\n    def cross(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add cross shape to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=width, height=thickness, is_negative=is_negative\n            )\n        )\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=thickness, height=height, is_negative=is_negative\n            )\n        )\n\n    def x(\n        self,\n        center: tuple[float, float],\n        length: float,\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add cross shape to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        half_length = length / 2\n        self._commands.append(\n            Shape.new_line(\n                start=(center[0] + half_length, center[1] + half_length),\n                end=(center[0] - half_length, center[1] - half_length),\n                thickness=thickness,\n                is_negative=is_negative,\n            )\n        )\n        self._commands.append(\n            Shape.new_line(\n                start=(center[0] - half_length, center[1] + half_length),\n                end=(center[0] + half_length, center[1] - half_length),\n                thickness=thickness,\n                is_negative=is_negative,\n            )\n        )\n\n    def paste(\n        self, layer: LayerBuilder, at: tuple[float, float], *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Paste another layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            PasteLayer(\n                source_layer_id=layer._layer_id,  # noqa: SLF001\n                center=Vector.from_tuple(at),\n                is_negative=is_negative,\n            )\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: Sequence[Command]\n</code></pre> <p>Return commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize the layer.\"\"\"\n    self._commands.append(EndLayer())\n    self._finalized = True\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.layer","title":"layer","text":"<pre><code>layer(\n    id_: str,\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create a new layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>@contextmanager\ndef layer(\n    self,\n    id_: str,\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]:\n    \"\"\"Create a new layer.\"\"\"\n    if self._active_layer_id is not None:\n        msg = \"Use _LayerContext to create a nested layer.\"\n        raise RuntimeError(msg)\n\n    if self._finalized:\n        msg = \"Cannot create a new layer from finalized layer.\"\n        raise RuntimeError(msg)\n\n    self._active_layer_id = LayerID(id=id_)\n    layer_context = LayerBuilder(\n        layer_id=self._active_layer_id, box=box, origin=origin\n    )\n    yield layer_context\n\n    layer_context.finalize()\n    self._commands.extend(layer_context.commands)\n    self._active_layer_id = None\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.circle","title":"circle","text":"<pre><code>circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def circle(\n    self, center: tuple[float, float], diameter: float, *, is_negative: bool\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_circle(center=center, diameter=diameter, is_negative=is_negative)\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def rectangle(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=width, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.obround","title":"obround","text":"<pre><code>obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def obround(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_obround(\n            center=center, width=width, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.polygon","title":"polygon","text":"<pre><code>polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add Shape object containing a regular polygon inscribed in bounding_circle of diameter <code>outer_diameter</code>, with vertices count equal to <code>vertices_count</code>, and starting rotation (counterclockwise) of <code>base_rotation</code> degrees.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple[float, float]</code> <p>Center of the polygon. A tuple of two floats.</p> required <code>outer_diameter</code> <code>float</code> <p>Diameter of the circle circumscribing the regular polygon, i.e. the circle through the polygon vertices. A decimal &gt; 0.</p> required <code>vertices_count</code> <code>int</code> <p>Number of vertices n, 3 \u2264 n \u2264 12. An integer.</p> required <code>base_rotation</code> <code>float</code> <p>The rotation angle, in degrees counterclockwise. A decimal. With rotation angle zero there is a vertex on the positive X-axis through the aperture center.</p> required <code>is_negative</code> <code>bool</code> <p>Toggle switch for the negative polarity. If True, the aperture is considered solid, otherwise a hole, possibly subtracting from existing solid shapes.</p> required Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def polygon(\n    self,\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add Shape object containing a regular polygon inscribed in bounding_circle\n    of diameter `outer_diameter`, with vertices count equal to `vertices_count`,\n    and starting rotation (counterclockwise) of `base_rotation` degrees.\n\n    Parameters\n    ----------\n    center : tuple[float, float]\n        Center of the polygon. A tuple of two floats.\n    outer_diameter : float\n        Diameter of the circle circumscribing the regular polygon, i.e.\n        the circle through the polygon vertices. A decimal &gt; 0.\n    vertices_count : int\n        Number of vertices n, 3 \u2264 n \u2264 12. An integer.\n    base_rotation : float\n        The rotation angle, in degrees counterclockwise. A decimal.\n        With rotation angle zero there is a vertex on the positive X-axis\n        through the aperture center.\n    is_negative : bool\n        Toggle switch for the negative polarity. If True, the aperture is\n        considered solid, otherwise a hole, possibly subtracting from existing\n        solid shapes.\n\n    \"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_polygon(\n            center=center,\n            outer_diameter=outer_diameter,\n            vertices_count=vertices_count,\n            base_rotation=base_rotation,\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.line","title":"line","text":"<pre><code>line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def line(\n    self,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_line(\n            start=start, end=end, thickness=thickness, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.cross","title":"cross","text":"<pre><code>cross(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def cross(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add cross shape to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=width, height=thickness, is_negative=is_negative\n        )\n    )\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=thickness, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.x","title":"x","text":"<pre><code>x(\n    center: tuple[float, float],\n    length: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def x(\n    self,\n    center: tuple[float, float],\n    length: float,\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add cross shape to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    half_length = length / 2\n    self._commands.append(\n        Shape.new_line(\n            start=(center[0] + half_length, center[1] + half_length),\n            end=(center[0] - half_length, center[1] - half_length),\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n    )\n    self._commands.append(\n        Shape.new_line(\n            start=(center[0] - half_length, center[1] + half_length),\n            end=(center[0] + half_length, center[1] - half_length),\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.LayerBuilder.paste","title":"paste","text":"<pre><code>paste(\n    layer: LayerBuilder,\n    at: tuple[float, float],\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Paste another layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def paste(\n    self, layer: LayerBuilder, at: tuple[float, float], *, is_negative: bool\n) -&gt; None:\n    \"\"\"Paste another layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        PasteLayer(\n            source_layer_id=layer._layer_id,  # noqa: SLF001\n            center=Vector.from_tuple(at),\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor","title":"CommandVisitor","text":"<p>Interface of a command visitor.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>class CommandVisitor:\n    \"\"\"Interface of a command visitor.\"\"\"\n\n    def on_shape(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n\n    def on_start_layer(self, command: StartLayer) -&gt; None:\n        \"\"\"Visit `StartLayer` command.\"\"\"\n\n    def on_end_layer(self, command: EndLayer) -&gt; None:\n        \"\"\"Visit `EndLayer` command.\"\"\"\n\n    def on_paste_layer(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_shape(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_start_layer(self, command: StartLayer) -&gt; None:\n    \"\"\"Visit `StartLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_end_layer(self, command: EndLayer) -&gt; None:\n    \"\"\"Visit `EndLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_paste_layer(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.RVMC","title":"RVMC","text":"<p>             Bases: <code>BaseModel</code></p> <p>Container class for PyGerber Rendering Virtual Machine Commands (RVMC).</p> Source code in <code>src/pygerber/vm/rvmc.py</code> <pre><code>class RVMC(BaseModel):\n    \"\"\"Container class for PyGerber Rendering Virtual Machine Commands (RVMC).\"\"\"\n\n    commands: Sequence[Command] = Field(default_factory=list)\n\n    def to_json(self, **kwargs: Any) -&gt; str:\n        \"\"\"Convert RVMC to JSON.\"\"\"\n        return self.model_dump_json(serialize_as_any=True, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.RVMC.to_json","title":"to_json","text":"<pre><code>to_json(**kwargs: Any) -&gt; str\n</code></pre> <p>Convert RVMC to JSON.</p> Source code in <code>src/pygerber/vm/rvmc.py</code> <pre><code>def to_json(self, **kwargs: Any) -&gt; str:\n    \"\"\"Convert RVMC to JSON.\"\"\"\n    return self.model_dump_json(serialize_as_any=True, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.DeferredLayer","title":"DeferredLayer","text":"<p>             Bases: <code>Layer</code></p> <p><code>DeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>Commands executed on this layer are deferred until the layer is finished and size of layer can be determined.</p> <p>You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class DeferredLayer(Layer):\n    \"\"\"`DeferredLayer` class represents drawing space of size unknown at time of\n    creation of layer.\n\n    Commands executed on this layer are deferred until the layer is finished and\n    size of layer can be determined.\n\n    You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.\n    \"\"\"\n\n    def __init__(\n        self, layer_id: LayerID, origin: Vector, commands: list[DrawCmdT]\n    ) -&gt; None:\n        super().__init__(layer_id, origin)\n        self.commands = commands\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.EagerLayer","title":"EagerLayer","text":"<p>             Bases: <code>Layer</code></p> <p><code>EagerLayer</code> class represents drawing space of known fixed size.</p> <p>Commands executed on this layer are executed immediately.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class EagerLayer(Layer):\n    \"\"\"`EagerLayer` class represents drawing space of known fixed size.\n\n    Commands executed on this layer are executed immediately.\n    \"\"\"\n\n    def __init__(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; None:\n        super().__init__(layer_id, origin)\n        self.box = box\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Layer","title":"Layer","text":"<p><code>Layer</code> class represents drawing space in virtual machine.</p> <p>This class has two direct subclasses: <code>EagerLayer</code> and <code>DeferredLayer</code>. It is necessary to distinguish between them because we need to support creation of layer with known size and creation of layer with size unknown at creation time. <code>EagerLayer</code> is used for the former and <code>DeferredLayer</code> for the latter.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class Layer:\n    \"\"\"`Layer` class represents drawing space in virtual machine.\n\n    This class has two direct subclasses: `EagerLayer` and `DeferredLayer`.\n    It is necessary to distinguish between them because we need to support\n    creation of layer with known size and creation of layer with size unknown at\n    creation time. `EagerLayer` is used for the former and `DeferredLayer` for the\n    latter.\n    \"\"\"\n\n    origin: Vector\n    \"\"\"Origin of the layer.\n\n    Origin point represents local coordinates of the layer center.\n    \"\"\"\n\n    def __init__(self, layer_id: LayerID, origin: Vector) -&gt; None:\n        self.layer_id = layer_id\n        self.origin = origin\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Layer.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: Vector = origin\n</code></pre> <p>Origin of the layer.</p> <p>Origin point represents local coordinates of the layer center.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Result","title":"Result","text":"<p>Result of drawing.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class Result:\n    \"\"\"Result of drawing.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine","title":"VirtualMachine","text":"<p>             Bases: <code>CommandVisitor</code></p> <p>Virtual machine for executing simple drawing commands.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class VirtualMachine(CommandVisitor):\n    \"\"\"Virtual machine for executing simple drawing commands.\"\"\"\n\n    MAIN_LAYER_ID: ClassVar[LayerID] = LayerID(id=\"%main%\")\n\n    def __init__(self) -&gt; None:\n        self.set_eager_handlers()\n\n        self._layers: dict[LayerID, Layer] = {}\n        self._layer_stack: list[Layer] = []\n\n    def set_handlers_for_layer(self, layer: Layer) -&gt; None:\n        \"\"\"Set handlers for given layer.\"\"\"\n        if isinstance(layer, EagerLayer):\n            self.set_eager_handlers()\n\n        elif isinstance(layer, DeferredLayer):\n            self.set_deferred_handlers()\n\n        else:\n            raise NotImplementedError(type(layer))\n\n    def set_eager_handlers(self) -&gt; None:\n        \"\"\"Set handlers for eager mode.\"\"\"\n        self._on_shape_handler = self.on_shape_eager\n        self._on_paste_layer_handler = self.on_paste_layer_eager\n\n    def set_deferred_handlers(self) -&gt; None:\n        \"\"\"Set handlers for deferred mode.\"\"\"\n        self._on_shape_handler = self.on_shape_deferred\n        self._on_paste_layer_handler = self.on_paste_layer_deferred\n\n    def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n        \"\"\"Create new eager layer instances (factory method).\"\"\"\n        return EagerLayer(layer_id, box, origin)\n\n    def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n        \"\"\"Create new deferred layer instances (factory method).\"\"\"\n        return DeferredLayer(layer_id, origin, commands=[])\n\n    def on_shape(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n        self._on_shape_handler(command)\n\n    def on_shape_eager(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n\n    def on_shape_deferred(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n        layer = self.layer\n        assert isinstance(layer, DeferredLayer)\n        layer.commands.append(command)\n\n    def on_paste_layer(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n        self._on_paste_layer_handler(command)\n\n    def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\n\n        This method is used when currently selected layer is a eager layer.\n        \"\"\"\n\n    def on_paste_layer_deferred(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\n\n        This method is used when currently selected layer is a deferred layer.\n        \"\"\"\n        layer = self.layer\n        assert isinstance(layer, DeferredLayer)\n        layer.commands.append(command)\n\n    def on_start_layer(self, command: StartLayer) -&gt; None:\n        \"\"\"Visit `StartLayer` command.\"\"\"\n        if command.id in self._layers:\n            raise LayerAlreadyExistsError(command.id)\n\n        if command.box is None:\n            layer = self.create_deferred_layer(command.id, command.origin)\n            self.set_layer(command.id, layer)\n            self.set_deferred_handlers()\n\n        else:\n            layer = self.create_eager_layer(command.id, command.box, command.origin)\n            self.set_layer(command.id, layer)\n            self.set_eager_handlers()\n\n        self.push_layer_to_stack(layer)\n\n    def set_layer(self, layer_id: LayerID, layer: Layer) -&gt; None:\n        \"\"\"Assign layer object to particular ID in layer index.\n\n        Overwriting existing layer is not allowed.\n        \"\"\"\n        self._layers[layer_id] = layer\n\n    def get_layer(self, layer_id: LayerID) -&gt; Layer:\n        \"\"\"Get layer by ID.\"\"\"\n        if layer_id not in self._layers:\n            raise LayerNotFoundError(layer_id)\n\n        return self._layers[layer_id]\n\n    @property\n    def layer(self) -&gt; Layer:\n        \"\"\"Get current layer.\"\"\"\n        if len(self._layer_stack) == 0:\n            raise NoLayerSetError\n\n        return self._layer_stack[-1]\n\n    def is_layer_stack_empty(self) -&gt; bool:\n        \"\"\"Check if layer stack is empty.\"\"\"\n        return len(self._layer_stack) == 0\n\n    def push_layer_to_stack(self, layer: Layer) -&gt; None:\n        \"\"\"Push layer to layer stack.\"\"\"\n        self._layer_stack.append(layer)\n\n    def pop_layer_from_stack(self) -&gt; Layer:\n        \"\"\"Pop layer from layer stack.\"\"\"\n        assert len(self._layer_stack) &gt; 0\n        return self._layer_stack.pop()\n\n    def on_end_layer(self, command: EndLayer) -&gt; None:\n        \"\"\"Visit `EndLayer` command.\"\"\"\n        if len(self._layer_stack) &lt;= 0:\n            raise NoLayerSetError\n\n        assert isinstance(command, EndLayer)\n\n        top_layer = self.pop_layer_from_stack()\n\n        if isinstance(top_layer, EagerLayer):\n            pass\n\n        elif isinstance(top_layer, DeferredLayer):\n            box = self._calculate_deferred_layer_box(top_layer)\n            if box is None:\n                # Empty layers are not retained.\n                raise EmptyAutoSizedLayerNotAllowedError(top_layer.layer_id)\n\n            new_layer = self.create_eager_layer(\n                top_layer.layer_id, box, top_layer.origin\n            )\n            self.set_layer(top_layer.layer_id, new_layer)\n\n            self.push_layer_to_stack(new_layer)\n            self.set_eager_handlers()\n            self._eval_deferred_commands(top_layer.commands)\n            self.pop_layer_from_stack()\n\n        else:\n            raise NotImplementedError(type(top_layer))\n\n        if self.is_layer_stack_empty():\n            self.set_eager_handlers()\n            return\n\n        # We need to set correct handler for next layer in case current layer creation\n        # interrupted process of creating another eager/deferred layer.\n        self.set_handlers_for_layer(self.layer)\n\n    def _calculate_deferred_layer_box(\n        self, deferred_layer: DeferredLayer\n    ) -&gt; Optional[Box]:\n        commands = deferred_layer.commands\n        box: Optional[Box] = None\n\n        if len(commands) == 0:\n            return None\n\n        cmd = commands[0]\n\n        if isinstance(cmd, Shape):\n            box = cmd.outer_box\n\n        elif isinstance(cmd, PasteLayer):\n            layer = self._layers[cmd.source_layer_id]\n            assert isinstance(layer, EagerLayer)\n            box = layer.box + cmd.center - layer.origin\n\n        else:\n            raise NotImplementedError(type(cmd))\n\n        for cmd in commands[1:]:\n            if isinstance(cmd, Shape):\n                box = box + cmd.outer_box\n\n            elif isinstance(cmd, PasteLayer):\n                layer = self._layers[cmd.source_layer_id]\n                assert isinstance(layer, EagerLayer)\n                box = box + (layer.box + cmd.center - layer.origin)\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return box\n\n    def _eval_deferred_commands(self, commands: list[DrawCmdT]) -&gt; None:\n        for cmd in commands:\n            cmd.visit(self)\n\n    def run(self, rvmc: RVMC) -&gt; Result:\n        \"\"\"Execute all commands.\"\"\"\n        for command in rvmc.commands:\n            command.visit(self)\n\n        return Result()\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_handlers_for_layer","title":"set_handlers_for_layer","text":"<pre><code>set_handlers_for_layer(layer: Layer) -&gt; None\n</code></pre> <p>Set handlers for given layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_handlers_for_layer(self, layer: Layer) -&gt; None:\n    \"\"\"Set handlers for given layer.\"\"\"\n    if isinstance(layer, EagerLayer):\n        self.set_eager_handlers()\n\n    elif isinstance(layer, DeferredLayer):\n        self.set_deferred_handlers()\n\n    else:\n        raise NotImplementedError(type(layer))\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_eager_handlers","title":"set_eager_handlers","text":"<pre><code>set_eager_handlers() -&gt; None\n</code></pre> <p>Set handlers for eager mode.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_eager_handlers(self) -&gt; None:\n    \"\"\"Set handlers for eager mode.\"\"\"\n    self._on_shape_handler = self.on_shape_eager\n    self._on_paste_layer_handler = self.on_paste_layer_eager\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_deferred_handlers","title":"set_deferred_handlers","text":"<pre><code>set_deferred_handlers() -&gt; None\n</code></pre> <p>Set handlers for deferred mode.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_deferred_handlers(self) -&gt; None:\n    \"\"\"Set handlers for deferred mode.\"\"\"\n    self._on_shape_handler = self.on_shape_deferred\n    self._on_paste_layer_handler = self.on_paste_layer_deferred\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, box: Box, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n    \"\"\"Create new eager layer instances (factory method).\"\"\"\n    return EagerLayer(layer_id, box, origin)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n    \"\"\"Create new deferred layer instances (factory method).\"\"\"\n    return DeferredLayer(layer_id, origin, commands=[])\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n    self._on_shape_handler(command)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape_eager(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape_deferred","title":"on_shape_deferred","text":"<pre><code>on_shape_deferred(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape_deferred(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n    layer = self.layer\n    assert isinstance(layer, DeferredLayer)\n    layer.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n    self._on_paste_layer_handler(command)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a eager layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\n\n    This method is used when currently selected layer is a eager layer.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer_deferred","title":"on_paste_layer_deferred","text":"<pre><code>on_paste_layer_deferred(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a deferred layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer_deferred(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\n\n    This method is used when currently selected layer is a deferred layer.\n    \"\"\"\n    layer = self.layer\n    assert isinstance(layer, DeferredLayer)\n    layer.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_start_layer(self, command: StartLayer) -&gt; None:\n    \"\"\"Visit `StartLayer` command.\"\"\"\n    if command.id in self._layers:\n        raise LayerAlreadyExistsError(command.id)\n\n    if command.box is None:\n        layer = self.create_deferred_layer(command.id, command.origin)\n        self.set_layer(command.id, layer)\n        self.set_deferred_handlers()\n\n    else:\n        layer = self.create_eager_layer(command.id, command.box, command.origin)\n        self.set_layer(command.id, layer)\n        self.set_eager_handlers()\n\n    self.push_layer_to_stack(layer)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer_id: LayerID, layer: Layer) -&gt; None\n</code></pre> <p>Assign layer object to particular ID in layer index.</p> <p>Overwriting existing layer is not allowed.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_layer(self, layer_id: LayerID, layer: Layer) -&gt; None:\n    \"\"\"Assign layer object to particular ID in layer index.\n\n    Overwriting existing layer is not allowed.\n    \"\"\"\n    self._layers[layer_id] = layer\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.get_layer","title":"get_layer","text":"<pre><code>get_layer(layer_id: LayerID) -&gt; Layer\n</code></pre> <p>Get layer by ID.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def get_layer(self, layer_id: LayerID) -&gt; Layer:\n    \"\"\"Get layer by ID.\"\"\"\n    if layer_id not in self._layers:\n        raise LayerNotFoundError(layer_id)\n\n    return self._layers[layer_id]\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.is_layer_stack_empty","title":"is_layer_stack_empty","text":"<pre><code>is_layer_stack_empty() -&gt; bool\n</code></pre> <p>Check if layer stack is empty.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def is_layer_stack_empty(self) -&gt; bool:\n    \"\"\"Check if layer stack is empty.\"\"\"\n    return len(self._layer_stack) == 0\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.push_layer_to_stack","title":"push_layer_to_stack","text":"<pre><code>push_layer_to_stack(layer: Layer) -&gt; None\n</code></pre> <p>Push layer to layer stack.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def push_layer_to_stack(self, layer: Layer) -&gt; None:\n    \"\"\"Push layer to layer stack.\"\"\"\n    self._layer_stack.append(layer)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.pop_layer_from_stack","title":"pop_layer_from_stack","text":"<pre><code>pop_layer_from_stack() -&gt; Layer\n</code></pre> <p>Pop layer from layer stack.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def pop_layer_from_stack(self) -&gt; Layer:\n    \"\"\"Pop layer from layer stack.\"\"\"\n    assert len(self._layer_stack) &gt; 0\n    return self._layer_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_end_layer(self, command: EndLayer) -&gt; None:\n    \"\"\"Visit `EndLayer` command.\"\"\"\n    if len(self._layer_stack) &lt;= 0:\n        raise NoLayerSetError\n\n    assert isinstance(command, EndLayer)\n\n    top_layer = self.pop_layer_from_stack()\n\n    if isinstance(top_layer, EagerLayer):\n        pass\n\n    elif isinstance(top_layer, DeferredLayer):\n        box = self._calculate_deferred_layer_box(top_layer)\n        if box is None:\n            # Empty layers are not retained.\n            raise EmptyAutoSizedLayerNotAllowedError(top_layer.layer_id)\n\n        new_layer = self.create_eager_layer(\n            top_layer.layer_id, box, top_layer.origin\n        )\n        self.set_layer(top_layer.layer_id, new_layer)\n\n        self.push_layer_to_stack(new_layer)\n        self.set_eager_handlers()\n        self._eval_deferred_commands(top_layer.commands)\n        self.pop_layer_from_stack()\n\n    else:\n        raise NotImplementedError(type(top_layer))\n\n    if self.is_layer_stack_empty():\n        self.set_eager_handlers()\n        return\n\n    # We need to set correct handler for next layer in case current layer creation\n    # interrupted process of creating another eager/deferred layer.\n    self.set_handlers_for_layer(self.layer)\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; Result\n</code></pre> <p>Execute all commands.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def run(self, rvmc: RVMC) -&gt; Result:\n    \"\"\"Execute all commands.\"\"\"\n    for command in rvmc.commands:\n        command.visit(self)\n\n    return Result()\n</code></pre>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.render","title":"render","text":"<pre><code>render(\n    rvmc: RVMC,\n    *,\n    backend: Literal[\"pillow\"] = \"pillow\",\n    **options: Any\n) -&gt; Result\n</code></pre> <p>Render RVMC code using given builder.</p> Source code in <code>src/pygerber/vm/__init__.py</code> <pre><code>def render(\n    rvmc: RVMC, *, backend: Literal[\"pillow\"] = \"pillow\", **options: Any\n) -&gt; Result:\n    \"\"\"Render RVMC code using given builder.\"\"\"\n    if backend == \"pillow\":\n        from pygerber.vm.pillow import PillowVirtualMachine\n\n        return PillowVirtualMachine(**options).run(rvmc)\n\n    msg = f\"Backend '{backend}' is not supported.\"  # type: ignore[unreachable]\n    raise NotImplementedError(msg)\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html","title":"builder","text":""},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder","title":"builder","text":"<p>The <code>pygerber.vm.builder</code> module provides classes for programmatic generation of complicated RVMC.</p> <p>As opposed to manual construction of RVMC by individually constructing Command objects, builder interface is considered <code>stable</code>, hence it is guaranteed to not be modified across patch and minor releases without previous deprecation warning.</p> <p>To start building RVMC, create an instance of <code>Builder</code> class. The <code>Builder</code> class provides a method <code>layer</code> which should be called and used as context manager. This method will create main layer of RVMC. You can used methods on the <code>LayerBuilder</code> instance returned by context manager to add shapes to the layer.</p> <pre><code>builder = Builder()\n\nwith builder.layer() as layer:\n    layer.circle((0, 0), 1, is_negative=False)\n\nrvmc = builder.commands\n</code></pre> <p>To create a nested layer, use the <code>layer</code> method on the <code>LayerBuilder</code> instance. Then you can proceed to add shapes to the nested layer by invoking commands on nested layer instance. Nested layer created this way can be pasted into parent layer using <code>paste</code> method. The <code>paste</code> method takes the nested layer instance this explicitly disallows creation of cyclic dependencies in layers, as they will result in exception during rendering.</p> <pre><code>builder = Builder()\n\nwith builder.layer() as layer:\n    with layer.layer(\"D10\") as nested_layer:\n        nested_layer.circle((0, 0), 1, is_negative=False)\n\n    layer.paste(nested_layer, at=(0, 0), is_negative=False)\n\nrvmc = builder.commands\n</code></pre> <p>Multiple nesting is allowed, layers defined and finalized previously can be used in any nested layers in the future. Layers and shapes are auto-magically recorded after corresponding method is called.</p> <p>Adding shapes to finalized layer is not allowed and will result in exception. Layers are automatically finalized after exiting the context manager corresponding to particular layer. Before context manager is exited, eg. in nested layers, the layers can not be used.</p> <p>Using parent layer in child layer will result in cyclic dependency and will raise exception during rendering. There is currently no mechanism preventing you from doing that during generation.</p>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder","title":"LayerBuilder","text":"<p>Layer builder class.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>class LayerBuilder:\n    \"\"\"Layer builder class.\"\"\"\n\n    def __init__(\n        self,\n        layer_id: LayerID,\n        box: Optional[Box],\n        origin: Optional[tuple[float, float]],\n    ) -&gt; None:\n        self._layer_id = layer_id\n        self._box = box\n        self._origin = origin or Vector(x=0, y=0)\n        self._active_layer_id: Optional[LayerID] = None\n        self._finalized = False\n\n        self._commands: list[Command] = [\n            StartLayer(\n                id=self._layer_id,\n                box=box,\n                origin=(\n                    Vector(x=0, y=0)\n                    if origin is None\n                    else Vector(x=origin[0], y=origin[1])\n                ),\n            )\n        ]\n\n    def finalize(self) -&gt; None:\n        \"\"\"Finalize the layer.\"\"\"\n        self._commands.append(EndLayer())\n        self._finalized = True\n\n    @contextmanager\n    def layer(\n        self,\n        id_: str,\n        box: Optional[Box] = None,\n        origin: Optional[tuple[float, float]] = None,\n    ) -&gt; Generator[LayerBuilder, None, None]:\n        \"\"\"Create a new layer.\"\"\"\n        if self._active_layer_id is not None:\n            msg = \"Use _LayerContext to create a nested layer.\"\n            raise RuntimeError(msg)\n\n        if self._finalized:\n            msg = \"Cannot create a new layer from finalized layer.\"\n            raise RuntimeError(msg)\n\n        self._active_layer_id = LayerID(id=id_)\n        layer_context = LayerBuilder(\n            layer_id=self._active_layer_id, box=box, origin=origin\n        )\n        yield layer_context\n\n        layer_context.finalize()\n        self._commands.extend(layer_context.commands)\n        self._active_layer_id = None\n\n    @property\n    def commands(self) -&gt; Sequence[Command]:\n        \"\"\"Return commands.\"\"\"\n        return self._commands\n\n    def circle(\n        self, center: tuple[float, float], diameter: float, *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_circle(center=center, diameter=diameter, is_negative=is_negative)\n        )\n\n    def _check_not_finalized_in_add(self) -&gt; None:\n        if self._finalized:\n            msg = \"Cannot add shapes to finalized layer.\"\n            raise RuntimeError(msg)\n\n    def rectangle(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=width, height=height, is_negative=is_negative\n            )\n        )\n\n    def obround(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_obround(\n                center=center, width=width, height=height, is_negative=is_negative\n            )\n        )\n\n    def polygon(\n        self,\n        center: tuple[float, float],\n        outer_diameter: float,\n        vertices_count: int,\n        base_rotation: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add Shape object containing a regular polygon inscribed in bounding_circle\n        of diameter `outer_diameter`, with vertices count equal to `vertices_count`,\n        and starting rotation (counterclockwise) of `base_rotation` degrees.\n\n        Parameters\n        ----------\n        center : tuple[float, float]\n            Center of the polygon. A tuple of two floats.\n        outer_diameter : float\n            Diameter of the circle circumscribing the regular polygon, i.e.\n            the circle through the polygon vertices. A decimal &gt; 0.\n        vertices_count : int\n            Number of vertices n, 3 \u2264 n \u2264 12. An integer.\n        base_rotation : float\n            The rotation angle, in degrees counterclockwise. A decimal.\n            With rotation angle zero there is a vertex on the positive X-axis\n            through the aperture center.\n        is_negative : bool\n            Toggle switch for the negative polarity. If True, the aperture is\n            considered solid, otherwise a hole, possibly subtracting from existing\n            solid shapes.\n\n        \"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_polygon(\n                center=center,\n                outer_diameter=outer_diameter,\n                vertices_count=vertices_count,\n                base_rotation=base_rotation,\n                is_negative=is_negative,\n            )\n        )\n\n    def line(\n        self,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add a command to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_line(\n                start=start, end=end, thickness=thickness, is_negative=is_negative\n            )\n        )\n\n    def cross(\n        self,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add cross shape to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=width, height=thickness, is_negative=is_negative\n            )\n        )\n        self._commands.append(\n            Shape.new_rectangle(\n                center=center, width=thickness, height=height, is_negative=is_negative\n            )\n        )\n\n    def x(\n        self,\n        center: tuple[float, float],\n        length: float,\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; None:\n        \"\"\"Add cross shape to the layer.\"\"\"\n        self._check_not_finalized_in_add()\n        half_length = length / 2\n        self._commands.append(\n            Shape.new_line(\n                start=(center[0] + half_length, center[1] + half_length),\n                end=(center[0] - half_length, center[1] - half_length),\n                thickness=thickness,\n                is_negative=is_negative,\n            )\n        )\n        self._commands.append(\n            Shape.new_line(\n                start=(center[0] - half_length, center[1] + half_length),\n                end=(center[0] + half_length, center[1] - half_length),\n                thickness=thickness,\n                is_negative=is_negative,\n            )\n        )\n\n    def paste(\n        self, layer: LayerBuilder, at: tuple[float, float], *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Paste another layer.\"\"\"\n        self._check_not_finalized_in_add()\n        self._commands.append(\n            PasteLayer(\n                source_layer_id=layer._layer_id,  # noqa: SLF001\n                center=Vector.from_tuple(at),\n                is_negative=is_negative,\n            )\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: Sequence[Command]\n</code></pre> <p>Return commands.</p>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def finalize(self) -&gt; None:\n    \"\"\"Finalize the layer.\"\"\"\n    self._commands.append(EndLayer())\n    self._finalized = True\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.layer","title":"layer","text":"<pre><code>layer(\n    id_: str,\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create a new layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>@contextmanager\ndef layer(\n    self,\n    id_: str,\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]:\n    \"\"\"Create a new layer.\"\"\"\n    if self._active_layer_id is not None:\n        msg = \"Use _LayerContext to create a nested layer.\"\n        raise RuntimeError(msg)\n\n    if self._finalized:\n        msg = \"Cannot create a new layer from finalized layer.\"\n        raise RuntimeError(msg)\n\n    self._active_layer_id = LayerID(id=id_)\n    layer_context = LayerBuilder(\n        layer_id=self._active_layer_id, box=box, origin=origin\n    )\n    yield layer_context\n\n    layer_context.finalize()\n    self._commands.extend(layer_context.commands)\n    self._active_layer_id = None\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.circle","title":"circle","text":"<pre><code>circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def circle(\n    self, center: tuple[float, float], diameter: float, *, is_negative: bool\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_circle(center=center, diameter=diameter, is_negative=is_negative)\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def rectangle(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=width, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.obround","title":"obround","text":"<pre><code>obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def obround(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_obround(\n            center=center, width=width, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.polygon","title":"polygon","text":"<pre><code>polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add Shape object containing a regular polygon inscribed in bounding_circle of diameter <code>outer_diameter</code>, with vertices count equal to <code>vertices_count</code>, and starting rotation (counterclockwise) of <code>base_rotation</code> degrees.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple[float, float]</code> <p>Center of the polygon. A tuple of two floats.</p> required <code>outer_diameter</code> <code>float</code> <p>Diameter of the circle circumscribing the regular polygon, i.e. the circle through the polygon vertices. A decimal &gt; 0.</p> required <code>vertices_count</code> <code>int</code> <p>Number of vertices n, 3 \u2264 n \u2264 12. An integer.</p> required <code>base_rotation</code> <code>float</code> <p>The rotation angle, in degrees counterclockwise. A decimal. With rotation angle zero there is a vertex on the positive X-axis through the aperture center.</p> required <code>is_negative</code> <code>bool</code> <p>Toggle switch for the negative polarity. If True, the aperture is considered solid, otherwise a hole, possibly subtracting from existing solid shapes.</p> required Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def polygon(\n    self,\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add Shape object containing a regular polygon inscribed in bounding_circle\n    of diameter `outer_diameter`, with vertices count equal to `vertices_count`,\n    and starting rotation (counterclockwise) of `base_rotation` degrees.\n\n    Parameters\n    ----------\n    center : tuple[float, float]\n        Center of the polygon. A tuple of two floats.\n    outer_diameter : float\n        Diameter of the circle circumscribing the regular polygon, i.e.\n        the circle through the polygon vertices. A decimal &gt; 0.\n    vertices_count : int\n        Number of vertices n, 3 \u2264 n \u2264 12. An integer.\n    base_rotation : float\n        The rotation angle, in degrees counterclockwise. A decimal.\n        With rotation angle zero there is a vertex on the positive X-axis\n        through the aperture center.\n    is_negative : bool\n        Toggle switch for the negative polarity. If True, the aperture is\n        considered solid, otherwise a hole, possibly subtracting from existing\n        solid shapes.\n\n    \"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_polygon(\n            center=center,\n            outer_diameter=outer_diameter,\n            vertices_count=vertices_count,\n            base_rotation=base_rotation,\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.line","title":"line","text":"<pre><code>line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def line(\n    self,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add a command to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_line(\n            start=start, end=end, thickness=thickness, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.cross","title":"cross","text":"<pre><code>cross(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def cross(\n    self,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add cross shape to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=width, height=thickness, is_negative=is_negative\n        )\n    )\n    self._commands.append(\n        Shape.new_rectangle(\n            center=center, width=thickness, height=height, is_negative=is_negative\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.x","title":"x","text":"<pre><code>x(\n    center: tuple[float, float],\n    length: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def x(\n    self,\n    center: tuple[float, float],\n    length: float,\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; None:\n    \"\"\"Add cross shape to the layer.\"\"\"\n    self._check_not_finalized_in_add()\n    half_length = length / 2\n    self._commands.append(\n        Shape.new_line(\n            start=(center[0] + half_length, center[1] + half_length),\n            end=(center[0] - half_length, center[1] - half_length),\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n    )\n    self._commands.append(\n        Shape.new_line(\n            start=(center[0] - half_length, center[1] + half_length),\n            end=(center[0] + half_length, center[1] - half_length),\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.LayerBuilder.paste","title":"paste","text":"<pre><code>paste(\n    layer: LayerBuilder,\n    at: tuple[float, float],\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Paste another layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>def paste(\n    self, layer: LayerBuilder, at: tuple[float, float], *, is_negative: bool\n) -&gt; None:\n    \"\"\"Paste another layer.\"\"\"\n    self._check_not_finalized_in_add()\n    self._commands.append(\n        PasteLayer(\n            source_layer_id=layer._layer_id,  # noqa: SLF001\n            center=Vector.from_tuple(at),\n            is_negative=is_negative,\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.Builder","title":"Builder","text":"<p>RVMC builder class.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>class Builder:\n    \"\"\"RVMC builder class.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self._commands: list[Command] = []\n\n    @contextmanager\n    def layer(\n        self, box: Optional[Box] = None, origin: Optional[tuple[float, float]] = None\n    ) -&gt; Generator[LayerBuilder, None, None]:\n        \"\"\"Create a new layer.\"\"\"\n        layer = LayerBuilder(\n            layer_id=VirtualMachine.MAIN_LAYER_ID, box=box, origin=origin\n        )\n        yield layer\n        layer.finalize()\n        self._commands.extend(layer.commands)\n\n    @property\n    def commands(self) -&gt; RVMC:\n        \"\"\"Return commands.\"\"\"\n        return RVMC(commands=self._commands)\n</code></pre>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.Builder.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: RVMC\n</code></pre> <p>Return commands.</p>"},{"location":"reference/pygerber/vm/builder.html#pygerber.vm.builder.Builder.layer","title":"layer","text":"<pre><code>layer(\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create a new layer.</p> Source code in <code>src/pygerber/vm/builder.py</code> <pre><code>@contextmanager\ndef layer(\n    self, box: Optional[Box] = None, origin: Optional[tuple[float, float]] = None\n) -&gt; Generator[LayerBuilder, None, None]:\n    \"\"\"Create a new layer.\"\"\"\n    layer = LayerBuilder(\n        layer_id=VirtualMachine.MAIN_LAYER_ID, box=box, origin=origin\n    )\n    yield layer\n    layer.finalize()\n    self._commands.extend(layer.commands)\n</code></pre>"},{"location":"reference/pygerber/vm/command_visitor.html","title":"command_visitor","text":""},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor","title":"command_visitor","text":"<p><code>command_visitor</code> module contains definition of <code>CommandVisitor</code> interface.</p> <p>For more information on the visitor pattern used here, visit: https://refactoring.guru/design-patterns/visitor</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor","title":"CommandVisitor","text":"<p>Interface of a command visitor.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>class CommandVisitor:\n    \"\"\"Interface of a command visitor.\"\"\"\n\n    def on_shape(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n\n    def on_start_layer(self, command: StartLayer) -&gt; None:\n        \"\"\"Visit `StartLayer` command.\"\"\"\n\n    def on_end_layer(self, command: EndLayer) -&gt; None:\n        \"\"\"Visit `EndLayer` command.\"\"\"\n\n    def on_paste_layer(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_shape(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_start_layer(self, command: StartLayer) -&gt; None:\n    \"\"\"Visit `StartLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_end_layer(self, command: EndLayer) -&gt; None:\n    \"\"\"Visit `EndLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/command_visitor.py</code> <pre><code>def on_paste_layer(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/rvmc.html","title":"rvmc","text":""},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc","title":"rvmc","text":"<p><code>rvmc</code> module contains definition of RVMC class.</p>"},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc.RVMC","title":"RVMC","text":"<p>             Bases: <code>BaseModel</code></p> <p>Container class for PyGerber Rendering Virtual Machine Commands (RVMC).</p> Source code in <code>src/pygerber/vm/rvmc.py</code> <pre><code>class RVMC(BaseModel):\n    \"\"\"Container class for PyGerber Rendering Virtual Machine Commands (RVMC).\"\"\"\n\n    commands: Sequence[Command] = Field(default_factory=list)\n\n    def to_json(self, **kwargs: Any) -&gt; str:\n        \"\"\"Convert RVMC to JSON.\"\"\"\n        return self.model_dump_json(serialize_as_any=True, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc.RVMC.to_json","title":"to_json","text":"<pre><code>to_json(**kwargs: Any) -&gt; str\n</code></pre> <p>Convert RVMC to JSON.</p> Source code in <code>src/pygerber/vm/rvmc.py</code> <pre><code>def to_json(self, **kwargs: Any) -&gt; str:\n    \"\"\"Convert RVMC to JSON.\"\"\"\n    return self.model_dump_json(serialize_as_any=True, **kwargs)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html","title":"vm","text":""},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm","title":"vm","text":"<p><code>base</code> module contains definition of base <code>VirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Result","title":"Result","text":"<p>Result of drawing.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class Result:\n    \"\"\"Result of drawing.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Layer","title":"Layer","text":"<p><code>Layer</code> class represents drawing space in virtual machine.</p> <p>This class has two direct subclasses: <code>EagerLayer</code> and <code>DeferredLayer</code>. It is necessary to distinguish between them because we need to support creation of layer with known size and creation of layer with size unknown at creation time. <code>EagerLayer</code> is used for the former and <code>DeferredLayer</code> for the latter.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class Layer:\n    \"\"\"`Layer` class represents drawing space in virtual machine.\n\n    This class has two direct subclasses: `EagerLayer` and `DeferredLayer`.\n    It is necessary to distinguish between them because we need to support\n    creation of layer with known size and creation of layer with size unknown at\n    creation time. `EagerLayer` is used for the former and `DeferredLayer` for the\n    latter.\n    \"\"\"\n\n    origin: Vector\n    \"\"\"Origin of the layer.\n\n    Origin point represents local coordinates of the layer center.\n    \"\"\"\n\n    def __init__(self, layer_id: LayerID, origin: Vector) -&gt; None:\n        self.layer_id = layer_id\n        self.origin = origin\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Layer.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: Vector = origin\n</code></pre> <p>Origin of the layer.</p> <p>Origin point represents local coordinates of the layer center.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.EagerLayer","title":"EagerLayer","text":"<p>             Bases: <code>Layer</code></p> <p><code>EagerLayer</code> class represents drawing space of known fixed size.</p> <p>Commands executed on this layer are executed immediately.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class EagerLayer(Layer):\n    \"\"\"`EagerLayer` class represents drawing space of known fixed size.\n\n    Commands executed on this layer are executed immediately.\n    \"\"\"\n\n    def __init__(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; None:\n        super().__init__(layer_id, origin)\n        self.box = box\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.DeferredLayer","title":"DeferredLayer","text":"<p>             Bases: <code>Layer</code></p> <p><code>DeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>Commands executed on this layer are deferred until the layer is finished and size of layer can be determined.</p> <p>You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class DeferredLayer(Layer):\n    \"\"\"`DeferredLayer` class represents drawing space of size unknown at time of\n    creation of layer.\n\n    Commands executed on this layer are deferred until the layer is finished and\n    size of layer can be determined.\n\n    You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.\n    \"\"\"\n\n    def __init__(\n        self, layer_id: LayerID, origin: Vector, commands: list[DrawCmdT]\n    ) -&gt; None:\n        super().__init__(layer_id, origin)\n        self.commands = commands\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine","title":"VirtualMachine","text":"<p>             Bases: <code>CommandVisitor</code></p> <p>Virtual machine for executing simple drawing commands.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>class VirtualMachine(CommandVisitor):\n    \"\"\"Virtual machine for executing simple drawing commands.\"\"\"\n\n    MAIN_LAYER_ID: ClassVar[LayerID] = LayerID(id=\"%main%\")\n\n    def __init__(self) -&gt; None:\n        self.set_eager_handlers()\n\n        self._layers: dict[LayerID, Layer] = {}\n        self._layer_stack: list[Layer] = []\n\n    def set_handlers_for_layer(self, layer: Layer) -&gt; None:\n        \"\"\"Set handlers for given layer.\"\"\"\n        if isinstance(layer, EagerLayer):\n            self.set_eager_handlers()\n\n        elif isinstance(layer, DeferredLayer):\n            self.set_deferred_handlers()\n\n        else:\n            raise NotImplementedError(type(layer))\n\n    def set_eager_handlers(self) -&gt; None:\n        \"\"\"Set handlers for eager mode.\"\"\"\n        self._on_shape_handler = self.on_shape_eager\n        self._on_paste_layer_handler = self.on_paste_layer_eager\n\n    def set_deferred_handlers(self) -&gt; None:\n        \"\"\"Set handlers for deferred mode.\"\"\"\n        self._on_shape_handler = self.on_shape_deferred\n        self._on_paste_layer_handler = self.on_paste_layer_deferred\n\n    def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n        \"\"\"Create new eager layer instances (factory method).\"\"\"\n        return EagerLayer(layer_id, box, origin)\n\n    def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n        \"\"\"Create new deferred layer instances (factory method).\"\"\"\n        return DeferredLayer(layer_id, origin, commands=[])\n\n    def on_shape(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n        self._on_shape_handler(command)\n\n    def on_shape_eager(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n\n    def on_shape_deferred(self, command: Shape) -&gt; None:\n        \"\"\"Visit `Shape` command.\"\"\"\n        layer = self.layer\n        assert isinstance(layer, DeferredLayer)\n        layer.commands.append(command)\n\n    def on_paste_layer(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n        self._on_paste_layer_handler(command)\n\n    def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\n\n        This method is used when currently selected layer is a eager layer.\n        \"\"\"\n\n    def on_paste_layer_deferred(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\n\n        This method is used when currently selected layer is a deferred layer.\n        \"\"\"\n        layer = self.layer\n        assert isinstance(layer, DeferredLayer)\n        layer.commands.append(command)\n\n    def on_start_layer(self, command: StartLayer) -&gt; None:\n        \"\"\"Visit `StartLayer` command.\"\"\"\n        if command.id in self._layers:\n            raise LayerAlreadyExistsError(command.id)\n\n        if command.box is None:\n            layer = self.create_deferred_layer(command.id, command.origin)\n            self.set_layer(command.id, layer)\n            self.set_deferred_handlers()\n\n        else:\n            layer = self.create_eager_layer(command.id, command.box, command.origin)\n            self.set_layer(command.id, layer)\n            self.set_eager_handlers()\n\n        self.push_layer_to_stack(layer)\n\n    def set_layer(self, layer_id: LayerID, layer: Layer) -&gt; None:\n        \"\"\"Assign layer object to particular ID in layer index.\n\n        Overwriting existing layer is not allowed.\n        \"\"\"\n        self._layers[layer_id] = layer\n\n    def get_layer(self, layer_id: LayerID) -&gt; Layer:\n        \"\"\"Get layer by ID.\"\"\"\n        if layer_id not in self._layers:\n            raise LayerNotFoundError(layer_id)\n\n        return self._layers[layer_id]\n\n    @property\n    def layer(self) -&gt; Layer:\n        \"\"\"Get current layer.\"\"\"\n        if len(self._layer_stack) == 0:\n            raise NoLayerSetError\n\n        return self._layer_stack[-1]\n\n    def is_layer_stack_empty(self) -&gt; bool:\n        \"\"\"Check if layer stack is empty.\"\"\"\n        return len(self._layer_stack) == 0\n\n    def push_layer_to_stack(self, layer: Layer) -&gt; None:\n        \"\"\"Push layer to layer stack.\"\"\"\n        self._layer_stack.append(layer)\n\n    def pop_layer_from_stack(self) -&gt; Layer:\n        \"\"\"Pop layer from layer stack.\"\"\"\n        assert len(self._layer_stack) &gt; 0\n        return self._layer_stack.pop()\n\n    def on_end_layer(self, command: EndLayer) -&gt; None:\n        \"\"\"Visit `EndLayer` command.\"\"\"\n        if len(self._layer_stack) &lt;= 0:\n            raise NoLayerSetError\n\n        assert isinstance(command, EndLayer)\n\n        top_layer = self.pop_layer_from_stack()\n\n        if isinstance(top_layer, EagerLayer):\n            pass\n\n        elif isinstance(top_layer, DeferredLayer):\n            box = self._calculate_deferred_layer_box(top_layer)\n            if box is None:\n                # Empty layers are not retained.\n                raise EmptyAutoSizedLayerNotAllowedError(top_layer.layer_id)\n\n            new_layer = self.create_eager_layer(\n                top_layer.layer_id, box, top_layer.origin\n            )\n            self.set_layer(top_layer.layer_id, new_layer)\n\n            self.push_layer_to_stack(new_layer)\n            self.set_eager_handlers()\n            self._eval_deferred_commands(top_layer.commands)\n            self.pop_layer_from_stack()\n\n        else:\n            raise NotImplementedError(type(top_layer))\n\n        if self.is_layer_stack_empty():\n            self.set_eager_handlers()\n            return\n\n        # We need to set correct handler for next layer in case current layer creation\n        # interrupted process of creating another eager/deferred layer.\n        self.set_handlers_for_layer(self.layer)\n\n    def _calculate_deferred_layer_box(\n        self, deferred_layer: DeferredLayer\n    ) -&gt; Optional[Box]:\n        commands = deferred_layer.commands\n        box: Optional[Box] = None\n\n        if len(commands) == 0:\n            return None\n\n        cmd = commands[0]\n\n        if isinstance(cmd, Shape):\n            box = cmd.outer_box\n\n        elif isinstance(cmd, PasteLayer):\n            layer = self._layers[cmd.source_layer_id]\n            assert isinstance(layer, EagerLayer)\n            box = layer.box + cmd.center - layer.origin\n\n        else:\n            raise NotImplementedError(type(cmd))\n\n        for cmd in commands[1:]:\n            if isinstance(cmd, Shape):\n                box = box + cmd.outer_box\n\n            elif isinstance(cmd, PasteLayer):\n                layer = self._layers[cmd.source_layer_id]\n                assert isinstance(layer, EagerLayer)\n                box = box + (layer.box + cmd.center - layer.origin)\n\n            else:\n                raise NotImplementedError(type(cmd))\n\n        return box\n\n    def _eval_deferred_commands(self, commands: list[DrawCmdT]) -&gt; None:\n        for cmd in commands:\n            cmd.visit(self)\n\n    def run(self, rvmc: RVMC) -&gt; Result:\n        \"\"\"Execute all commands.\"\"\"\n        for command in rvmc.commands:\n            command.visit(self)\n\n        return Result()\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_handlers_for_layer","title":"set_handlers_for_layer","text":"<pre><code>set_handlers_for_layer(layer: Layer) -&gt; None\n</code></pre> <p>Set handlers for given layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_handlers_for_layer(self, layer: Layer) -&gt; None:\n    \"\"\"Set handlers for given layer.\"\"\"\n    if isinstance(layer, EagerLayer):\n        self.set_eager_handlers()\n\n    elif isinstance(layer, DeferredLayer):\n        self.set_deferred_handlers()\n\n    else:\n        raise NotImplementedError(type(layer))\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_eager_handlers","title":"set_eager_handlers","text":"<pre><code>set_eager_handlers() -&gt; None\n</code></pre> <p>Set handlers for eager mode.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_eager_handlers(self) -&gt; None:\n    \"\"\"Set handlers for eager mode.\"\"\"\n    self._on_shape_handler = self.on_shape_eager\n    self._on_paste_layer_handler = self.on_paste_layer_eager\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_deferred_handlers","title":"set_deferred_handlers","text":"<pre><code>set_deferred_handlers() -&gt; None\n</code></pre> <p>Set handlers for deferred mode.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_deferred_handlers(self) -&gt; None:\n    \"\"\"Set handlers for deferred mode.\"\"\"\n    self._on_shape_handler = self.on_shape_deferred\n    self._on_paste_layer_handler = self.on_paste_layer_deferred\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, box: Box, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n    \"\"\"Create new eager layer instances (factory method).\"\"\"\n    return EagerLayer(layer_id, box, origin)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n    \"\"\"Create new deferred layer instances (factory method).\"\"\"\n    return DeferredLayer(layer_id, origin, commands=[])\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n    self._on_shape_handler(command)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape_eager(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape_deferred","title":"on_shape_deferred","text":"<pre><code>on_shape_deferred(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_shape_deferred(self, command: Shape) -&gt; None:\n    \"\"\"Visit `Shape` command.\"\"\"\n    layer = self.layer\n    assert isinstance(layer, DeferredLayer)\n    layer.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n    self._on_paste_layer_handler(command)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a eager layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\n\n    This method is used when currently selected layer is a eager layer.\n    \"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer_deferred","title":"on_paste_layer_deferred","text":"<pre><code>on_paste_layer_deferred(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a deferred layer.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_paste_layer_deferred(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\n\n    This method is used when currently selected layer is a deferred layer.\n    \"\"\"\n    layer = self.layer\n    assert isinstance(layer, DeferredLayer)\n    layer.commands.append(command)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_start_layer(self, command: StartLayer) -&gt; None:\n    \"\"\"Visit `StartLayer` command.\"\"\"\n    if command.id in self._layers:\n        raise LayerAlreadyExistsError(command.id)\n\n    if command.box is None:\n        layer = self.create_deferred_layer(command.id, command.origin)\n        self.set_layer(command.id, layer)\n        self.set_deferred_handlers()\n\n    else:\n        layer = self.create_eager_layer(command.id, command.box, command.origin)\n        self.set_layer(command.id, layer)\n        self.set_eager_handlers()\n\n    self.push_layer_to_stack(layer)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer_id: LayerID, layer: Layer) -&gt; None\n</code></pre> <p>Assign layer object to particular ID in layer index.</p> <p>Overwriting existing layer is not allowed.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def set_layer(self, layer_id: LayerID, layer: Layer) -&gt; None:\n    \"\"\"Assign layer object to particular ID in layer index.\n\n    Overwriting existing layer is not allowed.\n    \"\"\"\n    self._layers[layer_id] = layer\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.get_layer","title":"get_layer","text":"<pre><code>get_layer(layer_id: LayerID) -&gt; Layer\n</code></pre> <p>Get layer by ID.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def get_layer(self, layer_id: LayerID) -&gt; Layer:\n    \"\"\"Get layer by ID.\"\"\"\n    if layer_id not in self._layers:\n        raise LayerNotFoundError(layer_id)\n\n    return self._layers[layer_id]\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.is_layer_stack_empty","title":"is_layer_stack_empty","text":"<pre><code>is_layer_stack_empty() -&gt; bool\n</code></pre> <p>Check if layer stack is empty.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def is_layer_stack_empty(self) -&gt; bool:\n    \"\"\"Check if layer stack is empty.\"\"\"\n    return len(self._layer_stack) == 0\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.push_layer_to_stack","title":"push_layer_to_stack","text":"<pre><code>push_layer_to_stack(layer: Layer) -&gt; None\n</code></pre> <p>Push layer to layer stack.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def push_layer_to_stack(self, layer: Layer) -&gt; None:\n    \"\"\"Push layer to layer stack.\"\"\"\n    self._layer_stack.append(layer)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.pop_layer_from_stack","title":"pop_layer_from_stack","text":"<pre><code>pop_layer_from_stack() -&gt; Layer\n</code></pre> <p>Pop layer from layer stack.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def pop_layer_from_stack(self) -&gt; Layer:\n    \"\"\"Pop layer from layer stack.\"\"\"\n    assert len(self._layer_stack) &gt; 0\n    return self._layer_stack.pop()\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def on_end_layer(self, command: EndLayer) -&gt; None:\n    \"\"\"Visit `EndLayer` command.\"\"\"\n    if len(self._layer_stack) &lt;= 0:\n        raise NoLayerSetError\n\n    assert isinstance(command, EndLayer)\n\n    top_layer = self.pop_layer_from_stack()\n\n    if isinstance(top_layer, EagerLayer):\n        pass\n\n    elif isinstance(top_layer, DeferredLayer):\n        box = self._calculate_deferred_layer_box(top_layer)\n        if box is None:\n            # Empty layers are not retained.\n            raise EmptyAutoSizedLayerNotAllowedError(top_layer.layer_id)\n\n        new_layer = self.create_eager_layer(\n            top_layer.layer_id, box, top_layer.origin\n        )\n        self.set_layer(top_layer.layer_id, new_layer)\n\n        self.push_layer_to_stack(new_layer)\n        self.set_eager_handlers()\n        self._eval_deferred_commands(top_layer.commands)\n        self.pop_layer_from_stack()\n\n    else:\n        raise NotImplementedError(type(top_layer))\n\n    if self.is_layer_stack_empty():\n        self.set_eager_handlers()\n        return\n\n    # We need to set correct handler for next layer in case current layer creation\n    # interrupted process of creating another eager/deferred layer.\n    self.set_handlers_for_layer(self.layer)\n</code></pre>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; Result\n</code></pre> <p>Execute all commands.</p> Source code in <code>src/pygerber/vm/vm.py</code> <pre><code>def run(self, rvmc: RVMC) -&gt; Result:\n    \"\"\"Execute all commands.\"\"\"\n    for command in rvmc.commands:\n        command.visit(self)\n\n    return Result()\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands","title":"commands","text":"<p><code>commands</code> package contains all the commands that can be executed by the VirtualMachine class and its descendants.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Command","title":"Command","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for drawing commands.</p> Source code in <code>src/pygerber/vm/commands/command.py</code> <pre><code>class Command(ModelType):\n    \"\"\"Base class for drawing commands.\"\"\"\n\n    @abstractmethod\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visitor interface implementation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Command.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visitor interface implementation.</p> Source code in <code>src/pygerber/vm/commands/command.py</code> <pre><code>@abstractmethod\ndef visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visitor interface implementation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.EndLayer","title":"EndLayer","text":"<p>             Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>class EndLayer(Command):\n    \"\"\"Draw a line from the current position to the given position.\"\"\"\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit end layer command.\"\"\"\n        visitor.on_end_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.EndLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit end layer command.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit end layer command.\"\"\"\n    visitor.on_end_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.StartLayer","title":"StartLayer","text":"<p>             Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>class StartLayer(Command):\n    \"\"\"Draw a line from the current position to the given position.\"\"\"\n\n    id: LayerID\n    box: Optional[Box] = Field(default=None)\n    origin: Vector = Field(default_factory=lambda: Vector(x=0, y=0))\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit start layer command.\"\"\"\n        visitor.on_start_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.StartLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit start layer command.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit start layer command.\"\"\"\n    visitor.on_start_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer","title":"PasteLayer","text":"<p>             Bases: <code>Command</code></p> <p>Paste contents of one layer into other layer.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>class PasteLayer(Command):\n    \"\"\"Paste contents of one layer into other layer.\"\"\"\n\n    source_layer_id: LayerID\n    center: Vector\n    is_negative: bool = Field(default=False)\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit paste layer command.\"\"\"\n        visitor.on_paste_layer(self)\n\n    @classmethod\n    def new(\n        cls,\n        source_layer_id: str,\n        center: tuple[float, float],\n        *,\n        is_negative: bool = False,\n    ) -&gt; Self:\n        \"\"\"Create a new start layer command from values.\"\"\"\n        return cls(\n            source_layer_id=LayerID(id=source_layer_id),\n            center=Vector.from_tuple(center),\n            is_negative=is_negative,\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit paste layer command.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit paste layer command.\"\"\"\n    visitor.on_paste_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False\n) -&gt; Self\n</code></pre> <p>Create a new start layer command from values.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False,\n) -&gt; Self:\n    \"\"\"Create a new start layer command from values.\"\"\"\n    return cls(\n        source_layer_id=LayerID(id=source_layer_id),\n        center=Vector.from_tuple(center),\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape","title":"Shape","text":"<p>             Bases: <code>Command</code></p> <p><code>Shape</code> command instructs VM to render a shape described by series of lines and arcs into currently active layer.</p> <p>Last point of first segment (line or arc) is always connected to the first point first segment, so shapes are implicitly closed. If those points are not overlapping, they are connected by a straight line.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>class Shape(Command):\n    \"\"\"`Shape` command instructs VM to render a shape described by series of\n    lines and arcs into currently active layer.\n\n    Last point of first segment (line or arc) is always connected to the first point\n    first segment, so shapes are implicitly closed. If those points are not overlapping,\n    they are connected by a straight line.\n    \"\"\"\n\n    commands: List[ShapeSegment] = Field(min_length=1)\n    is_negative: bool = False\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        accumulator = self.commands[0].outer_box\n        for segment in self.commands[1:]:\n            accumulator += segment.outer_box\n        return accumulator\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transpose shape by vector.\"\"\"\n        return self.__class__(\n            commands=[segment.transform(transform) for segment in self.commands],\n            is_negative=self.is_negative,\n        )\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit polygon command.\"\"\"\n        visitor.on_shape(self)\n\n    @classmethod\n    def new_rectangle(\n        cls,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of rectangle.\"\"\"\n        half_height = height / 2\n        half_width = width / 2\n        return cls(\n            commands=[\n                # Bottom line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] - half_height),\n                    (center[0] + half_width, center[1] - half_height),\n                ),\n                # Right line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] - half_height),\n                    (center[0] + half_width, center[1] + half_height),\n                ),\n                # Top line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] + half_height),\n                    (center[0] - half_width, center[1] + half_height),\n                ),\n                # Left line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] + half_height),\n                    (center[0] - half_width, center[1] - half_height),\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_obround(\n        cls,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of rectangle with shorter side rounded.\"\"\"\n        half_height = height / 2\n        half_width = width / 2\n\n        if width &lt;= height:\n            # Shape is taller than wider, hence rounding should be on bottom and top\n            delta = half_width\n\n            return cls(\n                commands=[\n                    # Bottom arc\n                    Arc.from_tuples(\n                        (center[0] - half_width, center[1] - half_height + delta),\n                        (center[0] + half_width, center[1] - half_height + delta),\n                        (center[0], center[1] - half_height + delta),\n                        clockwise=False,\n                    ),\n                    # Right line\n                    Line.from_tuples(\n                        (center[0] + half_width, center[1] - half_height + delta),\n                        (center[0] + half_width, center[1] + half_height - delta),\n                    ),\n                    # Top arc\n                    Arc.from_tuples(\n                        (center[0] + half_width, center[1] + half_height - delta),\n                        (center[0] - half_width, center[1] + half_height - delta),\n                        (center[0], center[1] + half_height - delta),\n                        clockwise=False,\n                    ),\n                    # Left line\n                    Line.from_tuples(\n                        (center[0] - half_width, center[1] + half_height - delta),\n                        (center[0] - half_width, center[1] - half_height + delta),\n                    ),\n                ],\n                is_negative=is_negative,\n            )\n\n        delta = half_height\n        return cls(\n            commands=[\n                # Bottom line\n                Line.from_tuples(\n                    (center[0] - half_width + delta, center[1] - half_height),\n                    (center[0] + half_width - delta, center[1] - half_height),\n                ),\n                # Right line\n                Arc.from_tuples(\n                    (center[0] + half_width - delta, center[1] - half_height),\n                    (center[0] + half_width - delta, center[1] + half_height),\n                    (center[0] + half_width - delta, center[1]),\n                    clockwise=False,\n                ),\n                # Top line\n                Line.from_tuples(\n                    (center[0] + half_width - delta, center[1] + half_height),\n                    (center[0] - half_width + delta, center[1] + half_height),\n                ),\n                # Left line\n                Arc.from_tuples(\n                    (center[0] - half_width + delta, center[1] + half_height),\n                    (center[0] - half_width + delta, center[1] - half_height),\n                    (center[0] - half_width + delta, center[1]),\n                    clockwise=False,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_circle(\n        cls, center: tuple[float, float], diameter: float, *, is_negative: bool\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of circle.\"\"\"\n        radius = diameter / 2\n        return cls(\n            commands=[\n                Arc.from_tuples(\n                    (center[0] - radius, center[1]),\n                    (center[0] + radius, center[1]),\n                    center=center,\n                    clockwise=True,\n                ),\n                Arc.from_tuples(\n                    (center[0] + radius, center[1]),\n                    (center[0] - radius, center[1]),\n                    center=center,\n                    clockwise=True,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_polygon(\n        cls,\n        center: tuple[float, float],\n        outer_diameter: float,\n        vertices_count: int,\n        base_rotation: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of regular polygon.\"\"\"\n        assert vertices_count &gt;= VERTEX_COUNT_IN_TRIANGLE\n        base_rotation = base_rotation % 360\n        assert 0 &lt;= base_rotation &lt; FULL_ANGLE_DEGREES\n\n        center_vector = Vector.from_tuple(center)\n        commands: list[ShapeSegment] = []\n\n        angle_step = 360 / vertices_count\n        transform_matrix = Matrix3x3.new_rotate(angle_step)\n\n        local_vertex_offset = Vector.unit.x * outer_diameter / 2\n        local_vertex_offset = local_vertex_offset.transform(\n            Matrix3x3.new_rotate(base_rotation)\n        )\n        current_angle = base_rotation\n\n        while current_angle &lt; FULL_ANGLE_DEGREES:\n            current_angle += angle_step\n            new_local_vertex_offset = local_vertex_offset.transform(transform_matrix)\n\n            commands.append(\n                Line(\n                    start=center_vector + local_vertex_offset,\n                    end=center_vector + new_local_vertex_offset,\n                )\n            )\n            local_vertex_offset = new_local_vertex_offset\n\n        return cls(commands=commands, is_negative=is_negative)\n\n    @classmethod\n    def new_line(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of line with specified thickness.\"\"\"\n        start_vector = Vector.from_tuple(start)\n        end_vector = Vector.from_tuple(end)\n        parallel = (end_vector - start_vector).normalized()\n        perpendicular = Vector(x=-parallel.y, y=parallel.x) * (thickness / 2)\n\n        return cls(\n            commands=[\n                Line(\n                    start=start_vector + perpendicular,\n                    end=end_vector + perpendicular,\n                ),\n                Line(\n                    start=end_vector - perpendicular,\n                    end=start_vector - perpendicular,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_cw_arc(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of clockwise arc with specified thickness.\"\"\"\n        center_vector = Vector.from_tuple(center)\n        start_vector = Vector.from_tuple(start)\n        end_vector = Vector.from_tuple(end)\n\n        local_start_vector = start_vector - Vector.from_tuple(center)\n        extend_start_vector = local_start_vector.normalized() * (thickness / 2)\n\n        local_end_vector = end_vector - Vector.from_tuple(center)\n        extend_end_vector = local_end_vector.normalized() * (thickness / 2)\n\n        return cls(\n            commands=[\n                Arc(\n                    start=start_vector + extend_start_vector,\n                    end=end_vector + extend_end_vector,\n                    center=center_vector,\n                    clockwise=True,\n                ),\n                Arc(\n                    start=end_vector - extend_end_vector,\n                    end=start_vector - extend_start_vector,\n                    center=center_vector,\n                    clockwise=False,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_ccw_arc(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of counterclockwise arc with specified thickness.\"\"\"\n        return cls.new_cw_arc(\n            start=end,\n            end=start,\n            center=center,\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_ring(\n        cls,\n        center: tuple[float, float],\n        outer_diameter: float,\n        inner_diameter: float,\n        *,\n        is_negative: bool,\n    ) -&gt; tuple[Self, Self]:\n        \"\"\"Create polygon in shape of ring.\"\"\"\n        thickness = (outer_diameter - inner_diameter) / 2\n        inner_radius = inner_diameter / 2\n\n        assert thickness &gt; 0\n        assert inner_radius &gt; 0\n\n        half_thickness = thickness / 2\n\n        point_0 = (center[0] + inner_radius + half_thickness, center[1])\n        point_1 = (center[0] - inner_radius - half_thickness, center[1])\n\n        return (\n            cls.new_cw_arc(\n                point_0,\n                point_1,\n                center,\n                thickness=thickness,\n                is_negative=is_negative,\n            ),\n            cls.new_cw_arc(\n                point_1,\n                point_0,\n                center,\n                thickness=thickness,\n                is_negative=is_negative,\n            ),\n        )\n\n    @classmethod\n    def new_connected_points(\n        cls, *points: tuple[float, float], is_negative: bool\n    ) -&gt; Self:\n        \"\"\"Create polygon from connected points.\"\"\"\n        commands: list[ShapeSegment] = [\n            Line.from_tuples(points[i], points[i + 1]) for i in range(len(points) - 1)\n        ]\n        commands.append(Line.from_tuples(points[-1], points[0]))\n        return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    accumulator = self.commands[0].outer_box\n    for segment in self.commands[1:]:\n        accumulator += segment.outer_box\n    return accumulator\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transpose shape by vector.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transpose shape by vector.\"\"\"\n    return self.__class__(\n        commands=[segment.transform(transform) for segment in self.commands],\n        is_negative=self.is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit polygon command.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit polygon command.\"\"\"\n    visitor.on_shape(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_rectangle","title":"new_rectangle  <code>classmethod</code>","text":"<pre><code>new_rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_rectangle(\n    cls,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of rectangle.\"\"\"\n    half_height = height / 2\n    half_width = width / 2\n    return cls(\n        commands=[\n            # Bottom line\n            Line.from_tuples(\n                (center[0] - half_width, center[1] - half_height),\n                (center[0] + half_width, center[1] - half_height),\n            ),\n            # Right line\n            Line.from_tuples(\n                (center[0] + half_width, center[1] - half_height),\n                (center[0] + half_width, center[1] + half_height),\n            ),\n            # Top line\n            Line.from_tuples(\n                (center[0] + half_width, center[1] + half_height),\n                (center[0] - half_width, center[1] + half_height),\n            ),\n            # Left line\n            Line.from_tuples(\n                (center[0] - half_width, center[1] + half_height),\n                (center[0] - half_width, center[1] - half_height),\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_obround","title":"new_obround  <code>classmethod</code>","text":"<pre><code>new_obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle with shorter side rounded.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_obround(\n    cls,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of rectangle with shorter side rounded.\"\"\"\n    half_height = height / 2\n    half_width = width / 2\n\n    if width &lt;= height:\n        # Shape is taller than wider, hence rounding should be on bottom and top\n        delta = half_width\n\n        return cls(\n            commands=[\n                # Bottom arc\n                Arc.from_tuples(\n                    (center[0] - half_width, center[1] - half_height + delta),\n                    (center[0] + half_width, center[1] - half_height + delta),\n                    (center[0], center[1] - half_height + delta),\n                    clockwise=False,\n                ),\n                # Right line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] - half_height + delta),\n                    (center[0] + half_width, center[1] + half_height - delta),\n                ),\n                # Top arc\n                Arc.from_tuples(\n                    (center[0] + half_width, center[1] + half_height - delta),\n                    (center[0] - half_width, center[1] + half_height - delta),\n                    (center[0], center[1] + half_height - delta),\n                    clockwise=False,\n                ),\n                # Left line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] + half_height - delta),\n                    (center[0] - half_width, center[1] - half_height + delta),\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    delta = half_height\n    return cls(\n        commands=[\n            # Bottom line\n            Line.from_tuples(\n                (center[0] - half_width + delta, center[1] - half_height),\n                (center[0] + half_width - delta, center[1] - half_height),\n            ),\n            # Right line\n            Arc.from_tuples(\n                (center[0] + half_width - delta, center[1] - half_height),\n                (center[0] + half_width - delta, center[1] + half_height),\n                (center[0] + half_width - delta, center[1]),\n                clockwise=False,\n            ),\n            # Top line\n            Line.from_tuples(\n                (center[0] + half_width - delta, center[1] + half_height),\n                (center[0] - half_width + delta, center[1] + half_height),\n            ),\n            # Left line\n            Arc.from_tuples(\n                (center[0] - half_width + delta, center[1] + half_height),\n                (center[0] - half_width + delta, center[1] - half_height),\n                (center[0] - half_width + delta, center[1]),\n                clockwise=False,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_circle","title":"new_circle  <code>classmethod</code>","text":"<pre><code>new_circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of circle.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_circle(\n    cls, center: tuple[float, float], diameter: float, *, is_negative: bool\n) -&gt; Self:\n    \"\"\"Create polygon in shape of circle.\"\"\"\n    radius = diameter / 2\n    return cls(\n        commands=[\n            Arc.from_tuples(\n                (center[0] - radius, center[1]),\n                (center[0] + radius, center[1]),\n                center=center,\n                clockwise=True,\n            ),\n            Arc.from_tuples(\n                (center[0] + radius, center[1]),\n                (center[0] - radius, center[1]),\n                center=center,\n                clockwise=True,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_polygon","title":"new_polygon  <code>classmethod</code>","text":"<pre><code>new_polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of regular polygon.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_polygon(\n    cls,\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of regular polygon.\"\"\"\n    assert vertices_count &gt;= VERTEX_COUNT_IN_TRIANGLE\n    base_rotation = base_rotation % 360\n    assert 0 &lt;= base_rotation &lt; FULL_ANGLE_DEGREES\n\n    center_vector = Vector.from_tuple(center)\n    commands: list[ShapeSegment] = []\n\n    angle_step = 360 / vertices_count\n    transform_matrix = Matrix3x3.new_rotate(angle_step)\n\n    local_vertex_offset = Vector.unit.x * outer_diameter / 2\n    local_vertex_offset = local_vertex_offset.transform(\n        Matrix3x3.new_rotate(base_rotation)\n    )\n    current_angle = base_rotation\n\n    while current_angle &lt; FULL_ANGLE_DEGREES:\n        current_angle += angle_step\n        new_local_vertex_offset = local_vertex_offset.transform(transform_matrix)\n\n        commands.append(\n            Line(\n                start=center_vector + local_vertex_offset,\n                end=center_vector + new_local_vertex_offset,\n            )\n        )\n        local_vertex_offset = new_local_vertex_offset\n\n    return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_line","title":"new_line  <code>classmethod</code>","text":"<pre><code>new_line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of line with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_line(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of line with specified thickness.\"\"\"\n    start_vector = Vector.from_tuple(start)\n    end_vector = Vector.from_tuple(end)\n    parallel = (end_vector - start_vector).normalized()\n    perpendicular = Vector(x=-parallel.y, y=parallel.x) * (thickness / 2)\n\n    return cls(\n        commands=[\n            Line(\n                start=start_vector + perpendicular,\n                end=end_vector + perpendicular,\n            ),\n            Line(\n                start=end_vector - perpendicular,\n                end=start_vector - perpendicular,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_cw_arc","title":"new_cw_arc  <code>classmethod</code>","text":"<pre><code>new_cw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of clockwise arc with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_cw_arc(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of clockwise arc with specified thickness.\"\"\"\n    center_vector = Vector.from_tuple(center)\n    start_vector = Vector.from_tuple(start)\n    end_vector = Vector.from_tuple(end)\n\n    local_start_vector = start_vector - Vector.from_tuple(center)\n    extend_start_vector = local_start_vector.normalized() * (thickness / 2)\n\n    local_end_vector = end_vector - Vector.from_tuple(center)\n    extend_end_vector = local_end_vector.normalized() * (thickness / 2)\n\n    return cls(\n        commands=[\n            Arc(\n                start=start_vector + extend_start_vector,\n                end=end_vector + extend_end_vector,\n                center=center_vector,\n                clockwise=True,\n            ),\n            Arc(\n                start=end_vector - extend_end_vector,\n                end=start_vector - extend_start_vector,\n                center=center_vector,\n                clockwise=False,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_ccw_arc","title":"new_ccw_arc  <code>classmethod</code>","text":"<pre><code>new_ccw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of counterclockwise arc with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_ccw_arc(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of counterclockwise arc with specified thickness.\"\"\"\n    return cls.new_cw_arc(\n        start=end,\n        end=start,\n        center=center,\n        thickness=thickness,\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_ring","title":"new_ring  <code>classmethod</code>","text":"<pre><code>new_ring(\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool\n) -&gt; tuple[Self, Self]\n</code></pre> <p>Create polygon in shape of ring.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_ring(\n    cls,\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool,\n) -&gt; tuple[Self, Self]:\n    \"\"\"Create polygon in shape of ring.\"\"\"\n    thickness = (outer_diameter - inner_diameter) / 2\n    inner_radius = inner_diameter / 2\n\n    assert thickness &gt; 0\n    assert inner_radius &gt; 0\n\n    half_thickness = thickness / 2\n\n    point_0 = (center[0] + inner_radius + half_thickness, center[1])\n    point_1 = (center[0] - inner_radius - half_thickness, center[1])\n\n    return (\n        cls.new_cw_arc(\n            point_0,\n            point_1,\n            center,\n            thickness=thickness,\n            is_negative=is_negative,\n        ),\n        cls.new_cw_arc(\n            point_1,\n            point_0,\n            center,\n            thickness=thickness,\n            is_negative=is_negative,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_connected_points","title":"new_connected_points  <code>classmethod</code>","text":"<pre><code>new_connected_points(\n    *points: tuple[float, float], is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon from connected points.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_connected_points(\n    cls, *points: tuple[float, float], is_negative: bool\n) -&gt; Self:\n    \"\"\"Create polygon from connected points.\"\"\"\n    commands: list[ShapeSegment] = [\n        Line.from_tuples(points[i], points[i + 1]) for i in range(len(points) - 1)\n    ]\n    commands.append(Line.from_tuples(points[-1], points[0]))\n    return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc","title":"Arc","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>class Arc(ShapeSegment):\n    \"\"\"Arc segment which can be used to define Shape contents.\n\n    Arc resolution is determined at rendering time and dynamically adjusted to provide\n    the best image quality. This gives Arc class great advantage over creating arcs\n    with multiple manually defined Line segments.\n    \"\"\"\n\n    start: Vector\n    end: Vector\n    center: Vector\n    clockwise: bool\n\n    @classmethod\n    def from_tuples(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        *,\n        clockwise: bool,\n    ) -&gt; Self:\n        \"\"\"Create a new arc from two tuples.\"\"\"\n        return cls(\n            start=Vector.from_tuple(start),\n            end=Vector.from_tuple(end),\n            center=Vector.from_tuple(center),\n            clockwise=clockwise,\n        )\n\n    def get_relative_start_point(self) -&gt; Vector:\n        \"\"\"Get starting point relative to arc center.\"\"\"\n        return self.start - self.center\n\n    def get_relative_end_point(self) -&gt; Vector:\n        \"\"\"Get ending point relative to arc center.\"\"\"\n        return self.end - self.center\n\n    def get_radius(self) -&gt; float:\n        \"\"\"Get radius of circle arc.\"\"\"\n        return self.get_relative_start_point().length()\n\n    def is_valid_arc(self) -&gt; bool:\n        \"\"\"Check if arc is valid.\"\"\"\n        return (\n            self.get_relative_start_point().length()\n            == self.get_relative_end_point().length()\n        )\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        radius = self.get_radius()\n        relative_start = self.get_relative_start_point()\n\n        total_angle = relative_start.angle_between(\n            self.get_relative_end_point(),\n        )\n\n        angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n        angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n        angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n        angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n        vectors = [\n            Vector(x=0, y=0),\n            relative_start,\n            self.get_relative_end_point(),\n        ]\n        if not self.clockwise:\n            total_angle = 360 - total_angle\n            angle_x_plus = 360 - angle_x_plus\n            angle_y_minus = 360 - angle_y_minus\n            angle_x_minus = 360 - angle_x_minus\n            angle_y_plus = 360 - angle_y_plus\n\n        if angle_x_plus &lt; total_angle:\n            vectors.append(Vector(x=radius, y=0))\n        if angle_y_minus &lt; total_angle:\n            vectors.append(Vector(x=0, y=-radius))\n        if angle_x_minus &lt; total_angle:\n            vectors.append(Vector(x=-radius, y=0))\n        if angle_y_plus &lt; total_angle:\n            vectors.append(Vector(x=0, y=radius))\n\n        return Box.from_vectors(*(v + self.center for v in vectors))\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n            center=self.center.transform(transform),\n            clockwise=(\n                self.clockwise\n                if transform[0][0] * transform[1][1] &gt; 0\n                else not self.clockwise\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@classmethod\ndef from_tuples(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool,\n) -&gt; Self:\n    \"\"\"Create a new arc from two tuples.\"\"\"\n    return cls(\n        start=Vector.from_tuple(start),\n        end=Vector.from_tuple(end),\n        center=Vector.from_tuple(center),\n        clockwise=clockwise,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_start_point(self) -&gt; Vector:\n    \"\"\"Get starting point relative to arc center.\"\"\"\n    return self.start - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_end_point(self) -&gt; Vector:\n    \"\"\"Get ending point relative to arc center.\"\"\"\n    return self.end - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_radius(self) -&gt; float:\n    \"\"\"Get radius of circle arc.\"\"\"\n    return self.get_relative_start_point().length()\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def is_valid_arc(self) -&gt; bool:\n    \"\"\"Check if arc is valid.\"\"\"\n    return (\n        self.get_relative_start_point().length()\n        == self.get_relative_end_point().length()\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    radius = self.get_radius()\n    relative_start = self.get_relative_start_point()\n\n    total_angle = relative_start.angle_between(\n        self.get_relative_end_point(),\n    )\n\n    angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n    angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n    angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n    angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n    vectors = [\n        Vector(x=0, y=0),\n        relative_start,\n        self.get_relative_end_point(),\n    ]\n    if not self.clockwise:\n        total_angle = 360 - total_angle\n        angle_x_plus = 360 - angle_x_plus\n        angle_y_minus = 360 - angle_y_minus\n        angle_x_minus = 360 - angle_x_minus\n        angle_y_plus = 360 - angle_y_plus\n\n    if angle_x_plus &lt; total_angle:\n        vectors.append(Vector(x=radius, y=0))\n    if angle_y_minus &lt; total_angle:\n        vectors.append(Vector(x=0, y=-radius))\n    if angle_x_minus &lt; total_angle:\n        vectors.append(Vector(x=-radius, y=0))\n    if angle_y_plus &lt; total_angle:\n        vectors.append(Vector(x=0, y=radius))\n\n    return Box.from_vectors(*(v + self.center for v in vectors))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n        center=self.center.transform(transform),\n        clockwise=(\n            self.clockwise\n            if transform[0][0] * transform[1][1] &gt; 0\n            else not self.clockwise\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line","title":"Line","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>class Line(ShapeSegment):\n    \"\"\"Line segment which can be used to define Shape contents.\"\"\"\n\n    start: Vector\n    end: Vector\n\n    @classmethod\n    def from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n        \"\"\"Create a new line from two tuples.\"\"\"\n        return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        return Box.from_vectors(self.start, self.end)\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@classmethod\ndef from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n    \"\"\"Create a new line from two tuples.\"\"\"\n    return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    return Box.from_vectors(self.start, self.end)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment","title":"ShapeSegment","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>class ShapeSegment(ModelType):\n    \"\"\"Base class for shape segment types.\"\"\"\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        raise NotImplementedError\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform line.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform line.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/command.html","title":"command","text":""},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command","title":"command","text":"<p><code>command</code> module contains the base class for commands executable on PyGerber VMs.</p>"},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command.Command","title":"Command","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for drawing commands.</p> Source code in <code>src/pygerber/vm/commands/command.py</code> <pre><code>class Command(ModelType):\n    \"\"\"Base class for drawing commands.\"\"\"\n\n    @abstractmethod\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visitor interface implementation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command.Command.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visitor interface implementation.</p> Source code in <code>src/pygerber/vm/commands/command.py</code> <pre><code>@abstractmethod\ndef visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visitor interface implementation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/commands/layer.html","title":"layer","text":""},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer","title":"layer","text":"<p><code>layer</code> module contains commands for image layer management.</p>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.StartLayer","title":"StartLayer","text":"<p>             Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>class StartLayer(Command):\n    \"\"\"Draw a line from the current position to the given position.\"\"\"\n\n    id: LayerID\n    box: Optional[Box] = Field(default=None)\n    origin: Vector = Field(default_factory=lambda: Vector(x=0, y=0))\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit start layer command.\"\"\"\n        visitor.on_start_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.StartLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit start layer command.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit start layer command.\"\"\"\n    visitor.on_start_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.EndLayer","title":"EndLayer","text":"<p>             Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>class EndLayer(Command):\n    \"\"\"Draw a line from the current position to the given position.\"\"\"\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit end layer command.\"\"\"\n        visitor.on_end_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.EndLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit end layer command.</p> Source code in <code>src/pygerber/vm/commands/layer.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit end layer command.\"\"\"\n    visitor.on_end_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/paste.html","title":"paste","text":""},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste","title":"paste","text":"<p><code>layer</code> module contains commands for image layer management.</p>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer","title":"PasteLayer","text":"<p>             Bases: <code>Command</code></p> <p>Paste contents of one layer into other layer.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>class PasteLayer(Command):\n    \"\"\"Paste contents of one layer into other layer.\"\"\"\n\n    source_layer_id: LayerID\n    center: Vector\n    is_negative: bool = Field(default=False)\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit paste layer command.\"\"\"\n        visitor.on_paste_layer(self)\n\n    @classmethod\n    def new(\n        cls,\n        source_layer_id: str,\n        center: tuple[float, float],\n        *,\n        is_negative: bool = False,\n    ) -&gt; Self:\n        \"\"\"Create a new start layer command from values.\"\"\"\n        return cls(\n            source_layer_id=LayerID(id=source_layer_id),\n            center=Vector.from_tuple(center),\n            is_negative=is_negative,\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit paste layer command.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit paste layer command.\"\"\"\n    visitor.on_paste_layer(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False\n) -&gt; Self\n</code></pre> <p>Create a new start layer command from values.</p> Source code in <code>src/pygerber/vm/commands/paste.py</code> <pre><code>@classmethod\ndef new(\n    cls,\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False,\n) -&gt; Self:\n    \"\"\"Create a new start layer command from values.\"\"\"\n    return cls(\n        source_layer_id=LayerID(id=source_layer_id),\n        center=Vector.from_tuple(center),\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html","title":"shape","text":""},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape","title":"shape","text":"<p><code>shape</code> module contains classes for drawing shapes consisting of connected lines and arcs filled with solid color.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape","title":"Shape","text":"<p>             Bases: <code>Command</code></p> <p><code>Shape</code> command instructs VM to render a shape described by series of lines and arcs into currently active layer.</p> <p>Last point of first segment (line or arc) is always connected to the first point first segment, so shapes are implicitly closed. If those points are not overlapping, they are connected by a straight line.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>class Shape(Command):\n    \"\"\"`Shape` command instructs VM to render a shape described by series of\n    lines and arcs into currently active layer.\n\n    Last point of first segment (line or arc) is always connected to the first point\n    first segment, so shapes are implicitly closed. If those points are not overlapping,\n    they are connected by a straight line.\n    \"\"\"\n\n    commands: List[ShapeSegment] = Field(min_length=1)\n    is_negative: bool = False\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        accumulator = self.commands[0].outer_box\n        for segment in self.commands[1:]:\n            accumulator += segment.outer_box\n        return accumulator\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transpose shape by vector.\"\"\"\n        return self.__class__(\n            commands=[segment.transform(transform) for segment in self.commands],\n            is_negative=self.is_negative,\n        )\n\n    def visit(self, visitor: CommandVisitor) -&gt; None:\n        \"\"\"Visit polygon command.\"\"\"\n        visitor.on_shape(self)\n\n    @classmethod\n    def new_rectangle(\n        cls,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of rectangle.\"\"\"\n        half_height = height / 2\n        half_width = width / 2\n        return cls(\n            commands=[\n                # Bottom line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] - half_height),\n                    (center[0] + half_width, center[1] - half_height),\n                ),\n                # Right line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] - half_height),\n                    (center[0] + half_width, center[1] + half_height),\n                ),\n                # Top line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] + half_height),\n                    (center[0] - half_width, center[1] + half_height),\n                ),\n                # Left line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] + half_height),\n                    (center[0] - half_width, center[1] - half_height),\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_obround(\n        cls,\n        center: tuple[float, float],\n        width: float,\n        height: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of rectangle with shorter side rounded.\"\"\"\n        half_height = height / 2\n        half_width = width / 2\n\n        if width &lt;= height:\n            # Shape is taller than wider, hence rounding should be on bottom and top\n            delta = half_width\n\n            return cls(\n                commands=[\n                    # Bottom arc\n                    Arc.from_tuples(\n                        (center[0] - half_width, center[1] - half_height + delta),\n                        (center[0] + half_width, center[1] - half_height + delta),\n                        (center[0], center[1] - half_height + delta),\n                        clockwise=False,\n                    ),\n                    # Right line\n                    Line.from_tuples(\n                        (center[0] + half_width, center[1] - half_height + delta),\n                        (center[0] + half_width, center[1] + half_height - delta),\n                    ),\n                    # Top arc\n                    Arc.from_tuples(\n                        (center[0] + half_width, center[1] + half_height - delta),\n                        (center[0] - half_width, center[1] + half_height - delta),\n                        (center[0], center[1] + half_height - delta),\n                        clockwise=False,\n                    ),\n                    # Left line\n                    Line.from_tuples(\n                        (center[0] - half_width, center[1] + half_height - delta),\n                        (center[0] - half_width, center[1] - half_height + delta),\n                    ),\n                ],\n                is_negative=is_negative,\n            )\n\n        delta = half_height\n        return cls(\n            commands=[\n                # Bottom line\n                Line.from_tuples(\n                    (center[0] - half_width + delta, center[1] - half_height),\n                    (center[0] + half_width - delta, center[1] - half_height),\n                ),\n                # Right line\n                Arc.from_tuples(\n                    (center[0] + half_width - delta, center[1] - half_height),\n                    (center[0] + half_width - delta, center[1] + half_height),\n                    (center[0] + half_width - delta, center[1]),\n                    clockwise=False,\n                ),\n                # Top line\n                Line.from_tuples(\n                    (center[0] + half_width - delta, center[1] + half_height),\n                    (center[0] - half_width + delta, center[1] + half_height),\n                ),\n                # Left line\n                Arc.from_tuples(\n                    (center[0] - half_width + delta, center[1] + half_height),\n                    (center[0] - half_width + delta, center[1] - half_height),\n                    (center[0] - half_width + delta, center[1]),\n                    clockwise=False,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_circle(\n        cls, center: tuple[float, float], diameter: float, *, is_negative: bool\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of circle.\"\"\"\n        radius = diameter / 2\n        return cls(\n            commands=[\n                Arc.from_tuples(\n                    (center[0] - radius, center[1]),\n                    (center[0] + radius, center[1]),\n                    center=center,\n                    clockwise=True,\n                ),\n                Arc.from_tuples(\n                    (center[0] + radius, center[1]),\n                    (center[0] - radius, center[1]),\n                    center=center,\n                    clockwise=True,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_polygon(\n        cls,\n        center: tuple[float, float],\n        outer_diameter: float,\n        vertices_count: int,\n        base_rotation: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of regular polygon.\"\"\"\n        assert vertices_count &gt;= VERTEX_COUNT_IN_TRIANGLE\n        base_rotation = base_rotation % 360\n        assert 0 &lt;= base_rotation &lt; FULL_ANGLE_DEGREES\n\n        center_vector = Vector.from_tuple(center)\n        commands: list[ShapeSegment] = []\n\n        angle_step = 360 / vertices_count\n        transform_matrix = Matrix3x3.new_rotate(angle_step)\n\n        local_vertex_offset = Vector.unit.x * outer_diameter / 2\n        local_vertex_offset = local_vertex_offset.transform(\n            Matrix3x3.new_rotate(base_rotation)\n        )\n        current_angle = base_rotation\n\n        while current_angle &lt; FULL_ANGLE_DEGREES:\n            current_angle += angle_step\n            new_local_vertex_offset = local_vertex_offset.transform(transform_matrix)\n\n            commands.append(\n                Line(\n                    start=center_vector + local_vertex_offset,\n                    end=center_vector + new_local_vertex_offset,\n                )\n            )\n            local_vertex_offset = new_local_vertex_offset\n\n        return cls(commands=commands, is_negative=is_negative)\n\n    @classmethod\n    def new_line(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of line with specified thickness.\"\"\"\n        start_vector = Vector.from_tuple(start)\n        end_vector = Vector.from_tuple(end)\n        parallel = (end_vector - start_vector).normalized()\n        perpendicular = Vector(x=-parallel.y, y=parallel.x) * (thickness / 2)\n\n        return cls(\n            commands=[\n                Line(\n                    start=start_vector + perpendicular,\n                    end=end_vector + perpendicular,\n                ),\n                Line(\n                    start=end_vector - perpendicular,\n                    end=start_vector - perpendicular,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_cw_arc(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of clockwise arc with specified thickness.\"\"\"\n        center_vector = Vector.from_tuple(center)\n        start_vector = Vector.from_tuple(start)\n        end_vector = Vector.from_tuple(end)\n\n        local_start_vector = start_vector - Vector.from_tuple(center)\n        extend_start_vector = local_start_vector.normalized() * (thickness / 2)\n\n        local_end_vector = end_vector - Vector.from_tuple(center)\n        extend_end_vector = local_end_vector.normalized() * (thickness / 2)\n\n        return cls(\n            commands=[\n                Arc(\n                    start=start_vector + extend_start_vector,\n                    end=end_vector + extend_end_vector,\n                    center=center_vector,\n                    clockwise=True,\n                ),\n                Arc(\n                    start=end_vector - extend_end_vector,\n                    end=start_vector - extend_start_vector,\n                    center=center_vector,\n                    clockwise=False,\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_ccw_arc(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        thickness: float,\n        *,\n        is_negative: bool,\n    ) -&gt; Self:\n        \"\"\"Create polygon in shape of counterclockwise arc with specified thickness.\"\"\"\n        return cls.new_cw_arc(\n            start=end,\n            end=start,\n            center=center,\n            thickness=thickness,\n            is_negative=is_negative,\n        )\n\n    @classmethod\n    def new_ring(\n        cls,\n        center: tuple[float, float],\n        outer_diameter: float,\n        inner_diameter: float,\n        *,\n        is_negative: bool,\n    ) -&gt; tuple[Self, Self]:\n        \"\"\"Create polygon in shape of ring.\"\"\"\n        thickness = (outer_diameter - inner_diameter) / 2\n        inner_radius = inner_diameter / 2\n\n        assert thickness &gt; 0\n        assert inner_radius &gt; 0\n\n        half_thickness = thickness / 2\n\n        point_0 = (center[0] + inner_radius + half_thickness, center[1])\n        point_1 = (center[0] - inner_radius - half_thickness, center[1])\n\n        return (\n            cls.new_cw_arc(\n                point_0,\n                point_1,\n                center,\n                thickness=thickness,\n                is_negative=is_negative,\n            ),\n            cls.new_cw_arc(\n                point_1,\n                point_0,\n                center,\n                thickness=thickness,\n                is_negative=is_negative,\n            ),\n        )\n\n    @classmethod\n    def new_connected_points(\n        cls, *points: tuple[float, float], is_negative: bool\n    ) -&gt; Self:\n        \"\"\"Create polygon from connected points.\"\"\"\n        commands: list[ShapeSegment] = [\n            Line.from_tuples(points[i], points[i + 1]) for i in range(len(points) - 1)\n        ]\n        commands.append(Line.from_tuples(points[-1], points[0]))\n        return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    accumulator = self.commands[0].outer_box\n    for segment in self.commands[1:]:\n        accumulator += segment.outer_box\n    return accumulator\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transpose shape by vector.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transpose shape by vector.\"\"\"\n    return self.__class__(\n        commands=[segment.transform(transform) for segment in self.commands],\n        is_negative=self.is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit polygon command.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>def visit(self, visitor: CommandVisitor) -&gt; None:\n    \"\"\"Visit polygon command.\"\"\"\n    visitor.on_shape(self)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_rectangle","title":"new_rectangle  <code>classmethod</code>","text":"<pre><code>new_rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_rectangle(\n    cls,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of rectangle.\"\"\"\n    half_height = height / 2\n    half_width = width / 2\n    return cls(\n        commands=[\n            # Bottom line\n            Line.from_tuples(\n                (center[0] - half_width, center[1] - half_height),\n                (center[0] + half_width, center[1] - half_height),\n            ),\n            # Right line\n            Line.from_tuples(\n                (center[0] + half_width, center[1] - half_height),\n                (center[0] + half_width, center[1] + half_height),\n            ),\n            # Top line\n            Line.from_tuples(\n                (center[0] + half_width, center[1] + half_height),\n                (center[0] - half_width, center[1] + half_height),\n            ),\n            # Left line\n            Line.from_tuples(\n                (center[0] - half_width, center[1] + half_height),\n                (center[0] - half_width, center[1] - half_height),\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_obround","title":"new_obround  <code>classmethod</code>","text":"<pre><code>new_obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle with shorter side rounded.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_obround(\n    cls,\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of rectangle with shorter side rounded.\"\"\"\n    half_height = height / 2\n    half_width = width / 2\n\n    if width &lt;= height:\n        # Shape is taller than wider, hence rounding should be on bottom and top\n        delta = half_width\n\n        return cls(\n            commands=[\n                # Bottom arc\n                Arc.from_tuples(\n                    (center[0] - half_width, center[1] - half_height + delta),\n                    (center[0] + half_width, center[1] - half_height + delta),\n                    (center[0], center[1] - half_height + delta),\n                    clockwise=False,\n                ),\n                # Right line\n                Line.from_tuples(\n                    (center[0] + half_width, center[1] - half_height + delta),\n                    (center[0] + half_width, center[1] + half_height - delta),\n                ),\n                # Top arc\n                Arc.from_tuples(\n                    (center[0] + half_width, center[1] + half_height - delta),\n                    (center[0] - half_width, center[1] + half_height - delta),\n                    (center[0], center[1] + half_height - delta),\n                    clockwise=False,\n                ),\n                # Left line\n                Line.from_tuples(\n                    (center[0] - half_width, center[1] + half_height - delta),\n                    (center[0] - half_width, center[1] - half_height + delta),\n                ),\n            ],\n            is_negative=is_negative,\n        )\n\n    delta = half_height\n    return cls(\n        commands=[\n            # Bottom line\n            Line.from_tuples(\n                (center[0] - half_width + delta, center[1] - half_height),\n                (center[0] + half_width - delta, center[1] - half_height),\n            ),\n            # Right line\n            Arc.from_tuples(\n                (center[0] + half_width - delta, center[1] - half_height),\n                (center[0] + half_width - delta, center[1] + half_height),\n                (center[0] + half_width - delta, center[1]),\n                clockwise=False,\n            ),\n            # Top line\n            Line.from_tuples(\n                (center[0] + half_width - delta, center[1] + half_height),\n                (center[0] - half_width + delta, center[1] + half_height),\n            ),\n            # Left line\n            Arc.from_tuples(\n                (center[0] - half_width + delta, center[1] + half_height),\n                (center[0] - half_width + delta, center[1] - half_height),\n                (center[0] - half_width + delta, center[1]),\n                clockwise=False,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_circle","title":"new_circle  <code>classmethod</code>","text":"<pre><code>new_circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of circle.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_circle(\n    cls, center: tuple[float, float], diameter: float, *, is_negative: bool\n) -&gt; Self:\n    \"\"\"Create polygon in shape of circle.\"\"\"\n    radius = diameter / 2\n    return cls(\n        commands=[\n            Arc.from_tuples(\n                (center[0] - radius, center[1]),\n                (center[0] + radius, center[1]),\n                center=center,\n                clockwise=True,\n            ),\n            Arc.from_tuples(\n                (center[0] + radius, center[1]),\n                (center[0] - radius, center[1]),\n                center=center,\n                clockwise=True,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_polygon","title":"new_polygon  <code>classmethod</code>","text":"<pre><code>new_polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of regular polygon.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_polygon(\n    cls,\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of regular polygon.\"\"\"\n    assert vertices_count &gt;= VERTEX_COUNT_IN_TRIANGLE\n    base_rotation = base_rotation % 360\n    assert 0 &lt;= base_rotation &lt; FULL_ANGLE_DEGREES\n\n    center_vector = Vector.from_tuple(center)\n    commands: list[ShapeSegment] = []\n\n    angle_step = 360 / vertices_count\n    transform_matrix = Matrix3x3.new_rotate(angle_step)\n\n    local_vertex_offset = Vector.unit.x * outer_diameter / 2\n    local_vertex_offset = local_vertex_offset.transform(\n        Matrix3x3.new_rotate(base_rotation)\n    )\n    current_angle = base_rotation\n\n    while current_angle &lt; FULL_ANGLE_DEGREES:\n        current_angle += angle_step\n        new_local_vertex_offset = local_vertex_offset.transform(transform_matrix)\n\n        commands.append(\n            Line(\n                start=center_vector + local_vertex_offset,\n                end=center_vector + new_local_vertex_offset,\n            )\n        )\n        local_vertex_offset = new_local_vertex_offset\n\n    return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_line","title":"new_line  <code>classmethod</code>","text":"<pre><code>new_line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of line with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_line(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of line with specified thickness.\"\"\"\n    start_vector = Vector.from_tuple(start)\n    end_vector = Vector.from_tuple(end)\n    parallel = (end_vector - start_vector).normalized()\n    perpendicular = Vector(x=-parallel.y, y=parallel.x) * (thickness / 2)\n\n    return cls(\n        commands=[\n            Line(\n                start=start_vector + perpendicular,\n                end=end_vector + perpendicular,\n            ),\n            Line(\n                start=end_vector - perpendicular,\n                end=start_vector - perpendicular,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_cw_arc","title":"new_cw_arc  <code>classmethod</code>","text":"<pre><code>new_cw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of clockwise arc with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_cw_arc(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of clockwise arc with specified thickness.\"\"\"\n    center_vector = Vector.from_tuple(center)\n    start_vector = Vector.from_tuple(start)\n    end_vector = Vector.from_tuple(end)\n\n    local_start_vector = start_vector - Vector.from_tuple(center)\n    extend_start_vector = local_start_vector.normalized() * (thickness / 2)\n\n    local_end_vector = end_vector - Vector.from_tuple(center)\n    extend_end_vector = local_end_vector.normalized() * (thickness / 2)\n\n    return cls(\n        commands=[\n            Arc(\n                start=start_vector + extend_start_vector,\n                end=end_vector + extend_end_vector,\n                center=center_vector,\n                clockwise=True,\n            ),\n            Arc(\n                start=end_vector - extend_end_vector,\n                end=start_vector - extend_start_vector,\n                center=center_vector,\n                clockwise=False,\n            ),\n        ],\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_ccw_arc","title":"new_ccw_arc  <code>classmethod</code>","text":"<pre><code>new_ccw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of counterclockwise arc with specified thickness.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_ccw_arc(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n) -&gt; Self:\n    \"\"\"Create polygon in shape of counterclockwise arc with specified thickness.\"\"\"\n    return cls.new_cw_arc(\n        start=end,\n        end=start,\n        center=center,\n        thickness=thickness,\n        is_negative=is_negative,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_ring","title":"new_ring  <code>classmethod</code>","text":"<pre><code>new_ring(\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool\n) -&gt; tuple[Self, Self]\n</code></pre> <p>Create polygon in shape of ring.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_ring(\n    cls,\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool,\n) -&gt; tuple[Self, Self]:\n    \"\"\"Create polygon in shape of ring.\"\"\"\n    thickness = (outer_diameter - inner_diameter) / 2\n    inner_radius = inner_diameter / 2\n\n    assert thickness &gt; 0\n    assert inner_radius &gt; 0\n\n    half_thickness = thickness / 2\n\n    point_0 = (center[0] + inner_radius + half_thickness, center[1])\n    point_1 = (center[0] - inner_radius - half_thickness, center[1])\n\n    return (\n        cls.new_cw_arc(\n            point_0,\n            point_1,\n            center,\n            thickness=thickness,\n            is_negative=is_negative,\n        ),\n        cls.new_cw_arc(\n            point_1,\n            point_0,\n            center,\n            thickness=thickness,\n            is_negative=is_negative,\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_connected_points","title":"new_connected_points  <code>classmethod</code>","text":"<pre><code>new_connected_points(\n    *points: tuple[float, float], is_negative: bool\n) -&gt; Self\n</code></pre> <p>Create polygon from connected points.</p> Source code in <code>src/pygerber/vm/commands/shape.py</code> <pre><code>@classmethod\ndef new_connected_points(\n    cls, *points: tuple[float, float], is_negative: bool\n) -&gt; Self:\n    \"\"\"Create polygon from connected points.\"\"\"\n    commands: list[ShapeSegment] = [\n        Line.from_tuples(points[i], points[i + 1]) for i in range(len(points) - 1)\n    ]\n    commands.append(Line.from_tuples(points[-1], points[0]))\n    return cls(commands=commands, is_negative=is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments","title":"shape_segments","text":"<p><code>shape_segments</code> module contains classes representing shape segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc","title":"Arc","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>class Arc(ShapeSegment):\n    \"\"\"Arc segment which can be used to define Shape contents.\n\n    Arc resolution is determined at rendering time and dynamically adjusted to provide\n    the best image quality. This gives Arc class great advantage over creating arcs\n    with multiple manually defined Line segments.\n    \"\"\"\n\n    start: Vector\n    end: Vector\n    center: Vector\n    clockwise: bool\n\n    @classmethod\n    def from_tuples(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        *,\n        clockwise: bool,\n    ) -&gt; Self:\n        \"\"\"Create a new arc from two tuples.\"\"\"\n        return cls(\n            start=Vector.from_tuple(start),\n            end=Vector.from_tuple(end),\n            center=Vector.from_tuple(center),\n            clockwise=clockwise,\n        )\n\n    def get_relative_start_point(self) -&gt; Vector:\n        \"\"\"Get starting point relative to arc center.\"\"\"\n        return self.start - self.center\n\n    def get_relative_end_point(self) -&gt; Vector:\n        \"\"\"Get ending point relative to arc center.\"\"\"\n        return self.end - self.center\n\n    def get_radius(self) -&gt; float:\n        \"\"\"Get radius of circle arc.\"\"\"\n        return self.get_relative_start_point().length()\n\n    def is_valid_arc(self) -&gt; bool:\n        \"\"\"Check if arc is valid.\"\"\"\n        return (\n            self.get_relative_start_point().length()\n            == self.get_relative_end_point().length()\n        )\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        radius = self.get_radius()\n        relative_start = self.get_relative_start_point()\n\n        total_angle = relative_start.angle_between(\n            self.get_relative_end_point(),\n        )\n\n        angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n        angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n        angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n        angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n        vectors = [\n            Vector(x=0, y=0),\n            relative_start,\n            self.get_relative_end_point(),\n        ]\n        if not self.clockwise:\n            total_angle = 360 - total_angle\n            angle_x_plus = 360 - angle_x_plus\n            angle_y_minus = 360 - angle_y_minus\n            angle_x_minus = 360 - angle_x_minus\n            angle_y_plus = 360 - angle_y_plus\n\n        if angle_x_plus &lt; total_angle:\n            vectors.append(Vector(x=radius, y=0))\n        if angle_y_minus &lt; total_angle:\n            vectors.append(Vector(x=0, y=-radius))\n        if angle_x_minus &lt; total_angle:\n            vectors.append(Vector(x=-radius, y=0))\n        if angle_y_plus &lt; total_angle:\n            vectors.append(Vector(x=0, y=radius))\n\n        return Box.from_vectors(*(v + self.center for v in vectors))\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n            center=self.center.transform(transform),\n            clockwise=(\n                self.clockwise\n                if transform[0][0] * transform[1][1] &gt; 0\n                else not self.clockwise\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@classmethod\ndef from_tuples(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool,\n) -&gt; Self:\n    \"\"\"Create a new arc from two tuples.\"\"\"\n    return cls(\n        start=Vector.from_tuple(start),\n        end=Vector.from_tuple(end),\n        center=Vector.from_tuple(center),\n        clockwise=clockwise,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_start_point(self) -&gt; Vector:\n    \"\"\"Get starting point relative to arc center.\"\"\"\n    return self.start - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_end_point(self) -&gt; Vector:\n    \"\"\"Get ending point relative to arc center.\"\"\"\n    return self.end - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_radius(self) -&gt; float:\n    \"\"\"Get radius of circle arc.\"\"\"\n    return self.get_relative_start_point().length()\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def is_valid_arc(self) -&gt; bool:\n    \"\"\"Check if arc is valid.\"\"\"\n    return (\n        self.get_relative_start_point().length()\n        == self.get_relative_end_point().length()\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    radius = self.get_radius()\n    relative_start = self.get_relative_start_point()\n\n    total_angle = relative_start.angle_between(\n        self.get_relative_end_point(),\n    )\n\n    angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n    angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n    angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n    angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n    vectors = [\n        Vector(x=0, y=0),\n        relative_start,\n        self.get_relative_end_point(),\n    ]\n    if not self.clockwise:\n        total_angle = 360 - total_angle\n        angle_x_plus = 360 - angle_x_plus\n        angle_y_minus = 360 - angle_y_minus\n        angle_x_minus = 360 - angle_x_minus\n        angle_y_plus = 360 - angle_y_plus\n\n    if angle_x_plus &lt; total_angle:\n        vectors.append(Vector(x=radius, y=0))\n    if angle_y_minus &lt; total_angle:\n        vectors.append(Vector(x=0, y=-radius))\n    if angle_x_minus &lt; total_angle:\n        vectors.append(Vector(x=-radius, y=0))\n    if angle_y_plus &lt; total_angle:\n        vectors.append(Vector(x=0, y=radius))\n\n    return Box.from_vectors(*(v + self.center for v in vectors))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n        center=self.center.transform(transform),\n        clockwise=(\n            self.clockwise\n            if transform[0][0] * transform[1][1] &gt; 0\n            else not self.clockwise\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line","title":"Line","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>class Line(ShapeSegment):\n    \"\"\"Line segment which can be used to define Shape contents.\"\"\"\n\n    start: Vector\n    end: Vector\n\n    @classmethod\n    def from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n        \"\"\"Create a new line from two tuples.\"\"\"\n        return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        return Box.from_vectors(self.start, self.end)\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@classmethod\ndef from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n    \"\"\"Create a new line from two tuples.\"\"\"\n    return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    return Box.from_vectors(self.start, self.end)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment","title":"ShapeSegment","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>class ShapeSegment(ModelType):\n    \"\"\"Base class for shape segment types.\"\"\"\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        raise NotImplementedError\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform line.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform line.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html","title":"arc","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc","title":"arc","text":"<p><code>line</code> module contains Line class, descendant of ShapeSegment class.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc","title":"Arc","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>class Arc(ShapeSegment):\n    \"\"\"Arc segment which can be used to define Shape contents.\n\n    Arc resolution is determined at rendering time and dynamically adjusted to provide\n    the best image quality. This gives Arc class great advantage over creating arcs\n    with multiple manually defined Line segments.\n    \"\"\"\n\n    start: Vector\n    end: Vector\n    center: Vector\n    clockwise: bool\n\n    @classmethod\n    def from_tuples(\n        cls,\n        start: tuple[float, float],\n        end: tuple[float, float],\n        center: tuple[float, float],\n        *,\n        clockwise: bool,\n    ) -&gt; Self:\n        \"\"\"Create a new arc from two tuples.\"\"\"\n        return cls(\n            start=Vector.from_tuple(start),\n            end=Vector.from_tuple(end),\n            center=Vector.from_tuple(center),\n            clockwise=clockwise,\n        )\n\n    def get_relative_start_point(self) -&gt; Vector:\n        \"\"\"Get starting point relative to arc center.\"\"\"\n        return self.start - self.center\n\n    def get_relative_end_point(self) -&gt; Vector:\n        \"\"\"Get ending point relative to arc center.\"\"\"\n        return self.end - self.center\n\n    def get_radius(self) -&gt; float:\n        \"\"\"Get radius of circle arc.\"\"\"\n        return self.get_relative_start_point().length()\n\n    def is_valid_arc(self) -&gt; bool:\n        \"\"\"Check if arc is valid.\"\"\"\n        return (\n            self.get_relative_start_point().length()\n            == self.get_relative_end_point().length()\n        )\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        radius = self.get_radius()\n        relative_start = self.get_relative_start_point()\n\n        total_angle = relative_start.angle_between(\n            self.get_relative_end_point(),\n        )\n\n        angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n        angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n        angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n        angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n        vectors = [\n            Vector(x=0, y=0),\n            relative_start,\n            self.get_relative_end_point(),\n        ]\n        if not self.clockwise:\n            total_angle = 360 - total_angle\n            angle_x_plus = 360 - angle_x_plus\n            angle_y_minus = 360 - angle_y_minus\n            angle_x_minus = 360 - angle_x_minus\n            angle_y_plus = 360 - angle_y_plus\n\n        if angle_x_plus &lt; total_angle:\n            vectors.append(Vector(x=radius, y=0))\n        if angle_y_minus &lt; total_angle:\n            vectors.append(Vector(x=0, y=-radius))\n        if angle_x_minus &lt; total_angle:\n            vectors.append(Vector(x=-radius, y=0))\n        if angle_y_plus &lt; total_angle:\n            vectors.append(Vector(x=0, y=radius))\n\n        return Box.from_vectors(*(v + self.center for v in vectors))\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n            center=self.center.transform(transform),\n            clockwise=(\n                self.clockwise\n                if transform[0][0] * transform[1][1] &gt; 0\n                else not self.clockwise\n            ),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@classmethod\ndef from_tuples(\n    cls,\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool,\n) -&gt; Self:\n    \"\"\"Create a new arc from two tuples.\"\"\"\n    return cls(\n        start=Vector.from_tuple(start),\n        end=Vector.from_tuple(end),\n        center=Vector.from_tuple(center),\n        clockwise=clockwise,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_start_point(self) -&gt; Vector:\n    \"\"\"Get starting point relative to arc center.\"\"\"\n    return self.start - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_relative_end_point(self) -&gt; Vector:\n    \"\"\"Get ending point relative to arc center.\"\"\"\n    return self.end - self.center\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def get_radius(self) -&gt; float:\n    \"\"\"Get radius of circle arc.\"\"\"\n    return self.get_relative_start_point().length()\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def is_valid_arc(self) -&gt; bool:\n    \"\"\"Check if arc is valid.\"\"\"\n    return (\n        self.get_relative_start_point().length()\n        == self.get_relative_end_point().length()\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    radius = self.get_radius()\n    relative_start = self.get_relative_start_point()\n\n    total_angle = relative_start.angle_between(\n        self.get_relative_end_point(),\n    )\n\n    angle_x_plus = relative_start.angle_between(Vector.unit.x) % 360\n    angle_y_minus = relative_start.angle_between(-Vector.unit.y) % 360\n    angle_x_minus = relative_start.angle_between(-Vector.unit.x) % 360\n    angle_y_plus = relative_start.angle_between(Vector.unit.y) % 360\n\n    vectors = [\n        Vector(x=0, y=0),\n        relative_start,\n        self.get_relative_end_point(),\n    ]\n    if not self.clockwise:\n        total_angle = 360 - total_angle\n        angle_x_plus = 360 - angle_x_plus\n        angle_y_minus = 360 - angle_y_minus\n        angle_x_minus = 360 - angle_x_minus\n        angle_y_plus = 360 - angle_y_plus\n\n    if angle_x_plus &lt; total_angle:\n        vectors.append(Vector(x=radius, y=0))\n    if angle_y_minus &lt; total_angle:\n        vectors.append(Vector(x=0, y=-radius))\n    if angle_x_minus &lt; total_angle:\n        vectors.append(Vector(x=-radius, y=0))\n    if angle_y_plus &lt; total_angle:\n        vectors.append(Vector(x=0, y=radius))\n\n    return Box.from_vectors(*(v + self.center for v in vectors))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/arc.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n        center=self.center.transform(transform),\n        clockwise=(\n            self.clockwise\n            if transform[0][0] * transform[1][1] &gt; 0\n            else not self.clockwise\n        ),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html","title":"line","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line","title":"line","text":"<p><code>line</code> module contains Line class, descendant of ShapeSegment class.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line","title":"Line","text":"<p>             Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>class Line(ShapeSegment):\n    \"\"\"Line segment which can be used to define Shape contents.\"\"\"\n\n    start: Vector\n    end: Vector\n\n    @classmethod\n    def from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n        \"\"\"Create a new line from two tuples.\"\"\"\n        return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        return Box.from_vectors(self.start, self.end)\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform points defining this line.\"\"\"\n        return self.__class__(\n            start=self.start.transform(transform),\n            end=self.end.transform(transform),\n        )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@classmethod\ndef from_tuples(cls, start: tuple[float, float], end: tuple[float, float]) -&gt; Self:\n    \"\"\"Create a new line from two tuples.\"\"\"\n    return cls(start=Vector.from_tuple(start), end=Vector.from_tuple(end))\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    return Box.from_vectors(self.start, self.end)\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/line.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform points defining this line.\"\"\"\n    return self.__class__(\n        start=self.start.transform(transform),\n        end=self.end.transform(transform),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html","title":"shape_segment","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment","title":"shape_segment","text":"<p><code>base</code> module contains ShapeSegment class used as base class for all Shape segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment","title":"ShapeSegment","text":"<p>             Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>class ShapeSegment(ModelType):\n    \"\"\"Base class for shape segment types.\"\"\"\n\n    @pp.cached_property\n    def outer_box(self) -&gt; Box:\n        \"\"\"Get outer box of shape segment.\"\"\"\n        raise NotImplementedError\n\n    def transform(self, transform: Matrix3x3) -&gt; Self:\n        \"\"\"Transform line.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>@pp.cached_property\ndef outer_box(self) -&gt; Box:\n    \"\"\"Get outer box of shape segment.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p> Source code in <code>src/pygerber/vm/commands/shape_segments/shape_segment.py</code> <pre><code>def transform(self, transform: Matrix3x3) -&gt; Self:\n    \"\"\"Transform line.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow","title":"pillow","text":"<p><code>pillow</code> package contains concrete implementation of <code>VirtualMachine</code> using Pillow library.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.DPMMTooSmallError","title":"DPMMTooSmallError","text":"<p>             Bases: <code>PillowVirtualMachineError</code></p> <p>Raised when dots per millimeter is too small for the given DPI.</p> Source code in <code>src/pygerber/vm/pillow/errors.py</code> <pre><code>class DPMMTooSmallError(PillowVirtualMachineError):\n    \"\"\"Raised when dots per millimeter is too small for the given DPI.\"\"\"\n\n    def __init__(self, dpmm: int) -&gt; None:\n        super().__init__(\n            f\"Dots per millimeter ({dpmm}) is to small to render desired image.\"\n        )\n        self.dpmm = dpmm\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachineError","title":"PillowVirtualMachineError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the PillowVirtualMachine.</p> Source code in <code>src/pygerber/vm/pillow/errors.py</code> <pre><code>class PillowVirtualMachineError(VirtualMachineError):\n    \"\"\"Base class for all exceptions in the PillowVirtualMachine.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowDeferredLayer","title":"PillowDeferredLayer","text":"<p>             Bases: <code>DeferredLayer</code></p> <p><code>PillowDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowDeferredLayer(DeferredLayer):\n    \"\"\"`PillowDeferredLayer` class represents drawing space of size unknown at time of\n    creation of layer.\n\n    It is specifically used by `PillowVirtualMachine` class.\n    \"\"\"\n\n    def __init__(\n        self, dpmm: int, layer_id: LayerID, origin: Vector, commands: list[DrawCmdT]\n    ) -&gt; None:\n        super().__init__(layer_id, origin, commands)\n        self.dpmm = dpmm\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowEagerLayer","title":"PillowEagerLayer","text":"<p>             Bases: <code>EagerLayer</code></p> <p><code>PillowEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowEagerLayer(EagerLayer):\n    \"\"\"`PillowEagerLayer` class represents drawing space of known fixed size.\n\n    It is specifically used by `PillowVirtualMachine` class.\n    \"\"\"\n\n    def __init__(self, dpmm: int, layer_id: LayerID, box: Box, origin: Vector) -&gt; None:\n        super().__init__(layer_id, box, origin)\n        self.origin = origin\n        self.dpmm = dpmm\n        self.pixel_size = (\n            self.to_pixel(self.box.width),\n            self.to_pixel(self.box.height),\n        )\n        self.image = Image.new(\"1\", self.pixel_size, 0)\n        self.draw = ImageDraw.Draw(self.image)\n\n    def to_pixel(self, value: float) -&gt; int:\n        \"\"\"Convert value in mm to pixels.\"\"\"\n        return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowEagerLayer.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def to_pixel(self, value: float) -&gt; int:\n    \"\"\"Convert value in mm to pixels.\"\"\"\n    return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult","title":"PillowResult","text":"<p>             Bases: <code>Result</code></p> <p>Result of drawing commands.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowResult(Result):\n    \"\"\"Result of drawing commands.\"\"\"\n\n    def __init__(self, image: Optional[Image.Image]) -&gt; None:\n        self.image = image\n\n    def is_success(self) -&gt; bool:\n        \"\"\"Check if result is successful.\"\"\"\n        return self.image is not None\n\n    def get_image(self, style: Style = Style.presets.COPPER) -&gt; Image.Image:\n        \"\"\"Get image with given color scheme.\"\"\"\n        assert isinstance(style, Style)\n        if self.image is None:\n            msg = \"Image is not available.\"\n            raise ValueError(msg)\n        return self.image\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.is_success","title":"is_success","text":"<pre><code>is_success() -&gt; bool\n</code></pre> <p>Check if result is successful.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def is_success(self) -&gt; bool:\n    \"\"\"Check if result is successful.\"\"\"\n    return self.image is not None\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.get_image","title":"get_image","text":"<pre><code>get_image(\n    style: Style = Style.presets.COPPER,\n) -&gt; Image.Image\n</code></pre> <p>Get image with given color scheme.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def get_image(self, style: Style = Style.presets.COPPER) -&gt; Image.Image:\n    \"\"\"Get image with given color scheme.\"\"\"\n    assert isinstance(style, Style)\n    if self.image is None:\n        msg = \"Image is not available.\"\n        raise ValueError(msg)\n    return self.image\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine","title":"PillowVirtualMachine","text":"<p>             Bases: <code>VirtualMachine</code></p> <p>Execute drawing commands using Pillow library.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowVirtualMachine(VirtualMachine):\n    \"\"\"Execute drawing commands using Pillow library.\"\"\"\n\n    def __init__(self, dpmm: int) -&gt; None:\n        super().__init__()\n        self.dpmm = dpmm\n        self.angle_length_to_segment_count = lambda angle_length: (\n            segment_count\n            if (segment_count := angle_length * 2) &gt; MIN_SEGMENT_COUNT\n            else MIN_SEGMENT_COUNT\n        )\n\n    @property\n    def layer(self) -&gt; PillowEagerLayer:\n        \"\"\"Get current layer.\"\"\"\n        return super().layer  # type: ignore[return-value]\n\n    def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n        \"\"\"Create new eager layer instances (factory method).\"\"\"\n        assert box.width &gt; 0\n        assert box.height &gt; 0\n        return PillowEagerLayer(self.dpmm, layer_id, box, origin)\n\n    def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n        \"\"\"Create new deferred layer instances (factory method).\"\"\"\n        return PillowDeferredLayer(self.dpmm, layer_id, origin, commands=[])\n\n    def on_shape_eager(self, command: Shape) -&gt; None:\n        \"\"\"Visit shape command.\"\"\"\n        points: list[tuple[float, float]] = []\n        for segment in command.commands:\n            if isinstance(segment, Line):\n                start = (segment.start.x, segment.start.y)\n                if len(points) == 0 or points[-1] != start:\n                    points.append(\n                        (segment.start.x, segment.start.y),\n                    )\n                points.append(\n                    (segment.end.x, segment.end.y),\n                )\n            elif isinstance(segment, Arc):\n                start = (segment.start.x, segment.start.y)\n                if len(points) == 0 or points[-1] != start:\n                    points.append(\n                        (segment.start.x, segment.start.y),\n                    )\n                points.extend(self._calculate_arc_points(segment))\n                points.append(\n                    (segment.end.x, segment.end.y),\n                )\n            else:\n                raise NotImplementedError\n\n        self._polygon(points, is_negative=command.is_negative)\n\n    def _calculate_arc_points(\n        self, command: Arc\n    ) -&gt; Generator[tuple[float, float], None, None]:\n        \"\"\"Calculate points on arc.\"\"\"\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector.unit.x,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector.unit.x,\n            )\n            % 360\n        )\n        assert start_angle &gt;= 0\n        assert end_angle &gt;= 0\n\n        assert start_angle &lt; FULL_ANGLE_DEGREES\n        assert end_angle &lt; FULL_ANGLE_DEGREES\n\n        angle_delta = abs(start_angle - end_angle)\n        angle_length = (angle_delta / 360) * (command.get_radius() * 2 * math.pi)\n        angle_length_pixels = self.to_pixel(angle_length)\n        segment_count = self.angle_length_to_segment_count(angle_length_pixels)\n\n        if segment_count &lt; 1:\n            raise DPMMTooSmallError(self.dpmm)\n\n        angle_delta = angle_delta / segment_count\n\n        assert angle_delta &gt; 0\n\n        angle_generator: Generator[float, None, None]\n\n        if start_angle &lt;= end_angle:\n            if command.clockwise:\n                end_angle -= FULL_ANGLE_DEGREES\n                angle_generator = self._generate_arc_angles(\n                    start_angle, end_angle, angle_delta, *DECREASE_ANGLE\n                )\n            else:\n                angle_generator = self._generate_arc_angles(\n                    start_angle, end_angle, angle_delta, *INCREASE_ANGLE\n                )\n        elif command.clockwise:\n            angle_generator = self._generate_arc_angles(\n                start_angle, end_angle, angle_delta, *DECREASE_ANGLE\n            )\n        else:\n            end_angle += FULL_ANGLE_DEGREES\n            angle_generator = self._generate_arc_angles(\n                start_angle, end_angle, angle_delta, *INCREASE_ANGLE\n            )\n\n        radius = command.get_radius()\n\n        yield command.start.xy\n\n        for angle in angle_generator:\n            offset_vector = Vector(\n                x=radius * math.cos(math.radians(angle)),\n                y=radius * math.sin(math.radians(angle)),\n            )\n\n            yield (command.center + offset_vector).xy\n\n        yield command.end.xy\n\n    def _generate_arc_angles(\n        self,\n        start: float,\n        end: float,\n        delta: float,\n        apply_delta: Callable[[float, float], float],\n        compare_angles: Callable[[float, float], bool],\n    ) -&gt; Generator[float, None, None]:\n        current_angle = start\n        while compare_angles(current_angle, end):\n            yield current_angle\n            current_angle = apply_delta(current_angle, delta)\n        yield end\n\n    def _polygon(\n        self, points: Sequence[tuple[float, float]], *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Draw a polygon.\"\"\"\n        layer = self.layer\n        layer_box = layer.box\n        x_offset = layer_box.center.x - layer_box.width / 2\n        y_offset = layer_box.center.y - layer_box.height / 2\n\n        layer.draw.polygon(\n            [\n                (\n                    self.to_pixel(x - x_offset),\n                    self.to_pixel(y - y_offset),\n                )\n                for (x, y) in points\n            ],\n            fill=self.get_color(is_negative=is_negative),\n            width=0,\n        )\n\n    def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n        source_layer = self.get_layer(command.source_layer_id)\n\n        if isinstance(source_layer, PillowDeferredLayer):\n            raise PasteDeferredLayerNotAllowedError(command.source_layer_id)\n\n        assert isinstance(source_layer, PillowEagerLayer)\n\n        if command.is_negative:\n            image = ImageOps.invert(source_layer.image.convert(\"L\")).convert(\"1\")\n        else:\n            image = source_layer.image\n\n        layer = self.layer\n        layer_box = layer.box\n        x_offset = layer_box.center.x - layer_box.width / 2\n        y_offset = layer_box.center.y - layer_box.height / 2\n\n        layer.image.paste(\n            image,\n            (\n                self.to_pixel(\n                    command.center.x\n                    - (source_layer.box.width / 2)\n                    + source_layer.box.center.x\n                    - source_layer.origin.x\n                    - x_offset\n                ),\n                self.to_pixel(\n                    command.center.y\n                    - (source_layer.box.height / 2)\n                    + source_layer.box.center.y\n                    - source_layer.origin.y\n                    - y_offset\n                ),\n            ),\n            mask=source_layer.image,\n        )\n\n    def to_pixel(self, value: float) -&gt; int:\n        \"\"\"Convert value in mm to pixels.\"\"\"\n        return int(value * self.dpmm)\n\n    def get_color(self, *, is_negative: bool) -&gt; int:\n        \"\"\"Get color for positive or negative.\"\"\"\n        return 0 if is_negative else 1\n\n    def run(self, rvmc: RVMC) -&gt; PillowResult:\n        \"\"\"Execute all commands.\"\"\"\n        super().run(rvmc)\n\n        layer = self._layers.get(self.MAIN_LAYER_ID, None)\n\n        if layer is None:\n            return PillowResult(None)\n\n        assert isinstance(layer, PillowEagerLayer)\n\n        return PillowResult(layer.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM))\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: PillowEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, box: Box, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n    \"\"\"Create new eager layer instances (factory method).\"\"\"\n    assert box.width &gt; 0\n    assert box.height &gt; 0\n    return PillowEagerLayer(self.dpmm, layer_id, box, origin)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n    \"\"\"Create new deferred layer instances (factory method).\"\"\"\n    return PillowDeferredLayer(self.dpmm, layer_id, origin, commands=[])\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def on_shape_eager(self, command: Shape) -&gt; None:\n    \"\"\"Visit shape command.\"\"\"\n    points: list[tuple[float, float]] = []\n    for segment in command.commands:\n        if isinstance(segment, Line):\n            start = (segment.start.x, segment.start.y)\n            if len(points) == 0 or points[-1] != start:\n                points.append(\n                    (segment.start.x, segment.start.y),\n                )\n            points.append(\n                (segment.end.x, segment.end.y),\n            )\n        elif isinstance(segment, Arc):\n            start = (segment.start.x, segment.start.y)\n            if len(points) == 0 or points[-1] != start:\n                points.append(\n                    (segment.start.x, segment.start.y),\n                )\n            points.extend(self._calculate_arc_points(segment))\n            points.append(\n                (segment.end.x, segment.end.y),\n            )\n        else:\n            raise NotImplementedError\n\n    self._polygon(points, is_negative=command.is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n    source_layer = self.get_layer(command.source_layer_id)\n\n    if isinstance(source_layer, PillowDeferredLayer):\n        raise PasteDeferredLayerNotAllowedError(command.source_layer_id)\n\n    assert isinstance(source_layer, PillowEagerLayer)\n\n    if command.is_negative:\n        image = ImageOps.invert(source_layer.image.convert(\"L\")).convert(\"1\")\n    else:\n        image = source_layer.image\n\n    layer = self.layer\n    layer_box = layer.box\n    x_offset = layer_box.center.x - layer_box.width / 2\n    y_offset = layer_box.center.y - layer_box.height / 2\n\n    layer.image.paste(\n        image,\n        (\n            self.to_pixel(\n                command.center.x\n                - (source_layer.box.width / 2)\n                + source_layer.box.center.x\n                - source_layer.origin.x\n                - x_offset\n            ),\n            self.to_pixel(\n                command.center.y\n                - (source_layer.box.height / 2)\n                + source_layer.box.center.y\n                - source_layer.origin.y\n                - y_offset\n            ),\n        ),\n        mask=source_layer.image,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def to_pixel(self, value: float) -&gt; int:\n    \"\"\"Convert value in mm to pixels.\"\"\"\n    return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.get_color","title":"get_color","text":"<pre><code>get_color(*, is_negative: bool) -&gt; int\n</code></pre> <p>Get color for positive or negative.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def get_color(self, *, is_negative: bool) -&gt; int:\n    \"\"\"Get color for positive or negative.\"\"\"\n    return 0 if is_negative else 1\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; PillowResult\n</code></pre> <p>Execute all commands.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def run(self, rvmc: RVMC) -&gt; PillowResult:\n    \"\"\"Execute all commands.\"\"\"\n    super().run(rvmc)\n\n    layer = self._layers.get(self.MAIN_LAYER_ID, None)\n\n    if layer is None:\n        return PillowResult(None)\n\n    assert isinstance(layer, PillowEagerLayer)\n\n    return PillowResult(layer.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM))\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/errors.html","title":"errors","text":""},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors","title":"errors","text":"<p><code>errors</code> module aggregates all exceptions related to the PillowVirtualMachine.</p>"},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors.PillowVirtualMachineError","title":"PillowVirtualMachineError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the PillowVirtualMachine.</p> Source code in <code>src/pygerber/vm/pillow/errors.py</code> <pre><code>class PillowVirtualMachineError(VirtualMachineError):\n    \"\"\"Base class for all exceptions in the PillowVirtualMachine.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors.DPMMTooSmallError","title":"DPMMTooSmallError","text":"<p>             Bases: <code>PillowVirtualMachineError</code></p> <p>Raised when dots per millimeter is too small for the given DPI.</p> Source code in <code>src/pygerber/vm/pillow/errors.py</code> <pre><code>class DPMMTooSmallError(PillowVirtualMachineError):\n    \"\"\"Raised when dots per millimeter is too small for the given DPI.\"\"\"\n\n    def __init__(self, dpmm: int) -&gt; None:\n        super().__init__(\n            f\"Dots per millimeter ({dpmm}) is to small to render desired image.\"\n        )\n        self.dpmm = dpmm\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html","title":"vm","text":""},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm","title":"vm","text":"<p><code>pillow</code> module contains concrete implementation of <code>VirtualMachine</code> using Pillow library.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult","title":"PillowResult","text":"<p>             Bases: <code>Result</code></p> <p>Result of drawing commands.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowResult(Result):\n    \"\"\"Result of drawing commands.\"\"\"\n\n    def __init__(self, image: Optional[Image.Image]) -&gt; None:\n        self.image = image\n\n    def is_success(self) -&gt; bool:\n        \"\"\"Check if result is successful.\"\"\"\n        return self.image is not None\n\n    def get_image(self, style: Style = Style.presets.COPPER) -&gt; Image.Image:\n        \"\"\"Get image with given color scheme.\"\"\"\n        assert isinstance(style, Style)\n        if self.image is None:\n            msg = \"Image is not available.\"\n            raise ValueError(msg)\n        return self.image\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.is_success","title":"is_success","text":"<pre><code>is_success() -&gt; bool\n</code></pre> <p>Check if result is successful.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def is_success(self) -&gt; bool:\n    \"\"\"Check if result is successful.\"\"\"\n    return self.image is not None\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.get_image","title":"get_image","text":"<pre><code>get_image(\n    style: Style = Style.presets.COPPER,\n) -&gt; Image.Image\n</code></pre> <p>Get image with given color scheme.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def get_image(self, style: Style = Style.presets.COPPER) -&gt; Image.Image:\n    \"\"\"Get image with given color scheme.\"\"\"\n    assert isinstance(style, Style)\n    if self.image is None:\n        msg = \"Image is not available.\"\n        raise ValueError(msg)\n    return self.image\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowEagerLayer","title":"PillowEagerLayer","text":"<p>             Bases: <code>EagerLayer</code></p> <p><code>PillowEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowEagerLayer(EagerLayer):\n    \"\"\"`PillowEagerLayer` class represents drawing space of known fixed size.\n\n    It is specifically used by `PillowVirtualMachine` class.\n    \"\"\"\n\n    def __init__(self, dpmm: int, layer_id: LayerID, box: Box, origin: Vector) -&gt; None:\n        super().__init__(layer_id, box, origin)\n        self.origin = origin\n        self.dpmm = dpmm\n        self.pixel_size = (\n            self.to_pixel(self.box.width),\n            self.to_pixel(self.box.height),\n        )\n        self.image = Image.new(\"1\", self.pixel_size, 0)\n        self.draw = ImageDraw.Draw(self.image)\n\n    def to_pixel(self, value: float) -&gt; int:\n        \"\"\"Convert value in mm to pixels.\"\"\"\n        return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowEagerLayer.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def to_pixel(self, value: float) -&gt; int:\n    \"\"\"Convert value in mm to pixels.\"\"\"\n    return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowDeferredLayer","title":"PillowDeferredLayer","text":"<p>             Bases: <code>DeferredLayer</code></p> <p><code>PillowDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowDeferredLayer(DeferredLayer):\n    \"\"\"`PillowDeferredLayer` class represents drawing space of size unknown at time of\n    creation of layer.\n\n    It is specifically used by `PillowVirtualMachine` class.\n    \"\"\"\n\n    def __init__(\n        self, dpmm: int, layer_id: LayerID, origin: Vector, commands: list[DrawCmdT]\n    ) -&gt; None:\n        super().__init__(layer_id, origin, commands)\n        self.dpmm = dpmm\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine","title":"PillowVirtualMachine","text":"<p>             Bases: <code>VirtualMachine</code></p> <p>Execute drawing commands using Pillow library.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>class PillowVirtualMachine(VirtualMachine):\n    \"\"\"Execute drawing commands using Pillow library.\"\"\"\n\n    def __init__(self, dpmm: int) -&gt; None:\n        super().__init__()\n        self.dpmm = dpmm\n        self.angle_length_to_segment_count = lambda angle_length: (\n            segment_count\n            if (segment_count := angle_length * 2) &gt; MIN_SEGMENT_COUNT\n            else MIN_SEGMENT_COUNT\n        )\n\n    @property\n    def layer(self) -&gt; PillowEagerLayer:\n        \"\"\"Get current layer.\"\"\"\n        return super().layer  # type: ignore[return-value]\n\n    def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n        \"\"\"Create new eager layer instances (factory method).\"\"\"\n        assert box.width &gt; 0\n        assert box.height &gt; 0\n        return PillowEagerLayer(self.dpmm, layer_id, box, origin)\n\n    def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n        \"\"\"Create new deferred layer instances (factory method).\"\"\"\n        return PillowDeferredLayer(self.dpmm, layer_id, origin, commands=[])\n\n    def on_shape_eager(self, command: Shape) -&gt; None:\n        \"\"\"Visit shape command.\"\"\"\n        points: list[tuple[float, float]] = []\n        for segment in command.commands:\n            if isinstance(segment, Line):\n                start = (segment.start.x, segment.start.y)\n                if len(points) == 0 or points[-1] != start:\n                    points.append(\n                        (segment.start.x, segment.start.y),\n                    )\n                points.append(\n                    (segment.end.x, segment.end.y),\n                )\n            elif isinstance(segment, Arc):\n                start = (segment.start.x, segment.start.y)\n                if len(points) == 0 or points[-1] != start:\n                    points.append(\n                        (segment.start.x, segment.start.y),\n                    )\n                points.extend(self._calculate_arc_points(segment))\n                points.append(\n                    (segment.end.x, segment.end.y),\n                )\n            else:\n                raise NotImplementedError\n\n        self._polygon(points, is_negative=command.is_negative)\n\n    def _calculate_arc_points(\n        self, command: Arc\n    ) -&gt; Generator[tuple[float, float], None, None]:\n        \"\"\"Calculate points on arc.\"\"\"\n        start_angle = (\n            command.get_relative_start_point().angle_between(\n                Vector.unit.x,\n            )\n            % 360\n        )\n        end_angle = (\n            command.get_relative_end_point().angle_between(\n                Vector.unit.x,\n            )\n            % 360\n        )\n        assert start_angle &gt;= 0\n        assert end_angle &gt;= 0\n\n        assert start_angle &lt; FULL_ANGLE_DEGREES\n        assert end_angle &lt; FULL_ANGLE_DEGREES\n\n        angle_delta = abs(start_angle - end_angle)\n        angle_length = (angle_delta / 360) * (command.get_radius() * 2 * math.pi)\n        angle_length_pixels = self.to_pixel(angle_length)\n        segment_count = self.angle_length_to_segment_count(angle_length_pixels)\n\n        if segment_count &lt; 1:\n            raise DPMMTooSmallError(self.dpmm)\n\n        angle_delta = angle_delta / segment_count\n\n        assert angle_delta &gt; 0\n\n        angle_generator: Generator[float, None, None]\n\n        if start_angle &lt;= end_angle:\n            if command.clockwise:\n                end_angle -= FULL_ANGLE_DEGREES\n                angle_generator = self._generate_arc_angles(\n                    start_angle, end_angle, angle_delta, *DECREASE_ANGLE\n                )\n            else:\n                angle_generator = self._generate_arc_angles(\n                    start_angle, end_angle, angle_delta, *INCREASE_ANGLE\n                )\n        elif command.clockwise:\n            angle_generator = self._generate_arc_angles(\n                start_angle, end_angle, angle_delta, *DECREASE_ANGLE\n            )\n        else:\n            end_angle += FULL_ANGLE_DEGREES\n            angle_generator = self._generate_arc_angles(\n                start_angle, end_angle, angle_delta, *INCREASE_ANGLE\n            )\n\n        radius = command.get_radius()\n\n        yield command.start.xy\n\n        for angle in angle_generator:\n            offset_vector = Vector(\n                x=radius * math.cos(math.radians(angle)),\n                y=radius * math.sin(math.radians(angle)),\n            )\n\n            yield (command.center + offset_vector).xy\n\n        yield command.end.xy\n\n    def _generate_arc_angles(\n        self,\n        start: float,\n        end: float,\n        delta: float,\n        apply_delta: Callable[[float, float], float],\n        compare_angles: Callable[[float, float], bool],\n    ) -&gt; Generator[float, None, None]:\n        current_angle = start\n        while compare_angles(current_angle, end):\n            yield current_angle\n            current_angle = apply_delta(current_angle, delta)\n        yield end\n\n    def _polygon(\n        self, points: Sequence[tuple[float, float]], *, is_negative: bool\n    ) -&gt; None:\n        \"\"\"Draw a polygon.\"\"\"\n        layer = self.layer\n        layer_box = layer.box\n        x_offset = layer_box.center.x - layer_box.width / 2\n        y_offset = layer_box.center.y - layer_box.height / 2\n\n        layer.draw.polygon(\n            [\n                (\n                    self.to_pixel(x - x_offset),\n                    self.to_pixel(y - y_offset),\n                )\n                for (x, y) in points\n            ],\n            fill=self.get_color(is_negative=is_negative),\n            width=0,\n        )\n\n    def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n        \"\"\"Visit `PasteLayer` command.\"\"\"\n        source_layer = self.get_layer(command.source_layer_id)\n\n        if isinstance(source_layer, PillowDeferredLayer):\n            raise PasteDeferredLayerNotAllowedError(command.source_layer_id)\n\n        assert isinstance(source_layer, PillowEagerLayer)\n\n        if command.is_negative:\n            image = ImageOps.invert(source_layer.image.convert(\"L\")).convert(\"1\")\n        else:\n            image = source_layer.image\n\n        layer = self.layer\n        layer_box = layer.box\n        x_offset = layer_box.center.x - layer_box.width / 2\n        y_offset = layer_box.center.y - layer_box.height / 2\n\n        layer.image.paste(\n            image,\n            (\n                self.to_pixel(\n                    command.center.x\n                    - (source_layer.box.width / 2)\n                    + source_layer.box.center.x\n                    - source_layer.origin.x\n                    - x_offset\n                ),\n                self.to_pixel(\n                    command.center.y\n                    - (source_layer.box.height / 2)\n                    + source_layer.box.center.y\n                    - source_layer.origin.y\n                    - y_offset\n                ),\n            ),\n            mask=source_layer.image,\n        )\n\n    def to_pixel(self, value: float) -&gt; int:\n        \"\"\"Convert value in mm to pixels.\"\"\"\n        return int(value * self.dpmm)\n\n    def get_color(self, *, is_negative: bool) -&gt; int:\n        \"\"\"Get color for positive or negative.\"\"\"\n        return 0 if is_negative else 1\n\n    def run(self, rvmc: RVMC) -&gt; PillowResult:\n        \"\"\"Execute all commands.\"\"\"\n        super().run(rvmc)\n\n        layer = self._layers.get(self.MAIN_LAYER_ID, None)\n\n        if layer is None:\n            return PillowResult(None)\n\n        assert isinstance(layer, PillowEagerLayer)\n\n        return PillowResult(layer.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM))\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: PillowEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, box: Box, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def create_eager_layer(self, layer_id: LayerID, box: Box, origin: Vector) -&gt; Layer:\n    \"\"\"Create new eager layer instances (factory method).\"\"\"\n    assert box.width &gt; 0\n    assert box.height &gt; 0\n    return PillowEagerLayer(self.dpmm, layer_id, box, origin)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def create_deferred_layer(self, layer_id: LayerID, origin: Vector) -&gt; Layer:\n    \"\"\"Create new deferred layer instances (factory method).\"\"\"\n    return PillowDeferredLayer(self.dpmm, layer_id, origin, commands=[])\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def on_shape_eager(self, command: Shape) -&gt; None:\n    \"\"\"Visit shape command.\"\"\"\n    points: list[tuple[float, float]] = []\n    for segment in command.commands:\n        if isinstance(segment, Line):\n            start = (segment.start.x, segment.start.y)\n            if len(points) == 0 or points[-1] != start:\n                points.append(\n                    (segment.start.x, segment.start.y),\n                )\n            points.append(\n                (segment.end.x, segment.end.y),\n            )\n        elif isinstance(segment, Arc):\n            start = (segment.start.x, segment.start.y)\n            if len(points) == 0 or points[-1] != start:\n                points.append(\n                    (segment.start.x, segment.start.y),\n                )\n            points.extend(self._calculate_arc_points(segment))\n            points.append(\n                (segment.end.x, segment.end.y),\n            )\n        else:\n            raise NotImplementedError\n\n    self._polygon(points, is_negative=command.is_negative)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def on_paste_layer_eager(self, command: PasteLayer) -&gt; None:\n    \"\"\"Visit `PasteLayer` command.\"\"\"\n    source_layer = self.get_layer(command.source_layer_id)\n\n    if isinstance(source_layer, PillowDeferredLayer):\n        raise PasteDeferredLayerNotAllowedError(command.source_layer_id)\n\n    assert isinstance(source_layer, PillowEagerLayer)\n\n    if command.is_negative:\n        image = ImageOps.invert(source_layer.image.convert(\"L\")).convert(\"1\")\n    else:\n        image = source_layer.image\n\n    layer = self.layer\n    layer_box = layer.box\n    x_offset = layer_box.center.x - layer_box.width / 2\n    y_offset = layer_box.center.y - layer_box.height / 2\n\n    layer.image.paste(\n        image,\n        (\n            self.to_pixel(\n                command.center.x\n                - (source_layer.box.width / 2)\n                + source_layer.box.center.x\n                - source_layer.origin.x\n                - x_offset\n            ),\n            self.to_pixel(\n                command.center.y\n                - (source_layer.box.height / 2)\n                + source_layer.box.center.y\n                - source_layer.origin.y\n                - y_offset\n            ),\n        ),\n        mask=source_layer.image,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def to_pixel(self, value: float) -&gt; int:\n    \"\"\"Convert value in mm to pixels.\"\"\"\n    return int(value * self.dpmm)\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.get_color","title":"get_color","text":"<pre><code>get_color(*, is_negative: bool) -&gt; int\n</code></pre> <p>Get color for positive or negative.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def get_color(self, *, is_negative: bool) -&gt; int:\n    \"\"\"Get color for positive or negative.\"\"\"\n    return 0 if is_negative else 1\n</code></pre>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; PillowResult\n</code></pre> <p>Execute all commands.</p> Source code in <code>src/pygerber/vm/pillow/vm.py</code> <pre><code>def run(self, rvmc: RVMC) -&gt; PillowResult:\n    \"\"\"Execute all commands.\"\"\"\n    super().run(rvmc)\n\n    layer = self._layers.get(self.MAIN_LAYER_ID, None)\n\n    if layer is None:\n        return PillowResult(None)\n\n    assert isinstance(layer, PillowEagerLayer)\n\n    return PillowResult(layer.image.transpose(Image.Transpose.FLIP_TOP_BOTTOM))\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types","title":"types","text":"<p><code>types</code> package contains all utility types used in the <code>VirtualMachine</code> ecosystem.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box","title":"Box","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents a box in 2D space.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>class Box(ModelType):\n    \"\"\"Represents a box in 2D space.\"\"\"\n\n    min_x: float = Field(default=math.inf)\n    min_y: float = Field(default=math.inf)\n    max_x: float = Field(default=-math.inf)\n    max_y: float = Field(default=-math.inf)\n\n    @classmethod\n    def from_vectors(cls, *vectors: Vector) -&gt; Self:\n        \"\"\"Create a box from vectors.\"\"\"\n        assert len(vectors) &gt; 0\n        min_x = vectors[0].x\n        min_y = vectors[0].y\n        max_x = vectors[0].x\n        max_y = vectors[0].y\n\n        for vector in vectors[1:]:\n            min_x = min(min_x, vector.x)\n            min_y = min(min_y, vector.y)\n            max_x = max(max_x, vector.x)\n            max_y = max(max_y, vector.y)\n\n        return cls(\n            min_x=min_x,\n            min_y=min_y,\n            max_x=max_x,\n            max_y=max_y,\n        )\n\n    @classmethod\n    def from_center_width_height(\n        cls, center: tuple[float, float], width: float, height: float\n    ) -&gt; Self:\n        \"\"\"Create a box from center, width and height.\"\"\"\n        return cls(\n            min_x=center[0] - width / 2,\n            min_y=center[1] - height / 2,\n            max_x=center[0] + width / 2,\n            max_y=center[1] + height / 2,\n        )\n\n    @pp.cached_property\n    def width(self) -&gt; float:\n        \"\"\"Get width of the box.\"\"\"\n        return abs(self.max_x - self.min_x)\n\n    @pp.cached_property\n    def height(self) -&gt; float:\n        \"\"\"Get height of the box.\"\"\"\n        return abs(self.max_y - self.min_y)\n\n    @pp.cached_property\n    def center(self) -&gt; Vector:\n        \"\"\"Get mean center of the box.\"\"\"\n        return Vector(\n            x=(self.max_x + self.min_x) / 2,\n            y=(self.max_y + self.min_y) / 2,\n        )\n\n    def __add__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        if isinstance(other, Box):\n            return self.__class__(\n                min_x=min(self.min_x, other.min_x),\n                min_y=min(self.min_y, other.min_y),\n                max_x=max(self.max_x, other.max_x),\n                max_y=max(self.max_y, other.max_y),\n            )\n\n        if isinstance(other, Vector):\n            return self.__class__(\n                min_x=self.min_x + other.x,\n                min_y=self.min_y + other.y,\n                max_x=self.max_x + other.x,\n                max_y=self.max_y + other.y,\n            )\n\n        return NotImplemented\n\n    def __iadd__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        return self + other\n\n    def __radd__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        return self + other\n\n    def __sub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        if isinstance(other, Vector):\n            return self.__class__(\n                min_x=self.min_x - other.x,\n                min_y=self.min_y - other.y,\n                max_x=self.max_x - other.x,\n                max_y=self.max_y - other.y,\n            )\n\n        return NotImplemented\n\n    def __isub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        return self - other\n\n    def __rsub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.from_vectors","title":"from_vectors  <code>classmethod</code>","text":"<pre><code>from_vectors(*vectors: Vector) -&gt; Self\n</code></pre> <p>Create a box from vectors.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@classmethod\ndef from_vectors(cls, *vectors: Vector) -&gt; Self:\n    \"\"\"Create a box from vectors.\"\"\"\n    assert len(vectors) &gt; 0\n    min_x = vectors[0].x\n    min_y = vectors[0].y\n    max_x = vectors[0].x\n    max_y = vectors[0].y\n\n    for vector in vectors[1:]:\n        min_x = min(min_x, vector.x)\n        min_y = min(min_y, vector.y)\n        max_x = max(max_x, vector.x)\n        max_y = max(max_y, vector.y)\n\n    return cls(\n        min_x=min_x,\n        min_y=min_y,\n        max_x=max_x,\n        max_y=max_y,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.from_center_width_height","title":"from_center_width_height  <code>classmethod</code>","text":"<pre><code>from_center_width_height(\n    center: tuple[float, float], width: float, height: float\n) -&gt; Self\n</code></pre> <p>Create a box from center, width and height.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@classmethod\ndef from_center_width_height(\n    cls, center: tuple[float, float], width: float, height: float\n) -&gt; Self:\n    \"\"\"Create a box from center, width and height.\"\"\"\n    return cls(\n        min_x=center[0] - width / 2,\n        min_y=center[1] - height / 2,\n        max_x=center[0] + width / 2,\n        max_y=center[1] + height / 2,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.width","title":"width","text":"<pre><code>width() -&gt; float\n</code></pre> <p>Get width of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef width(self) -&gt; float:\n    \"\"\"Get width of the box.\"\"\"\n    return abs(self.max_x - self.min_x)\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.height","title":"height","text":"<pre><code>height() -&gt; float\n</code></pre> <p>Get height of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef height(self) -&gt; float:\n    \"\"\"Get height of the box.\"\"\"\n    return abs(self.max_y - self.min_y)\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.center","title":"center","text":"<pre><code>center() -&gt; Vector\n</code></pre> <p>Get mean center of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef center(self) -&gt; Vector:\n    \"\"\"Get mean center of the box.\"\"\"\n    return Vector(\n        x=(self.max_x + self.min_x) / 2,\n        y=(self.max_y + self.min_y) / 2,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __add__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    if isinstance(other, Box):\n        return self.__class__(\n            min_x=min(self.min_x, other.min_x),\n            min_y=min(self.min_y, other.min_y),\n            max_x=max(self.max_x, other.max_x),\n            max_y=max(self.max_y, other.max_y),\n        )\n\n    if isinstance(other, Vector):\n        return self.__class__(\n            min_x=self.min_x + other.x,\n            min_y=self.min_y + other.y,\n            max_x=self.max_x + other.x,\n            max_y=self.max_y + other.y,\n        )\n\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__iadd__","title":"__iadd__","text":"<pre><code>__iadd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __iadd__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    return self + other\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__radd__","title":"__radd__","text":"<pre><code>__radd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __radd__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    return self + other\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __sub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    if isinstance(other, Vector):\n        return self.__class__(\n            min_x=self.min_x - other.x,\n            min_y=self.min_y - other.y,\n            max_x=self.max_x - other.x,\n            max_y=self.max_y - other.y,\n        )\n\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__isub__","title":"__isub__","text":"<pre><code>__isub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __isub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __rsub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color","title":"Color","text":"<p>             Bases: <code>ModelType</code></p> <p>Color class represents a RGBA color.</p> <p>Channels are represented as integers in range 0 to 255.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>class Color(ModelType):\n    \"\"\"Color class represents a RGBA color.\n\n    Channels are represented as integers in range 0 to 255.\n    \"\"\"\n\n    red: ChannelType = ChannelField\n    \"\"\"Red channel value.\"\"\"\n\n    green: ChannelType = ChannelField\n    \"\"\"Green channel value.\"\"\"\n\n    blue: ChannelType = ChannelField\n    \"\"\"Blue channel value.\"\"\"\n\n    alpha: ChannelType = ChannelField\n    \"\"\"Alpha channel value.\"\"\"\n\n    @classmethod\n    def from_hex(cls, string: str) -&gt; Self:\n        \"\"\"Build RGBA color object from hexadecimal string.\n\n        Parameters\n        ----------\n        string : str\n            String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n            For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n            `#` symbol prefix for hex string is accepted.\n\n        Returns\n        -------\n        RGBA\n            Color built from hexadecimal values.\n\n        \"\"\"\n        if string[0] == \"#\":\n            string = string[1:]\n\n        r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n        if len(a) == 0:\n            a = \"FF\"\n\n        return cls(\n            red=int(r, base=16),\n            green=int(g, base=16),\n            blue=int(b, base=16),\n            alpha=int(a, base=16),\n        )\n\n    @classmethod\n    def from_rgba(cls, red: int, green: int, blue: int, alpha: int = 0xFF) -&gt; Self:\n        \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n        Parameters\n        ----------\n        red : int\n            Red chanel value as integer from 0 to 255, inclusive.\n        green : int\n            Green chanel value as integer from 0 to 255, inclusive.\n        blue : int\n            Blue chanel value as integer from 0 to 255, inclusive.\n        alpha : int, optional\n            Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n        Returns\n        -------\n        Self\n            Color built from r, g, b, a values.\n\n        \"\"\"\n        return cls(red=red, green=green, blue=blue, alpha=alpha)\n\n    @classmethod\n    def from_hsv(\n        cls,\n        hue: int,\n        saturation: float,\n        value: float,\n        alpha: int = 255,\n    ) -&gt; Self:\n        \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n        For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n        Parameters\n        ----------\n        hue : int\n            Hue of color, integer in range 0 to 360 inclusive.\n        saturation : float\n            Saturation of color, float in range 0.0 to 100.0 inclusive.\n        value : float\n            Value of color, float in range 0.0 to 100.0 inclusive.\n        alpha : int\n            Alpha of color, int in range 0 to 255 inclusive.\n\n        Returns\n        -------\n        Self\n            Color built from h, s, v, a values.\n\n        \"\"\"\n        hue %= 360\n        saturation /= 100\n        value /= 100\n\n        c = value * saturation\n        x = c * (1 - abs(((hue / 60) % 2) - 1))\n        m = value - c\n\n        if 0 &lt;= hue &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, x, 0.0\n        elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, c, 0.0\n        elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, c, x\n        elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, x, c\n        elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, 0.0, c\n        elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= hue &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, 0.0, x\n        else:\n            raise ValueError(hue)\n\n        return cls(\n            red=round((r_ + m) * 255),\n            green=round((g_ + m) * 255),\n            blue=round((b_ + m) * 255),\n            alpha=alpha,\n        )\n\n    def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n        \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.red, self.green, self.blue, self.alpha\n\n    def as_rgb_int(self) -&gt; tuple[int, int, int]:\n        \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.red, self.green, self.blue\n\n    def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n        \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n        return (\n            float(Decimal(self.red) / Decimal(255)),\n            float(Decimal(self.green) / Decimal(255)),\n            float(Decimal(self.blue) / Decimal(255)),\n            float(Decimal(self.alpha) / Decimal(255)),\n        )\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Return color as hexadecimal string.\n\n        Eg. `#FF0000FF` for red color.\n        \"\"\"\n        r = f\"{self.red:0{2}x}\"\n        g = f\"{self.green:0{2}x}\"\n        b = f\"{self.blue:0{2}x}\"\n        a = f\"{self.alpha:0{2}x}\"\n        return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.red","title":"red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>red: ChannelType = ChannelField\n</code></pre> <p>Red channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.green","title":"green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>green: ChannelType = ChannelField\n</code></pre> <p>Green channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.blue","title":"blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blue: ChannelType = ChannelField\n</code></pre> <p>Blue channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.alpha","title":"alpha  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alpha: ChannelType = ChannelField\n</code></pre> <p>Alpha channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> required <p>Returns:</p> Type Description <code>RGBA</code> <p>Color built from hexadecimal values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_hex(cls, string: str) -&gt; Self:\n    \"\"\"Build RGBA color object from hexadecimal string.\n\n    Parameters\n    ----------\n    string : str\n        String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n        For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n        `#` symbol prefix for hex string is accepted.\n\n    Returns\n    -------\n    RGBA\n        Color built from hexadecimal values.\n\n    \"\"\"\n    if string[0] == \"#\":\n        string = string[1:]\n\n    r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n    if len(a) == 0:\n        a = \"FF\"\n\n    return cls(\n        red=int(r, base=16),\n        green=int(g, base=16),\n        blue=int(b, base=16),\n        alpha=int(a, base=16),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(\n    red: int, green: int, blue: int, alpha: int = 255\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Red chanel value as integer from 0 to 255, inclusive.</p> required <code>green</code> <code>int</code> <p>Green chanel value as integer from 0 to 255, inclusive.</p> required <code>blue</code> <code>int</code> <p>Blue chanel value as integer from 0 to 255, inclusive.</p> required <code>alpha</code> <code>int</code> <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from r, g, b, a values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_rgba(cls, red: int, green: int, blue: int, alpha: int = 0xFF) -&gt; Self:\n    \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n    Parameters\n    ----------\n    red : int\n        Red chanel value as integer from 0 to 255, inclusive.\n    green : int\n        Green chanel value as integer from 0 to 255, inclusive.\n    blue : int\n        Blue chanel value as integer from 0 to 255, inclusive.\n    alpha : int, optional\n        Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n    Returns\n    -------\n    Self\n        Color built from r, g, b, a values.\n\n    \"\"\"\n    return cls(red=red, green=green, blue=blue, alpha=alpha)\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>int</code> <p>Hue of color, integer in range 0 to 360 inclusive.</p> required <code>saturation</code> <code>float</code> <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> required <code>value</code> <code>float</code> <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> required <code>alpha</code> <code>int</code> <p>Alpha of color, int in range 0 to 255 inclusive.</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from h, s, v, a values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_hsv(\n    cls,\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self:\n    \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n    For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n    Parameters\n    ----------\n    hue : int\n        Hue of color, integer in range 0 to 360 inclusive.\n    saturation : float\n        Saturation of color, float in range 0.0 to 100.0 inclusive.\n    value : float\n        Value of color, float in range 0.0 to 100.0 inclusive.\n    alpha : int\n        Alpha of color, int in range 0 to 255 inclusive.\n\n    Returns\n    -------\n    Self\n        Color built from h, s, v, a values.\n\n    \"\"\"\n    hue %= 360\n    saturation /= 100\n    value /= 100\n\n    c = value * saturation\n    x = c * (1 - abs(((hue / 60) % 2) - 1))\n    m = value - c\n\n    if 0 &lt;= hue &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, x, 0.0\n    elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, c, 0.0\n    elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, c, x\n    elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, x, c\n    elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, 0.0, c\n    elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= hue &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, 0.0, x\n    else:\n        raise ValueError(hue)\n\n    return cls(\n        red=round((r_ + m) * 255),\n        green=round((g_ + m) * 255),\n        blue=round((b_ + m) * 255),\n        alpha=alpha,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n    \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.red, self.green, self.blue, self.alpha\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgb_int(self) -&gt; tuple[int, int, int]:\n    \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.red, self.green, self.blue\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n    \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n    return (\n        float(Decimal(self.red) / Decimal(255)),\n        float(Decimal(self.green) / Decimal(255)),\n        float(Decimal(self.blue) / Decimal(255)),\n        float(Decimal(self.alpha) / Decimal(255)),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Return color as hexadecimal string.\n\n    Eg. `#FF0000FF` for red color.\n    \"\"\"\n    r = f\"{self.red:0{2}x}\"\n    g = f\"{self.green:0{2}x}\"\n    b = f\"{self.blue:0{2}x}\"\n    a = f\"{self.alpha:0{2}x}\"\n    return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.EmptyAutoSizedLayerNotAllowedError","title":"EmptyAutoSizedLayerNotAllowedError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when an empty AutoSizedLayer is attempted to be created.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class EmptyAutoSizedLayerNotAllowedError(VirtualMachineError):\n    \"\"\"Raised when an empty AutoSizedLayer is attempted to be created.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerAlreadyExistsError","title":"LayerAlreadyExistsError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID already exists during create operation.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class LayerAlreadyExistsError(VirtualMachineError):\n    \"\"\"Raised when layer with given ID already exists during create operation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerNotFoundError","title":"LayerNotFoundError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID was not found during paste operation.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class LayerNotFoundError(VirtualMachineError):\n    \"\"\"Raised when layer with given ID was not found during paste operation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.NoLayerSetError","title":"NoLayerSetError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when no layer was set prior to drawing shapes.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class NoLayerSetError(VirtualMachineError):\n    \"\"\"Raised when no layer was set prior to drawing shapes.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.PasteDeferredLayerNotAllowedError","title":"PasteDeferredLayerNotAllowedError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when deferred layer is attempted to be pasted into other layer.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class PasteDeferredLayerNotAllowedError(VirtualMachineError):\n    \"\"\"Raised when deferred layer is attempted to be pasted into other layer.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.VirtualMachineError","title":"VirtualMachineError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions in the VirtualMachine infrastructure.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class VirtualMachineError(Exception):\n    \"\"\"Base class for all exceptions in the VirtualMachine infrastructure.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerID","title":"LayerID","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents the ID of a layer.</p> Source code in <code>src/pygerber/vm/types/layer_id.py</code> <pre><code>class LayerID(ModelType):\n    \"\"\"Represents the ID of a layer.\"\"\"\n\n    id: str\n\n    def __hash__(self) -&gt; int:\n        return hash(self.id)\n\n    def __eq__(self, other: object) -&gt; bool:\n        if not isinstance(other, LayerID):\n            return False\n        return self.id == other.id\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3","title":"Matrix3x3","text":"<p>3x3 Matrix used to apply 2D transformations to Vectors.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>class Matrix3x3:\n    \"\"\"3x3 Matrix used to apply 2D transformations to Vectors.\"\"\"\n\n    no_columns: int = 3\n    no_rows: int = 3\n\n    def __init__(self, mtx: MatrixInitializerT) -&gt; None:\n        assert len(mtx) == self.no_rows\n        assert len(mtx[0]) == self.no_columns\n        assert len(mtx[1]) == self.no_columns\n        assert len(mtx[2]) == self.no_columns\n        self.mtx = mtx\n\n    @classmethod\n    def new_translate(cls, x: Double, y: Double) -&gt; Matrix3x3:\n        \"\"\"Create new translation matrix.\"\"\"\n        return cls(\n            (\n                (1.0, 0.0, x),\n                (0.0, 1.0, y),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_rotate(cls, angle: Double) -&gt; Matrix3x3:\n        \"\"\"Create new rotation matrix.\n\n        Parameters\n        ----------\n        angle : Double\n            Rotation angle in degrees.\n\n        Returns\n        -------\n        Matrix3x3\n            New matrix instance.\n\n        \"\"\"\n        angle = radians(angle)\n        c = cos(angle)\n        s = sin(angle)\n        return cls(\n            (\n                (c, -s, 0.0),\n                (s, c, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_reflect(cls, *, x: bool, y: bool) -&gt; Matrix3x3:\n        \"\"\"Create new reflection matrix.\"\"\"\n        return cls(\n            (\n                (-1.0 if x else 1.0, 0.0, 0.0),\n                (0.0, -1.0 if y else 1.0, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_scale(cls, x: Double, y: Double) -&gt; Self:\n        \"\"\"Create new scaling matrix.\"\"\"\n        return cls(\n            (\n                (x, 0.0, 0.0),\n                (0.0, y, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    def __matmul__(self, other: T) -&gt; T:\n        if isinstance(other, Matrix3x3):\n            result = [\n                [0.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0],\n            ]\n\n            for i in range(len(self.mtx)):\n                for j in range(len(other.mtx[0])):\n                    for k in range(len(other.mtx)):\n                        result[i][j] += self.mtx[i][k] * other.mtx[k][j]\n\n            return other.__class__(tuple(map(tuple, result)))  # type: ignore[arg-type, return-value]\n\n        if isinstance(other, Vector):\n            x = self.mtx[0][0] * other.x + self.mtx[0][1] * other.y + self.mtx[0][2]\n            y = self.mtx[1][0] * other.x + self.mtx[1][1] * other.y + self.mtx[1][2]\n            return Vector(x=x, y=y)  # type: ignore[return-value]\n\n        return NotImplemented\n\n    @property\n    def tag(self) -&gt; str:\n        \"\"\"Return tag representing this matrix transform.\"\"\"\n        return str(self.mtx).encode(\"utf-8\").hex()\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__name__}({self.mtx})\"\n\n    __repr__ = __str__\n\n    def __getitem__(self, key: int) -&gt; MatrixRowT:\n        return self.mtx[key]\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Return tag representing this matrix transform.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_translate","title":"new_translate  <code>classmethod</code>","text":"<pre><code>new_translate(x: Double, y: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new translation matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_translate(cls, x: Double, y: Double) -&gt; Matrix3x3:\n    \"\"\"Create new translation matrix.\"\"\"\n    return cls(\n        (\n            (1.0, 0.0, x),\n            (0.0, 1.0, y),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_rotate","title":"new_rotate  <code>classmethod</code>","text":"<pre><code>new_rotate(angle: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new rotation matrix.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Double</code> <p>Rotation angle in degrees.</p> required <p>Returns:</p> Type Description <code>Matrix3x3</code> <p>New matrix instance.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_rotate(cls, angle: Double) -&gt; Matrix3x3:\n    \"\"\"Create new rotation matrix.\n\n    Parameters\n    ----------\n    angle : Double\n        Rotation angle in degrees.\n\n    Returns\n    -------\n    Matrix3x3\n        New matrix instance.\n\n    \"\"\"\n    angle = radians(angle)\n    c = cos(angle)\n    s = sin(angle)\n    return cls(\n        (\n            (c, -s, 0.0),\n            (s, c, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_reflect","title":"new_reflect  <code>classmethod</code>","text":"<pre><code>new_reflect(*, x: bool, y: bool) -&gt; Matrix3x3\n</code></pre> <p>Create new reflection matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_reflect(cls, *, x: bool, y: bool) -&gt; Matrix3x3:\n    \"\"\"Create new reflection matrix.\"\"\"\n    return cls(\n        (\n            (-1.0 if x else 1.0, 0.0, 0.0),\n            (0.0, -1.0 if y else 1.0, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_scale","title":"new_scale  <code>classmethod</code>","text":"<pre><code>new_scale(x: Double, y: Double) -&gt; Self\n</code></pre> <p>Create new scaling matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_scale(cls, x: Double, y: Double) -&gt; Self:\n    \"\"\"Create new scaling matrix.\"\"\"\n    return cls(\n        (\n            (x, 0.0, 0.0),\n            (0.0, y, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector","title":"Vector","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents a point in cartesian coordinate space.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>class Vector(ModelType):\n    \"\"\"Represents a point in cartesian coordinate space.\"\"\"\n\n    x: float\n    y: float\n\n    class unit(Namespace):  # noqa: N801\n        \"\"\"Namespace containing unit vectors.\"\"\"\n\n        x: ClassVar[Vector]\n        y: ClassVar[Vector]\n        null: ClassVar[Vector]\n\n    @classmethod\n    def from_tuple(cls, data: tuple[float, float]) -&gt; Self:\n        \"\"\"Create a new point from a tuple.\"\"\"\n        return cls(x=data[0], y=data[1])\n\n    @property\n    def xy(self) -&gt; tuple[float, float]:\n        \"\"\"Return point as tuple of Units.\"\"\"\n        return (self.x, self.y)\n\n    def __add__(self, other: object) -&gt; Vector:\n        \"\"\"Add two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x + other.x, y=self.y + other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x + other, y=self.y + other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x + other, y=self.y + other)\n        return NotImplemented\n\n    def __sub__(self, other: object) -&gt; Vector:\n        \"\"\"Subtract two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x - other.x, y=self.y - other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x - other, y=self.y - other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x - other, y=self.y - other)\n        return NotImplemented\n\n    def __mul__(self, other: object) -&gt; Vector:\n        \"\"\"Multiply two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x * other.x, y=self.y * other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x * other, y=self.y * other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x * other, y=self.y * other)\n        return NotImplemented\n\n    def __truediv__(self, other: object) -&gt; Vector:\n        \"\"\"Divide two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x / other.x, y=self.y / other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x / other, y=self.y / other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x / other, y=self.y / other)\n        return NotImplemented\n\n    def __eq__(self, other: object) -&gt; bool:\n        \"\"\"Check if two points are equal.\"\"\"\n        if isinstance(other, Vector):\n            return self.x == other.x and self.y == other.y\n        return NotImplemented\n\n    def __lt__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is less than other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &lt; other.x and self.y &lt; other.y\n        return NotImplemented\n\n    def __gt__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is greater than other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &gt; other.x and self.y &gt; other.y\n        return NotImplemented\n\n    def __ge__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is greater than or equal to other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &gt;= other.x and self.y &gt;= other.y\n        return NotImplemented\n\n    def __le__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is less than or equal to other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &lt;= other.x and self.y &lt;= other.y\n        return NotImplemented\n\n    def __neg__(self) -&gt; Vector:\n        \"\"\"Negate vector values.\"\"\"\n        return Vector(x=-self.x, y=-self.y)\n\n    def angle_between(self, other: Vector) -&gt; float:\n        \"\"\"Calculate clockwise angle between two vectors in degrees.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n\n        self is the starting vector, other is the ending vector.\n\n        &gt;&gt;&gt; from math import *\n        &gt;&gt;&gt; s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n        &gt;&gt;&gt; e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n        &gt;&gt;&gt; s.angle_between(e)\n        90.0\n        &gt;&gt;&gt; e.angle_between(s)\n        270.0\n        \"\"\"\n        return 360 - self.angle_between_cc(other)\n\n    def angle_between_cc(self, other: Vector) -&gt; float:\n        \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n        \"\"\"\n        v0 = self.normalized()\n        v1 = other.normalized()\n        angle_radians = math.atan2(\n            ((v0.x * v1.y) - (v1.x * v0.y)),  # determinant\n            ((v0.x * v1.x) + (v0.y * v1.y)),  # dot product\n        )\n        angle_degrees = math.degrees(angle_radians)\n        return angle_degrees + (360 * (angle_degrees &lt; 0))\n\n    def normalized(self) -&gt; Vector:\n        \"\"\"Return normalized (unit length) vector.\"\"\"\n        if self.x == 0 and self.y == 0:\n            return Vector.from_tuple((1, 0))\n\n        return self / self.length()\n\n    def length(self) -&gt; float:\n        \"\"\"Return length of vector.\"\"\"\n        return math.sqrt((self.x * self.x) + (self.y * self.y))\n\n    def transform(self, matrix: Matrix3x3) -&gt; Vector:\n        \"\"\"Transform vector by matrix.\"\"\"\n        return matrix @ self\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.xy","title":"xy  <code>property</code>","text":"<pre><code>xy: tuple[float, float]\n</code></pre> <p>Return point as tuple of Units.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.unit","title":"unit","text":"<p>             Bases: <code>Namespace</code></p> <p>Namespace containing unit vectors.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>class unit(Namespace):  # noqa: N801\n    \"\"\"Namespace containing unit vectors.\"\"\"\n\n    x: ClassVar[Vector]\n    y: ClassVar[Vector]\n    null: ClassVar[Vector]\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.from_tuple","title":"from_tuple  <code>classmethod</code>","text":"<pre><code>from_tuple(data: tuple[float, float]) -&gt; Self\n</code></pre> <p>Create a new point from a tuple.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>@classmethod\ndef from_tuple(cls, data: tuple[float, float]) -&gt; Self:\n    \"\"\"Create a new point from a tuple.\"\"\"\n    return cls(x=data[0], y=data[1])\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Vector\n</code></pre> <p>Add two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __add__(self, other: object) -&gt; Vector:\n    \"\"\"Add two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x + other.x, y=self.y + other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x + other, y=self.y + other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x + other, y=self.y + other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Vector\n</code></pre> <p>Subtract two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __sub__(self, other: object) -&gt; Vector:\n    \"\"\"Subtract two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x - other.x, y=self.y - other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x - other, y=self.y - other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x - other, y=self.y - other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__mul__","title":"__mul__","text":"<pre><code>__mul__(other: object) -&gt; Vector\n</code></pre> <p>Multiply two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __mul__(self, other: object) -&gt; Vector:\n    \"\"\"Multiply two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x * other.x, y=self.y * other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x * other, y=self.y * other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x * other, y=self.y * other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(other: object) -&gt; Vector\n</code></pre> <p>Divide two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __truediv__(self, other: object) -&gt; Vector:\n    \"\"\"Divide two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x / other.x, y=self.y / other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x / other, y=self.y / other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x / other, y=self.y / other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check if two points are equal.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    \"\"\"Check if two points are equal.\"\"\"\n    if isinstance(other, Vector):\n        return self.x == other.x and self.y == other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __lt__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is less than other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &lt; other.x and self.y &lt; other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __gt__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is greater than other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &gt; other.x and self.y &gt; other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than or equal to other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __ge__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is greater than or equal to other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &gt;= other.x and self.y &gt;= other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than or equal to other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __le__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is less than or equal to other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &lt;= other.x and self.y &lt;= other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__neg__","title":"__neg__","text":"<pre><code>__neg__() -&gt; Vector\n</code></pre> <p>Negate vector values.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __neg__(self) -&gt; Vector:\n    \"\"\"Negate vector values.\"\"\"\n    return Vector(x=-self.x, y=-self.y)\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.angle_between","title":"angle_between","text":"<pre><code>angle_between(other: Vector) -&gt; float\n</code></pre> <p>Calculate clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> <p>self is the starting vector, other is the ending vector.</p> <p>from math import * s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1) e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1) s.angle_between(e) 90.0 e.angle_between(s) 270.0</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def angle_between(self, other: Vector) -&gt; float:\n    \"\"\"Calculate clockwise angle between two vectors in degrees.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n\n    self is the starting vector, other is the ending vector.\n\n    &gt;&gt;&gt; from math import *\n    &gt;&gt;&gt; s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n    &gt;&gt;&gt; e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n    &gt;&gt;&gt; s.angle_between(e)\n    90.0\n    &gt;&gt;&gt; e.angle_between(s)\n    270.0\n    \"\"\"\n    return 360 - self.angle_between_cc(other)\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.angle_between_cc","title":"angle_between_cc","text":"<pre><code>angle_between_cc(other: Vector) -&gt; float\n</code></pre> <p>Calculate counter clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def angle_between_cc(self, other: Vector) -&gt; float:\n    \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n    \"\"\"\n    v0 = self.normalized()\n    v1 = other.normalized()\n    angle_radians = math.atan2(\n        ((v0.x * v1.y) - (v1.x * v0.y)),  # determinant\n        ((v0.x * v1.x) + (v0.y * v1.y)),  # dot product\n    )\n    angle_degrees = math.degrees(angle_radians)\n    return angle_degrees + (360 * (angle_degrees &lt; 0))\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.normalized","title":"normalized","text":"<pre><code>normalized() -&gt; Vector\n</code></pre> <p>Return normalized (unit length) vector.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def normalized(self) -&gt; Vector:\n    \"\"\"Return normalized (unit length) vector.\"\"\"\n    if self.x == 0 and self.y == 0:\n        return Vector.from_tuple((1, 0))\n\n    return self / self.length()\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.length","title":"length","text":"<pre><code>length() -&gt; float\n</code></pre> <p>Return length of vector.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def length(self) -&gt; float:\n    \"\"\"Return length of vector.\"\"\"\n    return math.sqrt((self.x * self.x) + (self.y * self.y))\n</code></pre>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.transform","title":"transform","text":"<pre><code>transform(matrix: Matrix3x3) -&gt; Vector\n</code></pre> <p>Transform vector by matrix.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def transform(self, matrix: Matrix3x3) -&gt; Vector:\n    \"\"\"Transform vector by matrix.\"\"\"\n    return matrix @ self\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html","title":"box","text":""},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box","title":"box","text":"<p><code>box</code> module contains definition of <code>Box</code> class used to represent 2D boxes.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box","title":"Box","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents a box in 2D space.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>class Box(ModelType):\n    \"\"\"Represents a box in 2D space.\"\"\"\n\n    min_x: float = Field(default=math.inf)\n    min_y: float = Field(default=math.inf)\n    max_x: float = Field(default=-math.inf)\n    max_y: float = Field(default=-math.inf)\n\n    @classmethod\n    def from_vectors(cls, *vectors: Vector) -&gt; Self:\n        \"\"\"Create a box from vectors.\"\"\"\n        assert len(vectors) &gt; 0\n        min_x = vectors[0].x\n        min_y = vectors[0].y\n        max_x = vectors[0].x\n        max_y = vectors[0].y\n\n        for vector in vectors[1:]:\n            min_x = min(min_x, vector.x)\n            min_y = min(min_y, vector.y)\n            max_x = max(max_x, vector.x)\n            max_y = max(max_y, vector.y)\n\n        return cls(\n            min_x=min_x,\n            min_y=min_y,\n            max_x=max_x,\n            max_y=max_y,\n        )\n\n    @classmethod\n    def from_center_width_height(\n        cls, center: tuple[float, float], width: float, height: float\n    ) -&gt; Self:\n        \"\"\"Create a box from center, width and height.\"\"\"\n        return cls(\n            min_x=center[0] - width / 2,\n            min_y=center[1] - height / 2,\n            max_x=center[0] + width / 2,\n            max_y=center[1] + height / 2,\n        )\n\n    @pp.cached_property\n    def width(self) -&gt; float:\n        \"\"\"Get width of the box.\"\"\"\n        return abs(self.max_x - self.min_x)\n\n    @pp.cached_property\n    def height(self) -&gt; float:\n        \"\"\"Get height of the box.\"\"\"\n        return abs(self.max_y - self.min_y)\n\n    @pp.cached_property\n    def center(self) -&gt; Vector:\n        \"\"\"Get mean center of the box.\"\"\"\n        return Vector(\n            x=(self.max_x + self.min_x) / 2,\n            y=(self.max_y + self.min_y) / 2,\n        )\n\n    def __add__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        if isinstance(other, Box):\n            return self.__class__(\n                min_x=min(self.min_x, other.min_x),\n                min_y=min(self.min_y, other.min_y),\n                max_x=max(self.max_x, other.max_x),\n                max_y=max(self.max_y, other.max_y),\n            )\n\n        if isinstance(other, Vector):\n            return self.__class__(\n                min_x=self.min_x + other.x,\n                min_y=self.min_y + other.y,\n                max_x=self.max_x + other.x,\n                max_y=self.max_y + other.y,\n            )\n\n        return NotImplemented\n\n    def __iadd__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        return self + other\n\n    def __radd__(self, other: object) -&gt; Self:\n        \"\"\"Add a vector to the box.\"\"\"\n        return self + other\n\n    def __sub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        if isinstance(other, Vector):\n            return self.__class__(\n                min_x=self.min_x - other.x,\n                min_y=self.min_y - other.y,\n                max_x=self.max_x - other.x,\n                max_y=self.max_y - other.y,\n            )\n\n        return NotImplemented\n\n    def __isub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        return self - other\n\n    def __rsub__(self, other: object) -&gt; Self:\n        \"\"\"Subtract a vector from the box.\"\"\"\n        return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.from_vectors","title":"from_vectors  <code>classmethod</code>","text":"<pre><code>from_vectors(*vectors: Vector) -&gt; Self\n</code></pre> <p>Create a box from vectors.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@classmethod\ndef from_vectors(cls, *vectors: Vector) -&gt; Self:\n    \"\"\"Create a box from vectors.\"\"\"\n    assert len(vectors) &gt; 0\n    min_x = vectors[0].x\n    min_y = vectors[0].y\n    max_x = vectors[0].x\n    max_y = vectors[0].y\n\n    for vector in vectors[1:]:\n        min_x = min(min_x, vector.x)\n        min_y = min(min_y, vector.y)\n        max_x = max(max_x, vector.x)\n        max_y = max(max_y, vector.y)\n\n    return cls(\n        min_x=min_x,\n        min_y=min_y,\n        max_x=max_x,\n        max_y=max_y,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.from_center_width_height","title":"from_center_width_height  <code>classmethod</code>","text":"<pre><code>from_center_width_height(\n    center: tuple[float, float], width: float, height: float\n) -&gt; Self\n</code></pre> <p>Create a box from center, width and height.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@classmethod\ndef from_center_width_height(\n    cls, center: tuple[float, float], width: float, height: float\n) -&gt; Self:\n    \"\"\"Create a box from center, width and height.\"\"\"\n    return cls(\n        min_x=center[0] - width / 2,\n        min_y=center[1] - height / 2,\n        max_x=center[0] + width / 2,\n        max_y=center[1] + height / 2,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.width","title":"width","text":"<pre><code>width() -&gt; float\n</code></pre> <p>Get width of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef width(self) -&gt; float:\n    \"\"\"Get width of the box.\"\"\"\n    return abs(self.max_x - self.min_x)\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.height","title":"height","text":"<pre><code>height() -&gt; float\n</code></pre> <p>Get height of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef height(self) -&gt; float:\n    \"\"\"Get height of the box.\"\"\"\n    return abs(self.max_y - self.min_y)\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.center","title":"center","text":"<pre><code>center() -&gt; Vector\n</code></pre> <p>Get mean center of the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>@pp.cached_property\ndef center(self) -&gt; Vector:\n    \"\"\"Get mean center of the box.\"\"\"\n    return Vector(\n        x=(self.max_x + self.min_x) / 2,\n        y=(self.max_y + self.min_y) / 2,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __add__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    if isinstance(other, Box):\n        return self.__class__(\n            min_x=min(self.min_x, other.min_x),\n            min_y=min(self.min_y, other.min_y),\n            max_x=max(self.max_x, other.max_x),\n            max_y=max(self.max_y, other.max_y),\n        )\n\n    if isinstance(other, Vector):\n        return self.__class__(\n            min_x=self.min_x + other.x,\n            min_y=self.min_y + other.y,\n            max_x=self.max_x + other.x,\n            max_y=self.max_y + other.y,\n        )\n\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__iadd__","title":"__iadd__","text":"<pre><code>__iadd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __iadd__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    return self + other\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__radd__","title":"__radd__","text":"<pre><code>__radd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __radd__(self, other: object) -&gt; Self:\n    \"\"\"Add a vector to the box.\"\"\"\n    return self + other\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __sub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    if isinstance(other, Vector):\n        return self.__class__(\n            min_x=self.min_x - other.x,\n            min_y=self.min_y - other.y,\n            max_x=self.max_x - other.x,\n            max_y=self.max_y - other.y,\n        )\n\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__isub__","title":"__isub__","text":"<pre><code>__isub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __isub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p> Source code in <code>src/pygerber/vm/types/box.py</code> <pre><code>def __rsub__(self, other: object) -&gt; Self:\n    \"\"\"Subtract a vector from the box.\"\"\"\n    return self - other\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html","title":"color","text":""},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color","title":"color","text":"<p>RGBA colors are used for declaring visuals of rendering output.</p> <p>This module contains RGBA class which can be used to provide such color.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color","title":"Color","text":"<p>             Bases: <code>ModelType</code></p> <p>Color class represents a RGBA color.</p> <p>Channels are represented as integers in range 0 to 255.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>class Color(ModelType):\n    \"\"\"Color class represents a RGBA color.\n\n    Channels are represented as integers in range 0 to 255.\n    \"\"\"\n\n    red: ChannelType = ChannelField\n    \"\"\"Red channel value.\"\"\"\n\n    green: ChannelType = ChannelField\n    \"\"\"Green channel value.\"\"\"\n\n    blue: ChannelType = ChannelField\n    \"\"\"Blue channel value.\"\"\"\n\n    alpha: ChannelType = ChannelField\n    \"\"\"Alpha channel value.\"\"\"\n\n    @classmethod\n    def from_hex(cls, string: str) -&gt; Self:\n        \"\"\"Build RGBA color object from hexadecimal string.\n\n        Parameters\n        ----------\n        string : str\n            String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n            For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n            `#` symbol prefix for hex string is accepted.\n\n        Returns\n        -------\n        RGBA\n            Color built from hexadecimal values.\n\n        \"\"\"\n        if string[0] == \"#\":\n            string = string[1:]\n\n        r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n        if len(a) == 0:\n            a = \"FF\"\n\n        return cls(\n            red=int(r, base=16),\n            green=int(g, base=16),\n            blue=int(b, base=16),\n            alpha=int(a, base=16),\n        )\n\n    @classmethod\n    def from_rgba(cls, red: int, green: int, blue: int, alpha: int = 0xFF) -&gt; Self:\n        \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n        Parameters\n        ----------\n        red : int\n            Red chanel value as integer from 0 to 255, inclusive.\n        green : int\n            Green chanel value as integer from 0 to 255, inclusive.\n        blue : int\n            Blue chanel value as integer from 0 to 255, inclusive.\n        alpha : int, optional\n            Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n        Returns\n        -------\n        Self\n            Color built from r, g, b, a values.\n\n        \"\"\"\n        return cls(red=red, green=green, blue=blue, alpha=alpha)\n\n    @classmethod\n    def from_hsv(\n        cls,\n        hue: int,\n        saturation: float,\n        value: float,\n        alpha: int = 255,\n    ) -&gt; Self:\n        \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n        For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n        Parameters\n        ----------\n        hue : int\n            Hue of color, integer in range 0 to 360 inclusive.\n        saturation : float\n            Saturation of color, float in range 0.0 to 100.0 inclusive.\n        value : float\n            Value of color, float in range 0.0 to 100.0 inclusive.\n        alpha : int\n            Alpha of color, int in range 0 to 255 inclusive.\n\n        Returns\n        -------\n        Self\n            Color built from h, s, v, a values.\n\n        \"\"\"\n        hue %= 360\n        saturation /= 100\n        value /= 100\n\n        c = value * saturation\n        x = c * (1 - abs(((hue / 60) % 2) - 1))\n        m = value - c\n\n        if 0 &lt;= hue &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, x, 0.0\n        elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, c, 0.0\n        elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, c, x\n        elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = 0.0, x, c\n        elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = x, 0.0, c\n        elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= hue &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n            r_, g_, b_ = c, 0.0, x\n        else:\n            raise ValueError(hue)\n\n        return cls(\n            red=round((r_ + m) * 255),\n            green=round((g_ + m) * 255),\n            blue=round((b_ + m) * 255),\n            alpha=alpha,\n        )\n\n    def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n        \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.red, self.green, self.blue, self.alpha\n\n    def as_rgb_int(self) -&gt; tuple[int, int, int]:\n        \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n        return self.red, self.green, self.blue\n\n    def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n        \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n        return (\n            float(Decimal(self.red) / Decimal(255)),\n            float(Decimal(self.green) / Decimal(255)),\n            float(Decimal(self.blue) / Decimal(255)),\n            float(Decimal(self.alpha) / Decimal(255)),\n        )\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Return color as hexadecimal string.\n\n        Eg. `#FF0000FF` for red color.\n        \"\"\"\n        r = f\"{self.red:0{2}x}\"\n        g = f\"{self.green:0{2}x}\"\n        b = f\"{self.blue:0{2}x}\"\n        a = f\"{self.alpha:0{2}x}\"\n        return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.red","title":"red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>red: ChannelType = ChannelField\n</code></pre> <p>Red channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.green","title":"green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>green: ChannelType = ChannelField\n</code></pre> <p>Green channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.blue","title":"blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blue: ChannelType = ChannelField\n</code></pre> <p>Blue channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.alpha","title":"alpha  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alpha: ChannelType = ChannelField\n</code></pre> <p>Alpha channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> required <p>Returns:</p> Type Description <code>RGBA</code> <p>Color built from hexadecimal values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_hex(cls, string: str) -&gt; Self:\n    \"\"\"Build RGBA color object from hexadecimal string.\n\n    Parameters\n    ----------\n    string : str\n        String containing color value. Accepted formats are `RRGGBBAA` and `RRGGBB`.\n        For latter, alpha value is assumed to be 0xFF. Formats are case insensitive.\n        `#` symbol prefix for hex string is accepted.\n\n    Returns\n    -------\n    RGBA\n        Color built from hexadecimal values.\n\n    \"\"\"\n    if string[0] == \"#\":\n        string = string[1:]\n\n    r, g, b, a = string[:2], string[2:4], string[4:6], string[6:]\n    if len(a) == 0:\n        a = \"FF\"\n\n    return cls(\n        red=int(r, base=16),\n        green=int(g, base=16),\n        blue=int(b, base=16),\n        alpha=int(a, base=16),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(\n    red: int, green: int, blue: int, alpha: int = 255\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Red chanel value as integer from 0 to 255, inclusive.</p> required <code>green</code> <code>int</code> <p>Green chanel value as integer from 0 to 255, inclusive.</p> required <code>blue</code> <code>int</code> <p>Blue chanel value as integer from 0 to 255, inclusive.</p> required <code>alpha</code> <code>int</code> <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from r, g, b, a values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_rgba(cls, red: int, green: int, blue: int, alpha: int = 0xFF) -&gt; Self:\n    \"\"\"Build RGBA color object from reg, green, blue and alpha integer values.\n\n    Parameters\n    ----------\n    red : int\n        Red chanel value as integer from 0 to 255, inclusive.\n    green : int\n        Green chanel value as integer from 0 to 255, inclusive.\n    blue : int\n        Blue chanel value as integer from 0 to 255, inclusive.\n    alpha : int, optional\n        Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF\n\n    Returns\n    -------\n    Self\n        Color built from r, g, b, a values.\n\n    \"\"\"\n    return cls(red=red, green=green, blue=blue, alpha=alpha)\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>int</code> <p>Hue of color, integer in range 0 to 360 inclusive.</p> required <code>saturation</code> <code>float</code> <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> required <code>value</code> <code>float</code> <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> required <code>alpha</code> <code>int</code> <p>Alpha of color, int in range 0 to 255 inclusive.</p> <code>255</code> <p>Returns:</p> Type Description <code>Self</code> <p>Color built from h, s, v, a values.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>@classmethod\ndef from_hsv(\n    cls,\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self:\n    \"\"\"Build RGBA color object from hue, saturation, value and alpha.\n\n    For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV\n\n    Parameters\n    ----------\n    hue : int\n        Hue of color, integer in range 0 to 360 inclusive.\n    saturation : float\n        Saturation of color, float in range 0.0 to 100.0 inclusive.\n    value : float\n        Value of color, float in range 0.0 to 100.0 inclusive.\n    alpha : int\n        Alpha of color, int in range 0 to 255 inclusive.\n\n    Returns\n    -------\n    Self\n        Color built from h, s, v, a values.\n\n    \"\"\"\n    hue %= 360\n    saturation /= 100\n    value /= 100\n\n    c = value * saturation\n    x = c * (1 - abs(((hue / 60) % 2) - 1))\n    m = value - c\n\n    if 0 &lt;= hue &lt; HSV_Q0_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, x, 0.0\n    elif HSV_Q0_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q1_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, c, 0.0\n    elif HSV_Q1_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q2_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, c, x\n    elif HSV_Q2_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q3_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = 0.0, x, c\n    elif HSV_Q3_MAX_ANGLE_DEGREES &lt;= hue &lt; HSV_Q4_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = x, 0.0, c\n    elif HSV_Q4_MAX_ANGLE_DEGREES &lt;= hue &lt;= HSV_Q5_MAX_ANGLE_DEGREES:\n        r_, g_, b_ = c, 0.0, x\n    else:\n        raise ValueError(hue)\n\n    return cls(\n        red=round((r_ + m) * 255),\n        green=round((g_ + m) * 255),\n        blue=round((b_ + m) * 255),\n        alpha=alpha,\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgba_int(self) -&gt; tuple[int, int, int, int]:\n    \"\"\"Return RGBA color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.red, self.green, self.blue, self.alpha\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgb_int(self) -&gt; tuple[int, int, int]:\n    \"\"\"Return RGB color as tuple of integers in range 0 to 255 inclusive.\"\"\"\n    return self.red, self.green, self.blue\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def as_rgba_float(self) -&gt; tuple[float, float, float, float]:\n    \"\"\"Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.\"\"\"\n    return (\n        float(Decimal(self.red) / Decimal(255)),\n        float(Decimal(self.green) / Decimal(255)),\n        float(Decimal(self.blue) / Decimal(255)),\n        float(Decimal(self.alpha) / Decimal(255)),\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p> Source code in <code>src/pygerber/vm/types/color.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Return color as hexadecimal string.\n\n    Eg. `#FF0000FF` for red color.\n    \"\"\"\n    r = f\"{self.red:0{2}x}\"\n    g = f\"{self.green:0{2}x}\"\n    b = f\"{self.blue:0{2}x}\"\n    a = f\"{self.alpha:0{2}x}\"\n    return f\"#{r}{g}{b}{a}\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html","title":"errors","text":""},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors","title":"errors","text":"<p><code>errors</code> module aggregates all generic exceptions related to the VirtualMachine infrastructure.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.VirtualMachineError","title":"VirtualMachineError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions in the VirtualMachine infrastructure.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class VirtualMachineError(Exception):\n    \"\"\"Base class for all exceptions in the VirtualMachine infrastructure.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.EmptyAutoSizedLayerNotAllowedError","title":"EmptyAutoSizedLayerNotAllowedError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when an empty AutoSizedLayer is attempted to be created.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class EmptyAutoSizedLayerNotAllowedError(VirtualMachineError):\n    \"\"\"Raised when an empty AutoSizedLayer is attempted to be created.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.NoLayerSetError","title":"NoLayerSetError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when no layer was set prior to drawing shapes.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class NoLayerSetError(VirtualMachineError):\n    \"\"\"Raised when no layer was set prior to drawing shapes.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.LayerNotFoundError","title":"LayerNotFoundError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID was not found during paste operation.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class LayerNotFoundError(VirtualMachineError):\n    \"\"\"Raised when layer with given ID was not found during paste operation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.LayerAlreadyExistsError","title":"LayerAlreadyExistsError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID already exists during create operation.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class LayerAlreadyExistsError(VirtualMachineError):\n    \"\"\"Raised when layer with given ID already exists during create operation.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.PasteDeferredLayerNotAllowedError","title":"PasteDeferredLayerNotAllowedError","text":"<p>             Bases: <code>VirtualMachineError</code></p> <p>Raised when deferred layer is attempted to be pasted into other layer.</p> Source code in <code>src/pygerber/vm/types/errors.py</code> <pre><code>class PasteDeferredLayerNotAllowedError(VirtualMachineError):\n    \"\"\"Raised when deferred layer is attempted to be pasted into other layer.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/layer_id.html","title":"layer_id","text":""},{"location":"reference/pygerber/vm/types/layer_id.html#pygerber.vm.types.layer_id","title":"layer_id","text":"<p><code>layer_id</code> module contains definition of <code>LayerID</code> class used to identify image layers in <code>VirtualMachine</code> classes.</p>"},{"location":"reference/pygerber/vm/types/layer_id.html#pygerber.vm.types.layer_id.LayerID","title":"LayerID","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents the ID of a layer.</p> Source code in <code>src/pygerber/vm/types/layer_id.py</code> <pre><code>class LayerID(ModelType):\n    \"\"\"Represents the ID of a layer.\"\"\"\n\n    id: str\n\n    def __hash__(self) -&gt; int:\n        return hash(self.id)\n\n    def __eq__(self, other: object) -&gt; bool:\n        if not isinstance(other, LayerID):\n            return False\n        return self.id == other.id\n</code></pre>"},{"location":"reference/pygerber/vm/types/matrix.html","title":"matrix","text":""},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix","title":"matrix","text":"<p><code>matrix</code> module contains specialized implementation of 3x3 Matrix used to apply 2D transformations to Vectors.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3","title":"Matrix3x3","text":"<p>3x3 Matrix used to apply 2D transformations to Vectors.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>class Matrix3x3:\n    \"\"\"3x3 Matrix used to apply 2D transformations to Vectors.\"\"\"\n\n    no_columns: int = 3\n    no_rows: int = 3\n\n    def __init__(self, mtx: MatrixInitializerT) -&gt; None:\n        assert len(mtx) == self.no_rows\n        assert len(mtx[0]) == self.no_columns\n        assert len(mtx[1]) == self.no_columns\n        assert len(mtx[2]) == self.no_columns\n        self.mtx = mtx\n\n    @classmethod\n    def new_translate(cls, x: Double, y: Double) -&gt; Matrix3x3:\n        \"\"\"Create new translation matrix.\"\"\"\n        return cls(\n            (\n                (1.0, 0.0, x),\n                (0.0, 1.0, y),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_rotate(cls, angle: Double) -&gt; Matrix3x3:\n        \"\"\"Create new rotation matrix.\n\n        Parameters\n        ----------\n        angle : Double\n            Rotation angle in degrees.\n\n        Returns\n        -------\n        Matrix3x3\n            New matrix instance.\n\n        \"\"\"\n        angle = radians(angle)\n        c = cos(angle)\n        s = sin(angle)\n        return cls(\n            (\n                (c, -s, 0.0),\n                (s, c, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_reflect(cls, *, x: bool, y: bool) -&gt; Matrix3x3:\n        \"\"\"Create new reflection matrix.\"\"\"\n        return cls(\n            (\n                (-1.0 if x else 1.0, 0.0, 0.0),\n                (0.0, -1.0 if y else 1.0, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    @classmethod\n    def new_scale(cls, x: Double, y: Double) -&gt; Self:\n        \"\"\"Create new scaling matrix.\"\"\"\n        return cls(\n            (\n                (x, 0.0, 0.0),\n                (0.0, y, 0.0),\n                (0.0, 0.0, 1.0),\n            )\n        )\n\n    def __matmul__(self, other: T) -&gt; T:\n        if isinstance(other, Matrix3x3):\n            result = [\n                [0.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0],\n            ]\n\n            for i in range(len(self.mtx)):\n                for j in range(len(other.mtx[0])):\n                    for k in range(len(other.mtx)):\n                        result[i][j] += self.mtx[i][k] * other.mtx[k][j]\n\n            return other.__class__(tuple(map(tuple, result)))  # type: ignore[arg-type, return-value]\n\n        if isinstance(other, Vector):\n            x = self.mtx[0][0] * other.x + self.mtx[0][1] * other.y + self.mtx[0][2]\n            y = self.mtx[1][0] * other.x + self.mtx[1][1] * other.y + self.mtx[1][2]\n            return Vector(x=x, y=y)  # type: ignore[return-value]\n\n        return NotImplemented\n\n    @property\n    def tag(self) -&gt; str:\n        \"\"\"Return tag representing this matrix transform.\"\"\"\n        return str(self.mtx).encode(\"utf-8\").hex()\n\n    def __str__(self) -&gt; str:\n        return f\"{self.__class__.__name__}({self.mtx})\"\n\n    __repr__ = __str__\n\n    def __getitem__(self, key: int) -&gt; MatrixRowT:\n        return self.mtx[key]\n</code></pre>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Return tag representing this matrix transform.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_translate","title":"new_translate  <code>classmethod</code>","text":"<pre><code>new_translate(x: Double, y: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new translation matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_translate(cls, x: Double, y: Double) -&gt; Matrix3x3:\n    \"\"\"Create new translation matrix.\"\"\"\n    return cls(\n        (\n            (1.0, 0.0, x),\n            (0.0, 1.0, y),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_rotate","title":"new_rotate  <code>classmethod</code>","text":"<pre><code>new_rotate(angle: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new rotation matrix.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Double</code> <p>Rotation angle in degrees.</p> required <p>Returns:</p> Type Description <code>Matrix3x3</code> <p>New matrix instance.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_rotate(cls, angle: Double) -&gt; Matrix3x3:\n    \"\"\"Create new rotation matrix.\n\n    Parameters\n    ----------\n    angle : Double\n        Rotation angle in degrees.\n\n    Returns\n    -------\n    Matrix3x3\n        New matrix instance.\n\n    \"\"\"\n    angle = radians(angle)\n    c = cos(angle)\n    s = sin(angle)\n    return cls(\n        (\n            (c, -s, 0.0),\n            (s, c, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_reflect","title":"new_reflect  <code>classmethod</code>","text":"<pre><code>new_reflect(*, x: bool, y: bool) -&gt; Matrix3x3\n</code></pre> <p>Create new reflection matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_reflect(cls, *, x: bool, y: bool) -&gt; Matrix3x3:\n    \"\"\"Create new reflection matrix.\"\"\"\n    return cls(\n        (\n            (-1.0 if x else 1.0, 0.0, 0.0),\n            (0.0, -1.0 if y else 1.0, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_scale","title":"new_scale  <code>classmethod</code>","text":"<pre><code>new_scale(x: Double, y: Double) -&gt; Self\n</code></pre> <p>Create new scaling matrix.</p> Source code in <code>src/pygerber/vm/types/matrix.py</code> <pre><code>@classmethod\ndef new_scale(cls, x: Double, y: Double) -&gt; Self:\n    \"\"\"Create new scaling matrix.\"\"\"\n    return cls(\n        (\n            (x, 0.0, 0.0),\n            (0.0, y, 0.0),\n            (0.0, 0.0, 1.0),\n        )\n    )\n</code></pre>"},{"location":"reference/pygerber/vm/types/model.html","title":"model","text":""},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model","title":"model","text":"<p><code>model</code> module definition of common base class for all <code>VirtualMachine</code> related model types.</p>"},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model.ModelType","title":"ModelType","text":"<p>             Bases: <code>BaseModel</code></p> <p>Common base class for all VM model types.</p> Source code in <code>src/pygerber/vm/types/model.py</code> <pre><code>class ModelType(BaseModel):\n    \"\"\"Common base class for all VM model types.\"\"\"\n\n    model_config = ConfigDict(\n        extra=\"ignore\",\n        frozen=True,\n        arbitrary_types_allowed=True,\n    )\n\n    @computed_field(repr=False)  # type: ignore[misc]\n    @property\n    def __class_qualname__(self) -&gt; str:\n        \"\"\"Name of class.\"\"\"\n        return self.__class__.__qualname__\n</code></pre>"},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model.ModelType.__class_qualname__","title":"__class_qualname__  <code>property</code>","text":"<pre><code>__class_qualname__: str\n</code></pre> <p>Name of class.</p>"},{"location":"reference/pygerber/vm/types/style.html","title":"style","text":""},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style","title":"style","text":"<p><code>style</code> module contains <code>Style</code> class which represents colors of rendered image.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style","title":"Style","text":"<p>             Bases: <code>ModelType</code></p> <p>Style class represents colors which should be used for coloring rendered image layer.</p> Source code in <code>src/pygerber/vm/types/style.py</code> <pre><code>class Style(ModelType):\n    \"\"\"Style class represents colors which should be used for coloring rendered image\n    layer.\n    \"\"\"\n\n    foreground: Color\n    background: Color\n\n    class presets(Namespace):  # noqa: N801\n        \"\"\"`Style.presets` contains predefined styles for convenience.\"\"\"\n\n        SILK: ClassVar[Style]\n        \"\"\"Default color of silk layer.\n\n        This schema provided non-transparent background, which results in images which\n        can not be used for stacking on top of other layers, as they would completely\n        obscure them.\"\"\"\n\n        SILK_ALPHA: ClassVar[Style]\n        \"\"\"Default color of silk layer with alpha channel.\n\n        This schema provides transparent background. Images using this schema can be\n        stacked on top of each other without obscuring layers below.\"\"\"\n\n        COPPER: ClassVar[Style]\n        \"\"\"Default color of copper layer.\n\n        This schema provided non-transparent background, which results in images which\n        can not be used for stacking on top of other layers, as they would completely\n        obscure them.\"\"\"\n\n        COPPER_ALPHA: ClassVar[Style]\n        \"\"\"Default color of copper layer with alpha channel.\n\n        This schema provides transparent background. Images using this schema can be\n        stacked on top of each other without obscuring layers below.\"\"\"\n\n        PASTE_MASK: ClassVar[Style]\n        \"\"\"Default color of paste mask layer.\n\n        This schema provided non-transparent background, which results in images which\n        can not be used for stacking on top of other layers, as they would completely\n        obscure them.\"\"\"\n\n        PASTE_MASK_ALPHA: ClassVar[Style]\n        \"\"\"Default color of paste mask layer with alpha channel.\n\n        This schema provides transparent background. Images using this schema can be\n        stacked on top of each other without obscuring layers below.\"\"\"\n\n        SOLDER_MASK: ClassVar[Style]\n        \"\"\"Default color of solder mask layer.\n\n        This schema provided non-transparent background, which results in images which\n        can not be used for stacking on top of other layers, as they would completely\n        obscure them.\"\"\"\n\n        SOLDER_MASK_ALPHA: ClassVar[Style]\n        \"\"\"Default color of solder mask layer with alpha channel.\n\n        This schema provides transparent background. Images using this schema can be\n        stacked on top of each other without obscuring layers below.\"\"\"\n\n        DEFAULT_GRAYSCALE: ClassVar[Style]\n        \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n        DEBUG_1: ClassVar[Style]\n        \"\"\"Debug color scheme.\"\"\"\n\n        DEBUG_1_ALPHA: ClassVar[Style]\n        \"\"\"Debug color scheme with alpha channel.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets","title":"presets","text":"<p>             Bases: <code>Namespace</code></p> <p><code>Style.presets</code> contains predefined styles for convenience.</p> Source code in <code>src/pygerber/vm/types/style.py</code> <pre><code>class presets(Namespace):  # noqa: N801\n    \"\"\"`Style.presets` contains predefined styles for convenience.\"\"\"\n\n    SILK: ClassVar[Style]\n    \"\"\"Default color of silk layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SILK_ALPHA: ClassVar[Style]\n    \"\"\"Default color of silk layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    COPPER: ClassVar[Style]\n    \"\"\"Default color of copper layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    COPPER_ALPHA: ClassVar[Style]\n    \"\"\"Default color of copper layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    PASTE_MASK: ClassVar[Style]\n    \"\"\"Default color of paste mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    PASTE_MASK_ALPHA: ClassVar[Style]\n    \"\"\"Default color of paste mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    SOLDER_MASK: ClassVar[Style]\n    \"\"\"Default color of solder mask layer.\n\n    This schema provided non-transparent background, which results in images which\n    can not be used for stacking on top of other layers, as they would completely\n    obscure them.\"\"\"\n\n    SOLDER_MASK_ALPHA: ClassVar[Style]\n    \"\"\"Default color of solder mask layer with alpha channel.\n\n    This schema provides transparent background. Images using this schema can be\n    stacked on top of each other without obscuring layers below.\"\"\"\n\n    DEFAULT_GRAYSCALE: ClassVar[Style]\n    \"\"\"Default color scheme for files which were not assigned other color scheme.\"\"\"\n\n    DEBUG_1: ClassVar[Style]\n    \"\"\"Debug color scheme.\"\"\"\n\n    DEBUG_1_ALPHA: ClassVar[Style]\n    \"\"\"Debug color scheme with alpha channel.\"\"\"\n</code></pre>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: Style\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: Style\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: Style\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: Style\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: Style\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: Style\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: Style\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: Style\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: Style\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: Style\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: Style\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/vm/types/vector.html","title":"vector","text":""},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector","title":"vector","text":"<p><code>vector</code> module contains <code>Vector</code> class used to represent 2D coordinates.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector","title":"Vector","text":"<p>             Bases: <code>ModelType</code></p> <p>Represents a point in cartesian coordinate space.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>class Vector(ModelType):\n    \"\"\"Represents a point in cartesian coordinate space.\"\"\"\n\n    x: float\n    y: float\n\n    class unit(Namespace):  # noqa: N801\n        \"\"\"Namespace containing unit vectors.\"\"\"\n\n        x: ClassVar[Vector]\n        y: ClassVar[Vector]\n        null: ClassVar[Vector]\n\n    @classmethod\n    def from_tuple(cls, data: tuple[float, float]) -&gt; Self:\n        \"\"\"Create a new point from a tuple.\"\"\"\n        return cls(x=data[0], y=data[1])\n\n    @property\n    def xy(self) -&gt; tuple[float, float]:\n        \"\"\"Return point as tuple of Units.\"\"\"\n        return (self.x, self.y)\n\n    def __add__(self, other: object) -&gt; Vector:\n        \"\"\"Add two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x + other.x, y=self.y + other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x + other, y=self.y + other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x + other, y=self.y + other)\n        return NotImplemented\n\n    def __sub__(self, other: object) -&gt; Vector:\n        \"\"\"Subtract two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x - other.x, y=self.y - other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x - other, y=self.y - other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x - other, y=self.y - other)\n        return NotImplemented\n\n    def __mul__(self, other: object) -&gt; Vector:\n        \"\"\"Multiply two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x * other.x, y=self.y * other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x * other, y=self.y * other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x * other, y=self.y * other)\n        return NotImplemented\n\n    def __truediv__(self, other: object) -&gt; Vector:\n        \"\"\"Divide two points.\"\"\"\n        if isinstance(other, Vector):\n            return Vector(x=self.x / other.x, y=self.y / other.y)\n        if isinstance(other, float):\n            return Vector(x=self.x / other, y=self.y / other)\n        if isinstance(other, (int, float)):\n            return Vector(x=self.x / other, y=self.y / other)\n        return NotImplemented\n\n    def __eq__(self, other: object) -&gt; bool:\n        \"\"\"Check if two points are equal.\"\"\"\n        if isinstance(other, Vector):\n            return self.x == other.x and self.y == other.y\n        return NotImplemented\n\n    def __lt__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is less than other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &lt; other.x and self.y &lt; other.y\n        return NotImplemented\n\n    def __gt__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is greater than other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &gt; other.x and self.y &gt; other.y\n        return NotImplemented\n\n    def __ge__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is greater than or equal to other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &gt;= other.x and self.y &gt;= other.y\n        return NotImplemented\n\n    def __le__(self, other: object) -&gt; bool:\n        \"\"\"Check if point is less than or equal to other point.\"\"\"\n        if isinstance(other, Vector):\n            return self.x &lt;= other.x and self.y &lt;= other.y\n        return NotImplemented\n\n    def __neg__(self) -&gt; Vector:\n        \"\"\"Negate vector values.\"\"\"\n        return Vector(x=-self.x, y=-self.y)\n\n    def angle_between(self, other: Vector) -&gt; float:\n        \"\"\"Calculate clockwise angle between two vectors in degrees.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n\n        self is the starting vector, other is the ending vector.\n\n        &gt;&gt;&gt; from math import *\n        &gt;&gt;&gt; s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n        &gt;&gt;&gt; e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n        &gt;&gt;&gt; s.angle_between(e)\n        90.0\n        &gt;&gt;&gt; e.angle_between(s)\n        270.0\n        \"\"\"\n        return 360 - self.angle_between_cc(other)\n\n    def angle_between_cc(self, other: Vector) -&gt; float:\n        \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n        Value returned is always between 0 and 360 (can be 0, never 360).\n        \"\"\"\n        v0 = self.normalized()\n        v1 = other.normalized()\n        angle_radians = math.atan2(\n            ((v0.x * v1.y) - (v1.x * v0.y)),  # determinant\n            ((v0.x * v1.x) + (v0.y * v1.y)),  # dot product\n        )\n        angle_degrees = math.degrees(angle_radians)\n        return angle_degrees + (360 * (angle_degrees &lt; 0))\n\n    def normalized(self) -&gt; Vector:\n        \"\"\"Return normalized (unit length) vector.\"\"\"\n        if self.x == 0 and self.y == 0:\n            return Vector.from_tuple((1, 0))\n\n        return self / self.length()\n\n    def length(self) -&gt; float:\n        \"\"\"Return length of vector.\"\"\"\n        return math.sqrt((self.x * self.x) + (self.y * self.y))\n\n    def transform(self, matrix: Matrix3x3) -&gt; Vector:\n        \"\"\"Transform vector by matrix.\"\"\"\n        return matrix @ self\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.xy","title":"xy  <code>property</code>","text":"<pre><code>xy: tuple[float, float]\n</code></pre> <p>Return point as tuple of Units.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.unit","title":"unit","text":"<p>             Bases: <code>Namespace</code></p> <p>Namespace containing unit vectors.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>class unit(Namespace):  # noqa: N801\n    \"\"\"Namespace containing unit vectors.\"\"\"\n\n    x: ClassVar[Vector]\n    y: ClassVar[Vector]\n    null: ClassVar[Vector]\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.from_tuple","title":"from_tuple  <code>classmethod</code>","text":"<pre><code>from_tuple(data: tuple[float, float]) -&gt; Self\n</code></pre> <p>Create a new point from a tuple.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>@classmethod\ndef from_tuple(cls, data: tuple[float, float]) -&gt; Self:\n    \"\"\"Create a new point from a tuple.\"\"\"\n    return cls(x=data[0], y=data[1])\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Vector\n</code></pre> <p>Add two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __add__(self, other: object) -&gt; Vector:\n    \"\"\"Add two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x + other.x, y=self.y + other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x + other, y=self.y + other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x + other, y=self.y + other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Vector\n</code></pre> <p>Subtract two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __sub__(self, other: object) -&gt; Vector:\n    \"\"\"Subtract two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x - other.x, y=self.y - other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x - other, y=self.y - other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x - other, y=self.y - other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__mul__","title":"__mul__","text":"<pre><code>__mul__(other: object) -&gt; Vector\n</code></pre> <p>Multiply two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __mul__(self, other: object) -&gt; Vector:\n    \"\"\"Multiply two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x * other.x, y=self.y * other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x * other, y=self.y * other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x * other, y=self.y * other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(other: object) -&gt; Vector\n</code></pre> <p>Divide two points.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __truediv__(self, other: object) -&gt; Vector:\n    \"\"\"Divide two points.\"\"\"\n    if isinstance(other, Vector):\n        return Vector(x=self.x / other.x, y=self.y / other.y)\n    if isinstance(other, float):\n        return Vector(x=self.x / other, y=self.y / other)\n    if isinstance(other, (int, float)):\n        return Vector(x=self.x / other, y=self.y / other)\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check if two points are equal.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    \"\"\"Check if two points are equal.\"\"\"\n    if isinstance(other, Vector):\n        return self.x == other.x and self.y == other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __lt__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is less than other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &lt; other.x and self.y &lt; other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __gt__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is greater than other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &gt; other.x and self.y &gt; other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than or equal to other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __ge__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is greater than or equal to other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &gt;= other.x and self.y &gt;= other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than or equal to other point.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __le__(self, other: object) -&gt; bool:\n    \"\"\"Check if point is less than or equal to other point.\"\"\"\n    if isinstance(other, Vector):\n        return self.x &lt;= other.x and self.y &lt;= other.y\n    return NotImplemented\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__neg__","title":"__neg__","text":"<pre><code>__neg__() -&gt; Vector\n</code></pre> <p>Negate vector values.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def __neg__(self) -&gt; Vector:\n    \"\"\"Negate vector values.\"\"\"\n    return Vector(x=-self.x, y=-self.y)\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.angle_between","title":"angle_between","text":"<pre><code>angle_between(other: Vector) -&gt; float\n</code></pre> <p>Calculate clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> <p>self is the starting vector, other is the ending vector.</p> <p>from math import * s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1) e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1) s.angle_between(e) 90.0 e.angle_between(s) 270.0</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def angle_between(self, other: Vector) -&gt; float:\n    \"\"\"Calculate clockwise angle between two vectors in degrees.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n\n    self is the starting vector, other is the ending vector.\n\n    &gt;&gt;&gt; from math import *\n    &gt;&gt;&gt; s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n    &gt;&gt;&gt; e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1)\n    &gt;&gt;&gt; s.angle_between(e)\n    90.0\n    &gt;&gt;&gt; e.angle_between(s)\n    270.0\n    \"\"\"\n    return 360 - self.angle_between_cc(other)\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.angle_between_cc","title":"angle_between_cc","text":"<pre><code>angle_between_cc(other: Vector) -&gt; float\n</code></pre> <p>Calculate counter clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def angle_between_cc(self, other: Vector) -&gt; float:\n    \"\"\"Calculate counter clockwise angle between two vectors in degrees.\n\n    Value returned is always between 0 and 360 (can be 0, never 360).\n    \"\"\"\n    v0 = self.normalized()\n    v1 = other.normalized()\n    angle_radians = math.atan2(\n        ((v0.x * v1.y) - (v1.x * v0.y)),  # determinant\n        ((v0.x * v1.x) + (v0.y * v1.y)),  # dot product\n    )\n    angle_degrees = math.degrees(angle_radians)\n    return angle_degrees + (360 * (angle_degrees &lt; 0))\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.normalized","title":"normalized","text":"<pre><code>normalized() -&gt; Vector\n</code></pre> <p>Return normalized (unit length) vector.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def normalized(self) -&gt; Vector:\n    \"\"\"Return normalized (unit length) vector.\"\"\"\n    if self.x == 0 and self.y == 0:\n        return Vector.from_tuple((1, 0))\n\n    return self / self.length()\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.length","title":"length","text":"<pre><code>length() -&gt; float\n</code></pre> <p>Return length of vector.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def length(self) -&gt; float:\n    \"\"\"Return length of vector.\"\"\"\n    return math.sqrt((self.x * self.x) + (self.y * self.y))\n</code></pre>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.transform","title":"transform","text":"<pre><code>transform(matrix: Matrix3x3) -&gt; Vector\n</code></pre> <p>Transform vector by matrix.</p> Source code in <code>src/pygerber/vm/types/vector.py</code> <pre><code>def transform(self, matrix: Matrix3x3) -&gt; Vector:\n    \"\"\"Transform vector by matrix.\"\"\"\n    return matrix @ self\n</code></pre>"}]}