{
    "cSpell.words": [
        "addinivalue",
        "addoption",
        "Altium",
        "AMDONUTCAL",
        "AMDONUTVAR",
        "AMRECTANGLE",
        "AMTEST",
        "Argmaster",
        "ASAXBY",
        "ASAYBX",
        "ATMEGA",
        "AXBY",
        "AYBX",
        "Backdrilling",
        "CMPN",
        "Cxxx",
        "DONUTVAR",
        "dpmm",
        "drawsvg",
        "dtype",
        "dulwich",
        "ebnf",
        "endwith",
        "EOEX",
        "EOSTMT",
        "fromarray",
        "FSLAX",
        "gerberx",
        "getcontext",
        "getpixel",
        "ihooks",
        "indygo",
        "inlinehilite",
        "IPPOS",
        "is_devrelease",
        "kicad",
        "levelname",
        "linenums",
        "Linu",
        "lsprotocol",
        "lspt",
        "mkdocs",
        "mkdocstrings",
        "modifyitems",
        "Moir√©",
        "MOMM",
        "mypy",
        "Netlist",
        "numpy",
        "obround",
        "OlinuXino",
        "OPENCV",
        "pathlib",
        "prec",
        "putpixel",
        "pydantic",
        "pygerber",
        "pygls",
        "pygments",
        "pylance",
        "pymdownx",
        "pyparsing",
        "pytestconfig",
        "qualname",
        "quickstart",
        "Refdes",
        "RGBA",
        "Roboto",
        "rvmc",
        "shtree",
        "skimage",
        "SOSTMT",
        "strtree",
        "superfences",
        "svglib",
        "tasklist",
        "tobytes",
        "ucamco",
        "Ucamco's",
        "ungroup",
        "Xino",
        "xlink"
    ],
    "python.testing.pytestArgs": ["."],
    "ruff.enable": true,
    "ruff.fixAll": true,
    "python.analysis.importFormat": "absolute",
    "python.analysis.autoFormatStrings": true,
    "python.analysis.useLibraryCodeForTypes": true,
    "emeraldwalk.runonsave": {
        /* "commands": [
            {
                "match": "\\.py$",
                "cmd": "poetry run <command>"
            }
        ]*/
    },
    "files.exclude": {
        "**/.git": false
    },
    "python.analysis.fixAll": ["source.convertImportFormat"],
    "editor.codeActionsOnSave": {
        "source.fixAll": "explicit"
    },
    "editor.formatOnSaveMode": "file",
    "editor.formatOnSave": true,
    "python.analysis.autoImportCompletions": true,
    "python.analysis.packageIndexDepths": [
        {
            "name": "pygerber",
            "depth": 10
        },
        {
            "name": "pygls",
            "depth": 10
        },
        {
            "name": "lsprotocol",
            "depth": 10
        },
        {
            "name": "typing_extensions",
            "depth": 10
        },
        {
            "name": "PIL",
            "depth": 10
        }
    ],
    "mypy-type-checker.importStrategy": "fromEnvironment",
    "cSpell.ignoreWords": ["RRGGBB", "RRGGBBAA"],
    "peacock.color": "#007fff",
    "mypy-type-checker.args": ["--config-file=pyproject.toml"],
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "mypy-type-checker.reportingScope": "workspace",
    "workbench.colorCustomizations": {
        "activityBar.activeBackground": "#3399ff",
        "activityBar.background": "#3399ff",
        "activityBar.foreground": "#15202b",
        "activityBar.inactiveForeground": "#15202b99",
        "activityBarBadge.background": "#bf0060",
        "activityBarBadge.foreground": "#e7e7e7",
        "commandCenter.border": "#e7e7e799",
        "sash.hoverBorder": "#3399ff",
        "statusBar.background": "#007fff",
        "statusBar.foreground": "#e7e7e7",
        "statusBarItem.hoverBackground": "#3399ff",
        "statusBarItem.remoteBackground": "#007fff",
        "statusBarItem.remoteForeground": "#e7e7e7",
        "titleBar.activeBackground": "#007fff",
        "titleBar.activeForeground": "#e7e7e7",
        "titleBar.inactiveBackground": "#007fff99",
        "titleBar.inactiveForeground": "#e7e7e799"
    },
    "python.analysis.diagnosticMode": "workspace",
    "python.analysis.extraCommitChars": true,
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.userFileIndexingLimit": -1,
    "mypy-type-checker.path": ["mypy"],
    "mypy-type-checker.cwd": "${workspaceFolder}",
    "ruff.configurationPreference": "filesystemFirst"
}
