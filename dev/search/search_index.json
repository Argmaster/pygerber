{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"PyGerber"},{"location":"index.html#overview","title":"\ud83d\udcd6 Overview","text":"<p>PyGerber is a collection of tools aimed at simplifying the use of the Gerber X3 format. It is based on Ucamco's <code>The Gerber Layer Format Specification. Revision 2024.05</code> (Available on Ucamco's webpage.</p> <p>PyGerber can be used both as a executable (with command line interface) and as a Python library.</p> <p>PyGerber supports modern features available in the latest version of the standard (2024.05). At the same time, it includes the implementation of many of outdated and removed functionalities for backwards compatibility. This allows it to be used not only with files compliant with the X3 standard but also with those compliant with X2, RS-274X, and RS-274D. Due to limited access to files in older standards and ambiguities within them, there is a risk that some older functionalities may behave incorrectly.</p> <p>If you have found a bug in the PyGerber library, please file a bug report with use of one of issue templates available on Create new issue page in PyGerber repository. We will be glad to examine your report and possibly fix the problem.</p> <p>If you have any questions or suggestions, please open a new discussion thread in the Discussions section of our repository. We will be happy to help you and discuss your ideas.</p>"},{"location":"index.html#installation","title":"\ud83d\udce6 Installation","text":"<p>PyGerber can be installed with <code>pip</code> from PyPI:</p> <pre><code>pip install pygerber\n</code></pre> <p>This way only the core of PyGerber features will be installed. It will not include language server, SVG rendering support and other optional features. If you want to install all available features, include <code>all</code> extras set in installation request, like this:</p> <pre><code>pip install pygerber[all]\n</code></pre> <p>To install latest development version of PyGerber, you can use URL of the Github repository with <code>git+</code> prefix:</p> <pre><code>pip install git+https://github.com/Argmaster/pygerber\n</code></pre>"},{"location":"index.html#documentation","title":"\ud83d\udcda Documentation","text":"<p>PyGerber has a online documentation hosted on Github Pages. It will be a great starting point for your journey with PyGerber. You can it here. If you are looking for documentation of older version of PyGerber, please use version selector dropdown available next to the title in top bar menu.</p>"},{"location":"index.html#license","title":"\ud83d\udcdc License","text":"<p>PyGerber is licensed under MIT license. You can find full text of the license in the LICENSE file in the root directory of the repository.</p> <p>Some of the testing assets may be licensed under different licenses. License files for those assets are available alongside those files.</p> <p>Some of the example files shipped with PyGerber may be licensed under different licenses. In particular, files from KiCad demo projects are licensed under <code>CC BY-SA 4.0</code> license. Copy of the license file is provided alongside those files.</p>"},{"location":"index.html#tools","title":"\ud83d\udee0 Tools","text":"<p>Collection of tools available in PyGerber constantly grows. Some of the tools can be accessed only with API, others provide command line interface too. Below you can find list of all currently available ones:</p> <ul> <li>Image renderer (PNG/JPEG) <code>[API]</code> <code>[CLI]</code></li> <li>Code formatter <code>[API]</code> <code>[CLI]</code></li> <li>Code generation <code>[API]</code></li> <li>Language server (requires <code>language_server</code> extras)   (Visual Studio Code extension available)   <code>[CLI]</code></li> <li>Pygments Gerber syntax lexer plugin (requires <code>pygments</code> extras) <code>[CLI]</code></li> </ul>"},{"location":"index.html#pygerber-apis","title":"\ud83d\uddae PyGerber APIs","text":"<p>PyGerber provides APIs for accessing most of its functionalities. There are selected modules designed to be used as libraries, they reexport public parts of implementation in a convenient way. Avoid importing stuff from modules not listed below and not mentioned in documentation, as this may inflict suffering and damnation upon you \ud83d\udc80 (Just joking, but they may get deleted/moved at any time, so you know \ud83d\ude3c).</p> <p>Below you can find list of available APIs:</p> <ul> <li><code>pygerber.gerber.api</code>   (open issue)</li> <li><code>pygerber.gerber.ast</code>   (open issue)</li> <li><code>pygerber.gerber.ast.nodes</code>   (open issue)</li> <li><code>pygerber.gerber.compiler</code>   (open issue)</li> <li><code>pygerber.gerber.parser</code>   (open issue)</li> <li><code>pygerber.gerber.formatter</code>   (open issue)</li> <li><code>pygerber.builder.gerber</code>   (open issue)</li> <li><code>pygerber.builder.rvmc</code>   (open issue)</li> <li><code>pygerber.vm</code>   (open issue)</li> <li><code>pygerber.vm.commands</code>   (open issue)</li> <li><code>pygerber.vm.types</code>   (open issue)</li> <li><code>pygerber.vm.pillow</code>   (open issue)</li> <li><code>pygerber.vm.shapely</code>   (open issue)</li> </ul> <p>If you need a symbol that is not reexported from those modules, eg. some exception class you need to catch, please open an issue with corresponding <code>open issue</code> link so we can evaluate that issue and possibly add missing reexport. Don't worry about template being for bugs, we will figure that out in the process, just fill the fields in template according to guidelines contained in it.</p> <p>If you have found a bug in a particular part of PyGerber, please use <code>open issue</code> link next to module name above to open issue submission form. Alternatively you can choose one of the issue templates on Create new issue page in PyGerber repository. Please fill the template according to guidelines contained in it to simplify process of reproducing the issue for maintainers. If there is no dedicated template, use PyGerber Bug Report template.</p>"},{"location":"index.html#pygerber-cli","title":"\ud83d\udcbb PyGerber CLI","text":"<p>PyGerber provides non-interactive command line interface which provides means to access some of its features. <code>pygerber</code> command is available after installation and can be used to access tools with use of subcommands.</p> <p>To check version of PyGerber available in your environment, you can use:</p> <pre><code>pygerber --version\n</code></pre> <p>To convert Gerber file to PNG image you can use <code>pygerber gerber convert png</code> command. Assuming that your Gerber file is named <code>source.gbr</code> representing a copper layer and you want to convert it to PNG image with DPMM of 600, command would look like this:</p> <pre><code>pygerber gerber convert png source.gbr -o output.png -d 600 -s copper_alpha\n</code></pre> <p>This will create <code>output.png</code> file in current working directory. Depending on your image size you may need to adjust <code>-d</code> (<code>--dpmm</code>) parameter to increase or decrease the resolution of image.</p> <p>Here is an example result of converting a Gerber file to PNG image:</p> <p></p> <p>There are more export target formats available, like JPEG, TIFF or SVG to name some of them. Use <code>--help</code> flag to get list of available conversion commands:</p> <pre><code>pygerber gerber convert --help\n</code></pre> <p>For more detailed command line interface documentation please visit <code>Gerber</code> -&gt; <code>Command Line</code> section in documentation.</p>"},{"location":"index.html#language-server","title":"\u00a7 Language Server","text":"<p>PyGerber provides Gerber X3/X2 Language Server conforming to Language Servere Protocol defined by Microsoft. It can be enabled by installing PyGerber extras set <code>language-server</code> with following command:</p> <pre><code>pip install pygerber[language-server]\n</code></pre> <p>Afterwards you can use following command to check if PyGerber correctly recognized that language server feature should be enabled:</p> <pre><code>pygerber is-language-server-available\n</code></pre> <p>If you have encountered a problem with language server please report it in the Issues section of Github repository of this project.</p> <p>If you have a suggestion for improvement, please open a new discussion thread in the Discussions section of our repository.</p> <p>To fully utilize power of this language server you can use Visual Studio Code extension Gerber X3/X2 Format Support (<code>argmaster.gerber-x3-x2-format-support</code>). Repository of this extension is available here. If you encounter any problems with that extension, please report them in the Issues section of its repository. If you are not sure whether the problem is caused by extension or by language server, please report it in the Issues section of the extension, we will move it to PyGerber repository if necessary.</p>"},{"location":"index.html#development","title":"Development","text":"<p>For development guidelines please visit documentation <code>Development</code> section here.</p>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<p>I would like to thank Professor Janusz M\u0142odzianowski from the University of Gda\u0144sk, who inspired me with the idea to implement the Gerber format at the beginning of my bachelor's degree. I would like to also express my gratitude to Karel Tavernier, the long-time steward of the Gerber format, for his support and expert guidance during my work on this project. Without them, this project would have never come to life. Finally, I would like to thank all the people who have contributed, are contributing and will contribute to PyGerber. Your help is invaluable and I am grateful for it.</p>"},{"location":"10_license.html","title":"License","text":"<p>Copyright 2023 Krzysztof Wi\u015bniewski</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"30_changelog.html","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning 2.0.0.</p>"},{"location":"30_changelog.html#pre-release-300b1","title":"Pre-Release 3.0.0b1","text":"<ul> <li>Changed <code>pygerber.gerber.ast.nodes.aperture.AM_open</code> to   <code>pygerber.gerber.ast.nodes.aperture.AMopen</code> for consistency.</li> <li>Changed <code>pygerber.gerber.ast.nodes.aperture.AM_close</code> to   <code>pygerber.gerber.ast.nodes.aperture.AMclose</code> for consistency.</li> <li>Changed <code>pygerber.gerber.ast.nodes.aperture.AB_open</code> to   <code>pygerber.gerber.ast.nodes.aperture.ABopen</code> for consistency.</li> <li>Changed <code>pygerber.gerber.ast.nodes.aperture.AB_close</code> to   <code>pygerber.gerber.ast.nodes.aperture.ABclose</code> for consistency.</li> <li>Changed order of box and origin parameters in <code>create_eager_layer</code> and   <code>create_deferred_layer</code> for consistency.</li> <li>Moved <code>CoordinateX</code>, <code>CoordinateY</code>, <code>CoordinateI</code> and <code>CoordinateJ</code> to separate   modules.</li> <li>Added workaround for #383.</li> <li>Added <code>pygerber.gerber.lint</code> package containing linting tools for Gerber files.</li> <li>Added <code>pygerber gerber lint</code> command to CLI for linting Gerber files.</li> <li>Changed how empty images are handled in <code>VirtualMachine</code>, they no longer throw an   exception by default. This can be changed by passing   <code>fail_on_empty_auto_sized_layer=True</code> to <code>VirtualMachine</code> constructor.</li> <li>Fixed default paths used by <code>pygerber gerber convert</code> commands to have extensions   matching output file format.</li> </ul>"},{"location":"30_changelog.html#pre-release-300a4","title":"Pre-Release 3.0.0a4","text":"<ul> <li>Relaxed <code>pyparsing</code> dependency requirements to allow for use of <code>3.2</code> and above for   supported Python versions.</li> <li>Relaxed <code>numpy</code> dependency requirements to allow for use of <code>2.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>pydantic</code> dependency requirements to allow for use of <code>2.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>pillow</code> dependency requirements to allow for use of <code>8.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>click</code> dependency requirements to allow for use of <code>8.x</code> and above for   supported Python versions.</li> <li>Relaxed Python version requirement to allow for use of <code>3.8</code> and above.</li> <li>Removed <code>pygerber.sequence_tools</code> module.</li> <li>Removed <code>pygerber.frozen_general_model</code> module.</li> <li>Removed <code>pygerber.gerber.linter.diagnostic</code> module.</li> <li>Removed <code>pygerber.warnings</code> module.</li> <li>Updated documentation links to point to stable release documentation.</li> <li>Renamed <code>GerberX3Builder.add_trace()</code> to <code>GerberX3Builder.add_line_trace()</code> to be   consistent with <code>GerberX3Builder.add_clockwise_arc_trace()</code> and   <code>GerberX3Builder.add_counter_clockwise_arc_trace()</code>.</li> <li>Added support for Altium implied leading zeros omitted. Contributed by @sjgallagher2   in #340.</li> <li>Added arc drawing in <code>GerberX3Builder</code>.</li> <li>Added region statement generation to <code>GerberX3Builder</code>.</li> <li>Added Gerber to PNG, JPEG, TIFF, BMP, WEBP and SVG conversion commands to CLI.</li> <li>Added Gerber format command to CLI.</li> <li>Extended documentation.</li> </ul>"},{"location":"30_changelog.html#pre-release-300a3","title":"Pre-Release 3.0.0a3","text":"<ul> <li>Removed legacy error types from <code>pygerber.gerber.api._errors</code>.</li> <li>Removed <code>pygerber.common.general_model</code> module.</li> <li>Removed <code>pygerber.common.immutable_map_model</code> module.</li> <li>Removed <code>pygerber.common.rgba</code> module.</li> <li>Rename <code>Project</code> class from <code>pygerber.gerber.api</code> to <code>CompositeView</code>.</li> <li>Changed <code>source_code</code> and <code>file_type</code> attributes of <code>GerberFile</code> to be read-only.</li> <li>Changed return type of <code>CompositeView.render_with_pillow</code> to <code>CompositePillowImage</code>.   Interface of <code>CompositePillowImage</code> is the same as previously <code>CompositeView</code>.</li> <li>Changed miniatures displayed by language server to be fixed size due to repeating   problems with apertures being too small or too large.</li> <li>Added custom <code>__str__</code> to <code>CompositeView</code> and <code>GerberFile</code> classes.</li> <li>Added <code>GerberJobFile</code> class for handling <code>.gbrjob</code> files.</li> <li>Added <code>Project</code> class for grouping multiple <code>CompositeView</code> objects.</li> <li>Added documentation for <code>GerberJobFile</code> and <code>Project</code> classes.</li> <li>Added <code>pygerber.vm.shapely</code> package containing implementation of Gerber vm (renderer)   using shapely library.</li> <li>Added <code>render_with_shapely</code> to <code>GerberFile</code> class.</li> <li>Updated <code>Quick start</code> guide.</li> <li>Updated many of docstrings in <code>pygerber.gerber.api</code> package.</li> <li>Restored <code>pygerber_language_server</code> command.</li> </ul>"},{"location":"30_changelog.html#pre-release-300a2","title":"Pre-Release 3.0.0a2","text":"<ul> <li>Removed <code>Parser2</code> and related infrastructure. It was already replaced by <code>Parser</code> in   previous release, but I didn't have time to make sure all of dependencies were gone.</li> <li>Removed most of the old documentation.</li> <li>Moved <code>pygerber.gerberx3</code> to <code>pygerber.gerber</code>. I acknowledge this is a breaking   change, but using <code>gerberx3</code> as a package name when it in fact contained code mostly   compatible with more than just X3 was misleading.</li> <li>Moved <code>pygerber.gerber.ast.builder</code> to <code>pygerber.builder.gerber</code>.</li> <li>Moved <code>pygerber.vm.builder</code> to <code>pygerber.builder.rvmc</code>.</li> <li>Added new documentation layout.</li> <li>Added documentation for <code>GerberX3Builder</code> from <code>pygerber.builder.gerber</code> module.</li> <li>Added <code>Quick start</code> guide to documentation.</li> <li>Added <code>pygerber.gerber.pygments</code>, a Pygments lexer for Gerber files. To use it you   have to install <code>pygments</code> extras package (or just have pygments installed from other   source).</li> <li>Added support for deprecated syntax construct of <code>D01</code> with code omitted.</li> <li>Changed <code>pygerber.gerber.formatter</code> API and structure. Formatter options are no longer   directly passed to <code>Formatter</code> class, they are stored in dedicated <code>Options</code> class.</li> <li>Added 2 high level formatter API functions available in <code>pygerber.gerber.formatter</code>:   <code>format</code>, <code>formats</code>.</li> <li>Improved docstrings in <code>pygerber.builder.gerber</code></li> <li>Improved <code>pygerber.gerber.formatter</code> docstrings, especially ones related to formatter   options.</li> <li>Changed <code>pygerber.gerber.api</code> to use <code>pygerber.builder.gerber</code>. This is a major change   in how this API works. I am planning to create some guide on how to migrate code from   PyGerber 2.4.x to 3.x.x, there is placeholder docs page for that.</li> <li>Deleted implementation of command line interface. Unfortunately, command line   interface is not functional right now.</li> </ul>"},{"location":"30_changelog.html#pre-release-300a1","title":"Pre-Release 3.0.0a1","text":"<ul> <li>Fixed README headers.</li> </ul>"},{"location":"30_changelog.html#pre-release-300a0","title":"Pre-Release 3.0.0a0","text":"<ul> <li>Added <code>pygerber.gerberx3.formatter</code> for formatting Gerber files.</li> <li>Added <code>GerberX3Builder</code> class for building Gerber code from scratch.</li> <li>Redesigned PyGerber Parser implementation and AST classes.</li> <li>Added intermediate step between parsing and rendering done by   <code>pygerber.gerberx3.compiler</code>.</li> <li>Redesigned rendering principles, now implemented in <code>pygerber.vm</code>, supports only   rendering raster images with Pillow. SVG rendering is planned to be included in 3.0.0   release.</li> <li>Ported language server to new parser.</li> </ul>"},{"location":"30_changelog.html#release-243","title":"Release 2.4.3","text":"<ul> <li>Fixed <code>background_color</code> parameter being completely ignored in raster renders. Thanks   to @totalretribution reporting the issue.</li> <li>Changed default color map used by Project <code>render_raster()</code>to   <code>DEFAULT_ALPHA_COLOR_MAP</code> as <code>DEFAULT_COLOR_MAP</code> resulted in images with layers   obfuscating each other in counter intuitive way.</li> <li>Unified gray shades of non-alpha and alpha variant of SOLDER_MASK preset color scheme.</li> </ul>"},{"location":"30_changelog.html#release-242","title":"Release 2.4.2","text":"<ul> <li>Relaxed <code>pyparsing</code> dependency requirements to allow for use of <code>3.2</code> and above for   supported Python versions.</li> <li>Relaxed <code>numpy</code> dependency requirements to allow for use of <code>2.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>pydantic</code> dependency requirements to allow for use of <code>2.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>pillow</code> dependency requirements to allow for use of <code>8.x</code> and above for   supported Python versions.</li> <li>Relaxed <code>click</code> dependency requirements to allow for use of <code>8.x</code> and above for   supported Python versions.</li> <li>Relaxed Python version requirement to allow for use of <code>3.8</code> and above.</li> <li>Changed documentation deployment flow to include <code>latest</code>, <code>stable</code> and <code>dev</code> links.</li> </ul>"},{"location":"30_changelog.html#release-241","title":"Release 2.4.1","text":"<ul> <li>Added support for comment based attributes (#217)</li> <li>Fixed incorrect rotation of rectangle flashes (#243)</li> <li>Removed PyYAML dependency (#221)</li> <li>Added tests for language server (#227)</li> <li>Added tests for console interface (#223)</li> </ul>"},{"location":"30_changelog.html#release-240","title":"Release 2.4.0","text":"<ul> <li>Added command line interface utilizing API V2 for rendering Gerber files to images.   This includes interface for rendering PNG, JPEG and SVG images and multi-file projects   to single PNG/JPEG image.</li> <li>Added support for inferring file type from file extension or <code>.FileFunction</code> file   attribute. This mechanism is used by default by API V2 based command line interface.</li> <li>Refactored test suite and dropped testing of code related to <code>Parser</code> class originally   included in <code>PyGerber</code> 2.0.0. Currently only <code>Parser2</code> related code is actively   tested.</li> </ul>"},{"location":"30_changelog.html#release-232","title":"Release 2.3.2","text":"<ul> <li>Fixed clockwise arc rendering in raster renderer. Reported by @tgbl-mk (#203). Fixed   by @Argmaster in #205.</li> <li>Fixed empty comment parsing. Reported by @lookme2 (#198). Fixed by @Argmaster in #201.</li> <li>Disabled MacOS test suite due to consistent failures during Python installation on   <code>macos-latest</code> GitHub hosted machines.</li> </ul>"},{"location":"30_changelog.html#release-231","title":"Release 2.3.1","text":"<ul> <li>Added support for rotation of code 21 center line macro primitive in SVG and Raster   renderers. Support is not exhaustive, it will be extended whenever extension is   requested by users.</li> <li>Fixed bug causing macro flashes to be partially cut off in images rendered with SVG   renderer.</li> <li>Fixed incorrect version string in <code>pygerber.__version__</code> and reported by   <code>pygerber --version</code>.</li> </ul>"},{"location":"30_changelog.html#release-230","title":"Release 2.3.0","text":"<ul> <li>Added full support for transforms (LP, LM, LR, LS commands) in Parser2.</li> <li>Fixed titles in Parser2 and Parser feature support documentation. They were swapped.</li> <li>Fixed bug causing SvgRenderer2 to incorrectly render masks in some cases.</li> <li>Optimized SvgRenderer2 group and mask usage to reduce file size and memory usage of   software displaying output SVGs.</li> <li>Fixed parsing of attributes without value.</li> <li>Updated documentation to mention deprecation of API V1 elements and changed order of   pages to better expose API V2.</li> <li>Added example files shipped with PyGerber for testing and demonstration purposes. They   can be accessed via <code>pygerber.examples</code> module.</li> <li>Added new <code>pygerber.gerberx3.api.v2</code> module with new high level utilizing API V2   capabilities. This module is mend to replace API V1 in future releases.</li> <li>Added new API for rendering multiple Gerber files at once into single image. Available   as part of <code>pygerber.gerberx3.api.v2</code> module with use of <code>Project</code> class.</li> </ul>"},{"location":"30_changelog.html#release-221","title":"Release 2.2.1","text":"<ul> <li>Fixed rendering of first macro flash.</li> <li>Added reference page for SvgRenderer2 in docs.</li> <li>Fixed duplicated element prefixes in docs.</li> <li>Fixed supported feature counts in docs.</li> <li>Updated <code>README.md</code> feature support links.</li> </ul>"},{"location":"30_changelog.html#release-220","title":"Release 2.2.0","text":"<ul> <li>Added alternative parser implementation, <code>pygerber.gerberx3.parser2.parser2.Parser2</code>   class.</li> <li>Added introspection interface based on new Parser2 class.</li> <li>Added macro support to Parser2 class which was not previously available in Parser   class.</li> <li>Added API for customizing Token classes used by Tokenizer. <code>Tokenizer</code> class now   accepts optional <code>options</code> parameter of class <code>TokenizerOptions</code>.</li> <li>Added documentation for introspection.</li> <li>Added experimental SVG backend for Gerber code with Parser2 generated command buffers.</li> <li>Changed documentation layout to improve readability.</li> <li>Fixed switching to single quadrant mode being ignored.</li> <li>Refactored feature support documentation.</li> </ul>"},{"location":"30_changelog.html#release-211","title":"Release 2.1.1","text":"<ul> <li>Fixed incorrect bounding box prediction for displaced drawings (#105).</li> <li>Added 3.12 as supported in package tags.</li> <li>Fixed documentation links in <code>README.md</code> and <code>pyproject.toml</code>.</li> </ul>"},{"location":"30_changelog.html#release-210","title":"Release 2.1.0","text":"<ul> <li>Fixed #37</li> <li>Added latest Gerber spec file revision 2023.08 to documentation.</li> <li>Added command line interface for PyGerber 2D rendering.</li> <li>Added Gerber X3/X2 language server which can be acquired with   <code>pip install pygerber[language-server]</code>. Currently server capabilities include hover   messages with Gerber reference cited and minimal amount of suggestions. We are   planning to further extend this server in future releases.</li> <li>Added <code>is-language-server-available</code> CLI command for checking if   <code>pygerber[language-sever]</code> is available.</li> <li>Added support for arc region boundaries (#61).</li> <li>Added warning messages whenever zero surface flash is created.</li> <li>Improved documentation for many of supported Gerber commands. This documentation is   used by language server to provide specification reference.</li> <li>Refactored tokenizer implementation, as a result #67 was fixed and #64 is no longer an   issue in some cases.</li> </ul>"},{"location":"30_changelog.html#release-202","title":"Release 2.0.2","text":"<ul> <li>Fixed incorrect bounding box prediction for displaced drawings (#105).</li> <li>Added 3.12 as supported in package tags.</li> <li>Fixed documentation links in <code>README.md</code> and <code>pyproject.toml</code>.</li> </ul>"},{"location":"30_changelog.html#release-201","title":"Release 2.0.1","text":"<ul> <li>Fixed names of Gerber specification files (<code>.pdf.pdf</code> extension replaced with <code>.pdf</code>)</li> <li>Added <code>draw_region_outlines</code> option (disabled by default) which controls whether lines   which make up a region boundary should be drawn after region is filled. KiCAD seem to   assume that those boundaries are not drawn and region outline is 1px instead of   thickness of aperture.</li> <li>Changed <code>Decimal</code> precision to 60 decimal places.</li> <li>Changed precision of <code>INCH_TO_MM_MULTIPLIER</code> (now its 25.4) and   <code>MM_TO_INCH_MULTIPLIER</code> (dynamically calculated with <code>Decimal</code>).</li> <li>Changed circle aperture to make result better match expectations and <code>KiCAD</code>   reference.</li> <li>Fixed warning message logged every time a valid region was created to show up only   when region is not valid.</li> <li>Added warnings for zero surface aperture draws.</li> </ul>"},{"location":"30_changelog.html#release-200","title":"Release 2.0.0","text":"<ul> <li> <p>Added Gerber X3 format tokenizer with support for selective feature support:</p> </li> <li> <p>Supported Gerber X3 features: <code>G04</code>, <code>MO</code>, <code>FS</code>, <code>AD</code>, <code>AM</code>, <code>Dnn</code> (nn\u226510), <code>D01</code>,     <code>D02</code>, <code>D03</code>, <code>G01</code>, <code>G02</code>, <code>G03</code>, <code>G75</code>, <code>LP</code>, <code>LM</code>, <code>LR</code>, <code>LS</code>, <code>G36</code>, <code>G37</code>,     <code>AB</code>, <code>SR</code>, <code>TF</code>, <code>TA</code>, <code>TO</code>,<code>TD</code>, <code>M02</code>.</p> </li> <li> <p>Supported DEPRECATED Gerber features: <code>G54</code>, <code>G70</code>, <code>G71</code>, <code>G90</code>, <code>G91</code>, <code>G74</code>,     <code>M00</code>, <code>M01</code>, <code>IP</code>, <code>LN</code>,     <code>Combining G01/G02/G03 and D01/D02/D03 in a single command</code>,     <code>Coordinate Data without Operation Code</code>, <code>Style Variations in Command Codes</code>, <code>FS</code>,     <code>Draws and Arcs with Rectangular Apertures</code>.</p> </li> </ul> <p>For more detailed descriptions of supported features please refer to documentation or   README.md.</p> <ul> <li> <p>Added Gerber X3 format parser with support for selective feature support:</p> </li> <li> <p>Supported Gerber X3 features: <code>G04</code>, <code>MO</code>, <code>FS</code>, <code>AD</code>, <code>AM</code>, <code>Dnn</code> (nn\u226510), <code>D01</code>,     <code>D02</code>, <code>D03</code>, <code>G01</code>, <code>G02</code>, <code>G03</code>, <code>G75</code>, <code>LP</code>, <code>LM</code>, <code>LR</code>, <code>LS</code>, <code>G36</code>, <code>G37</code>,     <code>M02</code>.</p> </li> <li> <p>Supported DEPRECATED Gerber features: <code>G54</code>, <code>G70</code>, <code>G71</code>, <code>G90</code>, <code>G91</code>, <code>G74</code>,     <code>M00</code>, <code>M01</code>, <code>IP</code>, <code>LN</code>, <code>Combining G01/G02/G03 and D01 in a single command</code>,     <code>Coordinate Data without Operation Code</code>, <code>Style Variations in Command Codes</code>,     <code>Draws and Arcs with Rectangular Apertures</code>.</p> </li> </ul> <p>For more detailed descriptions of supported features please refer to documentation or   README.md.</p> <ul> <li>Added rendering backend capable of producing 2D rasterized images based on parser   instructions. Supported drawing elements:</li> <li>Aperture definition with circle</li> <li>Aperture definition with rectangle</li> <li>Aperture definition with obround</li> <li>Aperture definition with polygon</li> <li>Draw flash with circle aperture</li> <li>Draw flash with rectangle aperture</li> <li>Draw flash with obround aperture</li> <li>Draw flash with polygon aperture</li> <li>Draw line</li> <li>Draw clockwise arc</li> <li>Draw counterclockwise arc</li> </ul>"},{"location":"40_gerber/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"40_gerber/00_introduction.html#overview","title":"Overview","text":"<p>Welcome to the documentation of Gerber tooling within PyGerber library. This part of documentation will cover most of the features of PyGerber which have to do with consuming and changing Gerber files.</p> <p>In particular, you can learn here how to:</p> <ul> <li>quickly render PNGs, JPEGs or SVGs from Gerber files,</li> <li>stack many of them on top each other so they align well,</li> <li>consume Gerber Job files,</li> <li>perform analysis of Gerber files,</li> <li>modify them,</li> <li>and format them,</li> <li>collect diagnostics,</li> <li>use language server,</li> <li>or even extend PyGerber.</li> </ul> <p>Generation of Gerber files is covered separately by Gerber code generation guide.</p> <p>Adding rendering backends is covered by documentation of Virtual Machines.</p>"},{"location":"40_gerber/00_introduction.html#design-overview","title":"Design overview","text":"<p>In this section we will cover the general design of Gerber tooling within PyGerber. Let's start with basic stages of Gerber processing which have to be performed to create PNG image out of Gerber file.</p>"},{"location":"40_gerber/00_introduction.html#parser","title":"Parser","text":"<p>First of all, Gerber files have to be loaded into memory and parsed into Abstract Syntax Tree (AST). This is done by a parser, currently PyGerber has only one Gerber parser, based on pyparsing library, available as <code>pygerber.gerber.parser.pyparsing.Parser</code> class. Currently work is being done to provide plugin interface which would allow to use parsers implemented as separate packages. Alongside that initiative, a C++ based Gerber parser is being implemented.</p>"},{"location":"40_gerber/00_introduction.html#compiler","title":"Compiler","text":"<p>After obtaining AST it is converted to a special assembly like format called Rendering Virtual Machine Commands (RVMC). This conversion is handled by a Compiler class. RVMC representation is much simpler, it does not differentiate between rectangles, obrounds, circles and other Gerber constructs, but rather represents everything as shapes built out of lines and arcs. This simplification allows it to be very generic and quite easy to implement.</p>"},{"location":"40_gerber/00_introduction.html#virtual-machine","title":"Virtual Machine","text":"<p>Once RVMC is obtained, it is passed to one of the classes inheriting from VirtualMachine class, which are responsible for \"executing\" the RVMC (nomenclature based on analogy to executing assembly code). Depending on the VM chosen, there are different configuration options available and different type of image will be obtained. Since at the begging we assumed we want to walk through the process of rendering PNG image, we would have to choose PillowVirtualMachine, which is capable of rendering raster images with Pillow library and exporting them in different raster formats.</p> <pre><code>flowchart TD\n  src@{ shape: st-rect, label: \"Gerber source\" }\n  parser@{ shape: proc, label: \"Parser\" }\n  ast@{ shape: st-rect, label: \"Abstract Syntax Tree\" }\n  compiler@{ shape: proc, label: \"Compiler\" }\n  rvmc@{ shape: st-rect, label: \"RVMC\" }\n  vm@{ shape: proc, label: \"Virtual Machine\" }\n  image@{ shape: st-rect, label: \"Image\" }\n\nsrc --&gt; parser\n\nsubgraph Parsing\n    parser --&gt; ast\nend\n\nsubgraph Translation\n    ast --&gt; compiler\n    compiler --&gt; rvmc\nend\n\nsubgraph Rendering\n    rvmc --&gt; vm\n    vm --&gt; image\nend\n</code></pre>"},{"location":"40_gerber/00_introduction.html#additional-processing","title":"Additional processing","text":"<p>Although rendering is probably the most useful feature of PyGerber, it is not the only one. PyGerber is capable of performing analysis, formatting and modification of existing Gerber files. This is done by different classes, which are not part of the rendering pipeline. All those tools require AST as input, so you have to first parse Gerber file before you can use them. For example here is processing flow for formatting:</p> <pre><code>flowchart TD\n  src@{ shape: st-rect, label: \"Gerber source\" }\n  parser@{ shape: proc, label: \"Parser\" }\n  ast@{ shape: st-rect, label: \"Abstract Syntax Tree\" }\n  formatter@{ shape: proc, label: \"Formatter\" }\n  formatted@{ shape: st-rect, label: \"Formatted Gerber source\" }\n\nsrc --&gt; parser\n\nsubgraph Parsing\n    parser --&gt; ast\nend\n\nsubgraph Formatting\n    ast --&gt; formatter\nend\n\nformatter --&gt; formatted</code></pre>"},{"location":"40_gerber/10_migrate_from_2_4_x_to_3_x_x.html","title":"Migrating from 2.4.x to 3.x.x","text":"<p>PyGerber 3.0.0 is a major rewrite of the library. Most of the library was rewritten from scratch, a lot of nomenclature has changes and layout of the library has been reorganized. This document is intended to provide a help in navigating through the changes and migrating your code from 2.4.x to 3.x.x. We are especially concerned with the introspection/analysis APIs which were significantly simplified.</p> <p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/20_quick_start/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"40_gerber/20_quick_start/00_introduction.html#overview","title":"Overview","text":"<p>This is a beginning of quick start guide for PyGerber. It uses a dedicated API which exposes limited set of functionalities of PyGerber in very convenient way. It should suite your needs if you are only looking for a quick way to render or format Gerber file(s) with basic customization.</p> <p>If you need to do something more complicated, you should check out Advanced Guide to understand how PyGerber works and what can be achieved with its more complicated interfaces.</p>"},{"location":"40_gerber/20_quick_start/00_introduction.html#pygerbergerberapi-module","title":"<code>pygerber.gerber.api</code> module","text":"<p>PyGerber exposes a simple API for accessing limited subset of its functionalities in form of <code>pygerber.gerber.api</code> module. This interface is especially useful for one time use, scripting and use from interactive shell. Most of the functionality has been included in the <code>GerberFile</code> class and <code>Project</code> class. Additionally, there is a <code>FileTypeEnum</code> containing recognized file types and some less important utility objects.</p> <pre><code>__all__ = ['DEFAULT_ALPHA_COLOR_MAP',\n 'DEFAULT_COLOR_MAP',\n 'Color',\n 'CompositeImage',\n 'CompositePillowImage',\n 'CompositeView',\n 'DesignRules',\n 'FileTypeEnum',\n 'FilesAttributes',\n 'GeneralSpecs',\n 'GenerationSoftware',\n 'GerberFile',\n 'GerberJobFile',\n 'Header',\n 'Image',\n 'ImageSpace',\n 'MaterialStackup',\n 'Options',\n 'PathToGerberJobProjectNotDefinedError',\n 'PillowImage',\n 'ProjectId',\n 'ShapelyImage',\n 'Size',\n 'Style',\n 'Units']\n</code></pre> <p>For guide on how to use <code>GerberFile</code> class, check out Single file guide.</p> <p>For guide on how to use <code>Project</code> class, check out Multi file project guide.</p> <p>Most of code examples (those with file name at the top of code frame) can be directly copied and pasted into Python file, interactive shell or Jupyter notebook and executed.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html","title":"\ud83e\udd50 Single file guide","text":"<p>Welcome to the PyGerber single file guide. This guide focuses on tools which take single Gerber file as opposed to Multi file guide guide which is concerned with operating on collections of Gerber files. Most of the functionality is exposed as methods on <code>GerberFile</code> class which can be imported from <code>pygerber.gerber.api</code> module and we will be using it throughout this document.</p> <p>Currently <code>GerberFile</code> class provides means to render Gerber files into raster and vector image formats and format Gerber code. Code optimization, cleanup and diagnostics are on the roadmap.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html#creating-gerberfile-instance","title":"Creating <code>GerberFile</code> instance","text":"<p>To perform any operations on individual Gerber file(s), like rendering or formatting, you have to create <code>GerberFile</code> class instance wrapping actual Gerber code. Recommended way is to use one of 3 factory methods provided by <code>GerberFile</code> class: <code>from_str()</code>, <code>from_file()</code> or <code>from_buffer()</code></p> <p><code>from_str()</code> creates <code>GerberFile</code> from <code>str</code> object containing Gerber code.</p> example_from_str.py<pre><code>from pygerber.gerber.api import GerberFile\n\nsource_code = \"\"\"\n%FSLAX26Y26*%\n%MOMM*%\n%ADD100C,1.5*%\nD100*\nX0Y0D03*\nM02*\n\"\"\"\n\ngerber_file = GerberFile.from_str(source_code)\n</code></pre> <p><code>from_file()</code> creates <code>GerberFile</code> by reading a file which location is determined by first parameter passed to <code>from_file()</code>. You can use <code>str</code> or <code>pathlib.Path</code> to specify file location.</p> example_from_file.py<pre><code>from pygerber.gerber.api import GerberFile\nfrom pathlib import Path\n\npath_to_my_gerber_file = Path().cwd() / \"example.grb\"\n\ngerber_file = GerberFile.from_file(path_to_my_gerber_file)\n</code></pre> <p><code>from_buffer()</code> creates <code>GerberFile</code> from <code>io.TextIO</code>-like object.</p> example_from_buffer.py<pre><code>from pygerber.gerber.api import GerberFile\nfrom pathlib import Path\n\nwith (Path().cwd() / \"example.grb\").open() as text_io:\n    gerber_file = GerberFile.from_buffer(text_io)\n</code></pre> <p>Each of the factory methods listed above accept optional <code>file_type</code> (<code>FileTypeEnum</code> )parameter which can be used to explicitly set file type (e.g. copper, silkscreen). If this parameter is not set, by default PyGerber will try to guess file type based on file extension and/or file attributes.</p> <p>Info</p> <p>File type affects color of rendered image if color scheme is not explicitly set.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html#configuring-gerberfile-object","title":"Configuring <code>GerberFile</code> object","text":"<p>Once you have <code>GerberFile</code> object created, you can use PyGerber features exposed as methods on this object. <code>GerberFile</code> allows you to customize behavior of some of underlying implementation parts. Those methods mutate <code>GerberFile</code> object and consecutive calls to those methods override previous configuration in its entirety.</p> <p><code>set_color_map()</code> can be used to override default color map.</p> <p>Color map is used to map file type to predefined color style. PyGerber provides simple color schema but it is useful mostly for final renders as colors used were chosen to resemble final look of average PCB. Therefore you can easily provide your own color map.</p> <p>Check out Custom color maps for more details.</p> <p><code>set_parser_options()</code> allows you to modify advanced parser settings. It is available to allow tweaking predefined parser behavior options. If you need more control than provided here, please check out Extending Guide. <code>**options</code> are intentionally not precisely defined here, as they are different for different parser implementations, only way to use this method is to already understand what you are doing.</p> <p><code>set_compiler_options()</code> allows you to modify advanced compiler settings. It is available to allow tweaking predefined compiler behavior options. If you need more control than provided here, please check out Extending Guide. <code>**options</code> are intentionally not precisely defined here, as they are different for different compiler implementations, only way to use this method is to already understand what you are doing.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html#rendering-gerber-file","title":"Rendering Gerber file","text":""},{"location":"40_gerber/20_quick_start/01_single_file.html#raster-images","title":"Raster images","text":"<p><code>GerberFile</code> object exposes <code>render_with_pillow()</code> method which uses Gerber file renderer implemented with Pillow (Python Imaging Library (PIL) fork) to generate raster images. Those images can be saved afterwards in PNG, JPEG etc. image formats.</p> render_with_pillow.py<pre><code>from pygerber.gerber.api import GerberFile\n\nfrom pygerber.examples import ExamplesEnum, load_example\n\ngerber_source_code = load_example(ExamplesEnum.UCAMCO_2_11_2)\n\nimage = GerberFile.from_str(gerber_source_code).render_with_pillow()\nimage.get_image().save(\"output.png\")\n</code></pre> <p><code>render_with_pillow()</code> method accepts <code>dpmm</code> parameter which can be used to set custom dots-per-millimeter value, hence increase and decrease image resolution. By default this value is set to 20, which is a safe default, but quite low for small PCBs.</p> <p><code>render_with_pillow()</code> returns <code>PillowImage</code> object which wraps actual image (<code>PIL.Image.Image</code> object) and additional information about image coordinate space.</p> <p> </p> <p>To retrieve image object, you can use <code>get_image()</code> method. Afterwards you can save it with <code>save()</code> method offered by <code>PIL.Image.Image</code> class instance or transform with other methods. To find out more please refer to Pillow documentation.</p> <p>To retrieve information about image space you can use <code>get_image_space()</code> method. This method returns <code>ImageSpace</code> object which contains information about image coordinates, image size, etc, as presented below:</p> show_image_space.py<pre><code>from pygerber.gerber.api import GerberFile\n\nfrom pygerber.examples import ExamplesEnum, load_example\n\ngerber_source_code = load_example(ExamplesEnum.UCAMCO_2_11_2)\n\nimage = GerberFile.from_str(gerber_source_code).render_with_pillow()\nprint(image.get_image_space())\n</code></pre> $ python show_image_space.py<pre><code>ImageSpace(\n    units = Units.Millimeters,\n    min_x_mm = -0.05,\n    min_y_mm = -0.05,\n    max_x_mm = 42.55,\n    max_y_mm = 37.5,\n    dpmm = 20,\n)\n</code></pre>"},{"location":"40_gerber/20_quick_start/01_single_file.html#vector-images","title":"Vector images","text":"<p><code>GerberFile</code> object exposes <code>render_with_shapely()</code> method which uses Gerber file renderer implemented with shapely library to generate vector images. Those images can be saved afterwards in SVG format.</p> <p><code>render_with_shapely()</code> returns <code>ShapelyImage</code> object which wraps output geometry and additional information about image coordinate space. You can save the image in SVG format using <code>save()</code> method</p> example.py<pre><code>from pygerber.gerber.api import GerberFile, Style\n\nfrom pygerber.examples import ExamplesEnum, get_example_path\n\npath_to_gerber_file = get_example_path(ExamplesEnum.UCAMCO_2_11_2)\n\nimage = GerberFile.from_file(path_to_gerber_file).render_with_shapely(\n    Style.presets.BLACK_WHITE\n)\nimage.save(\"output.svg\")\n</code></pre> <p> </p> <p>Improvements in PyGerber 3.0.0</p> <p>In comparison to SVG rendering engine present in PyGerber 2.4.x, shapely based implementation performs actual boolean operations on geometry, therefore resulting in cleaner geometry which can be used to create 3D models, for example in blender.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html#image-colors","title":"Image colors","text":"<p>There are three ways to change color of image created with <code>render_with_*()</code> methods.</p> <p>First way is to explicitly pass <code>Style</code> instance as <code>style</code> parameter to <code>render_with_*()</code> method. Style class offers predefined styles which can be accessed by <code>Style.presets.&lt;preset-name&gt;</code>.</p> <p>Second way is to change Gerber file type. File type can be deduced automatically but also can be explicitly set in <code>GerberFile</code> factory method (<code>from_str</code>, <code>from_file</code> etc.). File type will be mapped to specific <code>Style</code> based on color map.</p> <p>Third way is to change what color map is used to convert file types to styles. This can be achieved with <code>set_color_map()</code>, but for more details on how to specify custom color maps see Custom color maps.</p>"},{"location":"40_gerber/20_quick_start/01_single_file.html#formatting-gerber-file","title":"Formatting Gerber file","text":"<p><code>GerberFile</code> object exposes <code>format()</code> and <code>formats()</code> methods which format Gerber code. For detailed documentation of formatting options, please refer to Formatter -&gt; Configuration.</p> <p>The difference between <code>format()</code> and <code>formats()</code> methods is that first one writes formatted code to <code>TextIO</code>-like object while second one returns it as a <code>str</code> object.</p> format_file.py<pre><code>from pygerber.gerber.api import GerberFile, Options\n\nsource_code = \"\"\"\n%FSLAX26Y26*%%MOMM*%%ADD100C,1.5*%D100*X0Y0D03*M02*\n\"\"\"\n\ngerber_file = GerberFile.from_str(source_code)\nformatted_code = gerber_file.formats(Options(d03_indent=2))\n\nprint(formatted_code)\n</code></pre> $ python format_file.py<pre><code>%FSLAX26Y26*%\n%MOMM*%\n%ADD100C,1.5*%\nD100*\n  X0Y0D03*\nM02*\n</code></pre>"},{"location":"40_gerber/20_quick_start/01_single_file.html#further-reading","title":"Further reading","text":"<p>Check out full reference of <code>pygerber.gerber.api</code>.</p> <p>For guide on how to arrange multiple files into single image using <code>Project</code> class check out Multi file project.</p>"},{"location":"40_gerber/20_quick_start/02_multi_file.html","title":"\ud83e\udd5e Multi file guide","text":"<p>Welcome to the multi file guide. This guide shows how to use <code>CompositeView</code> class API to handle multiple Gerber files at once. <code>CompositeView</code> relies on <code>GerberFile</code> instances to provide access to individual Gerber files, hence It might be useful if you take a look onto Single file guide before continuing with this guide.</p>"},{"location":"40_gerber/20_quick_start/02_multi_file.html#creating-compositeview-instance","title":"Creating <code>CompositeView</code> instance","text":"<p><code>CompositeView</code> class is a thin wrapper around multiple <code>GerberFile</code> objects which can be imported from <code>pygerber.gerber.api</code> module. You may have noticed that the name of the class is weirdly generic, instead of being something like Project or alike. Well, it turns out that usually it does not make sense to operate on all files from project at once, for example, rendering top layers on top of bottom ones will produce hard to understand images. Therefore PyGerbers <code>CompositeView</code> class takes an aproach of group files that should be rendered together instead of accumulating all the files from the project. With that logic in mind, we would use one instance of <code>CompositeView</code> to represent top layer of the design, with silkscreen, solder mask, top copper etc. while parts of bottom of PCB are grouped in separate <code>CompositeView</code> instance.</p> <p><code>CompositeView</code> constructor accepts multiple <code>GerberFile</code> objects as arguments. Order of files affects order of rendering to shared image. First <code>GerberFile</code> is the bottom most, usually copper layer, will be covered with all other layers, and last <code>GerberFile</code> is top most, usually silk screen, will not be obscured by any layer. Here is an example:</p> create_project.py<pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import CompositeView, GerberFile, FileTypeEnum\n\n\nproject = CompositeView(\n    [\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Cu),\n            FileTypeEnum.COPPER,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Mask),\n            FileTypeEnum.MASK,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Paste),\n            FileTypeEnum.PASTE,\n        ),\n        GerberFile.from_str(\n            load_example(ExamplesEnum.simple_2layer_F_Silkscreen),\n            FileTypeEnum.SILK,\n        ),\n    ],\n)\nprint(project)\n</code></pre> $ python create_project.py<pre><code>CompositeView((GerberFile(source='@string', sha256='415f75c8fb8ffa30a1c272241e1048186af9d686cc58588c96af859acffc3f0e'), GerberFile(source='@string', sha256='f6cf84f51a7330d9195ea53164e4db7bac0415db5780df3f53e1d2986c85c725'), GerberFile(source='@string', sha256='0957b0e6c778e58507ba848249589bcbfba3a2b7e28c65ab5f07fe08f154d52a'), GerberFile(source='@string', sha256='66e189271f75224c5aa37e1ecf716e0a90f28560f54a49861b21420133c3c530')))\n</code></pre>"},{"location":"40_gerber/20_quick_start/02_multi_file.html#rendering-raster-images","title":"Rendering raster images","text":"<p>Image rendering API of <code>CompositeView</code> object is similar to rendering API of <code>GerberFile</code> object. <code>CompositeView</code> object exposes <code>render_with_pillow()</code> method which renders all files into single image.</p> <p><code>CompositeView</code> automatically aligns all images during grouped rendering, determines how big final image has to be to fit all images and merges them into single image. It is still possible to retrieve individual images from result returned by rendering methods.</p> render_project.py<pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import CompositeView, GerberFile\n\n\nproject = CompositeView(\n    [\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Cu)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Mask)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Paste)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Silkscreen)),\n    ],\n)\nimage = project.render_with_pillow()\nimage.get_image().save(\"output.png\")\n</code></pre> <p> </p> <p>Image presented above is a result of rendering Gerber files from this project: github.com/AntonioMR/ATMEGA328-Motor-Board</p>"},{"location":"40_gerber/20_quick_start/02_multi_file.html#accessing-individual-images","title":"Accessing individual images","text":"<p>After rendering a image with <code>CompositeView</code> object you can still access individual images by using <code>get_sub_images()</code> method available on <code>CompositePillowImage</code> object returned by <code>render_with_pillow()</code> method.</p> render_project.py<pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import CompositeView, GerberFile\n\n\nproject = CompositeView(\n    [\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Cu)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Mask)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Paste)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Silkscreen)),\n    ],\n)\nimage = project.render_with_pillow()\nimage.get_sub_images()[0].get_image().save(\"output.png\")\n</code></pre> <p> </p>"},{"location":"40_gerber/20_quick_start/02_multi_file.html#further-reading","title":"Further reading","text":"<p>Check out full reference of <code>pygerber.gerber.api</code>.</p>"},{"location":"40_gerber/20_quick_start/03_project_gerber_job.html","title":"\ud83e\udd67 GerberJobFile and Project","text":"<p>This guide shows how to use <code>GerberJobFile</code> class and <code>Project</code> to represent PCB projects.</p>"},{"location":"40_gerber/20_quick_start/03_project_gerber_job.html#gerberjobfile","title":"GerberJobFile","text":"<p>PyGerber provides a <code>GerberJobFile</code> class to directly handle <code>.gbrjob</code> files usually exported alongside Gerber files. You can find The Gerber Job Format Specification at www.ucamco.com. Attributes of <code>GerberJobFile</code> directly map to values in <code>.gbrjob</code> file. You can create <code>GerberJobFile</code> manually by constructing it out of classes imported from <code>pygerber.gerber.api</code> or you can load existing <code>.gbrjob</code> file with <code>from_file()</code> method.</p> example.py<pre><code>from pygerber.examples import ExamplesEnum, get_example_path\nfrom pygerber.gerber.api._gerber_job_file import GerberJobFile\n\n\ngerber_job = GerberJobFile.from_file(\n    get_example_path(ExamplesEnum.carte_test_gbrjob),\n)\nprint(gerber_job.header.generation_software.vendor)\n</code></pre> $ python example.py<pre><code>KiCad\n</code></pre>"},{"location":"40_gerber/20_quick_start/03_project_gerber_job.html#pygerber-project-class","title":"PyGerber Project class","text":"<p><code>Project</code> class is a container for <code>CompositeView</code> objects. It is primarily a utility for grouping <code>CompositeView</code> objects together, it doesn't really fit into PCB design workflow but can be really handy to express what should be rendered together while creating images of PCBs.</p> <p><code>Project</code> has <code>top</code>, <code>bottom</code> read-only attributes which containing <code>CompositeView</code> objects and <code>inner</code> read-only attribute containing tuple of <code>CompositeView</code> objects representing inner layers. Layers in <code>inner</code> are ordered first to last, <code>L1</code> at index <code>0</code>, <code>Ln</code> at index <code>n</code>.</p>"},{"location":"40_gerber/20_quick_start/03_project_gerber_job.html#converting-gerberjobfile-to-project","title":"Converting GerberJobFile to Project","text":"<p><code>GerberJobFile</code> can be converted to <code>Project</code> object with <code>to_project()</code> method. This will automatically read layers from <code>GerberJobFile</code> and arrange them in <code>Project</code> object so they can be rendered.</p> example.py<pre><code>from pygerber.examples import ExamplesEnum, get_example_path\nfrom pygerber.gerber.api._gerber_job_file import GerberJobFile\n\n\ngerber_job = GerberJobFile.from_file(\n    get_example_path(ExamplesEnum.carte_test_gbrjob),\n)\nproject = gerber_job.to_project()\n\nprint(\"top:\")\nfor file in project.top.files:\n    print(f\"  {file}\")\n\nfor i, inner in enumerate(project.inner):\n    print(f\"inner {i}:\")\n    for file in inner.files:\n        print(f\"  {file}\")\n\nprint(\"bottom:\")\nfor file in project.bottom.files:\n    print(f\"  {file}\")\n\nproject.bottom.render_with_pillow().get_image().save(\"output.png\")\n</code></pre> $ python example.py<pre><code>top:\n  GerberFile(source='carte_test-F_Cu.gbr', sha256='4b0d219591c6b37af12505f6f5c8846180c4e1bc74f50d5bec0a6ab18ca616a5')\n  GerberFile(source='carte_test-F_Mask.gbr', sha256='1322445fd9368ac7c9f167a213cbc86651b35752e8bae8c0c3623db319b23e80')\n  GerberFile(source='carte_test-F_Silkscreen.gbr', sha256='23b6b77cda230055a6f32c8a3719574b2075576ffc444906f129ee88123c984b')\n  GerberFile(source='carte_test-Edge_Cuts.gbr', sha256='4a6960843955afe271580adb763eae8696251b8c68a295c66af333ad33749a0f')\nbottom:\n  GerberFile(source='carte_test-B_Cu.gbr', sha256='bce8b1dc2e10e0037c9854d834c7e15e8b12934fca21aa8b9345688685ad2eac')\n  GerberFile(source='carte_test-B_Mask.gbr', sha256='68044ba4c1d4c8579e6d882e295729759f6df5b4906eae925071c5237bc5d71c')\n  GerberFile(source='carte_test-B_Silkscreen.gbr', sha256='7b64d8e6630afdef5c7bbb39073150d38f822daeb744030ca28f02e37d725e2f')\n  GerberFile(source='carte_test-Edge_Cuts.gbr', sha256='4a6960843955afe271580adb763eae8696251b8c68a295c66af333ad33749a0f')\n</code></pre> <p>Here is image generated by code above:</p> <p> </p> <p>As you can see, during conversion <code>copper</code>, <code>soldermask</code>, <code>legend</code> and <code>profile</code> (edge cuts) files corresponding to top part of PCB were recognized. Be aware that <code>MaterialStackup</code> field is currently not taken into account while converting <code>GerberJobFile</code> to <code>Project</code>, so no information about materials or colors is retained.</p>"},{"location":"40_gerber/20_quick_start/03_project_gerber_job.html#pcb-design-disclaimer","title":"PCB design disclaimer","text":"<p>Gerber files <code>carte_test-*</code> were generated from KiCad demo project <code>test_xil_95108</code>.</p> <p>LICENSE.README in KiCad repository states:</p> <p>Licensed under CC BY-SA 4.0:</p> <ul> <li>All the demo files provided in demos/*</li> </ul>"},{"location":"40_gerber/20_quick_start/10_custom_color_maps.html","title":"\ud83e\uddc1 Custom color maps","text":""},{"location":"40_gerber/20_quick_start/10_custom_color_maps.html#introduction","title":"Introduction","text":"<p>In PyGerber Gerber API (<code>pygerber.gerber.api</code> module) term color maps refers to dictionaries used to convert type of layer (specified manually or determined automatically) to style determining colors which should be used for rendering of that layer.</p> <p>Layer (file) type is expressed as <code>FileTypeEnum</code> value while style is expressed as <code>Style</code> instance. Both classes are defined in <code>pygerber.gerber.api</code> module.</p> <p>There are two predefined color maps in <code>pygerber.gerber.api</code>: <code>DEFAULT_COLOR_MAP</code> and <code>DEFAULT_ALPHA_COLOR_MAP</code>. By default second one is used in <code>GerberFile</code> class during rendering.</p> <p>To create custom color map you need to create dictionary with keys being <code>FileTypeEnum</code> values and values being <code>Style</code> instances. Then to change color map used by <code>GerberFile</code> you need to call <code>set_color_map</code> method with your custom color map as argument.</p>"},{"location":"40_gerber/20_quick_start/10_custom_color_maps.html#single-file-example","title":"Single file example","text":"custom_color_map.py<pre><code>from pygerber.gerber.api import GerberFile\n\nfrom pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import FileTypeEnum, Color, Style\n\n\n# Define a custom color map as a dictionary. We dont have to map all file types, only\n# the ones we need. There is no fallback mechanism though, so if you miss a file type\n# that you need during rendering, KeyError will be raised.\nmy_color_map = {\n    FileTypeEnum.COPPER: Style(\n        background=Color.from_rgba(0, 0, 0, 255),\n        foreground=Color.from_rgba(200, 20, 20, 255),\n    ),\n    FileTypeEnum.MASK: Style(\n        background=Color.from_rgba(0, 0, 0, 255),\n        foreground=Color.from_rgba(117, 117, 117, 255),\n    ),\n    FileTypeEnum.PASTE: Style(\n        background=Color.from_rgba(0, 0, 0, 255),\n        foreground=Color.from_rgba(117, 117, 117, 255),\n    ),\n    FileTypeEnum.SILK: Style(\n        background=Color.from_hex(\"#000000\"),\n        foreground=Color.from_hex(\"#FFFFFF\"),\n    ),\n}\n\ngerber_source_code = load_example(ExamplesEnum.carte_test_F_Cu)\n\nfile = GerberFile.from_str(gerber_source_code)\n# Set the custom color map with the set_color_map method. If you don't do that,\n# nothing will change.\nfile.set_color_map(my_color_map)\n\nimage = file.render_with_pillow()\nimage.get_image().save(\"output.png\")\n</code></pre>"},{"location":"40_gerber/20_quick_start/10_custom_color_maps.html#multi-file-example","title":"Multi file example","text":"<p>The reason for using dictionaries instead of just a parameter for render function is that color map approach scales well for rendering multiple files from a project at once. In such case colors will be automatically determined based on file types which can be easily inferred from either file extension or file attributes.</p> <p>See an example below:</p> custom_color_map_multi_file.py<pre><code>from pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import CompositeView, GerberFile, FileTypeEnum, Color, Style\n\n\nmy_color_map = {\n    FileTypeEnum.COPPER: Style(\n        background=Color.from_rgba(0, 0, 0, 0),\n        foreground=Color.from_rgba(200, 20, 20, 255),\n    ),\n    FileTypeEnum.SOLDERMASK: Style(\n        background=Color.from_rgba(0, 0, 0, 0),\n        foreground=Color.from_rgba(117, 117, 117, 255),\n    ),\n    FileTypeEnum.PASTE: Style(\n        background=Color.from_rgba(0, 0, 0, 0),\n        foreground=Color.from_rgba(117, 117, 117, 255),\n    ),\n    FileTypeEnum.LEGEND: Style(\n        background=Color.from_hex(\"#00000000\"),\n        foreground=Color.from_hex(\"#FFFFFFFF\"),\n    ),\n}\n\n\nproject = CompositeView(\n    [\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Cu)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Mask)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Paste)),\n        GerberFile.from_str(load_example(ExamplesEnum.simple_2layer_F_Silkscreen)),\n    ],\n)\n# Calling `set_color_map` on `CompositeView` will propagate the color map to all\n# `GerberFile` objects inside it.\nproject.set_color_map(my_color_map)\n\nimage = project.render_with_pillow()\nimage.get_image().save(\"output.png\")\n</code></pre>"},{"location":"40_gerber/20_quick_start/10_custom_color_maps.html#partial-override","title":"Partial override","text":"<p>It might be tricky to guess all file types when rendering multiple files, especially if we want to change colors only for single file type. In such case we can just copy default color map which covers all file types and then override only colors for specific file type.</p> custom_color_map_multi_file.py<pre><code>from pygerber.gerber.api import GerberFile\n\nfrom pygerber.examples import ExamplesEnum, load_example\nfrom pygerber.gerber.api import FileTypeEnum, Color, Style, DEFAULT_ALPHA_COLOR_MAP\n\n\n# We can copy DEFAULT_ALPHA_COLOR_MAP and update it with our custom values to avoid\n# missing any file type. The ones we don't override will keep the default values.\nmy_color_map = DEFAULT_ALPHA_COLOR_MAP.copy()\nmy_color_map.update(\n    {\n        FileTypeEnum.COPPER: Style(\n            background=Color.from_rgba(0, 0, 0, 255),\n            foreground=Color.from_rgba(20, 20, 200, 255),\n        ),\n    }\n)\n\ngerber_source_code = load_example(ExamplesEnum.carte_test_F_Cu)\n\nfile = GerberFile.from_str(gerber_source_code)\nfile.set_color_map(my_color_map)\n\nimage = file.render_with_pillow()\nimage.get_image().save(\"output.png\")\n</code></pre>"},{"location":"40_gerber/30_analysis/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Welcome to the Gerber code analysis documentation. This documentation is intended to provide a friendly guide to the APIs within PyGerber which can be used to analyze Gerber files.</p> <p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/30_analysis/10_stateless_introspection.html","title":"\ud83e\uddea Stateless Introspection","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/30_analysis/20_stateful_introspection.html","title":"\ud83e\uddec Stateful Introspection","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/40_modify_optimize/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Welcome to the Gerber Optimizer documentation. This documentation is intended to provide a comprehensive overview of the Gerber Optimizer including usage, options and examples.</p> <p>Unfortunately, the Gerber Optimizer is not yet implemented and documentation is yet to be written. I am doing my best to provide it before release 3.0.0, stay tuned!</p>"},{"location":"40_gerber/40_modify_optimize/30_code_optimization.html","title":"\ud83e\uddf4 Code optimization","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/60_formatter/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Welcome to the Gerber Formatter documentation. This documentation is intended to provide a comprehensive overview of the Gerber Formatter including usage, options and examples.</p> <p>Info</p> <p>Please note that this API is lower-level than one offered by the <code>GerberFile</code> object you can find here. In many cases <code>GerberFile</code> interface will be more intuitive and easier to use, hence it is usually better to stick with it unless you have specific needs that are not covered by it.</p>"},{"location":"40_gerber/60_formatter/00_introduction.html#what-is-the-gerber-formatter","title":"What is the Gerber Formatter?","text":"<p>The Gerber Formatter is a tool that can be used to format Gerber files. It can be used to reformat Gerber files to make them more readable or the opposite, to compress them to save precious disk space. Technically, formatter includes also minor code modernization features although less powerful than the Optimizer.</p>"},{"location":"40_gerber/60_formatter/00_introduction.html#why","title":"Why?","text":"<p>Gerber files are often used just as transfer format and rarely it is necessary to read them directly. However, in those rare cases when you have to look into them, it would be nice for them to be more readable than what your CAD software of choice happens to spit out. This is where the Gerber Formatter comes in handy.</p>"},{"location":"40_gerber/60_formatter/00_introduction.html#how","title":"How?","text":"<p>The Gerber Formatter can be used both as a command line tool and as a library. The command line tool can be accessed via <code>pygerber gerber format</code> subcommand while library API is available through <code>pygerber.gerber.formatter</code> module. Command line usage is covered in Gerber command line documentation while API usage and configuration options are covered in API usage.</p>"},{"location":"40_gerber/60_formatter/05_api_usage.html","title":"\u2615 API usage","text":"<p>The Gerber Formatter can be used as a library. The main entry point is the <code>pygerber.gerber.formatter</code> module.</p>"},{"location":"40_gerber/60_formatter/05_api_usage.html#api","title":"API","text":"<p>The basic usage of the Gerber Formatter is to utilize <code>format</code> and <code>formats</code> functions available in <code>pygerber.gerber.formatter</code> module. Please have look at the following example:</p> format_example.py<pre><code>from pathlib import Path\nfrom pygerber.gerber.parser import parse\nfrom pygerber.gerber.formatter import format\nfrom pygerber.examples import ExamplesEnum, load_example\n\ngerber_source_code = load_example(ExamplesEnum.UCAMCO_2_11_2)\n\nast = parse(gerber_source_code)\n\nwith Path(\"output.formatted.gbr\").open(\"w\") as output:\n    format(ast, output)\n</code></pre> <p>Please note that to format the code, we first had to parse it, and only then could the abstract syntax tree be passed to the formatter. <code>format</code> function writes formatted code directly to file-like object, while <code>formats</code> function returns formatted code as a string.</p>"},{"location":"40_gerber/60_formatter/05_api_usage.html#configuration","title":"Configuration","text":"<p>The formatter can be configured using <code>Options</code> object. The object can be passed to <code>format</code> and <code>formats</code> functions as a optional <code>options</code> argument. You can find full option reference here.</p> options_example.py<pre><code>from pathlib import Path\nfrom pygerber.gerber.parser import parse\nfrom pygerber.gerber.formatter import format, Options, MacroSplitMode\nfrom pygerber.examples import ExamplesEnum, load_example\n\ngerber_source_code = load_example(ExamplesEnum.UCAMCO_2_11_2)\n\nast = parse(gerber_source_code)\n\nwith Path(\"output.formatted.gbr\").open(\"w\") as output:\n    format(\n        ast,\n        output,\n        options=Options(\n            indent_character=\"\\t\",\n            macro_split_mode=MacroSplitMode.NoSplit,\n        ),\n    )\n</code></pre>"},{"location":"40_gerber/60_formatter/20_extending_formatter.html","title":"\ud83e\udd60 Extending Formatter","text":""},{"location":"40_gerber/70_diagnostics/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"40_gerber/70_diagnostics/00_introduction.html#overview","title":"Overview","text":"<p>PyGerber provides a linter (diagnostic tool) for analyzing Gerber code. The linter is a tool that focuses on checking the code itself, not the design of the PCB. Therefore it includes checks for deprecated features, common deviations from Gerber standard and other Gerber focused checks, but does not contain any check that verify the quality of the PCB design, like connectivity, trace width, etc.</p> <p>The Gerber linter is a tool that has limited usefulness for the average user, but can be very handy for verifying the quality of generated Gerber code, especially while working on solutions that modify or generate Gerber code, to ensure compliance with latest Gerber standard.</p>"},{"location":"40_gerber/70_diagnostics/00_introduction.html#api","title":"API","text":"<p>Gerber linter API is available in the <code>pygerber.gerber.linter</code> module. Simplified interface consists of a single function <code>lint</code> that takes a Gerber AST as input and returns a list of rule violations detected in AST.</p> <p>Here is a simple example of how to use the linter:</p> custom_color_map.py<pre><code>from pygerber.gerber.linter import lint\nfrom pygerber.gerber.parser import parse\nfrom pygerber.examples import ExamplesEnum, load_example\n\ngerber_source_code = load_example(ExamplesEnum.fc_poly_b_cu)\n\nast = parse(gerber_source_code)\n\nfor rule in lint(ast):\n    print(rule.line, rule.rule_id, rule.title)\n</code></pre> $ python example.py<pre><code>48 DEP001 Use of deprecated G54 code.\n50 GRB001 Redundant G01 command.\n52 GRB001 Redundant G01 command.\n54 GRB001 Redundant G01 command.\n56 GRB001 Redundant G01 command.\n60 GRB001 Redundant G01 command.\n61 GRB001 Redundant G01 command.\n62 GRB001 Redundant G01 command.\n63 GRB001 Redundant G01 command.\n64 GRB001 Redundant G01 command.\n69 GRB001 Redundant G01 command.\n70 GRB001 Redundant G01 command.\n71 GRB001 Redundant G01 command.\n72 GRB001 Redundant G01 command.\n73 GRB001 Redundant G01 command.\n80 DEP001 Use of deprecated G54 code.\n81 GRB001 Redundant G01 command.\n82 GRB001 Redundant G01 command.\n83 GRB001 Redundant G01 command.\n84 DEP001 Use of deprecated G54 code.\n85 DEP001 Use of deprecated G54 code.\n86 GRB001 Redundant G01 command.\n87 DEP001 Use of deprecated G54 code.\n88 DEP001 Use of deprecated G54 code.\n89 GRB001 Redundant G01 command.\n90 DEP001 Use of deprecated G54 code.\n91 DEP001 Use of deprecated G54 code.\n92 GRB001 Redundant G01 command.\n93 DEP001 Use of deprecated G54 code.\n94 DEP001 Use of deprecated G54 code.\n95 GRB001 Redundant G01 command.\n96 GRB001 Redundant G01 command.\n97 GRB001 Redundant G01 command.\n98 GRB001 Redundant G01 command.\n99 GRB001 Redundant G01 command.\n100 DEP001 Use of deprecated G54 code.\n101 DEP001 Use of deprecated G54 code.\n102 GRB001 Redundant G01 command.\n103 GRB001 Redundant G01 command.\n104 GRB001 Redundant G01 command.\n105 GRB001 Redundant G01 command.\n106 GRB001 Redundant G01 command.\n107 DEP001 Use of deprecated G54 code.\n108 DEP001 Use of deprecated G54 code.\n109 GRB001 Redundant G01 command.\n110 DEP001 Use of deprecated G54 code.\n111 DEP001 Use of deprecated G54 code.\n112 GRB001 Redundant G01 command.\n113 GRB001 Redundant G01 command.\n114 DEP001 Use of deprecated G54 code.\n115 DEP001 Use of deprecated G54 code.\n116 GRB001 Redundant G01 command.\n117 DEP001 Use of deprecated G54 code.\n118 DEP001 Use of deprecated G54 code.\n119 GRB001 Redundant G01 command.\n120 DEP001 Use of deprecated G54 code.\n121 GRB001 Redundant G01 command.\n122 GRB001 Redundant G01 command.\n123 GRB001 Redundant G01 command.\n124 GRB001 Redundant G01 command.\n125 GRB001 Redundant G01 command.\n126 GRB001 Redundant G01 command.\n127 GRB001 Redundant G01 command.\n128 GRB001 Redundant G01 command.\n129 DEP001 Use of deprecated G54 code.\n130 GRB001 Redundant G01 command.\n131 GRB001 Redundant G01 command.\n132 GRB001 Redundant G01 command.\n133 DEP001 Use of deprecated G54 code.\n134 DEP001 Use of deprecated G54 code.\n135 GRB001 Redundant G01 command.\n136 DEP001 Use of deprecated G54 code.\n137 DEP001 Use of deprecated G54 code.\n138 GRB001 Redundant G01 command.\n139 DEP001 Use of deprecated G54 code.\n140 DEP001 Use of deprecated G54 code.\n141 GRB001 Redundant G01 command.\n142 GRB001 Redundant G01 command.\n143 DEP001 Use of deprecated G54 code.\n144 DEP001 Use of deprecated G54 code.\n145 GRB001 Redundant G01 command.\n146 GRB001 Redundant G01 command.\n147 DEP001 Use of deprecated G54 code.\n148 DEP001 Use of deprecated G54 code.\n149 GRB001 Redundant G01 command.\n150 DEP001 Use of deprecated G54 code.\n151 DEP001 Use of deprecated G54 code.\n152 GRB001 Redundant G01 command.\n154 DEP001 Use of deprecated G54 code.\n155 GRB001 Redundant G01 command.\n156 GRB001 Redundant G01 command.\n157 GRB001 Redundant G01 command.\n158 GRB001 Redundant G01 command.\n159 GRB001 Redundant G01 command.\n160 GRB001 Redundant G01 command.\n161 GRB001 Redundant G01 command.\n162 GRB001 Redundant G01 command.\n163 DEP001 Use of deprecated G54 code.\n164 GRB001 Redundant G01 command.\n165 GRB001 Redundant G01 command.\n166 GRB001 Redundant G01 command.\n167 GRB001 Redundant G01 command.\n168 GRB001 Redundant G01 command.\n169 GRB001 Redundant G01 command.\n170 GRB001 Redundant G01 command.\n171 GRB001 Redundant G01 command.\n172 GRB001 Redundant G01 command.\n173 GRB001 Redundant G01 command.\n174 GRB001 Redundant G01 command.\n175 GRB001 Redundant G01 command.\n176 GRB001 Redundant G01 command.\n177 GRB001 Redundant G01 command.\n178 GRB001 Redundant G01 command.\n179 GRB001 Redundant G01 command.\n180 GRB001 Redundant G01 command.\n181 GRB001 Redundant G01 command.\n182 GRB001 Redundant G01 command.\n183 GRB001 Redundant G01 command.\n184 GRB001 Redundant G01 command.\n185 GRB001 Redundant G01 command.\n186 GRB001 Redundant G01 command.\n187 GRB001 Redundant G01 command.\n188 GRB001 Redundant G01 command.\n189 GRB001 Redundant G01 command.\n190 GRB001 Redundant G01 command.\n191 GRB001 Redundant G01 command.\n192 GRB001 Redundant G01 command.\n193 GRB001 Redundant G01 command.\n194 GRB001 Redundant G01 command.\n195 GRB001 Redundant G01 command.\n196 GRB001 Redundant G01 command.\n197 GRB001 Redundant G01 command.\n198 GRB001 Redundant G01 command.\n199 GRB001 Redundant G01 command.\n200 GRB001 Redundant G01 command.\n201 GRB001 Redundant G01 command.\n202 GRB001 Redundant G01 command.\n203 GRB001 Redundant G01 command.\n204 GRB001 Redundant G01 command.\n205 GRB001 Redundant G01 command.\n206 GRB001 Redundant G01 command.\n207 GRB001 Redundant G01 command.\n208 GRB001 Redundant G01 command.\n209 GRB001 Redundant G01 command.\n210 GRB001 Redundant G01 command.\n211 GRB001 Redundant G01 command.\n212 GRB001 Redundant G01 command.\n213 GRB001 Redundant G01 command.\n214 GRB001 Redundant G01 command.\n215 GRB001 Redundant G01 command.\n216 GRB001 Redundant G01 command.\n217 GRB001 Redundant G01 command.\n218 GRB001 Redundant G01 command.\n219 GRB001 Redundant G01 command.\n220 GRB001 Redundant G01 command.\n221 GRB001 Redundant G01 command.\n222 GRB001 Redundant G01 command.\n223 GRB001 Redundant G01 command.\n224 GRB001 Redundant G01 command.\n225 GRB001 Redundant G01 command.\n226 GRB001 Redundant G01 command.\n227 GRB001 Redundant G01 command.\n228 DEP001 Use of deprecated G54 code.\n229 GRB001 Redundant G01 command.\n230 GRB001 Redundant G01 command.\n231 GRB001 Redundant G01 command.\n232 GRB001 Redundant G01 command.\n233 GRB001 Redundant G01 command.\n234 GRB001 Redundant G01 command.\n235 GRB001 Redundant G01 command.\n236 GRB001 Redundant G01 command.\n237 GRB001 Redundant G01 command.\n238 GRB001 Redundant G01 command.\n239 GRB001 Redundant G01 command.\n240 GRB001 Redundant G01 command.\n241 GRB001 Redundant G01 command.\n242 GRB001 Redundant G01 command.\n243 GRB001 Redundant G01 command.\n244 GRB001 Redundant G01 command.\n245 GRB001 Redundant G01 command.\n246 GRB001 Redundant G01 command.\n247 GRB001 Redundant G01 command.\n248 GRB001 Redundant G01 command.\n249 GRB001 Redundant G01 command.\n250 GRB001 Redundant G01 command.\n251 GRB001 Redundant G01 command.\n252 GRB001 Redundant G01 command.\n253 DEP001 Use of deprecated G54 code.\n254 DEP001 Use of deprecated G54 code.\n255 GRB001 Redundant G01 command.\n256 GRB001 Redundant G01 command.\n257 GRB001 Redundant G01 command.\n258 GRB001 Redundant G01 command.\n259 GRB001 Redundant G01 command.\n260 GRB001 Redundant G01 command.\n261 GRB001 Redundant G01 command.\n262 GRB001 Redundant G01 command.\n263 GRB001 Redundant G01 command.\n264 GRB001 Redundant G01 command.\n265 GRB001 Redundant G01 command.\n266 GRB001 Redundant G01 command.\n267 GRB001 Redundant G01 command.\n268 GRB001 Redundant G01 command.\n269 DEP001 Use of deprecated G54 code.\n270 DEP001 Use of deprecated G54 code.\n271 GRB001 Redundant G01 command.\n272 GRB001 Redundant G01 command.\n273 GRB001 Redundant G01 command.\n274 GRB001 Redundant G01 command.\n275 GRB001 Redundant G01 command.\n276 GRB001 Redundant G01 command.\n277 GRB001 Redundant G01 command.\n278 GRB001 Redundant G01 command.\n279 GRB001 Redundant G01 command.\n280 GRB001 Redundant G01 command.\n281 GRB001 Redundant G01 command.\n282 GRB001 Redundant G01 command.\n283 GRB001 Redundant G01 command.\n284 GRB001 Redundant G01 command.\n285 GRB001 Redundant G01 command.\n286 GRB001 Redundant G01 command.\n287 GRB001 Redundant G01 command.\n288 GRB001 Redundant G01 command.\n289 GRB001 Redundant G01 command.\n290 GRB001 Redundant G01 command.\n291 GRB001 Redundant G01 command.\n292 GRB001 Redundant G01 command.\n293 GRB001 Redundant G01 command.\n294 GRB001 Redundant G01 command.\n295 GRB001 Redundant G01 command.\n296 GRB001 Redundant G01 command.\n297 GRB001 Redundant G01 command.\n298 GRB001 Redundant G01 command.\n299 GRB001 Redundant G01 command.\n300 GRB001 Redundant G01 command.\n301 GRB001 Redundant G01 command.\n302 GRB001 Redundant G01 command.\n303 GRB001 Redundant G01 command.\n304 GRB001 Redundant G01 command.\n305 GRB001 Redundant G01 command.\n306 GRB001 Redundant G01 command.\n307 GRB001 Redundant G01 command.\n308 GRB001 Redundant G01 command.\n309 GRB001 Redundant G01 command.\n310 GRB001 Redundant G01 command.\n317 DEP001 Use of deprecated G54 code.\n318 GRB001 Redundant G01 command.\n319 GRB001 Redundant G01 command.\n320 GRB001 Redundant G01 command.\n321 GRB001 Redundant G01 command.\n322 GRB001 Redundant G01 command.\n324 DEP001 Use of deprecated G54 code.\n325 GRB001 Redundant G01 command.\n326 GRB001 Redundant G01 command.\n328 DEP001 Use of deprecated G54 code.\n329 GRB001 Redundant G01 command.\n330 GRB001 Redundant G01 command.\n332 DEP001 Use of deprecated G54 code.\n333 GRB001 Redundant G01 command.\n334 GRB001 Redundant G01 command.\n335 GRB001 Redundant G01 command.\n336 GRB001 Redundant G01 command.\n337 GRB001 Redundant G01 command.\n338 GRB001 Redundant G01 command.\n339 GRB001 Redundant G01 command.\n340 GRB001 Redundant G01 command.\n341 GRB001 Redundant G01 command.\n342 GRB001 Redundant G01 command.\n343 GRB001 Redundant G01 command.\n344 GRB001 Redundant G01 command.\n345 GRB001 Redundant G01 command.\n346 GRB001 Redundant G01 command.\n347 GRB001 Redundant G01 command.\n348 GRB001 Redundant G01 command.\n350 DEP001 Use of deprecated G54 code.\n351 GRB001 Redundant G01 command.\n352 GRB001 Redundant G01 command.\n354 GRB001 Redundant G01 command.\n355 GRB001 Redundant G01 command.\n357 GRB001 Redundant G01 command.\n358 GRB001 Redundant G01 command.\n360 GRB001 Redundant G01 command.\n361 GRB001 Redundant G01 command.\n363 DEP001 Use of deprecated G54 code.\n364 GRB001 Redundant G01 command.\n365 GRB001 Redundant G01 command.\n367 GRB001 Redundant G01 command.\n368 GRB001 Redundant G01 command.\n370 GRB001 Redundant G01 command.\n371 GRB001 Redundant G01 command.\n373 GRB001 Redundant G01 command.\n374 GRB001 Redundant G01 command.\n376 DEP001 Use of deprecated G54 code.\n377 GRB001 Redundant G01 command.\n378 GRB001 Redundant G01 command.\n379 GRB001 Redundant G01 command.\n380 GRB001 Redundant G01 command.\n381 GRB001 Redundant G01 command.\n383 DEP001 Use of deprecated G54 code.\n384 GRB001 Redundant G01 command.\n385 GRB001 Redundant G01 command.\n387 DEP001 Use of deprecated G54 code.\n388 GRB001 Redundant G01 command.\n389 GRB001 Redundant G01 command.\n391 DEP001 Use of deprecated G54 code.\n392 GRB001 Redundant G01 command.\n393 GRB001 Redundant G01 command.\n394 GRB001 Redundant G01 command.\n396 GRB001 Redundant G01 command.\n397 GRB001 Redundant G01 command.\n398 GRB001 Redundant G01 command.\n400 GRB001 Redundant G01 command.\n401 GRB001 Redundant G01 command.\n402 GRB001 Redundant G01 command.\n403 GRB001 Redundant G01 command.\n406 DEP001 Use of deprecated G54 code.\n407 GRB001 Redundant G01 command.\n408 GRB001 Redundant G01 command.\n409 GRB001 Redundant G01 command.\n410 GRB001 Redundant G01 command.\n411 GRB001 Redundant G01 command.\n412 GRB001 Redundant G01 command.\n413 GRB001 Redundant G01 command.\n414 GRB001 Redundant G01 command.\n415 DEP001 Use of deprecated G54 code.\n416 GRB001 Redundant G01 command.\n417 GRB001 Redundant G01 command.\n418 GRB001 Redundant G01 command.\n419 GRB001 Redundant G01 command.\n420 GRB001 Redundant G01 command.\n421 GRB001 Redundant G01 command.\n422 GRB001 Redundant G01 command.\n423 GRB001 Redundant G01 command.\n424 GRB001 Redundant G01 command.\n425 GRB001 Redundant G01 command.\n426 GRB001 Redundant G01 command.\n427 GRB001 Redundant G01 command.\n428 GRB001 Redundant G01 command.\n429 GRB001 Redundant G01 command.\n430 GRB001 Redundant G01 command.\n431 GRB001 Redundant G01 command.\n432 GRB001 Redundant G01 command.\n433 GRB001 Redundant G01 command.\n434 GRB001 Redundant G01 command.\n435 GRB001 Redundant G01 command.\n436 GRB001 Redundant G01 command.\n437 GRB001 Redundant G01 command.\n438 GRB001 Redundant G01 command.\n439 GRB001 Redundant G01 command.\n440 GRB001 Redundant G01 command.\n441 GRB001 Redundant G01 command.\n442 GRB001 Redundant G01 command.\n443 GRB001 Redundant G01 command.\n444 GRB001 Redundant G01 command.\n445 GRB001 Redundant G01 command.\n446 GRB001 Redundant G01 command.\n447 GRB001 Redundant G01 command.\n448 GRB001 Redundant G01 command.\n449 GRB001 Redundant G01 command.\n450 GRB001 Redundant G01 command.\n451 GRB001 Redundant G01 command.\n452 GRB001 Redundant G01 command.\n453 GRB001 Redundant G01 command.\n454 GRB001 Redundant G01 command.\n455 GRB001 Redundant G01 command.\n456 GRB001 Redundant G01 command.\n457 GRB001 Redundant G01 command.\n458 GRB001 Redundant G01 command.\n459 GRB001 Redundant G01 command.\n460 GRB001 Redundant G01 command.\n461 GRB001 Redundant G01 command.\n462 GRB001 Redundant G01 command.\n463 GRB001 Redundant G01 command.\n464 GRB001 Redundant G01 command.\n465 GRB001 Redundant G01 command.\n466 GRB001 Redundant G01 command.\n467 GRB001 Redundant G01 command.\n468 GRB001 Redundant G01 command.\n469 GRB001 Redundant G01 command.\n470 GRB001 Redundant G01 command.\n471 GRB001 Redundant G01 command.\n472 GRB001 Redundant G01 command.\n473 GRB001 Redundant G01 command.\n474 GRB001 Redundant G01 command.\n475 GRB001 Redundant G01 command.\n476 GRB001 Redundant G01 command.\n477 GRB001 Redundant G01 command.\n478 GRB001 Redundant G01 command.\n479 GRB001 Redundant G01 command.\n480 DEP001 Use of deprecated G54 code.\n481 GRB001 Redundant G01 command.\n482 GRB001 Redundant G01 command.\n483 GRB001 Redundant G01 command.\n484 GRB001 Redundant G01 command.\n485 GRB001 Redundant G01 command.\n486 GRB001 Redundant G01 command.\n487 GRB001 Redundant G01 command.\n488 GRB001 Redundant G01 command.\n489 GRB001 Redundant G01 command.\n490 GRB001 Redundant G01 command.\n491 GRB001 Redundant G01 command.\n492 GRB001 Redundant G01 command.\n493 GRB001 Redundant G01 command.\n494 GRB001 Redundant G01 command.\n495 GRB001 Redundant G01 command.\n496 GRB001 Redundant G01 command.\n497 GRB001 Redundant G01 command.\n498 GRB001 Redundant G01 command.\n499 GRB001 Redundant G01 command.\n500 GRB001 Redundant G01 command.\n501 GRB001 Redundant G01 command.\n502 GRB001 Redundant G01 command.\n503 GRB001 Redundant G01 command.\n504 GRB001 Redundant G01 command.\n505 DEP001 Use of deprecated G54 code.\n506 GRB001 Redundant G01 command.\n507 GRB001 Redundant G01 command.\n508 GRB001 Redundant G01 command.\n509 GRB001 Redundant G01 command.\n510 GRB001 Redundant G01 command.\n511 GRB001 Redundant G01 command.\n512 GRB001 Redundant G01 command.\n513 GRB001 Redundant G01 command.\n514 GRB001 Redundant G01 command.\n515 GRB001 Redundant G01 command.\n516 GRB001 Redundant G01 command.\n517 GRB001 Redundant G01 command.\n518 GRB001 Redundant G01 command.\n519 GRB001 Redundant G01 command.\n520 GRB001 Redundant G01 command.\n521 GRB001 Redundant G01 command.\n522 GRB001 Redundant G01 command.\n523 GRB001 Redundant G01 command.\n524 GRB001 Redundant G01 command.\n525 GRB001 Redundant G01 command.\n526 GRB001 Redundant G01 command.\n527 GRB001 Redundant G01 command.\n528 GRB001 Redundant G01 command.\n529 GRB001 Redundant G01 command.\n530 GRB001 Redundant G01 command.\n531 GRB001 Redundant G01 command.\n532 GRB001 Redundant G01 command.\n533 GRB001 Redundant G01 command.\n534 GRB001 Redundant G01 command.\n535 GRB001 Redundant G01 command.\n536 GRB001 Redundant G01 command.\n537 GRB001 Redundant G01 command.\n538 GRB001 Redundant G01 command.\n539 GRB001 Redundant G01 command.\n540 DEP001 Use of deprecated G54 code.\n541 GRB001 Redundant G01 command.\n542 GRB001 Redundant G01 command.\n543 GRB001 Redundant G01 command.\n544 GRB001 Redundant G01 command.\n545 GRB001 Redundant G01 command.\n546 GRB001 Redundant G01 command.\n547 GRB001 Redundant G01 command.\n548 GRB001 Redundant G01 command.\n549 GRB001 Redundant G01 command.\n550 GRB001 Redundant G01 command.\n551 GRB001 Redundant G01 command.\n552 GRB001 Redundant G01 command.\n553 GRB001 Redundant G01 command.\n554 GRB001 Redundant G01 command.\n555 DEP001 Use of deprecated G54 code.\n556 GRB001 Redundant G01 command.\n557 GRB001 Redundant G01 command.\n558 GRB001 Redundant G01 command.\n559 GRB001 Redundant G01 command.\n560 GRB001 Redundant G01 command.\n561 GRB001 Redundant G01 command.\n562 GRB001 Redundant G01 command.\n563 GRB001 Redundant G01 command.\n564 GRB001 Redundant G01 command.\n565 GRB001 Redundant G01 command.\n566 GRB001 Redundant G01 command.\n567 GRB001 Redundant G01 command.\n568 GRB001 Redundant G01 command.\n569 GRB001 Redundant G01 command.\n570 GRB001 Redundant G01 command.\n571 GRB001 Redundant G01 command.\n572 GRB001 Redundant G01 command.\n573 GRB001 Redundant G01 command.\n574 GRB001 Redundant G01 command.\n575 GRB001 Redundant G01 command.\n576 GRB001 Redundant G01 command.\n577 GRB001 Redundant G01 command.\n578 GRB001 Redundant G01 command.\n579 GRB001 Redundant G01 command.\n580 GRB001 Redundant G01 command.\n581 GRB001 Redundant G01 command.\n582 GRB001 Redundant G01 command.\n583 GRB001 Redundant G01 command.\n584 GRB001 Redundant G01 command.\n585 GRB001 Redundant G01 command.\n586 GRB001 Redundant G01 command.\n587 GRB001 Redundant G01 command.\n588 GRB001 Redundant G01 command.\n589 GRB001 Redundant G01 command.\n590 GRB001 Redundant G01 command.\n591 GRB001 Redundant G01 command.\n592 GRB001 Redundant G01 command.\n593 GRB001 Redundant G01 command.\n594 GRB001 Redundant G01 command.\n595 GRB001 Redundant G01 command.\n596 GRB001 Redundant G01 command.\n597 GRB001 Redundant G01 command.\n598 DEP001 Use of deprecated G54 code.\n599 GRB001 Redundant G01 command.\n600 GRB001 Redundant G01 command.\n601 GRB001 Redundant G01 command.\n602 GRB001 Redundant G01 command.\n603 GRB001 Redundant G01 command.\n604 GRB001 Redundant G01 command.\n605 GRB001 Redundant G01 command.\n606 GRB001 Redundant G01 command.\n607 GRB001 Redundant G01 command.\n608 GRB001 Redundant G01 command.\n609 GRB001 Redundant G01 command.\n610 GRB001 Redundant G01 command.\n611 GRB001 Redundant G01 command.\n612 GRB001 Redundant G01 command.\n613 GRB001 Redundant G01 command.\n614 GRB001 Redundant G01 command.\n615 GRB001 Redundant G01 command.\n616 GRB001 Redundant G01 command.\n617 GRB001 Redundant G01 command.\n618 GRB001 Redundant G01 command.\n619 GRB001 Redundant G01 command.\n620 GRB001 Redundant G01 command.\n621 GRB001 Redundant G01 command.\n622 GRB001 Redundant G01 command.\n623 GRB001 Redundant G01 command.\n624 GRB001 Redundant G01 command.\n625 GRB001 Redundant G01 command.\n626 GRB001 Redundant G01 command.\n627 GRB001 Redundant G01 command.\n628 GRB001 Redundant G01 command.\n629 GRB001 Redundant G01 command.\n630 GRB001 Redundant G01 command.\n631 GRB001 Redundant G01 command.\n632 GRB001 Redundant G01 command.\n633 GRB001 Redundant G01 command.\n634 GRB001 Redundant G01 command.\n635 GRB001 Redundant G01 command.\n636 GRB001 Redundant G01 command.\n637 GRB001 Redundant G01 command.\n638 GRB001 Redundant G01 command.\n645 DEP001 Use of deprecated G54 code.\n646 GRB001 Redundant G01 command.\n647 GRB001 Redundant G01 command.\n648 GRB001 Redundant G01 command.\n649 GRB001 Redundant G01 command.\n650 GRB001 Redundant G01 command.\n663 GRB001 Redundant G01 command.\n664 GRB001 Redundant G01 command.\n665 GRB001 Redundant G01 command.\n666 GRB001 Redundant G01 command.\n667 GRB001 Redundant G01 command.\n671 GRB001 Redundant G01 command.\n672 GRB001 Redundant G01 command.\n673 GRB001 Redundant G01 command.\n675 GRB001 Redundant G01 command.\n676 GRB001 Redundant G01 command.\n677 GRB001 Redundant G01 command.\n679 GRB001 Redundant G01 command.\n680 GRB001 Redundant G01 command.\n681 GRB001 Redundant G01 command.\n682 GRB001 Redundant G01 command.\n</code></pre>"},{"location":"40_gerber/70_diagnostics/01_rule_list.html","title":"\ud83d\udcc4 Rule list","text":"<p>Below you can find full list of all rules implemented in PyGerber for Gerber format diagnostics.</p>"},{"location":"40_gerber/70_diagnostics/01_rule_list.html#dep001","title":"DEP001","text":"<p>Use of deprecated G54 code.</p> <p>This historic code optionally precedes an aperture selection Dnn command. It has no effect. Sometimes used. Deprecated in 2012.</p>"},{"location":"40_gerber/70_diagnostics/01_rule_list.html#dep002","title":"DEP002","text":"<p>Use of deprecated G55 code.</p> <p>This historic code optionally precedes D03 code. It has no effect. Deprecated in 2012.</p>"},{"location":"40_gerber/70_diagnostics/01_rule_list.html#grb001","title":"GRB001","text":"<p>Redundant G01/G02/G03 command.</p> <p>The G01/G02/G03 command after once issued remains in effect until different G01/G02/G03 command changes  the interpolation mode. Some software tends to paste G01 command before each D01 command, significantly increasing the file size.</p>"},{"location":"40_gerber/80_language_server/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/80_language_server/10_vsc_integration.html","title":"\ud83e\udd68 Visual Studio Code Integration","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/80_language_server/50_features.html","title":"\ud83e\uddf0 Features","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/90_extend/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/90_extend/40_extending_ast_nodes.html","title":"\ud83e\udd65 Extending AST Nodes","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/90_extend/50_extending_parser.html","title":"\ud83e\uddfd Extending Parser","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/90_extend/60_extending_compiler.html","title":"\ud83e\uddf6 Extending Compiler","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"40_gerber/90_extend/70_extending_virtual_machines.html","title":"\ud83e\udde9 Extending Virtual Machines","text":"<p>Unfortunately, this documentation is yet to be written. I am doing my best to provide it before release 3.0.0 so stay tuned!</p>"},{"location":"50_command_line/00_introduction.html","title":"\ud83e\udded Introduction","text":"<p>Welcome to the PyGerber command line interface documentation. This documentation is intended to guide you through the usage of the command line interface of PyGerber.</p> <p>PyGerber command line can be accessed via <code>pygerber</code> command:</p> <pre><code>pygerber --version\n</code></pre> <p>Alternatively, executing PyGerber package as main module will yield the same result:</p> <pre><code>python -m pygerber --version\n</code></pre> <p>Only root package supports direct execution. Features of subpackages, eg. formatter can be accessed by subcommands:</p> <pre><code>pygerber gerber format --help\n</code></pre> <p>But they don't support direct execution as main module.</p>"},{"location":"50_command_line/20_gerber.html","title":"Gerber","text":"<p>Welcome to the Gerber focused part of PyGerber command line interface documentation. This documentation is intended to show you how to use Gerber related command line tools available in PyGerber.</p>"},{"location":"50_command_line/20_gerber.html#image-conversions","title":"Image conversions","text":"<p>PyGerber offers a set of tools to convert Gerber files to raster and vector images. This section will guide you through the process of converting Gerber files to images. All supported image conversions can be listed with:</p> <pre><code>pygerber gerber convert --help\n</code></pre> <p>You can expect formats like PNG, JPEG and SVG to be present there.</p> <p>Note</p> <p>SVG image format support requires a vector rendering engine, currently this means <code>shapely</code> extras set is required for SVG conversion to show up in the help. Preferably, you should use PyGerber extras set in case in future more dependencies will be required:</p> <pre><code>pip install pygerber[shapely]\n</code></pre> <p>You can also just install all optional extras with:</p> <pre><code>pip install pygerber[all]\n</code></pre> <p>This way you won't miss on any of the useful features.</p> <p>Let's have look at an example of how one could convert a Gerber file to a PNG image:</p> <pre><code>pygerber gerber convert png \"my_gerber_file.gbr\" -o \"output.png\"\n</code></pre> <p>For raster images it is possible to include a <code>-d</code>/<code>--dpmm</code> parameter to alter the pixel per millimeter density of output image. Default value can be too big for some PCBs and to small for others, so keep in mind that it may be necessary to adjust it.</p> <p>For vector images, you can convert Gerber files to SVG format:</p> <pre><code>pygerber gerber convert svg \"my_gerber_file.gbr\" -o \"output.svg\"\n</code></pre> <p>Technically each conversion command supports selection of implementation of the rendering engine, but currently there is only one raster and one vector engine available.</p> <p>Note</p> <p>PyGerber is open for contributions, both regarding new output image formats as well as new rendering engines. If you have an idea for a new feature, feel free to open an issue on GitHub or even better, submit a pull request!</p>"},{"location":"50_command_line/20_gerber.html#formatting","title":"Formatting","text":"<p>PyGerber offers a tool to format Gerber files. This tool can be used to reformat Gerber files to make them more readable or the opposite, to compress them to save precious disk space. Technically, formatter includes also minor code modernization features although less powerful than the Optimizer.</p> <p>Let's have a look at an example of how one could format a Gerber file:</p> <pre><code>pygerber gerber format \"my_gerber_file.gbr\" -o \"output.gbr\"\n</code></pre> <p>Quite simple, isn't it? You can customize how file will be formatted (default settings are really basic) by providing either inline configuration in JSON format or by using a configuration file (also in JSON format).</p> <p>Here is a simple example of how you could adjust indentation of macro bodies to 4 spaces:</p> <pre><code>pygerber gerber format src/pygerber/examples/carte_test-B_Cu.gbr -o formatted.gbr -i '{\\\"macro_body_indent\\\": 4}'\n</code></pre> <p>For more information about available configuration options, please refer to the reference of <code>Options</code> class in here.</p>"},{"location":"60_rendering_backends/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"80_code_generation/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"80_code_generation/00_introduction.html#overview","title":"Overview","text":"<p>Welcome to the documentation of the code generation feature of PyGerber library! Considering that to develop PyGerber core functionality of parsing Gerber files it was necessary to design a lot of tools to verify the correctness of the implementation, it became apparent that is will be much easier to compliment existing tool set with a code generation tools rather than develop separate package for that purpose. Therefore, the decision was made to develop a code generation feature as a part of PyGerber library.</p> <p>Currently, there are two code generation APIs, one for generation of Gerber code and the second one for generation of RVMC code (internal geometry representation used by PyGerber). Those APIs are available in the <code>pygerber.builder.gerber</code> and <code>pygerber.builder.rvmc</code> respectively.</p>"},{"location":"80_code_generation/10_gerber.html","title":"Gerber code generation","text":""},{"location":"80_code_generation/10_gerber.html#overview","title":"Overview","text":"<p>This section describes how to generate Gerber code with use of the <code>pygerber.builder.gerber</code> module.</p> <p>All of the code building functionality is provided within <code>GerberX3Builder</code> class available in that module.</p> <p>For reference of tools available in that module check out this reference page.</p>"},{"location":"80_code_generation/10_gerber.html#creating-pads","title":"Creating pads","text":"<p>To generate Gerber code first you have to create an instance of <code>GerberX3Builder</code> class. Then you can use <code>PadCreator</code> object returned by <code>new_pad()</code> method to create a pad brush / pad template (in Gerber format it is called aperture) describing the shape of the pad. You can choose one of the predefined shapes (<code>circle</code>, <code>rectangle</code>, <code>rounded_rectangle</code> , <code>polygon</code>) or create a custom shape composed from predefined elements (with <code>custom()</code> method). To add actual pad to a image you have to pass <code>Pad</code> object, representing pad brush, to the <code>add_pad()</code> method you can add actual pads to the image.</p> <p>Info</p> <p>You can use same <code>Pad</code> object to create multiple pads in the image. To do that, simply pass it to multiple <code>add_pad()</code> calls.</p> <p>In a example below, we create a circle aperture with <code>new_pad().circle()</code> call chain. It returns a <code>Pad</code> object which we will store in a variable <code>d10</code>. Then we can pass this variable to <code>add_pad()</code> method to add two pads to the image, first at location (1, 1), second at (2, 1).</p> example.py<pre><code>from pygerber.builder.gerber import GerberX3Builder\n\n\nbuilder = GerberX3Builder()\n\nd10 = builder.new_pad().circle(diameter=0.5)\nbuilder.add_pad(d10, (1, 1))\nbuilder.add_pad(d10, (2, 1))\n\ncode = builder.get_code()\nprint(code.dumps())\n</code></pre> $ python example.py<pre><code>%FSLAX46Y46*%\n%MOMM*%\n%ADD10C,0.5*%\nG75*\nD10*\nX1000000Y1000000D03*\nX2000000Y1000000D03*\nM02*\n</code></pre> <p>Gerber code generated with the example above results in following image when rendered with PyGerber:</p> <p></p> <p>Warning</p> <p>Do not use <code>Pad</code> objects created with one instance of <code>GerberX3Builder</code> with another instance of <code>GerberX3Builder</code>. This will result in an error or invalid Gerber code being generated.</p> <p>For full reference of shapes available in <code>PadCreator</code> check out this reference page.</p>"},{"location":"80_code_generation/10_gerber.html#adding-traces","title":"Adding traces","text":"<p><code>GerberX3Builder</code> class also provides means to add traces to the Gerber image. You can use <code>new_trace()</code> and <code>add_clockwise_arc_trace()</code> methods to do that. Fist one creates a straight lines, second one creates arcs. You don't need to create pads to add traces, but you have to provide width of the trace as first argument.</p> <p>Info</p> <p>New trace can, but doesn't have to be connected to previous trace or pad (differently than in Gerber format, there you have to explicitly change starting point of consecutive disconnected trace). It is recommended however that, if you have a series of traces that are starting from the end of previous trace, you should create them directly one after another, instead of jumping. This will result in smaller Gerber files.</p> example.py<pre><code>from pygerber.builder.gerber import GerberX3Builder\n\n\nbuilder = GerberX3Builder()\n\nd10 = builder.new_pad().circle(diameter=0.5)\nbuilder.add_pad(d10, (2, 1))\nbuilder.add_line_trace(0.1, (0, 0), (0, 1))\nbuilder.add_line_trace(0.1, (0, 1), (2, 1))\n\ncode = builder.get_code()\nprint(code.dumps())\n</code></pre> $ python example.py<pre><code>%FSLAX46Y46*%\n%MOMM*%\n%ADD10C,0.5*%\n%ADD11C,0.1*%\nG75*\nD10*\nX2000000Y1000000D03*\nD11*\nG01*\nX0Y0D02*\nX0Y1000000D01*\nX2000000Y1000000D01*\nM02*\n</code></pre> <p>Gerber code generated with the example above results in following image when rendered with PyGerber:</p> <p></p>"},{"location":"80_code_generation/10_gerber.html#using-objects-as-locations","title":"Using objects as locations","text":"<p>Commands creating graphical elements, like <code>add_pad()</code> or <code>add_line_trace()</code> return special <code>Draw</code> objects (<code>PadDraw</code> or <code>TraceDraw</code> respectively) which can be used as locations for <code>new_pad()</code> or <code>new_trace()</code> method calls. This way you don not have to retype coordinates for draws which are connected to previous objects.</p> <p>Warning</p> <p>When passing <code>TraceDraw</code> to <code>new_trace()</code> method, when you pass a trace as first parameter (begin) its end location will be used, but when you pass it as second parameter (end), its begin location will be used. So passing <code>TraceDraw</code> as both parameters will result in a trace going opposite direction than the original trace.</p> <p>This is helpful when starting a new trace from the end of the previous trace or connecting it to the end of existing trace, but can be confusing when you want to connect traces in different way.</p> example.py<pre><code>from pygerber.builder.gerber import GerberX3Builder\n\n\nbuilder = GerberX3Builder()\n\nd10 = builder.new_pad().circle(diameter=0.5)\n\npad_0 = builder.add_pad(d10, (0, 0))\npad_1 = builder.add_pad(d10, (2, 1))\n\ntrace_0 = builder.add_line_trace(0.1, pad_0, (0, 1))\nbuilder.add_line_trace(0.1, trace_0, pad_1)\n\n\ncode = builder.get_code()\nprint(code.dumps())\n</code></pre> $ python example.py<pre><code>%FSLAX46Y46*%\n%MOMM*%\n%ADD10C,0.5*%\n%ADD11C,0.1*%\nG75*\nD10*\nX0Y0D03*\nX2000000Y1000000D03*\nD11*\nG01*\nX0Y0D02*\nX0Y1000000D01*\nX2000000Y1000000D01*\nM02*\n</code></pre> <p>Gerber code generated with the example above results in following image when rendered with PyGerber:</p> <p></p>"},{"location":"80_code_generation/10_gerber.html#creating-custom-pads","title":"Creating custom pads","text":"<p>You can create custom pads shapes by using <code>custom()</code> method of <code>PadCreator</code> returned by <code>new_pad()</code> method. Custom pads are composed of predefined shapes added to pad with use of methods available on <code>CustomPadCreator</code> returned by <code>custom()</code>. Method calls can (and should) be chained. When you are done adding elements to the pad, you should call <code>create()</code> method to finish the modification of custom pad and create concrete object representing it. After calling <code>create()</code>, you cannot and new elements to that custom pad.</p> <p>Warning</p> <p>Coordinates used during creation are local (relative to (0, 0) point of pad canvas), not global. During custom pad creation elements added to the pad are not placed in global image space. They are added to image (canvas) dedicated for that pad. When pad is added to the main image with <code>add_pad()</code> (0, 0) point of that \"canvas\" is placed at the location where the pad is added. All the pad elements are translated relatively to that point.</p> <p>Tip</p> <p>You can add cutouts in different shapes to the custom pad by using <code>cut_*</code> methods. Those cutouts are made locally to the pad, but they will not create cutouts in the main image after adding the pad to it (they will not remove content below the pad), they will simply be transparent.</p> <p>Custom pad is used in the same way as any other pad, to add it to the image you should use <code>add_pad()</code> method.</p> custom_pad_example.py<pre><code>from pygerber.builder.gerber import GerberX3Builder\n\n\nbuilder = GerberX3Builder()\n\nd10 = (\n    builder.new_pad()\n    .custom()\n    # Top right corner\n    .add_vector_line(0.1, (0.5, 1.5), (1.5, 1.5))\n    .add_vector_line(0.1, (1.5, 1.5), (1.5, 0.5))\n    .add_circle(0.1, (1.5, 1.5))  # Corner\n    # Bottom right corner\n    .add_vector_line(0.1, (0.5, -1.5), (1.5, -1.5))\n    .add_vector_line(0.1, (1.5, -1.5), (1.5, -0.5))\n    .add_circle(0.1, (1.5, -1.5))  # Corner\n    # Bottom left corner\n    .add_vector_line(0.1, (-0.5, -1.5), (-1.5, -1.5))\n    .add_vector_line(0.1, (-1.5, -1.5), (-1.5, -0.5))\n    .add_circle(0.1, (-1.5, -1.5))\n    # Top left corner\n    .add_vector_line(0.1, (-0.5, 1.5), (-1.5, 1.5))\n    .add_vector_line(0.1, (-1.5, 1.5), (-1.5, 0.5))\n    .add_circle(0.1, (-1.5, 1.5))  # Corner\n    .create()\n)\nbuilder.add_pad(d10, (0, 0))\nbuilder.add_pad(d10, (4, 0))\nbuilder.add_pad(d10, (8, 0))\n\ncode = builder.get_code()\nprint(code.dumps())\n</code></pre> $ python custom_pad_example.py<pre><code>%FSLAX46Y46*%\n%MOMM*%\n%AMM0*\n20,1.0,0.1,0.5,1.5,1.5,1.5,0.0*\n20,1.0,0.1,1.5,1.5,1.5,0.5,0.0*\n1,1.0,0.1,1.5,1.5,0.0*\n20,1.0,0.1,0.5,-1.5,1.5,-1.5,0.0*\n20,1.0,0.1,1.5,-1.5,1.5,-0.5,0.0*\n1,1.0,0.1,1.5,-1.5,0.0*\n20,1.0,0.1,-0.5,-1.5,-1.5,-1.5,0.0*\n20,1.0,0.1,-1.5,-1.5,-1.5,-0.5,0.0*\n1,1.0,0.1,-1.5,-1.5,0.0*\n20,1.0,0.1,-0.5,1.5,-1.5,1.5,0.0*\n20,1.0,0.1,-1.5,1.5,-1.5,0.5,0.0*\n1,1.0,0.1,-1.5,1.5,0.0*%\n%ADD10M0*%\nG75*\nD10*\nX0Y0D03*\nX4000000Y0D03*\nX8000000Y0D03*\nM02*\n</code></pre> <p>Gerber code generated with the example above results in following image when rendered with PyGerber:</p> <p></p>"},{"location":"80_code_generation/10_gerber.html#creating-regions","title":"Creating regions","text":"<p>Process of creating regions (copper pours / fills) is managed by <code>RegionCreator</code> class instances which can be obtained by calling <code>new_region()</code> method on <code>GerberX3Builder</code>.</p> <p>Regions are defined by their outline made out of series of lines and / or arcs. Outline starts at point specified in <code>new_region()</code> call and it is always continuous series of lines / arcs. Each line / arc start at the end of previous arc / line. If end of last line / arc does not overlap with first point, last and first point are connected with straight line.</p> <p>Region is added automatically to the image after calling <code>create()</code> method. After <code>create()</code> method is called you can no longer modify the region.</p> custom_pad_example.py<pre><code>from pygerber.builder.gerber import GerberX3Builder\n\n\nbuilder = GerberX3Builder()\n\nregion = (\n    builder.new_region((-2, 0))\n    .add_line((-2, 2))\n    .add_line((0, 2))\n    .add_line((1, 1))\n    .add_line((0, 0))\n    .create()\n)\n\ncode = builder.get_code()\nprint(code.dumps())\n</code></pre> $ python custom_pad_example.py<pre><code>%FSLAX46Y46*%\n%MOMM*%\n%ADD10C,1.0*%\nG75*\nD10*\nG36*\nX-2000000Y0D02*\nG01*\nX-2000000Y2000000D01*\nX0Y2000000D01*\nX1000000Y1000000D01*\nX0Y0D01*\nX-2000000Y0D01*\nG37*\nX-2000000Y0D02*\nM02*\n</code></pre> <p>Gerber code generated with the example above results in following image when rendered with PyGerber:</p> <p></p> <p>Warning</p> <p>Region outline can not self intersect and there must be at least 3 points in the outline.</p> <p>There are also few restrictions implied by Gerber format regarding regions with cut-ins:</p> <p>Cut-ins are subject to strict requirements:</p> <ul> <li> <p>they must consist of two fully-coincident linear segments; a pair of linear segments are said to   be fully coincident if the segments coincide, with the second segment starting where the   first one ends</p> </li> <li> <p>cut-ins must be either horizontal or vertical</p> </li> <li> <p>all cut-ins in a contour must have the same direction, either horizontal or vertical;</p> </li> <li> <p>cut-ins can only touch or overlap the contour in their start and end points.</p> </li> </ul>"},{"location":"80_code_generation/50_rvmc.html","title":"RVMC generation","text":""},{"location":"90_development/00_introduction.html","title":"\ud83e\udded Introduction","text":""},{"location":"90_development/00_introduction.html#overview","title":"Overview","text":"<p>Welcome to collection of development related guides for PyGerber project. Those guides will be helpful if you are considering contributing to the project or if you want to review the code in more detail.</p>"},{"location":"90_development/10_env_setup.html","title":"Environment setup","text":""},{"location":"90_development/10_env_setup.html#development-virtual-environment","title":"Development virtual environment","text":"<p>This project uses <code>Python</code> programming language and requires at least python <code>3.8</code> in development and production environment to function. During development, PyGerber relies on poetr for dependency management, creation of development virtual environment and packaging. To work on PyGerber, you will need to install poetry on your system. You can find official poetry installation guidelines here. We recommend installing poetry globally, unless on linux distribution, in such case distribution native approach should be taken, usually with distribution specific package manager.</p> <p>To install poetry globally you can use <code>pip</code> (or any other PyPI compatible package manager) in terminal:</p> <pre><code>pip install poetry\n</code></pre> <p>Warning</p> <p>Make sure you are installing latest version of poetry, or at least <code>&gt;=1.8</code> as in the past poetry had minor issues with stability during installation of dependencies.</p> <p>After installing poetry, if you haven't already, clone the repository with</p> <pre><code>git clone https://github.com/Argmaster/pygerber\n</code></pre> <p>and navigate to project root directory. Once there, use:</p> <pre><code>poetry shell\n</code></pre> <p>to create a development virtual environment and enter a shell with virtual environment activated. Virtual environment will be indicated by terminal prompt prefix <code>(pygerber-pyX.Y)</code>, (where <code>X.Y</code> is python version).</p> <p>Afterwards you can start process of installation of development dependencies. Use:</p> <pre><code>poetry install --sync --extras=all --with=docs,style\n</code></pre> <p>To install all dependencies, including optional ones. Every time you perform a <code>git pull</code> or change a branch, you should run this command again to make sure you have the correct versions of dependencies.</p>"},{"location":"90_development/10_env_setup.html#git-hooks","title":"Git hooks","text":"<p>PyGerber project uses pre-commit to run git hooks to ensure high quality of code committed to the repository. You can skip installation of hooks if you want, but you will still have to meet their requirements after they are run by CI/CD pipeline. Preferably, you should install them locally and keep an eye on their status:</p> <pre><code>poe install-hooks\n</code></pre> <p>Warning</p> <p>Don't confuse <code>poe</code> with <code>poetry</code>, <code>poe</code> is a command line tool for running simple sequences of commands while <code>poetry</code> is a package manager and virtual environment manager.</p> <p>You can check if your hooks were setup correctly by running:</p> <pre><code>poe test-style\n</code></pre> <p>Here is reference output of <code>poe test-style</code>:</p> <pre><code>Poe =&gt; poetry run pre-commit run --all-files -v\nprettier.................................................................Passed\n- hook id: prettier\n- duration: 0.83s\ncheck illegal windows names..........................(no files to check)Skipped\n- hook id: check-illegal-windows-names\ncheck for case conflicts.................................................Passed\n- hook id: check-case-conflict\n- duration: 0.5s\ncheck for merge conflicts................................................Passed\n- hook id: check-merge-conflict\n- duration: 0.38s\ncheck for case conflicts.................................................Passed\n- hook id: check-case-conflict\n- duration: 0.48s\ntrim trailing whitespace.................................................Passed\n- hook id: trailing-whitespace\n- duration: 0.23s\ndebug statements (python)................................................Passed\n- hook id: debug-statements\n- duration: 0.23s\nfix end of files.........................................................Passed\n- hook id: end-of-file-fixer\n- duration: 0.2s\nfix utf-8 byte order marker..............................................Passed\n- hook id: fix-byte-order-marker\n- duration: 0.22s\ncheck for added large files..............................................Passed\n- hook id: check-added-large-files\n- duration: 0.52s\ncheck toml...............................................................Passed\n- hook id: check-toml\n- duration: 0.09s\nmixed line ending........................................................Passed\n- hook id: mixed-line-ending\n- duration: 0.22s\ntrim trailing whitespace.................................................Passed\n- hook id: trailing-whitespace\n- duration: 0.22s\ndebug statements (python)................................................Passed\n- hook id: debug-statements\n- duration: 0.22s\nruff.....................................................................Passed\n- hook id: ruff\n- duration: 0.11s\n\nAll checks passed!\n\nruff-format..............................................................Passed\n- hook id: ruff-format\n- duration: 0.11s\n\n284 files left unchanged\n\nmypy.....................................................................Passed\n- hook id: mypy\n- duration: 15.95s\n\nPoe =&gt; poetry run mypy --config-file=pyproject.toml src/pygerber/ test/\nSuccess: no issues found in 279 source files\n</code></pre>"},{"location":"90_development/20_packaging.html","title":"Package","text":"<p>Since PyGerber is a pure Python package, there is nothing to compile and there is no special build step before packaging.</p> <p>To build PyGerber <code>wheel</code> or <code>sdist</code> package from source you have to first set up development environment as described in Environment setup section. After completing initial setup of development environment, you should have poetry installed on your system. To build both wheel and source distribution packages, use following command:</p> <pre><code>poetry build\n</code></pre> <p>Check <code>dist</code> directory within current working directory, <code>pygerber-x.y.z.tar.gz</code> and <code>pygerber-x.y.z-py3-none-any.whl</code> files should be present there. You can use <code>pip</code> to directly install them:</p> <p>Warning</p> <p>Replace <code>x.y.z</code> with actual version number.</p> <pre><code>pip install dist/pygerber-x.y.z.tar.gz\n</code></pre>"},{"location":"90_development/30_documentation.html","title":"Documentation","text":"<p>PyGerber uses MkDocs library and Markdown syntax to write documentation. Documentation can be divided into two parts:</p> <ul> <li>manually written documentation</li> <li>automatically generated documentation</li> </ul> <p>First one is stored in <code>docs</code> directory and is written in Markdown. Second one is generated from docstrings in source code using mkdocstrings package and it is automatically collected during documentation build.</p> <p>Before building documentation, make sure that you have completed development environment setup described in Environment setup section. After completing initial setup you should be able to continue following this guide.</p> <p>To generate HTML/CSS/JS files containing distribution of documentation, use following command:</p> <pre><code>mkdocs build\n</code></pre> <p>This command will create <code>site</code> directory and place all necessary HTML/CSS/JS files there.</p> <p>MkDocs also offers a live preview of documentation with automatic reload on file change. To start live preview, use following command:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"90_development/40_contribution_guidelines.html","title":"Contribution guidelines","text":"<p>Recommended way to contribute to PyGerber is to fork the repository, create a new branch, make changes and submit a pull request. After submitting a pull request, one of PyGerber maintainers will review it and possibly allow CI to run tests on your changes.</p> <pre><code>graph LR\n    A[Fork] --&gt; B[Branch]\n    B --&gt; C[Commit]\n    C --&gt; D[Pull request]\n    D --&gt; E[Review]\n    E --&gt; F[Merge]</code></pre> <p>Maintainer may ask for additional changes or provide feedback on your pull request. Please be patient and polite, maintainers are volunteers and they may not be able to respond immediately. If you are not sure about something, feel free to ask for help in the pull request comments. We encourage open and respectful communication.</p> <p>When requested to make changes to your pull request, please do so in a new commit. This will allow maintainers to easily see what has changed since last review.</p> <p>Warning</p> <p>Avoid force pushing and squashing existing commits unless asked to do so. Those operations obfuscate history and make it harder to incrementally review changes.</p> <p>Within continuous integration pipeline PyGerber runs tests on multiple Python versions, multiple platforms and verifies code quality with tools listed in <code>.pre-commit-config.yaml</code>. If your changes do not pass tests or code quality checks, you will be asked to fix them before your pull request can be merged. We recommend you to run tests locally before submitting a pull request to make the process quicker.</p> .pre-commit-config.yaml<pre><code>exclude: '^(\\.tox|\\.env|dist|\\.vscode)(/|$)'\nrepos:\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: \"v3.1.0\"\n    hooks:\n      - id: prettier\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: \"v5.0.0\"\n    hooks:\n      - id: check-illegal-windows-names\n      - id: check-case-conflict\n      - id: check-merge-conflict\n        args: [--assume-in-merge]\n      - id: check-case-conflict\n      - id: trailing-whitespace\n      - id: debug-statements\n      - id: end-of-file-fixer\n      - id: fix-byte-order-marker\n      - id: check-added-large-files\n        args: [\"--maxkb=5000\"]\n      - id: check-toml\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n      - id: trailing-whitespace\n      - id: debug-statements\n\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: \"v0.11.4\"\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [--fix]\n      # Run the formatter.\n      - id: ruff-format\n\n  - repo: local\n    hooks:\n      - id: mypy\n        name: mypy\n        entry: poetry run poe test-type\n        language: system\n        types: [python]\n        pass_filenames: false\n        verbose: true\n</code></pre> <p>Warning</p> <p>Before trying to run those commands, have look at Environment setup.</p> <p>To run style checks locally, you can use following commands:</p> <pre><code>poe test-style\n</code></pre> <p>Warning</p> <p>This will run all code quality related checks, but does not include any of behavior (unit or end to end) tests.</p> <p>To run unit and end to end tests, use following commands:</p> <pre><code>poe test-all\n</code></pre> <p>Warning</p> <p><code>test-all</code> target does not include style checks itself, they have to be run separately.</p> <p>When adding new features, please include necessary documentation updates and test cases. Tests are necessary for even smallest changes to avoid regressions, ensuring that your changes will continue to function as expected in the future. Test cases should provide coverage of your change close to 90%. Coverage is reported at the end of <code>test-all</code> run.</p> <p>For reference, here is an example of coverage report:</p> <pre><code>---------- coverage: platform linux, python 3.8.18-final-0 -----------\nName                                                       Stmts   Miss  Cover   Missing\n----------------------------------------------------------------------------------------\nsrc/pygerber/__main__.py                                       4      4     0%   3-8\nsrc/pygerber/builder/gerber.py                               425     30    93%   215, 243, 246, 266, 415-418, 429, 637, 891, 913, 932, 938-939, 942-943, 946-947, 952, 997-998, 1448-1459, 1570-1571, 1640, 1680, 1729, 1745\nsrc/pygerber/builder/rvmc.py                                  88     16    82%   105-109, 119-124, 175-176, 179-180, 208-209, 236-237, 275-276, 295-296\nsrc/pygerber/common/error.py                                   4      1    75%   10\nsrc/pygerber/common/position.py                               43     43     0%   3-83\nsrc/pygerber/console/commands.py                              38      4    89%   21-26\nsrc/pygerber/gerber/api/_composite_view.py                    35      1    97%   95\nsrc/pygerber/gerber/api/_enums.py                             68      7    90%   123, 129, 136-137, 142, 145, 148\nsrc/pygerber/gerber/api/_gerber_file.py                      224     24    89%   109, 114, 122, 130, 248, 278, 283, 309, 329, 398-399, 474, 479-492, 499, 537, 560\nsrc/pygerber/gerber/api/_gerber_job_file.py                  119      4    97%   146, 191, 209, 218\nsrc/pygerber/gerber/api/_project.py                           19      1    95%   42\nsrc/pygerber/gerber/ast/ast_visitor.py                       387      3    99%   781, 794, 798\nsrc/pygerber/gerber/ast/errors.py                             32      5    84%   28, 47-48, 57-58\nsrc/pygerber/gerber/ast/expression_eval_visitor.py            59      3    95%   100-102\nsrc/pygerber/gerber/ast/node_finder.py                        61      6    90%   51, 54-55, 68-69, 92\nsrc/pygerber/gerber/ast/nodes/aperture/AB.py                  13      1    92%   32\nsrc/pygerber/gerber/ast/nodes/aperture/AM.py                  13      1    92%   32\nsrc/pygerber/gerber/ast/nodes/aperture/SR.py                  13      1    92%   32\nsrc/pygerber/gerber/ast/nodes/attribute/TA.py                 53      3    94%   24, 36, 106\nsrc/pygerber/gerber/ast/nodes/attribute/TF.py                107      4    96%   27, 39, 216, 225\nsrc/pygerber/gerber/ast/nodes/attribute/TO.py                159     14    91%   25, 37, 123, 144, 165, 186, 207, 228, 249, 270, 291, 312, 333, 357\nsrc/pygerber/gerber/ast/nodes/base.py                         35      4    89%   45, 52, 57, 78\nsrc/pygerber/gerber/ast/nodes/enums.py                       124      2    98%   78, 124\nsrc/pygerber/gerber/ast/nodes/invalid.py                       9      2    78%   22, 28\nsrc/pygerber/gerber/ast/nodes/math/constant.py                16      1    94%   32\nsrc/pygerber/gerber/ast/nodes/math/parenthesis.py              9      1    89%   30\nsrc/pygerber/gerber/ast/state_tracking_visitor.py            451     55    88%   125-126, 130, 135, 190, 195, 214, 238, 317, 360, 435, 501, 509, 517, 525, 667-668, 765-767, 787, 794-799, 843, 852, 861, 870, 877-879, 896-898, 902-904, 908-910, 914-917, 927-930, 934-937, 950\nsrc/pygerber/gerber/compiler/compiler.py                     453     26    94%   155, 183-196, 355, 480, 500, 515-525, 553, 631, 689, 709, 878-883, 913, 921, 924, 1023-1024\nsrc/pygerber/gerber/compiler/errors.py                        15      6    60%   21-26, 33-34, 41\nsrc/pygerber/gerber/formatter/formatter.py                   942     50    95%   219, 252, 259, 271, 278, 287, 292, 297, 321-330, 346-348, 352-357, 361-363, 369-370, 380, 587-588, 813-817, 840-844, 977, 985, 1124, 1133, 1267-1268, 1281-1282\nsrc/pygerber/gerber/parser/__init__.py                        11      2    82%   74-75\nsrc/pygerber/gerber/parser/pyparsing/grammar.py              387      7    98%   217, 220, 228, 253, 256, 1220, 1267\nsrc/pygerber/gerber/pygments.py                               34     34     0%   3-191\nsrc/pygerber/gerber/spec/rev_2024_05.py                      257     20    92%   15, 20, 34, 39-40, 45, 261, 269, 277, 285, 292, 299, 306, 313, 320, 328, 336, 344, 352, 360\nsrc/pygerber/vm/__init__.py                                   15      2    87%   38-39\nsrc/pygerber/vm/commands/shape_segments/shape_segment.py      11      2    82%   24, 28\nsrc/pygerber/vm/pillow/errors.py                               7      2    71%   16-19\nsrc/pygerber/vm/pillow/vm.py                                 154     10    94%   52, 58-59, 71-72, 88, 198, 230, 311, 361\nsrc/pygerber/vm/rvmc.py                                        8      1    88%   19\nsrc/pygerber/vm/shapely/vm.py                                171     11    94%   41-42, 63, 89-93, 140, 167, 209, 325, 364\nsrc/pygerber/vm/types/color.py                                63     22    65%   131-154, 167, 171\nsrc/pygerber/vm/types/layer_id.py                             10      1    90%   20\nsrc/pygerber/vm/types/matrix.py                               53      2    96%   114, 122\nsrc/pygerber/vm/types/model.py                                 8      1    88%   23\nsrc/pygerber/vm/types/vector.py                               94     11    88%   45, 58, 68, 78, 84, 90, 96, 102, 108, 167-169\nsrc/pygerber/vm/vm.py                                        147      1    99%   299\n----------------------------------------------------------------------------------------\nTOTAL                                                       6835    452    93%\n\n126 files skipped due to complete coverage.\n\n===== 1583 passed, 28 skipped, 14 xfailed, 2 warnings in 586.85s (0:09:46) =====\ngenerating index: 726/727\n</code></pre> <p>Parts of code that are not covered will have to be marked with <code># pragma: no cover</code>. Be prepared to justify to maintainers why you didn't cover those parts of code if they ask about it.</p> <p>In most cases after complying with requirements mentioned above, your pull request will be merged by one of the PyGerber maintainers. We will make sure to include you in the <code>CHANGELOG.md</code> and release notes.</p> <p>PyGerber maintainers reserve the right to reject any pull request without providing reasons. However, they will try to provide feedback and guidance on how to improve your contribution.</p> <p>Please comply with GitHub Community Guidelines while contributing to PyGerber.</p>"},{"location":"90_development/50_testing.html","title":"Testing","text":"<p>PyGerber uses pytest for testing purposes. All tests are contained in <code>tests/</code> directory. Tests are grouped in 3 categories:</p> <ul> <li><code>unit</code>: tests for individual functionalities, testing those in separation from rest of   the project</li> <li><code>e2e</code>: end-to-end tests, testing full flows from user provided data to user consumable   output</li> <li><code>examples</code>: automatically validated code exampled used in documentation</li> </ul> <p>Assets used as input data for tests are stored in <code>tests/assets/</code> directory. Assets used as output reference data are stored in separate repository: pygerber_reference_assets.</p> <p>Example of test making use of reference data can be found in <code>test/unit/test_console/test_gerber.py</code> - <code>test_gerber_convert_png</code>. Reference asset must be generated by special execution mode of the test, guarded by <code>is_regeneration_enabled</code> fixture. To regenerate test asset (or generate it for the first time) you have to run that test alone with <code>--regenerate</code> flag. To commit regenerated assets, use <code>--auto-commit-regenerated</code> flag.</p> <pre><code>pytest -k test_gerber_convert_png --regenerate --auto-commit-regenerated\n</code></pre>"},{"location":"90_development/90_release_procedure.html","title":"Release procedure","text":"<p>Prior to release create new release issue. Use it as a scratchpad for release notes. Title should be <code>Release x.y.z</code>. Description should start with short summary explaining agenda for the release. Then list all changes that will be included in the release. Each change should be a separate bullet point starting with one of \"magic\" words: Added, Changed, Deprecated, Removed, Fixed, Updated, Refactored.</p> <p>On branch <code>main</code>:</p> <ol> <li>Update <code>CHANGELOG.md</code> with new release notes and commit</li> </ol> <pre><code> git commit -m \"Update CHANGELOG.md\"\n</code></pre> <ol> <li> <p>Update version number in:</p> </li> <li> <p><code>pygerber/__init__.py</code></p> </li> <li><code>pyproject.toml</code></li> </ol> <p>then commit:</p> <pre><code> git commit -m \"Bump version to x.y.z\"\n</code></pre> <ol> <li>Push changes and wait for CI to finish.</li> </ol> <pre><code> git push\n</code></pre> <ol> <li> <p>If CI failed, fix issues, commit and push changes. Repeat until CI passes. If any of    the changes introduced may have impact of users, update <code>CHANGELOG.md</code>.</p> </li> <li> <p>Create a new tag:</p> </li> </ol> <pre><code> git tag vx.y.z\n</code></pre> <p>And push it to the repository:</p> <pre><code> git push --tags\n</code></pre> <ol> <li> <p>Wait for CI to finish. It should automatically publish PyPI release files and    documentation update.</p> </li> <li> <p>Close release issue.</p> </li> <li> <p>SKIP FOR PATCH RELEASES:</p> </li> </ol> <p>Create <code>maintenance/x.y.x</code>, second <code>x</code> should remain in branch name, eg. for release    <code>2.3.0</code> branch name should be <code>maintenance/2.3.x</code></p> <pre><code> git switch -c maintenance/x.y.x\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pygerber<ul> <li>builder<ul> <li>gerber</li> <li>rvmc</li> </ul> </li> <li>common<ul> <li>error</li> <li>namespace</li> <li>position</li> </ul> </li> <li>console<ul> <li>commands</li> <li>gerber</li> </ul> </li> <li>examples</li> <li>gerber<ul> <li>api<ul> <li>_composite_view</li> <li>_enums</li> <li>_errors</li> <li>_gerber_file</li> <li>_gerber_job_file</li> <li>_project</li> </ul> </li> <li>ast<ul> <li>ast_visitor</li> <li>errors</li> <li>expression_eval_visitor</li> <li>node_finder</li> <li>nodes<ul> <li>aperture<ul> <li>AB</li> <li>ABclose</li> <li>ABopen</li> <li>AD</li> <li>ADC</li> <li>ADO</li> <li>ADP</li> <li>ADR</li> <li>ADmacro</li> <li>AM</li> <li>AMclose</li> <li>AMopen</li> <li>SR</li> <li>SR_close</li> <li>SR_open</li> </ul> </li> <li>attribute<ul> <li>TA</li> <li>TD</li> <li>TF</li> <li>TO</li> </ul> </li> <li>base</li> <li>d_codes<ul> <li>D</li> <li>D01</li> <li>D02</li> <li>D03</li> <li>Dnn</li> </ul> </li> <li>enums</li> <li>file</li> <li>g_codes<ul> <li>G</li> <li>G01</li> <li>G02</li> <li>G03</li> <li>G04</li> <li>G36</li> <li>G37</li> <li>G54</li> <li>G55</li> <li>G70</li> <li>G71</li> <li>G74</li> <li>G75</li> <li>G90</li> <li>G91</li> </ul> </li> <li>invalid</li> <li>load<ul> <li>LM</li> <li>LN</li> <li>LP</li> <li>LR</li> <li>LS</li> </ul> </li> <li>m_codes<ul> <li>M00</li> <li>M01</li> <li>M02</li> </ul> </li> <li>math<ul> <li>assignment</li> <li>constant</li> <li>expression</li> <li>operators<ul> <li>binary<ul> <li>add</li> <li>div</li> <li>mul</li> <li>sub</li> </ul> </li> <li>unary<ul> <li>neg</li> <li>pos</li> </ul> </li> </ul> </li> <li>parenthesis</li> <li>point</li> <li>variable</li> </ul> </li> <li>model</li> <li>other<ul> <li>CoordinateI</li> <li>CoordinateJ</li> <li>CoordinateX</li> <li>CoordinateY</li> <li>coordinate</li> </ul> </li> <li>primitives<ul> <li>code_0</li> <li>code_1</li> <li>code_2</li> <li>code_20</li> <li>code_21</li> <li>code_22</li> <li>code_4</li> <li>code_5</li> <li>code_6</li> <li>code_7</li> </ul> </li> <li>properties<ul> <li>AS</li> <li>FS</li> <li>IN</li> <li>IP</li> <li>IR</li> <li>MI</li> <li>MO</li> <li>OF</li> <li>SF</li> </ul> </li> <li>types</li> </ul> </li> <li>state_tracking_visitor</li> </ul> </li> <li>compiler<ul> <li>compiler</li> <li>errors</li> </ul> </li> <li>formatter<ul> <li>enums</li> <li>formatter</li> <li>options</li> <li>presets</li> </ul> </li> <li>language_server<ul> <li>_server<ul> <li>document_cache</li> <li>documents<ul> <li>document</li> <li>gerber</li> </ul> </li> <li>hover<ul> <li>gerber</li> </ul> </li> <li>server</li> </ul> </li> <li>errors</li> <li>status</li> </ul> </li> <li>linter<ul> <li>event_ast_visitor</li> <li>linter</li> <li>rule_violation</li> <li>rules<ul> <li>DEP001</li> <li>DEP002</li> <li>GRB001</li> <li>rule</li> <li>static_rule</li> </ul> </li> <li>violation_collector</li> </ul> </li> <li>optimizer<ul> <li>optimizer_pass</li> </ul> </li> <li>parser<ul> <li>native</li> <li>pyparsing<ul> <li>grammar</li> <li>parser</li> </ul> </li> </ul> </li> <li>pygments</li> <li>spec<ul> <li>rev_2024_05</li> </ul> </li> </ul> </li> <li>vm<ul> <li>command_visitor</li> <li>commands<ul> <li>command</li> <li>layer</li> <li>paste</li> <li>shape</li> <li>shape_segments<ul> <li>arc</li> <li>line</li> <li>shape_segment</li> </ul> </li> </ul> </li> <li>pillow<ul> <li>errors</li> <li>vm</li> </ul> </li> <li>rvmc</li> <li>shapely<ul> <li>errors</li> <li>vm</li> </ul> </li> <li>types<ul> <li>box</li> <li>color</li> <li>errors</li> <li>layer_id</li> <li>matrix</li> <li>model</li> <li>style</li> <li>vector</li> </ul> </li> <li>vm</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/pygerber/__init__.html","title":"init","text":""},{"location":"reference/pygerber/__init__.html#pygerber","title":"pygerber","text":"<p>Package for PCB formats visualization.</p>"},{"location":"reference/pygerber/builder/__init__.html","title":"init","text":""},{"location":"reference/pygerber/builder/__init__.html#pygerber.builder","title":"builder","text":"<p>The <code>builders</code> package groups all code builder APIs (code generators).</p>"},{"location":"reference/pygerber/builder/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber","title":"gerber","text":"<p>The <code>builder</code> module provides a <code>stable</code> API for constructing Gerber code.</p> <p>Construction is done by creating a <code>GerberX3Builder</code> object and using its methods to add elements to image. When the image is ready, call <code>get_code()</code> method to get the Gerber code.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Loc2D","title":"Loc2D  <code>module-attribute</code>","text":"<pre><code>Loc2D: TypeAlias = Tuple[float, float]\n</code></pre> <p>Type alias of tuple of two floats representing 2D location.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder","title":"GerberX3Builder","text":"<p>Builder class for constructing Gerber ASTs.</p> <p>Builder uses metric units (millimeters) and absolute coordinates. This default can not be changed. Use of imperial units and incremental coordinates in Gerber files is deprecated.</p> <p>Code generated is compliant with The Gerber Layer Format Specification - Revision 2024.05.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.new_pad","title":"new_pad","text":"<pre><code>new_pad() -&gt; PadCreator\n</code></pre> <p>Create a new pad.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.add_pad","title":"add_pad","text":"<pre><code>add_pad(\n    pad: Pad,\n    at: Loc2D | TraceDraw,\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; PadDraw\n</code></pre> <p>Add pad in shape of a pad to image.</p> <p>This corresponds to the flash with positive polarity in Gerber standard.</p> <p>Parameters:</p> <ul> <li> <code>pad</code>               (<code>Pad</code>)           \u2013            <p>Previously defined pad object to be used for drawing.</p> </li> <li> <code>at</code>               (<code>Loc2D | TraceDraw</code>)           \u2013            <p>Location to flash at. Can be a 2-tuple of floats or TraceDraw object returned from <code>add_line_trace()</code> or <code>add_clockwise_arc_trace()</code>, then the end location of that trace will be used.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Pad rotation (rotation around pad origin), by default 0.0</p> </li> <li> <code>mirror_x</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pad X mirroring (mirroring of pad orientation relative to pad origin X axis), by default False</p> </li> <li> <code>mirror_y</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pad Y mirroring (mirroring of pad orientation relative to pad origin Y axis), by default False</p> </li> <li> <code>scale</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Pad scaling (pad grows in all directions), by default 1.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PadDraw</code>           \u2013            <p>Object which can be used to set attributes of the pad or use it as start point for another  trace.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.add_cutout_pad","title":"add_cutout_pad","text":"<pre><code>add_cutout_pad(\n    pad: Pad,\n    at: Loc2D | TraceDraw,\n    *,\n    rotation: float = 0.0,\n    mirror_x: bool = False,\n    mirror_y: bool = False,\n    scale: float = 1.0\n) -&gt; PadDraw\n</code></pre> <p>Add cutout in shape of a pad to image.</p> <p>This corresponds to the flash with negative polarity in Gerber standard. The result will be a hole in shape of a pad cut out of whatever was previously at the given location.</p> <p>Parameters:</p> <ul> <li> <code>pad</code>               (<code>Pad</code>)           \u2013            <p>Previously defined pad object to be used for drawing.</p> </li> <li> <code>at</code>               (<code>Loc2D | TraceDraw</code>)           \u2013            <p>Location to flash at. Can be a 2-tuple of floats or TraceDraw object returned from <code>add_line_trace()</code> or <code>add_clockwise_arc_trace()</code>, then the end location of that trace will be used.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Pad rotation (rotation around pad origin), by default 0.0</p> </li> <li> <code>mirror_x</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pad X mirroring (mirroring of pad orientation relative to pad origin X axis), by default False</p> </li> <li> <code>mirror_y</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pad Y mirroring (mirroring of pad orientation relative to pad origin Y axis), by default False</p> </li> <li> <code>scale</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Pad scaling (pad grows in all directions), by default 1.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PadDraw</code>           \u2013            <p>Object which can be used to set attributes of the pad or use it as start point for trace.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.add_line_trace","title":"add_line_trace","text":"<pre><code>add_line_trace(\n    width: float,\n    begin: Loc2D | PadDraw | TraceDraw,\n    end: Loc2D | PadDraw | TraceDraw,\n) -&gt; TraceDraw\n</code></pre> <p>Add a trace to the image.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Width of a trace.</p> </li> <li> <code>begin</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>Begin point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the end location of the trace is used.</p> </li> <li> <code>end</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>End point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the begin location of the trace is used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>TraceDraw</code>           \u2013            <p>Object which can be used to set attributes of the trace, as start point for another trace or a center of a pad.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.add_clockwise_arc_trace","title":"add_clockwise_arc_trace","text":"<pre><code>add_clockwise_arc_trace(\n    width: float,\n    begin: Loc2D | PadDraw | TraceDraw,\n    end: Loc2D | PadDraw | TraceDraw,\n    center: Loc2D,\n) -&gt; TraceDraw\n</code></pre> <p>Add a clockwise arc trace to the image.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Width of a trace.</p> </li> <li> <code>begin</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>Begin point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the end location of the trace is used.</p> </li> <li> <code>end</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>End point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the begin location of the trace is used.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Center of the arc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>TraceDraw</code>           \u2013            <p>Object which can be used to set attributes of the trace, as start point for another trace or a center of a pad.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.add_counter_clockwise_arc_trace","title":"add_counter_clockwise_arc_trace","text":"<pre><code>add_counter_clockwise_arc_trace(\n    width: float,\n    begin: Loc2D | PadDraw | TraceDraw,\n    end: Loc2D | PadDraw | TraceDraw,\n    center: Loc2D,\n) -&gt; TraceDraw\n</code></pre> <p>Add a counter clockwise arc trace to the image.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Width of a trace.</p> </li> <li> <code>begin</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>Begin point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the end location of the trace is used.</p> </li> <li> <code>end</code>               (<code>Loc2D | PadDraw | TraceDraw</code>)           \u2013            <p>End point of the trace. When 2-tuple of floats is provided, it is interpreted as absolute coordinates. When PadDraw is provided, the location of the center of the pad is used. When TraceDraw is provided, the begin location of the trace is used.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Center of the arc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>TraceDraw</code>           \u2013            <p>Object which can be used to set attributes of the trace, as start point for another trace or a center of a pad.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.new_region","title":"new_region","text":"<pre><code>new_region(begin: Loc2D) -&gt; RegionCreator\n</code></pre> <p>Return RegionCreator object ready for creating a region.</p> <p>Parameters:</p> <ul> <li> <code>begin</code>               (<code>Optional[Loc2D]</code>)           \u2013            <p>Location to start the region outline.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RegionCreator</code>           \u2013            <p>Object handling process of region creation.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.get_code","title":"get_code","text":"<pre><code>get_code() -&gt; GerberCode\n</code></pre> <p>Generate Gerber code created with builder until this point.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3Builder.set_standard_attributes","title":"set_standard_attributes","text":"<pre><code>set_standard_attributes() -&gt; None\n</code></pre> <p>Set standard attributes for the file.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberCode","title":"GerberCode","text":"<p>Container for Gerber code produced by the builder.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberCode.raw","title":"raw  <code>property</code>","text":"<pre><code>raw: File\n</code></pre> <p>Get raw abstract syntax tree of Gerber code.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberCode.dump","title":"dump","text":"<pre><code>dump(dst: TextIO) -&gt; None\n</code></pre> <p>Dump the Gerber code to file or other buffer.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberCode.dumps","title":"dumps","text":"<pre><code>dumps() -&gt; str\n</code></pre> <p>Dump the Gerber code to string.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator","title":"PadCreator","text":"<p>The <code>PadCreator</code> is responsible for managing creation of pads.</p> <p>Do not directly instantiate this class, instead use <code>new_pad()</code> method of <code>GerberX3Builder</code>.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator.circle","title":"circle","text":"<pre><code>circle(\n    diameter: float, hole_diameter: Optional[float] = None\n) -&gt; Pad\n</code></pre> <p>Create a circle pad.</p> <p>For corresponding element of Gerber standard see section 4.4.2 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>diameter</code>               (<code>float</code>)           \u2013            <p>Circle diameter.</p> </li> <li> <code>hole_diameter</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Diameter circle shaped hole in aperture, by default None, meaning no hole.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Pad</code>           \u2013            <p>New pad object.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    width: float,\n    height: float,\n    hole_diameter: Optional[float] = None,\n) -&gt; Pad\n</code></pre> <p>Create a rectangle pad.</p> <p>For corresponding element of Gerber standard see section 4.4.3 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Width (x dimension) of rectangle aperture.</p> </li> <li> <code>height</code>               (<code>float</code>)           \u2013            <p>Height (y dimension) of rectangle aperture.</p> </li> <li> <code>hole_diameter</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Diameter circle shaped hole in aperture, by default None, meaning no hole.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Pad</code>           \u2013            <p>New pad object.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator.rounded_rectangle","title":"rounded_rectangle","text":"<pre><code>rounded_rectangle(\n    width: float,\n    height: float,\n    hole_diameter: Optional[float] = None,\n) -&gt; Pad\n</code></pre> <p>Create a rounded rectangle pad.</p> <p>For corresponding element of Gerber standard see section 4.4.4 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Width (x dimension) of rounded rectangle aperture.</p> </li> <li> <code>height</code>               (<code>float</code>)           \u2013            <p>Height (y dimension) of rounded rectangle aperture.</p> </li> <li> <code>hole_diameter</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Diameter circle shaped hole in aperture, by default None, meaning no hole.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Pad</code>           \u2013            <p>New pad object.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator.regular_polygon","title":"regular_polygon","text":"<pre><code>regular_polygon(\n    outer_diameter: float,\n    number_of_vertices: int,\n    base_rotation_degrees: float,\n    hole_diameter: Optional[float] = None,\n) -&gt; Pad\n</code></pre> <p>Create a regular polygon pad.</p> <p>For corresponding element of Gerber standard see section 4.4.5 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>outer_diameter</code>               (<code>float</code>)           \u2013            <p>Diameter of the circle circumscribed around the polygon.</p> </li> <li> <code>number_of_vertices</code>               (<code>int</code>)           \u2013            <p>Number of vertices of the polygon.</p> </li> <li> <code>base_rotation_degrees</code>               (<code>float</code>)           \u2013            <p>Rotation of the polygon in degrees.</p> </li> <li> <code>hole_diameter</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Diameter circle shaped hole in aperture, by default None, meaning no hole.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Pad</code>           \u2013            <p>New pad object.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadCreator.custom","title":"custom","text":"<pre><code>custom() -&gt; CustomPadCreator\n</code></pre> <p>Get an object for creating custom pads.</p> <p>For corresponding element of Gerber standard see section 4.5 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Returns:</p> <ul> <li> <code>CustomPadCreator</code>           \u2013            <p>Object allowing you to add shapes to custom aperture.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Pad","title":"Pad","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>Pad</code> class represents a pad object created with <code>PadCreator</code> which can be added to the image managed by <code>GerberX3Builder</code> with use of <code>add_pad()</code> method.</p> <p>Do not directly instantiate this class, use methods available on <code>PadCreator</code> class.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Pad.set_aperture_function","title":"set_aperture_function","text":"<pre><code>set_aperture_function(\n    aper_function: str | AperFunction,\n) -&gt; None\n</code></pre> <p>Set <code>.AperFunction</code> attribute for aperture.</p> <p>For corresponding element of Gerber standard see section 5.6.10 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>aper_function</code>               (<code>str | AperFunction</code>)           \u2013            <p>Aperture function value. Can be an <code>AperFunction</code> enum value or a string conversable to it.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Pad.set_drill_tolerance","title":"set_drill_tolerance","text":"<pre><code>set_drill_tolerance(plus: float, minus: float) -&gt; None\n</code></pre> <p>Set <code>.DrillTolerance</code> attribute for aperture.</p> <p>For corresponding element of Gerber standard see section 5.6.11 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>plus</code>               (<code>float</code>)           \u2013            <p>Plus tolerance of a drill hole.</p> </li> <li> <code>minus</code>               (<code>float</code>)           \u2013            <p>Minus tolerance of a drill hole.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Pad.set_custom_attribute","title":"set_custom_attribute","text":"<pre><code>set_custom_attribute(name: str, *values: str) -&gt; None\n</code></pre> <p>Add custom attribute to the pad.</p> <p>For corresponding element of Gerber standard see section 5.1 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of custom attribute.</p> </li> <li> <code>*values</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>Values of custom attribute.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator","title":"CustomPadCreator","text":"<p>The <code>CustomPadCreator</code> is single use driver of process of creating custom pad.</p> <p>Do not directly instantiate this class, instead use <code>new_pad()</code> method of <code>GerberX3Builder</code>.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.create","title":"create","text":"<pre><code>create() -&gt; Pad\n</code></pre> <p>Finalize process of creating custom pad.</p> <p>This method can be called only once. After calling this method, no more primitives can be added to the pad.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_circle","title":"add_circle","text":"<pre><code>add_circle(\n    diameter: float, center: Loc2D, rotation: float = 0.0\n) -&gt; Self\n</code></pre> <p>Add a circle to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.3 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>diameter</code>               (<code>float</code>)           \u2013            <p>Circle diameter.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Location of circle center relative to pad origin.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the circle relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.cut_circle","title":"cut_circle","text":"<pre><code>cut_circle(\n    diameter: float, center: Loc2D, rotation: float = 0.0\n) -&gt; Self\n</code></pre> <p>Add a cut out in a shape of a circle to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.3 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>diameter</code>               (<code>float</code>)           \u2013            <p>Circle diameter.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Location of circle center relative to pad origin.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the circle relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_vector_line","title":"add_vector_line","text":"<pre><code>add_vector_line(\n    width: float,\n    start: Loc2D,\n    end: Loc2D,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a vector line to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.4 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Vector line width.</p> </li> <li> <code>start</code>               (<code>Loc2D</code>)           \u2013            <p>Start point coordinates relative to origin of the pad.</p> </li> <li> <code>end</code>               (<code>Loc2D</code>)           \u2013            <p>End point coordinates relative to origin of the pad.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the vector line relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.cut_vector_line","title":"cut_vector_line","text":"<pre><code>cut_vector_line(\n    width: float,\n    start: Loc2D,\n    end: Loc2D,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a cut out in a shape of a vector line to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.4 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Vector line width.</p> </li> <li> <code>start</code>               (<code>Loc2D</code>)           \u2013            <p>Start point coordinates relative to origin of the pad.</p> </li> <li> <code>end</code>               (<code>Loc2D</code>)           \u2013            <p>End point coordinates relative to origin of the pad.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the vector line relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_center_line","title":"add_center_line","text":"<pre><code>add_center_line(\n    width: float,\n    height: float,\n    center: Loc2D,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a center line to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.5 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Line width (x dimension).</p> </li> <li> <code>height</code>               (<code>float</code>)           \u2013            <p>Line height (y dimension).</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Line center coordinates relative to origin of the pad.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the center line relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.cut_center_line","title":"cut_center_line","text":"<pre><code>cut_center_line(\n    width: float,\n    height: float,\n    center: Loc2D,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a cut out in a shape of a center line to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.5 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>float</code>)           \u2013            <p>Line width (x dimension).</p> </li> <li> <code>height</code>               (<code>float</code>)           \u2013            <p>Line height (y dimension).</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Line center coordinates relative to origin of the pad.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the center line relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_outline","title":"add_outline","text":"<pre><code>add_outline(\n    points: Sequence[Loc2D], rotation: float = 0.0\n) -&gt; Self\n</code></pre> <p>Add an outline to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.6 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>points</code>               (<code>Sequence[Loc2D]</code>)           \u2013            <p>Points of the outline as coordinates relative to the center of the pad. First and last point are implicitly connected.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the outline relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.cut_outline","title":"cut_outline","text":"<pre><code>cut_outline(\n    points: Sequence[Loc2D], rotation: float = 0.0\n) -&gt; Self\n</code></pre> <p>Add a cut out in a shape of an outline to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.6 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>points</code>               (<code>Sequence[Loc2D]</code>)           \u2013            <p>Points of the outline as coordinates relative to the center of the pad. First and last point are implicitly connected.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the outline relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_polygon","title":"add_polygon","text":"<pre><code>add_polygon(\n    vertex_count: int,\n    center: Loc2D,\n    outer_diameter: float,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a regular polygon to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.7 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>vertex_count</code>               (<code>int</code>)           \u2013            <p>Number of vertices of the polygon.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Coordinates of center of the polygon relative to the pad origin.</p> </li> <li> <code>outer_diameter</code>               (<code>float</code>)           \u2013            <p>Diameter of the circle circumscribed around the polygon.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the polygon relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.cut_polygon","title":"cut_polygon","text":"<pre><code>cut_polygon(\n    vertex_count: int,\n    center: Loc2D,\n    outer_diameter: float,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a regular polygon to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.7 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>vertex_count</code>               (<code>int</code>)           \u2013            <p>Number of vertices of the polygon.</p> </li> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Coordinates of center of the polygon relative to the pad origin.</p> </li> <li> <code>outer_diameter</code>               (<code>float</code>)           \u2013            <p>Diameter of the circle circumscribed around the polygon.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the polygon relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.CustomPadCreator.add_thermal","title":"add_thermal","text":"<pre><code>add_thermal(\n    center: Loc2D,\n    outer_diameter: float,\n    inner_diameter: float,\n    gap_thickness: float,\n    rotation: float = 0.0,\n) -&gt; Self\n</code></pre> <p>Add a thermal shape to the custom pad.</p> <p>For corresponding element of Gerber standard see section 4.5.1.8 of The Gerber Layer Format Specification - Revision 2024.05.</p> <p>Parameters:</p> <ul> <li> <code>center</code>               (<code>Loc2D</code>)           \u2013            <p>Center point coordinates.</p> </li> <li> <code>outer_diameter</code>               (<code>float</code>)           \u2013            <p>Outer diameter &gt; inner diameter</p> </li> <li> <code>inner_diameter</code>               (<code>float</code>)           \u2013            <p>Inner diameter &gt;= 0</p> </li> <li> <code>gap_thickness</code>               (<code>float</code>)           \u2013            <p>Gap thickness &lt; (outer diameter)/\u221a2. Note that if the (gap thickness)*\u221a2 \u2265 (inner diameter) the inner circle disappears. This is not invalid. The gaps are on the X and Y axes through the center without rotation. They rotate with the primitive.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Rotation of the thermal relative to the pad origin in degrees counterclockwise, by default 0.0</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same CustomPadCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.RegionCreator","title":"RegionCreator","text":"<p>The <code>RegionCreator</code> is responsible for managing creation of regions.</p> <p>Do not directly instantiate this class, instead use <code>new_region()</code> method of <code>GerberX3Builder</code>.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.RegionCreator.add_line","title":"add_line","text":"<pre><code>add_line(to: tuple[float, float]) -&gt; Self\n</code></pre> <p>Add a line to the region outline.</p> <p>Parameters:</p> <ul> <li> <code>to</code>               (<code>tuple[float, float]</code>)           \u2013            <p>End point of the line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same RegionCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.RegionCreator.add_clockwise_arc","title":"add_clockwise_arc","text":"<pre><code>add_clockwise_arc(\n    to: tuple[float, float], center: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Add a clockwise arc to the region outline.</p> <p>Parameters:</p> <ul> <li> <code>to</code>               (<code>tuple[float, float]</code>)           \u2013            <p>End point of the arc.</p> </li> <li> <code>center</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Center of the arc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same RegionCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.RegionCreator.add_counterclockwise_arc","title":"add_counterclockwise_arc","text":"<pre><code>add_counterclockwise_arc(\n    to: tuple[float, float], center: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Add a counterclockwise arc to the region outline.</p> <p>Parameters:</p> <ul> <li> <code>to</code>               (<code>tuple[float, float]</code>)           \u2013            <p>End point of the arc.</p> </li> <li> <code>center</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Center of the arc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Same RegionCreator object for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.RegionCreator.create","title":"create","text":"<pre><code>create() -&gt; Region\n</code></pre> <p>Finalize process of creating region and automatically add it to the image.</p> <p>This method can be called only once. After calling this method, no more elements can be added to the region.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Draw","title":"Draw","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>Draw</code> class is a base class for all drawing operations.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.SimpleDraw","title":"SimpleDraw","text":"<p>               Bases: <code>Draw</code></p> <p>The <code>Draw</code> class represents any drawing operation with additional state updating commands and attributes.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.PadDraw","title":"PadDraw","text":"<p>               Bases: <code>SimpleDraw</code></p> <p>The <code>PadDraw</code> represents a drawing operation of creating a pad.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.TraceDraw","title":"TraceDraw","text":"<p>               Bases: <code>SimpleDraw</code></p> <p>The <code>TraceDraw</code> represents a drawing operation of creating a trace.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.ArcTraceDraw","title":"ArcTraceDraw","text":"<p>               Bases: <code>TraceDraw</code></p> <p>The <code>ArcTraceDraw</code> represents a drawing operation of creating an arc trace.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.Region","title":"Region","text":"<p>               Bases: <code>Draw</code></p> <p>The <code>Region</code> represents a drawing operation of creating a region.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.GerberX3BuilderError","title":"GerberX3BuilderError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for exceptions raised by <code>GerberX3Builder</code>.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.NotAPadError","title":"NotAPadError","text":"<p>               Bases: <code>GerberX3BuilderError</code></p> <p>Raised when a pad is expected but different object is provided.</p>"},{"location":"reference/pygerber/builder/gerber.html#pygerber.builder.gerber.InvalidRegionOutlineError","title":"InvalidRegionOutlineError","text":"<p>               Bases: <code>GerberX3BuilderError</code></p> <p>Raised when a region outline is invalid.</p>"},{"location":"reference/pygerber/builder/rvmc.html","title":"rvmc","text":""},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc","title":"rvmc","text":"<p>The <code>pygerber.vm.builder</code> module provides classes for programmatic generation of complicated RVMC.</p> <p>As opposed to manual construction of RVMC by individually constructing Command objects, builder interface is considered <code>stable</code>, hence it is guaranteed to not be modified across patch and minor releases without previous deprecation warning.</p> <p>To start building RVMC, create an instance of <code>Builder</code> class. The <code>Builder</code> class provides a method <code>layer</code> which should be called and used as context manager. This method will create main layer of RVMC. You can used methods on the <code>LayerBuilder</code> instance returned by context manager to add shapes to the layer.</p> <pre><code>builder = Builder()\n\nwith builder.layer() as layer:\n    layer.circle((0, 0), 1, is_negative=False)\n\nrvmc = builder.commands\n</code></pre> <p>To create a nested layer, use the <code>layer</code> method on the <code>LayerBuilder</code> instance. Then you can proceed to add shapes to the nested layer by invoking commands on nested layer instance. Nested layer created this way can be pasted into parent layer using <code>paste</code> method. The <code>paste</code> method takes the nested layer instance this explicitly disallows creation of cyclic dependencies in layers, as they will result in exception during rendering.</p> <pre><code>builder = Builder()\n\nwith builder.layer() as layer:\n    with layer.layer(\"D10\") as nested_layer:\n        nested_layer.circle((0, 0), 1, is_negative=False)\n\n    layer.paste(nested_layer, at=(0, 0), is_negative=False)\n\nrvmc = builder.commands\n</code></pre> <p>Multiple nesting is allowed, layers defined and finalized previously can be used in any nested layers in the future. Layers and shapes are auto-magically recorded after corresponding method is called.</p> <p>Adding shapes to finalized layer is not allowed and will result in exception. Layers are automatically finalized after exiting the context manager corresponding to particular layer. Before context manager is exited, eg. in nested layers, the layers can not be used.</p> <p>Using parent layer in child layer will result in cyclic dependency and will raise exception during rendering. There is currently no mechanism preventing you from doing that during generation.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.RvmcBuilder","title":"RvmcBuilder","text":"<p>The <code>RvmcBuilder</code> class provides a way to programmatically generate RVMC code.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.RvmcBuilder.layer","title":"layer","text":"<pre><code>layer(\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create main RVMC layer.</p> <p>Using main layer you can add more objects into the image.</p> <p>Parameters:</p> <ul> <li> <code>box</code>               (<code>Optional[Box]</code>, default:                   <code>None</code> )           \u2013            <p>Fixed size, if not provided, size will be determined automatically at render time, by default None</p> </li> <li> <code>origin</code>               (<code>Optional[tuple[float, float]]</code>, default:                   <code>None</code> )           \u2013            <p>Origin of image space, in None, (0.0, 0.0) is used, by default None</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Generator[LayerBuilder, None, None]</code>           \u2013            <p>Object allowing you to add elements to the layer.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>LockedBuilderError</code>             \u2013            <p>Raised when <code>get_rvmc()</code> is called before calling this function or before exiting the context manager block.</p> </li> </ul>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.RvmcBuilder.get_rvmc","title":"get_rvmc","text":"<pre><code>get_rvmc() -&gt; RVMC\n</code></pre> <p>Return the generated RVMC code.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder","title":"LayerBuilder","text":"<p>Layer builder class.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: Sequence[Command]\n</code></pre> <p>Return commands.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.finalize","title":"finalize","text":"<pre><code>finalize() -&gt; None\n</code></pre> <p>Finalize the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.layer","title":"layer","text":"<pre><code>layer(\n    id_: str,\n    box: Optional[Box] = None,\n    origin: Optional[tuple[float, float]] = None,\n) -&gt; Generator[LayerBuilder, None, None]\n</code></pre> <p>Create a new layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.circle","title":"circle","text":"<pre><code>circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.rectangle","title":"rectangle","text":"<pre><code>rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.obround","title":"obround","text":"<pre><code>obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.polygon","title":"polygon","text":"<pre><code>polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add Shape object containing a regular polygon inscribed in bounding_circle of diameter <code>outer_diameter</code>, with vertices count equal to <code>vertices_count</code>, and starting rotation (counterclockwise) of <code>base_rotation</code> degrees.</p> <p>Parameters:</p> <ul> <li> <code>center</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Center of the polygon. A tuple of two floats.</p> </li> <li> <code>outer_diameter</code>               (<code>float</code>)           \u2013            <p>Diameter of the circle circumscribing the regular polygon, i.e. the circle through the polygon vertices. A decimal &gt; 0.</p> </li> <li> <code>vertices_count</code>               (<code>int</code>)           \u2013            <p>Number of vertices n, 3 \u2264 n \u2264 12. An integer.</p> </li> <li> <code>base_rotation</code>               (<code>float</code>)           \u2013            <p>The rotation angle, in degrees counterclockwise. A decimal. With rotation angle zero there is a vertex on the positive X-axis through the aperture center.</p> </li> <li> <code>is_negative</code>               (<code>bool</code>)           \u2013            <p>Toggle switch for the negative polarity. If True, the aperture is considered solid, otherwise a hole, possibly subtracting from existing solid shapes.</p> </li> </ul>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.line","title":"line","text":"<pre><code>line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add a command to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.cross","title":"cross","text":"<pre><code>cross(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.x","title":"x","text":"<pre><code>x(\n    center: tuple[float, float],\n    length: float,\n    thickness: float,\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Add cross shape to the layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LayerBuilder.paste","title":"paste","text":"<pre><code>paste(\n    layer: LayerBuilder,\n    at: tuple[float, float],\n    *,\n    is_negative: bool\n) -&gt; None\n</code></pre> <p>Paste another layer into this layer.</p>"},{"location":"reference/pygerber/builder/rvmc.html#pygerber.builder.rvmc.LockedBuilderError","title":"LockedBuilderError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to modify a builder after it produced RVMC.</p>"},{"location":"reference/pygerber/common/__init__.html","title":"init","text":""},{"location":"reference/pygerber/common/__init__.html#pygerber.common","title":"common","text":"<p>Common internal utilities of PyGerber library.</p>"},{"location":"reference/pygerber/common/error.html","title":"error","text":""},{"location":"reference/pygerber/common/error.html#pygerber.common.error","title":"error","text":"<p>Common exception related tools.</p>"},{"location":"reference/pygerber/common/error.html#pygerber.common.error.throw","title":"throw","text":"<pre><code>throw(exception: Exception) -&gt; NoReturn\n</code></pre> <p>Raise given exception.</p>"},{"location":"reference/pygerber/common/namespace.html","title":"namespace","text":""},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace","title":"namespace","text":"<p><code>namespace</code> module contains definition of <code>Namespace</code> class used to prevent instantiation of derived classes.</p>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.NamespaceMeta","title":"NamespaceMeta","text":"<p>               Bases: <code>type</code></p> <p>Metaclass that prevents instantiation of the class.</p>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.NamespaceMeta.__call__","title":"__call__","text":"<pre><code>__call__(*_: Any, **__: Any) -&gt; NoReturn\n</code></pre> <p>Raise a TypeError when trying to instantiate the class.</p>"},{"location":"reference/pygerber/common/namespace.html#pygerber.common.namespace.Namespace","title":"Namespace","text":"<p>Base class that prevents instantiation of derived classes.</p>"},{"location":"reference/pygerber/common/position.html","title":"position","text":""},{"location":"reference/pygerber/common/position.html#pygerber.common.position","title":"position","text":"<p>Contains tools for expressing positions in text.</p>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position","title":"Position  <code>dataclass</code>","text":"<p>Position of token in text in pyparsing scheme (lines starts from 1, columns also start from 1).</p>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.from_vscode_position","title":"from_vscode_position  <code>classmethod</code>","text":"<pre><code>from_vscode_position(line: int, character: int) -&gt; Self\n</code></pre> <p>Return position in pyparsing scheme from vscode scheme (lines starts from 0, columns starts from 0).</p>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.to_lspt","title":"to_lspt","text":"<pre><code>to_lspt() -&gt; Position\n</code></pre> <p>Return position in pyparsing scheme from vscode scheme (lines starts from 1, columns starts from 1).</p>"},{"location":"reference/pygerber/common/position.html#pygerber.common.position.Position.offset","title":"offset","text":"<pre><code>offset(line: int, column: int) -&gt; Self\n</code></pre> <p>Create new Position offset by line and column.</p>"},{"location":"reference/pygerber/console/__init__.html","title":"init","text":""},{"location":"reference/pygerber/console/__init__.html#pygerber.console","title":"console","text":"<p>Console interface of PyGerber.</p>"},{"location":"reference/pygerber/console/commands.html","title":"commands","text":""},{"location":"reference/pygerber/console/commands.html#pygerber.console.commands","title":"commands","text":"<p>Command line commands of PyGerber.</p>"},{"location":"reference/pygerber/console/commands.html#pygerber.console.commands.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Command line interface of PyGerber, python implementation of Gerber X3/X2 standard with 2D rendering engine.</p>"},{"location":"reference/pygerber/console/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber","title":"gerber","text":"<p>Command line commands of PyGerber.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.gerber","title":"gerber","text":"<pre><code>gerber() -&gt; None\n</code></pre> <p>Gerber format related commands.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.convert","title":"convert","text":"<pre><code>convert() -&gt; None\n</code></pre> <p>Convert Gerber image to different image format.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.png","title":"png","text":"<pre><code>png(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    dpmm: int,\n    implementation: str,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to PNG image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.jpeg","title":"jpeg","text":"<pre><code>jpeg(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    dpmm: int,\n    implementation: str,\n    quality: int,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to JPEG image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.tiff","title":"tiff","text":"<pre><code>tiff(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    dpmm: int,\n    implementation: str,\n    compression: str,\n    quality: int,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to TIFF image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.bmp","title":"bmp","text":"<pre><code>bmp(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    dpmm: int,\n    implementation: str,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to BMP image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.webp","title":"webp","text":"<pre><code>webp(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    dpmm: int,\n    implementation: str,\n    lossless: str,\n    quality: int,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to WEBP image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.svg","title":"svg","text":"<pre><code>svg(\n    source: str,\n    output: str,\n    file_type: str,\n    style: Optional[str],\n    foreground: Optional[str],\n    background: Optional[str],\n    implementation: str,\n) -&gt; None\n</code></pre> <p>Convert Gerber image file to SVG image.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.format_cmd","title":"format_cmd","text":"<pre><code>format_cmd(\n    source: str,\n    output: str,\n    config: Optional[str],\n    inline_config: Optional[str],\n) -&gt; None\n</code></pre> <p>Format Gerber file.</p> <p>SOURCE - path to file which is supposed to be formatted.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.merge_convert","title":"merge_convert","text":"<pre><code>merge_convert() -&gt; None\n</code></pre> <p>Convert multiple Gerber images to different image format and merge them into one image (stack on top of each other).</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.merge_convert_png","title":"merge_convert_png","text":"<pre><code>merge_convert_png(\n    sources: str,\n    output: str,\n    file_type: str,\n    dpmm: int,\n    implementation: str,\n) -&gt; None\n</code></pre> <p>Convert multiple Gerber images to PNG image and merge them into one image.</p> <p>Images are merged from first to last, thus fist layer is bottom most, last layer is topmost, unobstructed.</p> <p>SOURCES - paths to files which are supposed to be rendered and merged.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.merge_convert_jpeg","title":"merge_convert_jpeg","text":"<pre><code>merge_convert_jpeg(\n    sources: str,\n    output: str,\n    file_type: str,\n    dpmm: int,\n    implementation: str,\n) -&gt; None\n</code></pre> <p>Convert multiple Gerber images to JPEG image and merge them into one image.</p> <p>Images are merged from first to last, thus fist layer is bottom most, last layer is topmost, unobstructed.</p> <p>SOURCES - paths to files which are supposed to be rendered and merged.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.lint","title":"lint","text":"<pre><code>lint(files: str, rules: list[str]) -&gt; None\n</code></pre> <p>Lint Gerber files with specified rules.</p>"},{"location":"reference/pygerber/console/gerber.html#pygerber.console.gerber.list_lint_rules","title":"list_lint_rules","text":"<pre><code>list_lint_rules(*, quiet: bool) -&gt; None\n</code></pre> <p>List available linting rules.</p>"},{"location":"reference/pygerber/examples/__init__.html","title":"examples","text":""},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples","title":"examples","text":"<p>Utility for loading example Gerber files shipped with PyGerber.</p>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.ExamplesEnum","title":"ExamplesEnum","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of all available examples.</p>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.get_example_path","title":"get_example_path","text":"<pre><code>get_example_path(example: ExamplesEnum) -&gt; Path\n</code></pre> <p>Get path to example Gerber file.</p>"},{"location":"reference/pygerber/examples/__init__.html#pygerber.examples.load_example","title":"load_example","text":"<pre><code>load_example(example: ExamplesEnum) -&gt; str\n</code></pre> <p>Load example Gerber file.</p>"},{"location":"reference/pygerber/gerber/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/__init__.html#pygerber.gerber","title":"gerber","text":"<p>Package for Gerber X3 format visualization.</p>"},{"location":"reference/pygerber/gerber/pygments.html","title":"pygments","text":""},{"location":"reference/pygerber/gerber/pygments.html#pygerber.gerber.pygments","title":"pygments","text":"<p>The <code>pygments</code> module provides Pygments lexer for Gerber files.</p>"},{"location":"reference/pygerber/gerber/pygments.html#pygerber.gerber.pygments.GerberLexer","title":"GerberLexer","text":"<p>               Bases: <code>RegexLexer</code></p> <p>The <code>GerberLexer</code> class is a Pygments lexer for Gerber files.</p>"},{"location":"reference/pygerber/gerber/pygments.html#pygerber.gerber.pygments.PyGerberDocsLexer","title":"PyGerberDocsLexer","text":"<p>               Bases: <code>PythonLexer</code></p> <p>The <code>PyGerberDocsLexer</code> class is a Pygments lexer for Gerber files.</p>"},{"location":"reference/pygerber/gerber/pygments.html#pygerber.gerber.pygments.PyGerberDocsLexer.get_tokens_unprocessed","title":"get_tokens_unprocessed","text":"<pre><code>get_tokens_unprocessed(text: Any) -&gt; Any\n</code></pre> <p>Get tokens from the text.</p>"},{"location":"reference/pygerber/gerber/pygments.html#pygerber.gerber.pygments.is_pygments_available","title":"is_pygments_available","text":"<pre><code>is_pygments_available() -&gt; bool\n</code></pre> <p>Check if the language server feature is available.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api","title":"api","text":"<p>The <code>api</code> module provides simple, high-level API for rendering Gerber X3/X2 files.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositeImage","title":"CompositeImage","text":"<p>Image composed of multiple sub-images.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositePillowImage","title":"CompositePillowImage","text":"<p>               Bases: <code>CompositeImage</code>, <code>_PillowSaveMixin</code></p> <p>Image composed of multiple sub-images.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositePillowImage.get_sub_images","title":"get_sub_images","text":"<pre><code>get_sub_images() -&gt; Sequence[PillowImage]\n</code></pre> <p>Get sequence containing sub-images.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositePillowImage.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image\n</code></pre> <p>Get image composed out of sub-images.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositeView","title":"CompositeView","text":"<p>View composed of multiple Gerber files.</p> <p>Composite view is a generalized concept of a top / bottom / inner layer view extracted from a Gerber project. Usually it does not make sense to render all layers at once, as bottom layers will be simply covered by top layers.</p> <p>This object can be used to render selected Gerber files to single image. It automatically performs alignment and merging of files. Files should be ordered bottom up, topmost layer last, like if adding one layer on top of previous.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositeView.files","title":"files  <code>property</code>","text":"<pre><code>files: tuple[GerberFile, ...]\n</code></pre> <p>Get sequence of Gerber files.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositeView.set_color_map","title":"set_color_map","text":"<pre><code>set_color_map(color_map: COLOR_MAP_T) -&gt; Self\n</code></pre> <p>Set color map for all files.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.CompositeView.render_with_pillow","title":"render_with_pillow","text":"<pre><code>render_with_pillow(dpmm: int = 20) -&gt; CompositePillowImage\n</code></pre> <p>Render project to raster image using Pillow.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum","title":"FileTypeEnum","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible Gerber file types.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.COPPER","title":"COPPER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COPPER = 'COPPER'\n</code></pre> <p>Copper layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.MASK","title":"MASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MASK = 'MASK'\n</code></pre> <p>Mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.PASTE","title":"PASTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PASTE = 'PASTE'\n</code></pre> <p>Paste layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.SILK","title":"SILK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SILK = 'SILK'\n</code></pre> <p>Silk layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.EDGE","title":"EDGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EDGE = 'EDGE'\n</code></pre> <p>Edge layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.PLATED","title":"PLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLATED = 'PLATED'\n</code></pre> <p>Plated layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.NON_PLATED","title":"NON_PLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NON_PLATED = 'NONPLATED'\n</code></pre> <p>Non-plated layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.PROFILE","title":"PROFILE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PROFILE = 'PROFILE'\n</code></pre> <p>Profile layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.SOLDERMASK","title":"SOLDERMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SOLDERMASK = 'SOLDERMASK'\n</code></pre> <p>Solder mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.LEGEND","title":"LEGEND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEGEND = 'LEGEND'\n</code></pre> <p>Legend layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.COMPONENT","title":"COMPONENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT = 'COMPONENT'\n</code></pre> <p>Component layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.GLUE","title":"GLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GLUE = 'GLUE'\n</code></pre> <p>Glue layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.CARBONMASK","title":"CARBONMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CARBONMASK = 'CARBONMASK'\n</code></pre> <p>Carbon mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.GOLDMASK","title":"GOLDMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GOLDMASK = 'GOLDMASK'\n</code></pre> <p>Gold mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.HEATSINKMASK","title":"HEATSINKMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEATSINKMASK = 'HEATSINKMASK'\n</code></pre> <p>Heat sink mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.PEELABLEMASK","title":"PEELABLEMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PEELABLEMASK = 'PEELABLEMASK'\n</code></pre> <p>Peelable mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.SILVERMASK","title":"SILVERMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SILVERMASK = 'SILVERMASK'\n</code></pre> <p>Silver mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.TINMASK","title":"TINMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TINMASK = 'TINMASK'\n</code></pre> <p>Tin mask layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.DEPTHROUT","title":"DEPTHROUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEPTHROUT = 'DEPTHROUT'\n</code></pre> <p>Depth out layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.VCUT","title":"VCUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VCUT = 'VCUT'\n</code></pre> <p>V cut layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.VIAFILL","title":"VIAFILL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VIAFILL = 'VIAFILL'\n</code></pre> <p>Via fill layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.PADS","title":"PADS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PADS = 'PADS'\n</code></pre> <p>Pads layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.DRILLMAP","title":"DRILLMAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DRILLMAP = 'DRILLMAP'\n</code></pre> <p>Drillmap layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.FABRICATIONDRAWING","title":"FABRICATIONDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FABRICATIONDRAWING = 'FABRICATIONDRAWING'\n</code></pre> <p>FabricationDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.VCUTMAP","title":"VCUTMAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VCUTMAP = 'VCUTMAP'\n</code></pre> <p>Vcutmap layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.ASSEMBLYDRAWING","title":"ASSEMBLYDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ASSEMBLYDRAWING = 'ASSEMBLYDRAWING'\n</code></pre> <p>AssemblyDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.ARRAYDRAWING","title":"ARRAYDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARRAYDRAWING = 'ARRAYDRAWING'\n</code></pre> <p>ArrayDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.OTHERDRAWING","title":"OTHERDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OTHERDRAWING = 'OTHERDRAWING'\n</code></pre> <p>OtherDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.OTHER","title":"OTHER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OTHER = 'OTHER'\n</code></pre> <p>Other layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.UNDEFINED","title":"UNDEFINED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNDEFINED = 'UNDEFINED'\n</code></pre> <p>Unrecognized layer sentinel.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.INFER_FROM_EXTENSION","title":"INFER_FROM_EXTENSION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER_FROM_EXTENSION = 'INFER_FROM_EXTENSION'\n</code></pre> <p>Represents request to identify layer type from file extension.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.INFER_FROM_ATTRIBUTES","title":"INFER_FROM_ATTRIBUTES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER_FROM_ATTRIBUTES = 'INFER_FROM_ATTRIBUTES'\n</code></pre> <p>Represents request to identify layer type from file attributes.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.INFER","title":"INFER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER = 'INFER'\n</code></pre> <p>Represents request to identify layer type from file extension or attributes.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FileTypeEnum.infer_from_attributes","title":"infer_from_attributes  <code>classmethod</code>","text":"<pre><code>infer_from_attributes(\n    file_function: Optional[str] = None,\n) -&gt; FileTypeEnum\n</code></pre> <p>Infer file type from file extension.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.PathToGerberJobProjectNotDefinedError","title":"PathToGerberJobProjectNotDefinedError","text":"<p>               Bases: <code>GerberX3APIError</code></p> <p>Raised when path to Gerber Job project is not defined.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile","title":"GerberFile","text":"<p>Generic representation of Gerber file.</p> <p>This objects provides interface for loading and parsing Gerber files.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.source_code","title":"source_code  <code>property</code>","text":"<pre><code>source_code: str\n</code></pre> <p>Gerber source code.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.file_type","title":"file_type  <code>property</code>","text":"<pre><code>file_type: FileTypeEnum\n</code></pre> <p>File type classification.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code loaded from file on disk.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>Path to Gerber file on disk.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize GerberFile object with Gerber source code from string.</p> <p>Parameters:</p> <ul> <li> <code>source_code</code>               (<code>str</code>)           \u2013            <p>Gerber source code as <code>str</code>object.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>New instance of GerberFile object.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.from_buffer","title":"from_buffer  <code>classmethod</code>","text":"<pre><code>from_buffer(\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from readable buffer.</p> <p>Parameters:</p> <ul> <li> <code>buffer</code>               (<code>TextIO</code>)           \u2013            <p>Readable buffer with Gerber source code.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.set_parser_options","title":"set_parser_options","text":"<pre><code>set_parser_options(**options: Any) -&gt; Self\n</code></pre> <p>Set parser options for this Gerber file.</p> <p>This is a window into advanced parser settings, only reason to use this method should be for advanced user to tweak parser behavior without binging more advanced PyGerber APIs into consideration.</p> <p>Parameters:</p> <ul> <li> <code>**options</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Parser options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.set_compiler_options","title":"set_compiler_options","text":"<pre><code>set_compiler_options(**options: Any) -&gt; Self\n</code></pre> <p>Set compiler options for this Gerber file.</p> <p>This is a window into advanced compiler settings, only reason to use this method should be for advanced user to tweak compiler behavior without binging more advanced PyGerber APIs into consideration.</p> <p>Parameters:</p> <ul> <li> <code>**options</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Compiler options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.set_color_map","title":"set_color_map","text":"<pre><code>set_color_map(color_map: COLOR_MAP_T) -&gt; Self\n</code></pre> <p>Set color map for rendering of this Gerber file.</p> <p>Gerber files themselves do not contain color data. Therefore only way to get colorful image is to explicitly ask rendering backend to apply particular color to image.</p> <p>Parameters:</p> <ul> <li> <code>color_map</code>               (<code>COLOR_MAP_T</code>)           \u2013            <p>Color map to be used for rendering Gerber file. You can use one of two predefined color maps: <code>DEFAULT_COLOR_MAP</code> or <code>DEFAULT_ALPHA_COLOR_MAP</code> or your own. They are both available in <code>pygerber.gerber.api</code> module. In most basic cases there is no need to alter default color map, as it already includes alpha channel thus allows for image stacking.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.render_with_pillow","title":"render_with_pillow","text":"<pre><code>render_with_pillow(\n    style: Optional[Style] = None, dpmm: int = 20\n) -&gt; PillowImage\n</code></pre> <p>Render Gerber file to raster image using rendering backend based on Pillow library.</p> <p>Parameters:</p> <ul> <li> <code>style</code>               (<code>Style</code>, default:                   <code>None</code> )           \u2013            <p>Style (color scheme) of rendered image, if value is None, <code>file_type</code> will be used. <code>file_type</code> was one of <code>FileTypeEnum.INFER*</code> attempt will be done to guess <code>file_type</code> based on extension and/or attributes, by default None</p> </li> <li> <code>dpmm</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>Resolution of image in dots per millimeter, by default 20</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.render_with_shapely","title":"render_with_shapely","text":"<pre><code>render_with_shapely(\n    style: Optional[Style] = None,\n) -&gt; ShapelyImage\n</code></pre> <p>Render Gerber file to vector image using rendering backend based on Shapely library.</p> <p>Parameters:</p> <ul> <li> <code>style</code>               (<code>Style</code>, default:                   <code>None</code> )           \u2013            <p>Style (color scheme) of rendered image, if value is None, <code>file_type</code> will be used. <code>file_type</code> was one of <code>FileTypeEnum.INFER*</code> attempt will be done to guess <code>file_type</code> based on extension and/or attributes, by default None Only foreground color is used, as all operations with clear polarity are performing actual boolean difference operations on geometry.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.format","title":"format","text":"<pre><code>format(output: TextIO, options: Optional[Options]) -&gt; None\n</code></pre> <p>Format Gerber code and write it to <code>output</code> stream.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.formats","title":"formats","text":"<pre><code>formats(options: Optional[Options]) -&gt; str\n</code></pre> <p>Format Gerber code and return it as <code>str</code> object.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberFile.sha256","title":"sha256","text":"<pre><code>sha256() -&gt; str\n</code></pre> <p>SHA256 hash of Gerber source code.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Image","title":"Image","text":"<p>The <code>Image</code> class is a base class for all rendered images returned by <code>GerberFile.render_with_*</code> methods.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Image.get_image_space","title":"get_image_space","text":"<pre><code>get_image_space() -&gt; ImageSpace\n</code></pre> <p>Get information about image space.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace","title":"ImageSpace","text":"<p>Container for information about Gerber image space.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.units","title":"units  <code>property</code>","text":"<pre><code>units: Units\n</code></pre> <p>Units of image space.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_x","title":"min_x  <code>property</code>","text":"<pre><code>min_x: float\n</code></pre> <p>Minimum X coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_y","title":"min_y  <code>property</code>","text":"<pre><code>min_y: float\n</code></pre> <p>Minimum Y coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_x","title":"max_x  <code>property</code>","text":"<pre><code>max_x: float\n</code></pre> <p>Maximum X coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_y","title":"max_y  <code>property</code>","text":"<pre><code>max_y: float\n</code></pre> <p>Maximum T coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.dpmm","title":"dpmm  <code>property</code>","text":"<pre><code>dpmm: int\n</code></pre> <p>Resolution of image in dots per millimeter.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_x_mm","title":"min_x_mm","text":"<pre><code>min_x_mm() -&gt; float\n</code></pre> <p>Minimum X coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_y_mm","title":"min_y_mm","text":"<pre><code>min_y_mm() -&gt; float\n</code></pre> <p>Minimum Y coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_x_mm","title":"max_x_mm","text":"<pre><code>max_x_mm() -&gt; float\n</code></pre> <p>Maximum X coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_y_mm","title":"max_y_mm","text":"<pre><code>max_y_mm() -&gt; float\n</code></pre> <p>Maximum Y coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.width_mm","title":"width_mm","text":"<pre><code>width_mm() -&gt; float\n</code></pre> <p>Width of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.height_mm","title":"height_mm","text":"<pre><code>height_mm() -&gt; float\n</code></pre> <p>Height of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.center_x_mm","title":"center_x_mm","text":"<pre><code>center_x_mm() -&gt; float\n</code></pre> <p>Center X coordinate of image in millimeters.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.center_y_mm","title":"center_y_mm","text":"<pre><code>center_y_mm() -&gt; float\n</code></pre> <p>Center Y coordinate of image in millimeters.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_x_pixels","title":"min_x_pixels","text":"<pre><code>min_x_pixels() -&gt; int\n</code></pre> <p>Minimum X coordinate of image in pixels.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.min_y_pixels","title":"min_y_pixels","text":"<pre><code>min_y_pixels() -&gt; int\n</code></pre> <p>Minimum Y coordinate of image in pixels.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_x_pixels","title":"max_x_pixels","text":"<pre><code>max_x_pixels() -&gt; int\n</code></pre> <p>Maximum X coordinate of image in pixels.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ImageSpace.max_y_pixels","title":"max_y_pixels","text":"<pre><code>max_y_pixels() -&gt; int\n</code></pre> <p>Maximum Y coordinate of image in pixels.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.PillowImage","title":"PillowImage","text":"<p>               Bases: <code>Image</code>, <code>_PillowSaveMixin</code></p> <p>The <code>PillowImage</code> class is a rendered image returned by <code>GerberFile.render_with_pillow</code> method.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.PillowImage.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image\n</code></pre> <p>Get image object.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ShapelyImage","title":"ShapelyImage","text":"<p>               Bases: <code>Image</code></p> <p>The <code>ShapelyImage</code> class is a rendered image returned by <code>GerberFile.render_with_shapely</code> method.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ShapelyImage.save","title":"save","text":"<pre><code>save(destination: str | Path | BinaryIO) -&gt; None\n</code></pre> <p>Write rendered image as SVG to location or buffer.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>TextIO</code>-like (files, StringIO) objects are written to directly.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ShapelyImage.save_svg","title":"save_svg","text":"<pre><code>save_svg(\n    destination: str | Path | BinaryIO, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in SVG format.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to SVG save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Units","title":"Units","text":"<p>               Bases: <code>Enum</code></p> <p>The <code>Units</code> enum contains possible Gerber file units.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.DesignRules","title":"DesignRules","text":"<p>               Bases: <code>_ModelType</code></p> <p>Design Rules.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.FilesAttributes","title":"FilesAttributes","text":"<p>               Bases: <code>_ModelType</code></p> <p>Files Attributes.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GeneralSpecs","title":"GeneralSpecs","text":"<p>               Bases: <code>_ModelType</code></p> <p>General Specs.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GenerationSoftware","title":"GenerationSoftware","text":"<p>               Bases: <code>_ModelType</code></p> <p>Generation Software.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberJobFile","title":"GerberJobFile","text":"<p>               Bases: <code>_ModelType</code></p> <p>Gerber Job File.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberJobFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(path: str | Path) -&gt; GerberJobFile\n</code></pre> <p>Load Gerber Job File.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | Path</code>)           \u2013            <p>Path to a <code>.gbrjob</code> file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>GerberJobFile</code>           \u2013            <p>Object representing Gerber Job File.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.GerberJobFile.to_project","title":"to_project","text":"<pre><code>to_project(*, path: Optional[Path] = None) -&gt; Project\n</code></pre> <p>Convert Gerber Job File to PyGerber Project object.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Optional[Path]</code>, default:                   <code>None</code> )           \u2013            <p>If GerberJobFile was not loaded from file on disk, you must provide a path to where that file should be, including file name, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Project</code>           \u2013            <p>New project object containing Gerber files from Gerber Job File.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Header","title":"Header","text":"<p>               Bases: <code>_ModelType</code></p> <p>Header.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.MaterialStackup","title":"MaterialStackup","text":"<p>               Bases: <code>_ModelType</code></p> <p>Material Stackup.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.ProjectId","title":"ProjectId","text":"<p>               Bases: <code>_ModelType</code></p> <p>Project ID.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Size","title":"Size","text":"<p>               Bases: <code>_ModelType</code></p> <p>Size.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options","title":"Options","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>Options</code> class aggregates configuration options for the Gerber formatter.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.indent_character","title":"indent_character  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>indent_character: Literal[' ', '\\t'] = Field(default=' ')\n</code></pre> <p>Character used for indentation, by default \" \" (space).</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.macro_body_indent","title":"macro_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_body_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro body, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0  which results in no indentation.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.macro_param_indent","title":"macro_param_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_param_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro parameters, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0 which results in no indentation.</p> <p><code>macro_param_indent</code> indentation is added on top of macro body indentation.</p> <p><code>macro_param_indent</code> has effect only when <code>macro_split_mode</code> is <code>PARAMETERS</code>.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.macro_split_mode","title":"macro_split_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_split_mode: MacroSplitMode = Field(\n    default=SplitOnPrimitives\n)\n</code></pre> <p>Changes how macro definitions are formatted, by default <code>MacroSplitMode.SplitOnPrimitives</code>.</p> <p>When <code>NoSplit</code> is selected, macro definition will be formatted as a single line.</p> <pre><code>%AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnPrimitives</code> is selected, macro definition will be formatted with each primitive in a new line.</p> <pre><code>%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnParameters</code> is selected, macro definition will be formatted with each primitive on a new line and each parameter of a primitive on a new line.</p> <pre><code>%AMDonut*\n1,\n1,\n$1,\n$2,\n$3*\n$4=$1x0.75*\n1,\n0,\n$4,\n$2,\n$3*%\n</code></pre> <p>Use <code>macro_body_indent</code> and <code>macro_param_indent</code> to control indentation.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.macro_end_in_new_line","title":"macro_end_in_new_line  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_end_in_new_line: MacroEndInNewLine = Field(default=No)\n</code></pre> <p>Toggles placing % sign which marks the end of macro in new line, by default <code>MacroEndInNewLine.No</code></p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.block_aperture_body_indent","title":"block_aperture_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_aperture_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of block aperture definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested block apertures.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.step_and_repeat_body_indent","title":"step_and_repeat_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step_and_repeat_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of step and repeat definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested step and repeat blocks.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.float_decimal_places","title":"float_decimal_places  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_decimal_places: int = Field(default=-1)\n</code></pre> <p>Limit number of decimal places shown for float values, by default -1 which means as many decimal places as needed.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.float_trim_trailing_zeros","title":"float_trim_trailing_zeros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_trim_trailing_zeros: FloatTrimTrailingZeros = Field(\n    default=Yes\n)\n</code></pre> <p>Remove trailing zeros from floats, by default <code>FloatTrimTrailingZeros.Yes</code>.</p> <p>When this is set to <code>FloatTrimTrailingZeros.Yes</code>, after floating point number is formatted with respect to <code>float_decimal_places</code>, trailing zeros are removed. If all zeros after decimal point are removed, decimal point is also removed.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.d01_indent","title":"d01_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d01_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D01 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.d02_indent","title":"d02_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d02_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D02 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.d03_indent","title":"d03_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d03_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D03 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.line_end","title":"line_end  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>line_end: Literal['\\n', '\\r\\n'] = Field(default='\\n')\n</code></pre> <p>Line ending character, Unix or Windows style, by default \" \" (Unix style)     If <code>strip_whitespace</code> is enabled, this setting is ignored and no line endings are     added.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.empty_line_before_polarity_switch","title":"empty_line_before_polarity_switch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>empty_line_before_polarity_switch: (\n    EmptyLineBeforePolaritySwitch\n) = Field(default=No)\n</code></pre> <p>Add empty line before polarity switch, by default <code>EmptyLineBeforePolaritySwitch.Yes</code></p> <p>Inserting empty lines before polarity switches enhances visual separation of sequences of commands with different polarities.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.keep_non_standalone_codes","title":"keep_non_standalone_codes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keep_non_standalone_codes: KeepNonStandaloneCodes = Field(\n    default=Keep\n)\n</code></pre> <p>Keep non-standalone codes in the output, by default <code>KeepNonStandaloneCodes.Keep</code></p> <p>If this option is disabled, legacy merged code forms like <code>G70D02*</code> will be divided into two separate commands, <code>G70*</code> and <code>D02*</code>, otherwise they will be kept as is.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.remove_g54","title":"remove_g54  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g54: RemoveG54 = Field(default=Keep)\n</code></pre> <p>Remove G54 code from output, by default <code>RemoveG54.Keep</code></p> <p>G54 code has no effect on the output, it was used in legacy files to prefix select aperture command.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.remove_g55","title":"remove_g55  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g55: RemoveG55 = Field(default=Keep)\n</code></pre> <p>Remove G55 code from output, by default <code>RemoveG55.Keep</code></p> <p>G55 code has no effect on the output, it was used in legacy files to prefix flash command.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.explicit_parenthesis","title":"explicit_parenthesis  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explicit_parenthesis: ExplicitParenthesis = Field(\n    default=KeepOriginal\n)\n</code></pre> <p>Toggle explicit parenthesis around all mathematical expressions within macro, by default <code>ExplicitParenthesis.KeepOriginal</code></p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Options.strip_whitespace","title":"strip_whitespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strip_whitespace: StripWhitespace = Field(default=Default)\n</code></pre> <p>Toggle stripping of whitespace from the output, by default <code>StripWhitespace.Default</code> which results in normal whitespace handling.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color","title":"Color","text":"<p>               Bases: <code>ModelType</code></p> <p>Color class represents a RGBA color.</p> <p>Channels are represented as integers in range 0 to 255.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.red","title":"red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>red: ChannelType = ChannelField\n</code></pre> <p>Red channel value.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.green","title":"green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>green: ChannelType = ChannelField\n</code></pre> <p>Green channel value.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.blue","title":"blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blue: ChannelType = ChannelField\n</code></pre> <p>Blue channel value.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.alpha","title":"alpha  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alpha: ChannelType = ChannelField\n</code></pre> <p>Alpha channel value.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RGBA</code>           \u2013            <p>Color built from hexadecimal values.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(\n    red: int, green: int, blue: int, alpha: int = 255\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>)           \u2013            <p>Red chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>green</code>               (<code>int</code>)           \u2013            <p>Green chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>blue</code>               (<code>int</code>)           \u2013            <p>Blue chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from r, g, b, a values.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Hue of color, integer in range 0 to 360 inclusive.</p> </li> <li> <code>saturation</code>               (<code>float</code>)           \u2013            <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha of color, int in range 0 to 255 inclusive.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from h, s, v, a values.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Color.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style","title":"Style","text":"<p>               Bases: <code>ModelType</code></p> <p>Style class represents colors which should be used for coloring rendered image layer.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets","title":"presets","text":"<p>               Bases: <code>Namespace</code></p> <p><code>Style.presets</code> contains predefined styles for convenience.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: Style\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: Style\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: Style\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: Style\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: Style\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: Style\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: Style\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: Style\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: Style\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: Style\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: Style\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.BLACK_WHITE","title":"BLACK_WHITE  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE: Style\n</code></pre> <p>Black and white color scheme.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.BLACK_WHITE_ALPHA","title":"BLACK_WHITE_ALPHA  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE_ALPHA: Style\n</code></pre> <p>Black and white color scheme with alpha channel.</p>"},{"location":"reference/pygerber/gerber/api/__init__.html#pygerber.gerber.api.Style.presets.get_styles","title":"get_styles  <code>classmethod</code>","text":"<pre><code>get_styles() -&gt; dict[str, Style]\n</code></pre> <p>Get list of all available styles.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html","title":"_composite_view","text":""},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view","title":"_composite_view","text":""},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositeImage","title":"CompositeImage","text":"<p>Image composed of multiple sub-images.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositePillowImage","title":"CompositePillowImage","text":"<p>               Bases: <code>CompositeImage</code>, <code>_PillowSaveMixin</code></p> <p>Image composed of multiple sub-images.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositePillowImage.get_sub_images","title":"get_sub_images","text":"<pre><code>get_sub_images() -&gt; Sequence[PillowImage]\n</code></pre> <p>Get sequence containing sub-images.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositePillowImage.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image\n</code></pre> <p>Get image composed out of sub-images.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositeView","title":"CompositeView","text":"<p>View composed of multiple Gerber files.</p> <p>Composite view is a generalized concept of a top / bottom / inner layer view extracted from a Gerber project. Usually it does not make sense to render all layers at once, as bottom layers will be simply covered by top layers.</p> <p>This object can be used to render selected Gerber files to single image. It automatically performs alignment and merging of files. Files should be ordered bottom up, topmost layer last, like if adding one layer on top of previous.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositeView.files","title":"files  <code>property</code>","text":"<pre><code>files: tuple[GerberFile, ...]\n</code></pre> <p>Get sequence of Gerber files.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositeView.set_color_map","title":"set_color_map","text":"<pre><code>set_color_map(color_map: COLOR_MAP_T) -&gt; Self\n</code></pre> <p>Set color map for all files.</p>"},{"location":"reference/pygerber/gerber/api/_composite_view.html#pygerber.gerber.api._composite_view.CompositeView.render_with_pillow","title":"render_with_pillow","text":"<pre><code>render_with_pillow(dpmm: int = 20) -&gt; CompositePillowImage\n</code></pre> <p>Render project to raster image using Pillow.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html","title":"_enums","text":""},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums","title":"_enums","text":"<p>The <code>_enums</code> module contains all enumerations used by API.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.OnParserErrorEnum","title":"OnParserErrorEnum","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible actions to take on parser error.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.OnParserErrorEnum.Ignore","title":"Ignore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ignore = 'ignore'\n</code></pre> <p>Ignore parser errors. Errors which occurred will not be signaled. May yield unexpected results for broken files, with missing draw commands or even more significant errors.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.OnParserErrorEnum.Warn","title":"Warn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Warn = 'warn'\n</code></pre> <p>Warn on parser error. Parser will log warning message about what went wrong. Best for supporting wide range of files without silently ignoring errors in code.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.OnParserErrorEnum.Raise","title":"Raise  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Raise = 'raise'\n</code></pre> <p>Raise exception whenever parser encounters error. Will completely break out of parsing process, making it impossible to render slightly malformed files.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum","title":"FileTypeEnum","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible Gerber file types.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.COPPER","title":"COPPER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COPPER = 'COPPER'\n</code></pre> <p>Copper layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.MASK","title":"MASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MASK = 'MASK'\n</code></pre> <p>Mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.PASTE","title":"PASTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PASTE = 'PASTE'\n</code></pre> <p>Paste layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.SILK","title":"SILK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SILK = 'SILK'\n</code></pre> <p>Silk layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.EDGE","title":"EDGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EDGE = 'EDGE'\n</code></pre> <p>Edge layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.PLATED","title":"PLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLATED = 'PLATED'\n</code></pre> <p>Plated layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.NON_PLATED","title":"NON_PLATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NON_PLATED = 'NONPLATED'\n</code></pre> <p>Non-plated layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.PROFILE","title":"PROFILE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PROFILE = 'PROFILE'\n</code></pre> <p>Profile layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.SOLDERMASK","title":"SOLDERMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SOLDERMASK = 'SOLDERMASK'\n</code></pre> <p>Solder mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.LEGEND","title":"LEGEND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEGEND = 'LEGEND'\n</code></pre> <p>Legend layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.COMPONENT","title":"COMPONENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT = 'COMPONENT'\n</code></pre> <p>Component layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.GLUE","title":"GLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GLUE = 'GLUE'\n</code></pre> <p>Glue layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.CARBONMASK","title":"CARBONMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CARBONMASK = 'CARBONMASK'\n</code></pre> <p>Carbon mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.GOLDMASK","title":"GOLDMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GOLDMASK = 'GOLDMASK'\n</code></pre> <p>Gold mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.HEATSINKMASK","title":"HEATSINKMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HEATSINKMASK = 'HEATSINKMASK'\n</code></pre> <p>Heat sink mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.PEELABLEMASK","title":"PEELABLEMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PEELABLEMASK = 'PEELABLEMASK'\n</code></pre> <p>Peelable mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.SILVERMASK","title":"SILVERMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SILVERMASK = 'SILVERMASK'\n</code></pre> <p>Silver mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.TINMASK","title":"TINMASK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TINMASK = 'TINMASK'\n</code></pre> <p>Tin mask layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.DEPTHROUT","title":"DEPTHROUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEPTHROUT = 'DEPTHROUT'\n</code></pre> <p>Depth out layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.VCUT","title":"VCUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VCUT = 'VCUT'\n</code></pre> <p>V cut layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.VIAFILL","title":"VIAFILL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VIAFILL = 'VIAFILL'\n</code></pre> <p>Via fill layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.PADS","title":"PADS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PADS = 'PADS'\n</code></pre> <p>Pads layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.DRILLMAP","title":"DRILLMAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DRILLMAP = 'DRILLMAP'\n</code></pre> <p>Drillmap layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.FABRICATIONDRAWING","title":"FABRICATIONDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FABRICATIONDRAWING = 'FABRICATIONDRAWING'\n</code></pre> <p>FabricationDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.VCUTMAP","title":"VCUTMAP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VCUTMAP = 'VCUTMAP'\n</code></pre> <p>Vcutmap layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.ASSEMBLYDRAWING","title":"ASSEMBLYDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ASSEMBLYDRAWING = 'ASSEMBLYDRAWING'\n</code></pre> <p>AssemblyDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.ARRAYDRAWING","title":"ARRAYDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARRAYDRAWING = 'ARRAYDRAWING'\n</code></pre> <p>ArrayDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.OTHERDRAWING","title":"OTHERDRAWING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OTHERDRAWING = 'OTHERDRAWING'\n</code></pre> <p>OtherDrawing layer</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.OTHER","title":"OTHER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OTHER = 'OTHER'\n</code></pre> <p>Other layer.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.UNDEFINED","title":"UNDEFINED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNDEFINED = 'UNDEFINED'\n</code></pre> <p>Unrecognized layer sentinel.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.INFER_FROM_EXTENSION","title":"INFER_FROM_EXTENSION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER_FROM_EXTENSION = 'INFER_FROM_EXTENSION'\n</code></pre> <p>Represents request to identify layer type from file extension.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.INFER_FROM_ATTRIBUTES","title":"INFER_FROM_ATTRIBUTES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER_FROM_ATTRIBUTES = 'INFER_FROM_ATTRIBUTES'\n</code></pre> <p>Represents request to identify layer type from file attributes.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.INFER","title":"INFER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFER = 'INFER'\n</code></pre> <p>Represents request to identify layer type from file extension or attributes.</p>"},{"location":"reference/pygerber/gerber/api/_enums.html#pygerber.gerber.api._enums.FileTypeEnum.infer_from_attributes","title":"infer_from_attributes  <code>classmethod</code>","text":"<pre><code>infer_from_attributes(\n    file_function: Optional[str] = None,\n) -&gt; FileTypeEnum\n</code></pre> <p>Infer file type from file extension.</p>"},{"location":"reference/pygerber/gerber/api/_errors.html","title":"_errors","text":""},{"location":"reference/pygerber/gerber/api/_errors.html#pygerber.gerber.api._errors","title":"_errors","text":"<p>Errors which may be called by API layer.</p>"},{"location":"reference/pygerber/gerber/api/_errors.html#pygerber.gerber.api._errors.GerberX3APIError","title":"GerberX3APIError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for API errors.</p> <p>Exceptions derived from this exception are exclusively raised in PyGerber's Gerber X3 high level API. This exception can be used in <code>try: ... except GerberX3APIError: ...</code> block to catch all exceptions raised by this API while allowing other exceptions to interrupt execution.</p>"},{"location":"reference/pygerber/gerber/api/_errors.html#pygerber.gerber.api._errors.PathToGerberJobProjectNotDefinedError","title":"PathToGerberJobProjectNotDefinedError","text":"<p>               Bases: <code>GerberX3APIError</code></p> <p>Raised when path to Gerber Job project is not defined.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html","title":"_gerber_file","text":""},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file","title":"_gerber_file","text":"<p>The <code>_gerber_file</code> module contains definition of <code>GerberFile</code> class.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.Units","title":"Units","text":"<p>               Bases: <code>Enum</code></p> <p>The <code>Units</code> enum contains possible Gerber file units.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace","title":"ImageSpace","text":"<p>Container for information about Gerber image space.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.units","title":"units  <code>property</code>","text":"<pre><code>units: Units\n</code></pre> <p>Units of image space.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_x","title":"min_x  <code>property</code>","text":"<pre><code>min_x: float\n</code></pre> <p>Minimum X coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_y","title":"min_y  <code>property</code>","text":"<pre><code>min_y: float\n</code></pre> <p>Minimum Y coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_x","title":"max_x  <code>property</code>","text":"<pre><code>max_x: float\n</code></pre> <p>Maximum X coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_y","title":"max_y  <code>property</code>","text":"<pre><code>max_y: float\n</code></pre> <p>Maximum T coordinate in image in file defined unit.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.dpmm","title":"dpmm  <code>property</code>","text":"<pre><code>dpmm: int\n</code></pre> <p>Resolution of image in dots per millimeter.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_x_mm","title":"min_x_mm","text":"<pre><code>min_x_mm() -&gt; float\n</code></pre> <p>Minimum X coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_y_mm","title":"min_y_mm","text":"<pre><code>min_y_mm() -&gt; float\n</code></pre> <p>Minimum Y coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_x_mm","title":"max_x_mm","text":"<pre><code>max_x_mm() -&gt; float\n</code></pre> <p>Maximum X coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_y_mm","title":"max_y_mm","text":"<pre><code>max_y_mm() -&gt; float\n</code></pre> <p>Maximum Y coordinate of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.width_mm","title":"width_mm","text":"<pre><code>width_mm() -&gt; float\n</code></pre> <p>Width of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.height_mm","title":"height_mm","text":"<pre><code>height_mm() -&gt; float\n</code></pre> <p>Height of image in millimeters.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.center_x_mm","title":"center_x_mm","text":"<pre><code>center_x_mm() -&gt; float\n</code></pre> <p>Center X coordinate of image in millimeters.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.center_y_mm","title":"center_y_mm","text":"<pre><code>center_y_mm() -&gt; float\n</code></pre> <p>Center Y coordinate of image in millimeters.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_x_pixels","title":"min_x_pixels","text":"<pre><code>min_x_pixels() -&gt; int\n</code></pre> <p>Minimum X coordinate of image in pixels.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.min_y_pixels","title":"min_y_pixels","text":"<pre><code>min_y_pixels() -&gt; int\n</code></pre> <p>Minimum Y coordinate of image in pixels.</p> <p>This value can be negative.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_x_pixels","title":"max_x_pixels","text":"<pre><code>max_x_pixels() -&gt; int\n</code></pre> <p>Maximum X coordinate of image in pixels.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ImageSpace.max_y_pixels","title":"max_y_pixels","text":"<pre><code>max_y_pixels() -&gt; int\n</code></pre> <p>Maximum Y coordinate of image in pixels.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.Image","title":"Image","text":"<p>The <code>Image</code> class is a base class for all rendered images returned by <code>GerberFile.render_with_*</code> methods.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.Image.get_image_space","title":"get_image_space","text":"<pre><code>get_image_space() -&gt; ImageSpace\n</code></pre> <p>Get information about image space.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.PillowImage","title":"PillowImage","text":"<p>               Bases: <code>Image</code>, <code>_PillowSaveMixin</code></p> <p>The <code>PillowImage</code> class is a rendered image returned by <code>GerberFile.render_with_pillow</code> method.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.PillowImage.get_image","title":"get_image","text":"<pre><code>get_image() -&gt; Image\n</code></pre> <p>Get image object.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ShapelyImage","title":"ShapelyImage","text":"<p>               Bases: <code>Image</code></p> <p>The <code>ShapelyImage</code> class is a rendered image returned by <code>GerberFile.render_with_shapely</code> method.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ShapelyImage.save","title":"save","text":"<pre><code>save(destination: str | Path | BinaryIO) -&gt; None\n</code></pre> <p>Write rendered image as SVG to location or buffer.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>TextIO</code>-like (files, StringIO) objects are written to directly.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.ShapelyImage.save_svg","title":"save_svg","text":"<pre><code>save_svg(\n    destination: str | Path | BinaryIO, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in SVG format.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to SVG save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile","title":"GerberFile","text":"<p>Generic representation of Gerber file.</p> <p>This objects provides interface for loading and parsing Gerber files.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.source_code","title":"source_code  <code>property</code>","text":"<pre><code>source_code: str\n</code></pre> <p>Gerber source code.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.file_type","title":"file_type  <code>property</code>","text":"<pre><code>file_type: FileTypeEnum\n</code></pre> <p>File type classification.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(\n    file_path: str | Path,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code loaded from file on disk.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>Path to Gerber file on disk.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(\n    source_code: str,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize GerberFile object with Gerber source code from string.</p> <p>Parameters:</p> <ul> <li> <code>source_code</code>               (<code>str</code>)           \u2013            <p>Gerber source code as <code>str</code>object.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>New instance of GerberFile object.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.from_buffer","title":"from_buffer  <code>classmethod</code>","text":"<pre><code>from_buffer(\n    buffer: TextIO,\n    file_type: FileTypeEnum = FileTypeEnum.INFER,\n) -&gt; Self\n</code></pre> <p>Initialize object with Gerber source code from readable buffer.</p> <p>Parameters:</p> <ul> <li> <code>buffer</code>               (<code>TextIO</code>)           \u2013            <p>Readable buffer with Gerber source code.</p> </li> <li> <code>file_type</code>               (<code>FileTypeEnum</code>, default:                   <code>INFER</code> )           \u2013            <p>File type classification, by default FileTypeEnum.INFER</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.set_parser_options","title":"set_parser_options","text":"<pre><code>set_parser_options(**options: Any) -&gt; Self\n</code></pre> <p>Set parser options for this Gerber file.</p> <p>This is a window into advanced parser settings, only reason to use this method should be for advanced user to tweak parser behavior without binging more advanced PyGerber APIs into consideration.</p> <p>Parameters:</p> <ul> <li> <code>**options</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Parser options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.set_compiler_options","title":"set_compiler_options","text":"<pre><code>set_compiler_options(**options: Any) -&gt; Self\n</code></pre> <p>Set compiler options for this Gerber file.</p> <p>This is a window into advanced compiler settings, only reason to use this method should be for advanced user to tweak compiler behavior without binging more advanced PyGerber APIs into consideration.</p> <p>Parameters:</p> <ul> <li> <code>**options</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Compiler options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.set_color_map","title":"set_color_map","text":"<pre><code>set_color_map(color_map: COLOR_MAP_T) -&gt; Self\n</code></pre> <p>Set color map for rendering of this Gerber file.</p> <p>Gerber files themselves do not contain color data. Therefore only way to get colorful image is to explicitly ask rendering backend to apply particular color to image.</p> <p>Parameters:</p> <ul> <li> <code>color_map</code>               (<code>COLOR_MAP_T</code>)           \u2013            <p>Color map to be used for rendering Gerber file. You can use one of two predefined color maps: <code>DEFAULT_COLOR_MAP</code> or <code>DEFAULT_ALPHA_COLOR_MAP</code> or your own. They are both available in <code>pygerber.gerber.api</code> module. In most basic cases there is no need to alter default color map, as it already includes alpha channel thus allows for image stacking.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Returns self for method chaining.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.render_with_pillow","title":"render_with_pillow","text":"<pre><code>render_with_pillow(\n    style: Optional[Style] = None, dpmm: int = 20\n) -&gt; PillowImage\n</code></pre> <p>Render Gerber file to raster image using rendering backend based on Pillow library.</p> <p>Parameters:</p> <ul> <li> <code>style</code>               (<code>Style</code>, default:                   <code>None</code> )           \u2013            <p>Style (color scheme) of rendered image, if value is None, <code>file_type</code> will be used. <code>file_type</code> was one of <code>FileTypeEnum.INFER*</code> attempt will be done to guess <code>file_type</code> based on extension and/or attributes, by default None</p> </li> <li> <code>dpmm</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>Resolution of image in dots per millimeter, by default 20</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.render_with_shapely","title":"render_with_shapely","text":"<pre><code>render_with_shapely(\n    style: Optional[Style] = None,\n) -&gt; ShapelyImage\n</code></pre> <p>Render Gerber file to vector image using rendering backend based on Shapely library.</p> <p>Parameters:</p> <ul> <li> <code>style</code>               (<code>Style</code>, default:                   <code>None</code> )           \u2013            <p>Style (color scheme) of rendered image, if value is None, <code>file_type</code> will be used. <code>file_type</code> was one of <code>FileTypeEnum.INFER*</code> attempt will be done to guess <code>file_type</code> based on extension and/or attributes, by default None Only foreground color is used, as all operations with clear polarity are performing actual boolean difference operations on geometry.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.format","title":"format","text":"<pre><code>format(output: TextIO, options: Optional[Options]) -&gt; None\n</code></pre> <p>Format Gerber code and write it to <code>output</code> stream.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.formats","title":"formats","text":"<pre><code>formats(options: Optional[Options]) -&gt; str\n</code></pre> <p>Format Gerber code and return it as <code>str</code> object.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_file.html#pygerber.gerber.api._gerber_file.GerberFile.sha256","title":"sha256","text":"<pre><code>sha256() -&gt; str\n</code></pre> <p>SHA256 hash of Gerber source code.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html","title":"_gerber_job_file","text":""},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file","title":"_gerber_job_file","text":"<p>The <code>_gerber_job_file</code> module contains definition of <code>GerberJobFile</code> class.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.GenerationSoftware","title":"GenerationSoftware","text":"<p>               Bases: <code>_ModelType</code></p> <p>Generation Software.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.Header","title":"Header","text":"<p>               Bases: <code>_ModelType</code></p> <p>Header.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.ProjectId","title":"ProjectId","text":"<p>               Bases: <code>_ModelType</code></p> <p>Project ID.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.Size","title":"Size","text":"<p>               Bases: <code>_ModelType</code></p> <p>Size.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.GeneralSpecs","title":"GeneralSpecs","text":"<p>               Bases: <code>_ModelType</code></p> <p>General Specs.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.DesignRules","title":"DesignRules","text":"<p>               Bases: <code>_ModelType</code></p> <p>Design Rules.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.FilesAttributes","title":"FilesAttributes","text":"<p>               Bases: <code>_ModelType</code></p> <p>Files Attributes.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.MaterialStackup","title":"MaterialStackup","text":"<p>               Bases: <code>_ModelType</code></p> <p>Material Stackup.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.GerberJobFile","title":"GerberJobFile","text":"<p>               Bases: <code>_ModelType</code></p> <p>Gerber Job File.</p>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.GerberJobFile.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(path: str | Path) -&gt; GerberJobFile\n</code></pre> <p>Load Gerber Job File.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | Path</code>)           \u2013            <p>Path to a <code>.gbrjob</code> file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>GerberJobFile</code>           \u2013            <p>Object representing Gerber Job File.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_gerber_job_file.html#pygerber.gerber.api._gerber_job_file.GerberJobFile.to_project","title":"to_project","text":"<pre><code>to_project(*, path: Optional[Path] = None) -&gt; Project\n</code></pre> <p>Convert Gerber Job File to PyGerber Project object.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Optional[Path]</code>, default:                   <code>None</code> )           \u2013            <p>If GerberJobFile was not loaded from file on disk, you must provide a path to where that file should be, including file name, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Project</code>           \u2013            <p>New project object containing Gerber files from Gerber Job File.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/api/_project.html","title":"_project","text":""},{"location":"reference/pygerber/gerber/api/_project.html#pygerber.gerber.api._project","title":"_project","text":""},{"location":"reference/pygerber/gerber/api/_project.html#pygerber.gerber.api._project.Project","title":"Project","text":"<p>The <code>Project</code> class is a representation of a project composed out of multiple Gerber files composed into multiple views.</p> <p>It is primarily a container object for <code>CompositeView</code>.</p>"},{"location":"reference/pygerber/gerber/api/_project.html#pygerber.gerber.api._project.Project.top","title":"top  <code>property</code>","text":"<pre><code>top: CompositeView\n</code></pre> <p>Get top view.</p>"},{"location":"reference/pygerber/gerber/api/_project.html#pygerber.gerber.api._project.Project.inner","title":"inner  <code>property</code>","text":"<pre><code>inner: tuple[CompositeView, ...]\n</code></pre> <p>Get inner views.</p>"},{"location":"reference/pygerber/gerber/api/_project.html#pygerber.gerber.api._project.Project.bottom","title":"bottom  <code>property</code>","text":"<pre><code>bottom: CompositeView\n</code></pre> <p>Get bottom view.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast","title":"ast","text":"<p>`` package contains all the node classes used to represent the Gerber X3 abstract syntax tree.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor","title":"AstVisitor","text":"<p>The <code>AstVisitor</code> class is a class that acts as a visitor for <code>Node</code> instances according to the visitor design pattern.</p> <p>For more information on this pattern visit: https://refactoring.guru/design-patterns/visitor</p> <p>Logic of walking the AST is implemented within the visitor callbacks, hence be careful when overriding methods of this class, as not calling <code>super().method()</code> may result in subnodes of a node not being visited at all. This applies to nodes like <code>AB</code>, <code>AM</code> etc. Whenever you override a method, look up the implementation from AstVisitor to make sure you will be getting the behavior you intend to get.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_expression","title":"on_expression","text":"<pre><code>on_expression(node: Expression) -&gt; None\n</code></pre> <p>Handle <code>Expression</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_coordinate","title":"on_coordinate","text":"<pre><code>on_coordinate(node: Coordinate) -&gt; None\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_end_of_file","title":"on_end_of_file","text":"<pre><code>on_end_of_file(node: File) -&gt; None\n</code></pre> <p>Handle end of file.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> <p>If return value is True, exception will be re-raised.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstVisitor.on_invalid","title":"on_invalid","text":"<pre><code>on_invalid(node: Invalid) -&gt; Invalid\n</code></pre> <p>Handle invalid node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureNotFoundError","title":"ApertureNotFoundError","text":"<p>               Bases: <code>VisitorError</code></p> <p>Raised when an aperture is not found in the aperture dictionary.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureNotSelectedError","title":"ApertureNotSelectedError","text":"<p>               Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when an aperture is not selected in the state tracking visitor.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.AstError","title":"AstError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all errors raised by AST.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormatNotSetError","title":"CoordinateFormatNotSetError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when coordinate parsing is requested but format was not prior to it.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.DirectADHandlerDispatchNotSupportedError","title":"DirectADHandlerDispatchNotSupportedError","text":"<p>               Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when generic AD class is used to select aperture handler.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PackedCoordinateTooLongError","title":"PackedCoordinateTooLongError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too long for the format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PackedCoordinateTooShortError","title":"PackedCoordinateTooShortError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too short for the format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.SourceNotAvailableError","title":"SourceNotAvailableError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when source is not available for MD5 check.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.VisitorError","title":"VisitorError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all errors raised by visitors.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor","title":"ExpressionEvalVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p><code>ExpressionEvalVisitor</code> class implements a visitor pattern for evaluating value of an mathematical expression.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.evaluate","title":"evaluate","text":"<pre><code>evaluate(node: Expression) -&gt; float\n</code></pre> <p>Evaluate the given expression node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ExpressionEvalVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder","title":"NodeFinder","text":"<p>               Bases: <code>AstVisitor</code></p> <p>The <code>NodeFinder</code> class can quickly find AST nodes by their location in source code.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder.find_node","title":"find_node","text":"<pre><code>find_node(location: OneBasedPosition) -&gt; Optional[Node]\n</code></pre> <p>Find node closest to the given location.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.NodeFinder.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage","title":"ApertureStorage","text":"<p>               Bases: <code>_StateModel</code></p> <p>Storage for apertures.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: Dict[ApertureIdStr, AD] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Aperture storage.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage.blocks","title":"blocks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blocks: Dict[ApertureIdStr, AB] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Block aperture storage.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage.macros","title":"macros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macros: Dict[str, AM] = Field(default_factory=dict)\n</code></pre> <p>Macro definition storage.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage.per_aperture_attributes","title":"per_aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>per_aperture_attributes: Dict[str, Dict[str, TA]] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Attributes assigned to apertures during creation.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ApertureStorage.get_next_free_aperture_code","title":"get_next_free_aperture_code","text":"<pre><code>get_next_free_aperture_code() -&gt; int\n</code></pre> <p>Get next free aperture code.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ArcInterpolation","title":"ArcInterpolation","text":"<p>               Bases: <code>Enum</code></p> <p>Arc interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ArcInterpolation.SINGLE_QUADRANT","title":"SINGLE_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINGLE_QUADRANT = 'SINGLE_QUADRANT'\n</code></pre> <p>Single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ArcInterpolation.MULTI_QUADRANT","title":"MULTI_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MULTI_QUADRANT = 'MULTI_QUADRANT'\n</code></pre> <p>Multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Attributes","title":"Attributes","text":"<p>               Bases: <code>_StateModel</code></p> <p>Attributes Gerber X3 of apertures, objects and file.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Attributes.aperture_attributes","title":"aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aperture_attributes: Dict[str, TA] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TA extended command.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Attributes.file_attributes","title":"file_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_attributes: Dict[str, TF] = Field(default_factory=dict)\n</code></pre> <p>Object attributes created with TF extended command.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Attributes.object_attributes","title":"object_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>object_attributes: Dict[str, TO] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TO extended command.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormat","title":"CoordinateFormat","text":"<p>               Bases: <code>_StateModel</code></p> <p>Coordinate format information.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormat.unpack_x","title":"unpack_x","text":"<pre><code>unpack_x(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormat.unpack_y","title":"unpack_y","text":"<pre><code>unpack_y(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormat.pack_x","title":"pack_x","text":"<pre><code>pack_x(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.CoordinateFormat.pack_y","title":"pack_y","text":"<pre><code>pack_y(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Pack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes","title":"ImageAttributes","text":"<p>               Bases: <code>_StateModel</code></p> <p>Legacy attributes of the image.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: ImagePolarity = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.4)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>The rotation of the image. (Spec reference: 8.1.5)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.a_axis_mirroring","title":"a_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of A axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.b_axis_mirroring","title":"b_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of B axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.a_axis_offset","title":"a_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of A axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.b_axis_offset","title":"b_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of B axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.a_axis_scale","title":"a_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of A axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.b_axis_scale","title":"b_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of B axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.image_name","title":"image_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.3)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.file_name","title":"file_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the file. (Spec reference: 8.1.6)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ImageAttributes.axis_correspondence","title":"axis_correspondence  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>axis_correspondence: AxisCorrespondence = Field(\n    default=AX_BY\n)\n</code></pre> <p>The axis correspondence. (Spec reference: 8.1.2)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PlotMode","title":"PlotMode","text":"<p>               Bases: <code>Enum</code></p> <p>Plot mode of the Gerber file.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PlotMode.LINEAR","title":"LINEAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LINEAR = 'LINEAR'\n</code></pre> <p>Linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PlotMode.ARC","title":"ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARC = 'ARC'\n</code></pre> <p>Clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.PlotMode.CCW_ARC","title":"CCW_ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CCW_ARC = 'CCW_ARC'\n</code></pre> <p>Counter-clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.ProgramStop","title":"ProgramStop","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when M00 or M02 command is encountered.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State","title":"State","text":"<p>               Bases: <code>_StateModel</code></p> <p>Internal state of the compiler.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.unit_mode","title":"unit_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unit_mode: UnitMode = Field(default=METRIC)\n</code></pre> <p>The draw units used for the Gerber file. (Spec reference: 4.2.1)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.coordinate_format","title":"coordinate_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_format: Optional[CoordinateFormat] = Field(\n    default=None\n)\n</code></pre> <p>The coordinate format specification, including the number of decimals. (Spec reference: 4.2.2)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.plot_mode","title":"plot_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plot_mode: PlotMode = Field(default=LINEAR)\n</code></pre> <p>The plot mode. (Spec reference 4.7)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.arc_interpolation","title":"arc_interpolation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arc_interpolation: ArcInterpolation = Field(\n    default=SINGLE_QUADRANT\n)\n</code></pre> <p>The arc interpolation mode. (Spec reference: 4.7.2)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.current_aperture_id","title":"current_aperture_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_aperture_id: Optional[ApertureIdStr] = Field(\n    default=None\n)\n</code></pre> <p>The ID of currently selected aperture. (Spec reference: 8.6)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.current_x","title":"current_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_x: Double = Field(default=0.0)\n</code></pre> <p>Current X coordinate value.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.current_y","title":"current_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_y: Double = Field(default=0.0)\n</code></pre> <p>Current Y coordinate value.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.coordinate_x","title":"coordinate_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_x: Optional[Double] = Field(default=None)\n</code></pre> <p>Last X coordinate value set by CoordinateX node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.coordinate_y","title":"coordinate_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_y: Optional[Double] = Field(default=None)\n</code></pre> <p>Last Y coordinate value set by CoordinateY node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.coordinate_i","title":"coordinate_i  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_i: Optional[Double] = Field(default=None)\n</code></pre> <p>Last I coordinate value set by CoordinateI node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.coordinate_j","title":"coordinate_j  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_j: Optional[Double] = Field(default=None)\n</code></pre> <p>Last J coordinate value set by CoordinateJ node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.transform","title":"transform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transform: Transform = Field(default_factory=Transform)\n</code></pre> <p>Current aperture transformation parameters.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: ApertureStorage = Field(\n    default_factory=ApertureStorage\n)\n</code></pre> <p>Container for different types of apertures.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: Attributes = Field(default_factory=Attributes)\n</code></pre> <p>Container for holding currently active attributes.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.image_attributes","title":"image_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_attributes: ImageAttributes = Field(\n    default_factory=ImageAttributes\n)\n</code></pre> <p>Container for holding legacy image attributes.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.is_region","title":"is_region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_region: bool = Field(default=False)\n</code></pre> <p>Flag indicating if visitor is in region mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.State.current_aperture","title":"current_aperture  <code>property</code>","text":"<pre><code>current_aperture: AD | AB\n</code></pre> <p>Get currently selected aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor","title":"StateTrackingVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p><code>StateTrackingVisitor</code> is a visitor class that tracks the internal state defined in the Gerber X3 specification and modifies it according to Gerber commands.</p> <p>Additionally, it defines a set of higher level callback methods that extend interface of <code>AstVisitor</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.coordinate_x","title":"coordinate_x  <code>property</code>","text":"<pre><code>coordinate_x: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.coordinate_y","title":"coordinate_y  <code>property</code>","text":"<pre><code>coordinate_y: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.coordinate_i","title":"coordinate_i  <code>property</code>","text":"<pre><code>coordinate_i: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.coordinate_j","title":"coordinate_j  <code>property</code>","text":"<pre><code>coordinate_j: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.is_negative","title":"is_negative  <code>property</code>","text":"<pre><code>is_negative: bool\n</code></pre> <p>Check if current aperture is negative.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_draw_cw_arc_sq","title":"on_draw_cw_arc_sq","text":"<pre><code>on_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_draw_ccw_arc_sq","title":"on_draw_ccw_arc_sq","text":"<pre><code>on_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADR</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in_region_draw_cw_arc_sq","title":"on_in_region_draw_cw_arc_sq","text":"<pre><code>on_in_region_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in_region_draw_ccw_arc_sq","title":"on_in_region_draw_ccw_arc_sq","text":"<pre><code>on_in_region_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.StateTrackingVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform","title":"Transform","text":"<p>               Bases: <code>_StateModel</code></p> <p>Aperture transformations.</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: Polarity = Field(default=Dark)\n</code></pre> <p>Aperture polarity set with LP command. (Spec reference: 4.9.2)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform.mirroring","title":"mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mirroring: Mirroring = Field(default=NONE)\n</code></pre> <p>Aperture mirroring set with LM command. (Spec reference: 4.9.3)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>Aperture rotation set with LR command. (Spec reference: 4.9.4)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform.scaling","title":"scaling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scaling: Double = Field(default=1.0)\n</code></pre> <p>Aperture scaling set with LS command. (Spec reference: 4.9.5)</p>"},{"location":"reference/pygerber/gerber/ast/__init__.html#pygerber.gerber.ast.Transform.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Get string tag identifying the transformation.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html","title":"ast_visitor","text":""},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor","title":"ast_visitor","text":"<p>The <code>ast_visitor</code> module contains <code>AstVisitor</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor","title":"AstVisitor","text":"<p>The <code>AstVisitor</code> class is a class that acts as a visitor for <code>Node</code> instances according to the visitor design pattern.</p> <p>For more information on this pattern visit: https://refactoring.guru/design-patterns/visitor</p> <p>Logic of walking the AST is implemented within the visitor callbacks, hence be careful when overriding methods of this class, as not calling <code>super().method()</code> may result in subnodes of a node not being visited at all. This applies to nodes like <code>AB</code>, <code>AM</code> etc. Whenever you override a method, look up the implementation from AstVisitor to make sure you will be getting the behavior you intend to get.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_expression","title":"on_expression","text":"<pre><code>on_expression(node: Expression) -&gt; None\n</code></pre> <p>Handle <code>Expression</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_coordinate","title":"on_coordinate","text":"<pre><code>on_coordinate(node: Coordinate) -&gt; None\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_end_of_file","title":"on_end_of_file","text":"<pre><code>on_end_of_file(node: File) -&gt; None\n</code></pre> <p>Handle end of file.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p> <p>If return value is True, exception will be re-raised.</p>"},{"location":"reference/pygerber/gerber/ast/ast_visitor.html#pygerber.gerber.ast.ast_visitor.AstVisitor.on_invalid","title":"on_invalid","text":"<pre><code>on_invalid(node: Invalid) -&gt; Invalid\n</code></pre> <p>Handle invalid node.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors","title":"errors","text":"<p>The <code>errors</code> module contains errors raised by visitor classes.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.AstError","title":"AstError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all errors raised by AST.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.VisitorError","title":"VisitorError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all errors raised by visitors.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.StateTrackingVisitorError","title":"StateTrackingVisitorError","text":"<p>               Bases: <code>VisitorError</code></p> <p>Base class for all errors raised by state tracking visitors.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.DirectADHandlerDispatchNotSupportedError","title":"DirectADHandlerDispatchNotSupportedError","text":"<p>               Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when generic AD class is used to select aperture handler.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.ApertureNotSelectedError","title":"ApertureNotSelectedError","text":"<p>               Bases: <code>StateTrackingVisitorError</code></p> <p>Raised when an aperture is not selected in the state tracking visitor.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.ApertureNotFoundError","title":"ApertureNotFoundError","text":"<p>               Bases: <code>VisitorError</code></p> <p>Raised when an aperture is not found in the aperture dictionary.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.SourceNotAvailableError","title":"SourceNotAvailableError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when source is not available for MD5 check.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.CoordinateFormatNotSetError","title":"CoordinateFormatNotSetError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when coordinate parsing is requested but format was not prior to it.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.PackedCoordinateTooLongError","title":"PackedCoordinateTooLongError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too long for the format.</p>"},{"location":"reference/pygerber/gerber/ast/errors.html#pygerber.gerber.ast.errors.PackedCoordinateTooShortError","title":"PackedCoordinateTooShortError","text":"<p>               Bases: <code>AstError</code></p> <p>Raised when packed coordinate is too short for the format.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html","title":"expression_eval_visitor","text":""},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor","title":"expression_eval_visitor","text":"<p>The <code>expression_eval_visitor</code> module contains definition of <code>ExpressionEvalVisitor</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor","title":"ExpressionEvalVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p><code>ExpressionEvalVisitor</code> class implements a visitor pattern for evaluating value of an mathematical expression.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.evaluate","title":"evaluate","text":"<pre><code>evaluate(node: Expression) -&gt; float\n</code></pre> <p>Evaluate the given expression node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/expression_eval_visitor.html#pygerber.gerber.ast.expression_eval_visitor.ExpressionEvalVisitor.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html","title":"node_finder","text":""},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder","title":"node_finder","text":"<p>The <code>node_finder</code> module contains <code>NodeFinder</code> class, which can quickly find AST nodes by their location in source code.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.ZeroBasedPosition","title":"ZeroBasedPosition","text":"<p>               Bases: <code>BaseModel</code></p> <p>Zero-based position in source code.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.ZeroBasedPosition.to_one_based","title":"to_one_based","text":"<pre><code>to_one_based() -&gt; OneBasedPosition\n</code></pre> <p>Convert zero-based position to one-based position.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.OneBasedPosition","title":"OneBasedPosition","text":"<p>               Bases: <code>BaseModel</code></p> <p>One-based position in source code.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder","title":"NodeFinder","text":"<p>               Bases: <code>AstVisitor</code></p> <p>The <code>NodeFinder</code> class can quickly find AST nodes by their location in source code.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder.find_node","title":"find_node","text":"<pre><code>find_node(location: OneBasedPosition) -&gt; Optional[Node]\n</code></pre> <p>Find node closest to the given location.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/node_finder.html#pygerber.gerber.ast.node_finder.NodeFinder.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html","title":"state_tracking_visitor","text":""},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor","title":"state_tracking_visitor","text":"<p>The <code>state_tracking_visitor</code> module contains definition of <code>StateTrackingVisitor</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.CoordinateFormat","title":"CoordinateFormat","text":"<p>               Bases: <code>_StateModel</code></p> <p>Coordinate format information.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.CoordinateFormat.unpack_x","title":"unpack_x","text":"<pre><code>unpack_x(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.CoordinateFormat.unpack_y","title":"unpack_y","text":"<pre><code>unpack_y(coordinate: PackedCoordinateStr) -&gt; Double\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.CoordinateFormat.pack_x","title":"pack_x","text":"<pre><code>pack_x(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Unpack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.CoordinateFormat.pack_y","title":"pack_y","text":"<pre><code>pack_y(coordinate: Double) -&gt; PackedCoordinateStr\n</code></pre> <p>Pack X coordinate using the current coordinate format.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Attributes","title":"Attributes","text":"<p>               Bases: <code>_StateModel</code></p> <p>Attributes Gerber X3 of apertures, objects and file.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Attributes.aperture_attributes","title":"aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>aperture_attributes: Dict[str, TA] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TA extended command.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Attributes.file_attributes","title":"file_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_attributes: Dict[str, TF] = Field(default_factory=dict)\n</code></pre> <p>Object attributes created with TF extended command.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Attributes.object_attributes","title":"object_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>object_attributes: Dict[str, TO] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Object attributes created with TO extended command.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes","title":"ImageAttributes","text":"<p>               Bases: <code>_StateModel</code></p> <p>Legacy attributes of the image.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: ImagePolarity = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.4)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>The rotation of the image. (Spec reference: 8.1.5)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.a_axis_mirroring","title":"a_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of A axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.b_axis_mirroring","title":"b_axis_mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_mirroring: int = Field(default=0)\n</code></pre> <p>The mirroring of B axis of the image. (Spec reference: 8.1.7)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.a_axis_offset","title":"a_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of A axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.b_axis_offset","title":"b_axis_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_offset: Optional[Double] = Field(default=0)\n</code></pre> <p>The offset of B axis of the image. (Spec reference: 8.1.8)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.a_axis_scale","title":"a_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of A axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.b_axis_scale","title":"b_axis_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b_axis_scale: Optional[Double] = Field(default=0)\n</code></pre> <p>The scale of B axis of the image. (Spec reference: 8.1.9)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.image_name","title":"image_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the image. (Spec reference: 8.1.3)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.file_name","title":"file_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_name: Optional[str] = Field(default=None)\n</code></pre> <p>The name of the file. (Spec reference: 8.1.6)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ImageAttributes.axis_correspondence","title":"axis_correspondence  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>axis_correspondence: AxisCorrespondence = Field(\n    default=AX_BY\n)\n</code></pre> <p>The axis correspondence. (Spec reference: 8.1.2)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform","title":"Transform","text":"<p>               Bases: <code>_StateModel</code></p> <p>Aperture transformations.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform.polarity","title":"polarity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polarity: Polarity = Field(default=Dark)\n</code></pre> <p>Aperture polarity set with LP command. (Spec reference: 4.9.2)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform.mirroring","title":"mirroring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mirroring: Mirroring = Field(default=NONE)\n</code></pre> <p>Aperture mirroring set with LM command. (Spec reference: 4.9.3)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform.rotation","title":"rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rotation: Double = Field(default=0.0)\n</code></pre> <p>Aperture rotation set with LR command. (Spec reference: 4.9.4)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform.scaling","title":"scaling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scaling: Double = Field(default=1.0)\n</code></pre> <p>Aperture scaling set with LS command. (Spec reference: 4.9.5)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.Transform.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Get string tag identifying the transformation.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.PlotMode","title":"PlotMode","text":"<p>               Bases: <code>Enum</code></p> <p>Plot mode of the Gerber file.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.PlotMode.LINEAR","title":"LINEAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LINEAR = 'LINEAR'\n</code></pre> <p>Linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.PlotMode.ARC","title":"ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARC = 'ARC'\n</code></pre> <p>Clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.PlotMode.CCW_ARC","title":"CCW_ARC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CCW_ARC = 'CCW_ARC'\n</code></pre> <p>Counter-clockwise circular interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ArcInterpolation","title":"ArcInterpolation","text":"<p>               Bases: <code>Enum</code></p> <p>Arc interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ArcInterpolation.SINGLE_QUADRANT","title":"SINGLE_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINGLE_QUADRANT = 'SINGLE_QUADRANT'\n</code></pre> <p>Single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ArcInterpolation.MULTI_QUADRANT","title":"MULTI_QUADRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MULTI_QUADRANT = 'MULTI_QUADRANT'\n</code></pre> <p>Multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage","title":"ApertureStorage","text":"<p>               Bases: <code>_StateModel</code></p> <p>Storage for apertures.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: Dict[ApertureIdStr, AD] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Aperture storage.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage.blocks","title":"blocks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blocks: Dict[ApertureIdStr, AB] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Block aperture storage.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage.macros","title":"macros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macros: Dict[str, AM] = Field(default_factory=dict)\n</code></pre> <p>Macro definition storage.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage.per_aperture_attributes","title":"per_aperture_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>per_aperture_attributes: Dict[str, Dict[str, TA]] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Attributes assigned to apertures during creation.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ApertureStorage.get_next_free_aperture_code","title":"get_next_free_aperture_code","text":"<pre><code>get_next_free_aperture_code() -&gt; int\n</code></pre> <p>Get next free aperture code.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State","title":"State","text":"<p>               Bases: <code>_StateModel</code></p> <p>Internal state of the compiler.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.unit_mode","title":"unit_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unit_mode: UnitMode = Field(default=METRIC)\n</code></pre> <p>The draw units used for the Gerber file. (Spec reference: 4.2.1)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.coordinate_format","title":"coordinate_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_format: Optional[CoordinateFormat] = Field(\n    default=None\n)\n</code></pre> <p>The coordinate format specification, including the number of decimals. (Spec reference: 4.2.2)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.plot_mode","title":"plot_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plot_mode: PlotMode = Field(default=LINEAR)\n</code></pre> <p>The plot mode. (Spec reference 4.7)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.arc_interpolation","title":"arc_interpolation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arc_interpolation: ArcInterpolation = Field(\n    default=SINGLE_QUADRANT\n)\n</code></pre> <p>The arc interpolation mode. (Spec reference: 4.7.2)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.current_aperture_id","title":"current_aperture_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_aperture_id: Optional[ApertureIdStr] = Field(\n    default=None\n)\n</code></pre> <p>The ID of currently selected aperture. (Spec reference: 8.6)</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.current_x","title":"current_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_x: Double = Field(default=0.0)\n</code></pre> <p>Current X coordinate value.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.current_y","title":"current_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_y: Double = Field(default=0.0)\n</code></pre> <p>Current Y coordinate value.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.coordinate_x","title":"coordinate_x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_x: Optional[Double] = Field(default=None)\n</code></pre> <p>Last X coordinate value set by CoordinateX node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.coordinate_y","title":"coordinate_y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_y: Optional[Double] = Field(default=None)\n</code></pre> <p>Last Y coordinate value set by CoordinateY node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.coordinate_i","title":"coordinate_i  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_i: Optional[Double] = Field(default=None)\n</code></pre> <p>Last I coordinate value set by CoordinateI node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.coordinate_j","title":"coordinate_j  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinate_j: Optional[Double] = Field(default=None)\n</code></pre> <p>Last J coordinate value set by CoordinateJ node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.transform","title":"transform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transform: Transform = Field(default_factory=Transform)\n</code></pre> <p>Current aperture transformation parameters.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.apertures","title":"apertures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apertures: ApertureStorage = Field(\n    default_factory=ApertureStorage\n)\n</code></pre> <p>Container for different types of apertures.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: Attributes = Field(default_factory=Attributes)\n</code></pre> <p>Container for holding currently active attributes.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.image_attributes","title":"image_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image_attributes: ImageAttributes = Field(\n    default_factory=ImageAttributes\n)\n</code></pre> <p>Container for holding legacy image attributes.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.is_region","title":"is_region  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_region: bool = Field(default=False)\n</code></pre> <p>Flag indicating if visitor is in region mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.State.current_aperture","title":"current_aperture  <code>property</code>","text":"<pre><code>current_aperture: AD | AB\n</code></pre> <p>Get currently selected aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.ProgramStop","title":"ProgramStop","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when M00 or M02 command is encountered.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor","title":"StateTrackingVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p><code>StateTrackingVisitor</code> is a visitor class that tracks the internal state defined in the Gerber X3 specification and modifies it according to Gerber commands.</p> <p>Additionally, it defines a set of higher level callback methods that extend interface of <code>AstVisitor</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_x","title":"coordinate_x  <code>property</code>","text":"<pre><code>coordinate_x: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_y","title":"coordinate_y  <code>property</code>","text":"<pre><code>coordinate_y: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_i","title":"coordinate_i  <code>property</code>","text":"<pre><code>coordinate_i: Double\n</code></pre> <p>Get X coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.coordinate_j","title":"coordinate_j  <code>property</code>","text":"<pre><code>coordinate_j: Double\n</code></pre> <p>Get Y coordinate.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.is_negative","title":"is_negative  <code>property</code>","text":"<pre><code>is_negative: bool\n</code></pre> <p>Check if current aperture is negative.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ad","title":"on_ad","text":"<pre><code>on_ad(node: AD) -&gt; None\n</code></pre> <p>Handle <code>AD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_am","title":"on_am","text":"<pre><code>on_am(node: AM) -&gt; AM\n</code></pre> <p>Handle <code>AM</code> root node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ta","title":"on_ta","text":"<pre><code>on_ta(node: TA) -&gt; None\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_tf","title":"on_tf","text":"<pre><code>on_tf(node: TF) -&gt; None\n</code></pre> <p>Handle <code>TF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_to","title":"on_to","text":"<pre><code>on_to(node: TO) -&gt; None\n</code></pre> <p>Handle <code>TO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_cw_arc_sq","title":"on_draw_cw_arc_sq","text":"<pre><code>on_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_ccw_arc_sq","title":"on_draw_ccw_arc_sq","text":"<pre><code>on_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADR</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_cw_arc_sq","title":"on_in_region_draw_cw_arc_sq","text":"<pre><code>on_in_region_draw_cw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation single quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_ccw_arc_sq","title":"on_in_region_draw_ccw_arc_sq","text":"<pre><code>on_in_region_draw_ccw_arc_sq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation single quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/ast/state_tracking_visitor.html#pygerber.gerber.ast.state_tracking_visitor.StateTrackingVisitor.on_exception","title":"on_exception","text":"<pre><code>on_exception(node: Node, exception: Exception) -&gt; bool\n</code></pre> <p>Handle exception.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes","title":"nodes","text":"<p><code>nodes</code> package contains all the node container classes generated by the Gerber X3 parser.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AB","title":"AB","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AB.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AB\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AB.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AB]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABclose","title":"ABclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABopen","title":"ABopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ABopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AD","title":"AD","text":"<p>               Bases: <code>Node</code></p> <p>Common base class for all commands adding new apertures.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADC","title":"ADC","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADC.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADC\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADC.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADC]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADmacro","title":"ADmacro","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD macro Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADmacro.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADmacro\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADmacro.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADmacro]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADO","title":"ADO","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD obround Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADO\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADO]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADP","title":"ADP","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD polygon Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADR","title":"ADR","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD rectangle Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ADR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AM","title":"AM","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AM\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AM]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMclose","title":"AMclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMopen","title":"AMopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AMopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SR","title":"SR","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRclose","title":"SRclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen","title":"SRopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.x_repeats","title":"x_repeats  <code>property</code>","text":"<pre><code>x_repeats: int\n</code></pre> <p>Get number of repeats in X axis.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.y_repeats","title":"y_repeats  <code>property</code>","text":"<pre><code>y_repeats: int\n</code></pre> <p>Get number of repeats in Y axis.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.x_delta","title":"x_delta  <code>property</code>","text":"<pre><code>x_delta: float\n</code></pre> <p>Get number of X repeats.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.y_delta","title":"y_delta  <code>property</code>","text":"<pre><code>y_delta: float\n</code></pre> <p>Get number of Y repeats.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SRopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA","title":"TA","text":"<p>               Bases: <code>Node</code></p> <p>Represents TA Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_AperFunction","title":"TA_AperFunction","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .AperFunction Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_AperFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_AperFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_AperFunction\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_AperFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_AperFunction]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_DrillTolerance","title":"TA_DrillTolerance","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .DrillTolerance Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_DrillTolerance.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_DrillTolerance.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_DrillTolerance.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_DrillTolerance]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_FlashText","title":"TA_FlashText","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .FlashText Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_FlashText.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_FlashText.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_FlashText\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_FlashText.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_FlashText]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_UserName","title":"TA_UserName","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TA_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TD","title":"TD","text":"<p>               Bases: <code>Node</code></p> <p>Represents TD Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF","title":"TF","text":"<p>               Bases: <code>Node</code></p> <p>Represents TF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_MD5","title":"TF_MD5","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with MD5 attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_MD5.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_MD5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_MD5\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_MD5.check_source_hash","title":"check_source_hash","text":"<pre><code>check_source_hash() -&gt; bool\n</code></pre> <p>Validate MD5 attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_MD5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_MD5]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_CreationDate","title":"TF_CreationDate","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with creation date attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_CreationDate.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_CreationDate.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_CreationDate\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_CreationDate.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_CreationDate]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FileFunction","title":"TF_FileFunction","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file function attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FileFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FileFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FileFunction\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FileFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FileFunction]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FilePolarity","title":"TF_FilePolarity","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file polarity attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FilePolarity.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FilePolarity.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FilePolarity\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_FilePolarity.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FilePolarity]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_GenerationSoftware","title":"TF_GenerationSoftware","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with generation software attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_GenerationSoftware.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_GenerationSoftware.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_GenerationSoftware.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_GenerationSoftware]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_Part","title":"TF_Part","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with part attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_Part.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_Part.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_Part\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_Part.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_Part]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_ProjectId","title":"TF_ProjectId","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with project id attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_ProjectId.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_ProjectId.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_ProjectId\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_ProjectId.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_ProjectId]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_SameCoordinates","title":"TF_SameCoordinates","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with same coordinates attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_SameCoordinates.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_SameCoordinates.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_SameCoordinates.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_SameCoordinates]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_UserName","title":"TF_UserName","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TF_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO","title":"TO","text":"<p>               Bases: <code>Node</code></p> <p>Represents TO Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_C","title":"TO_C","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .C attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_C.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_C.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_C\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_C.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_C]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMNP","title":"TO_CMNP","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMNP attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMNP.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMNP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMNP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMNP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMNP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_N","title":"TO_N","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .N attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_N.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_N.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_N\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_N.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_N]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_P","title":"TO_P","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .P attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_P.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_P.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_P\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_P.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_P]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CFtp","title":"TO_CFtp","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CFtp attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CFtp.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CFtp.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CFtp\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CFtp.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CFtp]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CHgt","title":"TO_CHgt","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CHgt attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CHgt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CHgt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CHgt\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CHgt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CHgt]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbD","title":"TO_CLbD","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbD attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbN","title":"TO_CLbN","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbN attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CLbN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMfr","title":"TO_CMfr","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMfr attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMfr.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMfr.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMfr\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMfr.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMfr]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMnt","title":"TO_CMnt","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMnt attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMnt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMnt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMnt\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CMnt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMnt]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgD","title":"TO_CPgD","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgD attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgN","title":"TO_CPgN","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgN attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CPgN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CRot","title":"TO_CRot","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CRot attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CRot.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CRot.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CRot\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CRot.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CRot]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CSup","title":"TO_CSup","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CSup attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CSup.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CSup.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CSup\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CSup.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CSup]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CVal","title":"TO_CVal","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CVal attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CVal.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CVal.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CVal\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_CVal.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CVal]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_UserName","title":"TO_UserName","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.TO_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Node","title":"Node","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for all nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Node.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Self\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Node.get_visitor_callback_function","title":"get_visitor_callback_function  <code>abstractmethod</code>","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Self]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Node.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Get the length of token in source code.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo","title":"SourceInfo","text":"<p>               Bases: <code>ModelType</code></p> <p>Source information for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo.line","title":"line","text":"<pre><code>line() -&gt; int\n</code></pre> <p>Get the line number of the start location within the string; the first line is line 1, newlines start new rows.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo.column","title":"column","text":"<pre><code>column() -&gt; int\n</code></pre> <p>Get the column number of the start location within the string; the first column is column 1, newlines reset the column number to 1.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo.end_line","title":"end_line","text":"<pre><code>end_line() -&gt; int\n</code></pre> <p>Get the line number of the end location within the string; the first line is line 1, newlines start new rows.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo.end_column","title":"end_column","text":"<pre><code>end_column() -&gt; int\n</code></pre> <p>Get the column number of the end location within the string; the first column is column 1, newlines reset the column number to 1.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SourceInfo.end_location","title":"end_location","text":"<pre><code>end_location() -&gt; int\n</code></pre> <p>Get the end location of the source.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D01","title":"D01","text":"<p>               Bases: <code>D</code></p> <p>Represents D01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D02","title":"D02","text":"<p>               Bases: <code>D</code></p> <p>Represents D02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D03","title":"D03","text":"<p>               Bases: <code>D</code></p> <p>Represents D03 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D03\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.D03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D03]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Dnn","title":"Dnn","text":"<p>               Bases: <code>D</code></p> <p>Represents DNN Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Dnn.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Dnn\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Dnn.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Dnn]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AperFunction","title":"AperFunction","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing possible AperFunction values.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AxisCorrespondence","title":"AxisCorrespondence","text":"<p>               Bases: <code>Enum</code></p> <p>Represents axis correspondence.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateNotation","title":"CoordinateNotation","text":"<p>               Bases: <code>Enum</code></p> <p>Coordinate mode enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateNotation.ABSOLUTE","title":"ABSOLUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE = 'A'\n</code></pre> <p>Absolute coordinate mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateNotation.INCREMENTAL","title":"INCREMENTAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INCREMENTAL = 'I'\n</code></pre> <p>Incremental coordinate mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.FileFunction","title":"FileFunction","text":"<p>               Bases: <code>Enum</code></p> <p>Enumerate supported file function types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ImagePolarity","title":"ImagePolarity","text":"<p>               Bases: <code>Enum</code></p> <p>Image polarity enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ImagePolarity.POSITIVE","title":"POSITIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POSITIVE = 'POS'\n</code></pre> <p>Positive image polarity.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ImagePolarity.NEGATIVE","title":"NEGATIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NEGATIVE = 'NEG'\n</code></pre> <p>Negative image polarity.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mirroring","title":"Mirroring","text":"<p>               Bases: <code>Enum</code></p> <p>Mirroring enum.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mirroring.kwargs","title":"kwargs  <code>property</code>","text":"<pre><code>kwargs: dict[str, bool]\n</code></pre> <p>Get mirroring kwargs.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mirroring.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(*, x: bool, y: bool) -&gt; Mirroring\n</code></pre> <p>Create new mirroring.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mount","title":"Mount","text":"<p>               Bases: <code>Enum</code></p> <p>Mount type enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Part","title":"Part","text":"<p>               Bases: <code>Enum</code></p> <p>Enumerate supported part types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Polarity","title":"Polarity","text":"<p>               Bases: <code>Enum</code></p> <p>Polarity enum.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.UnitMode","title":"UnitMode","text":"<p>               Bases: <code>Enum</code></p> <p>Unit mode enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.UnitMode.IMPERIAL","title":"IMPERIAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IMPERIAL = 'IN'\n</code></pre> <p>Imperial unit mode. In this mode inches are used to express lengths.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.UnitMode.METRIC","title":"METRIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METRIC = 'MM'\n</code></pre> <p>Metric unit mode. In this mode millimeters are used to express lengths.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Zeros","title":"Zeros","text":"<p>               Bases: <code>Enum</code></p> <p>Zeros enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Zeros.SKIP_LEADING","title":"SKIP_LEADING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_LEADING = 'L'\n</code></pre> <p>Skip leading zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Zeros.SKIP_TRAILING","title":"SKIP_TRAILING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_TRAILING = 'T'\n</code></pre> <p>Skip trailing zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Zeros.SKIP_LEADING_IMPLIED","title":"SKIP_LEADING_IMPLIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_LEADING_IMPLIED = ''\n</code></pre> <p>Implied skip leading zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.File","title":"File","text":"<p>               Bases: <code>Node</code></p> <p>The <code>File</code> node class represents a root of Gerber AST.</p> <p>It will be invalid for a File node to contain another File node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.File.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; File\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.File.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], File]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G","title":"G","text":"<p>               Bases: <code>Node</code></p> <p>Base class for all Gxx nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it should include * at the end.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the G code was directly followed by a D code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G01","title":"G01","text":"<p>               Bases: <code>G</code></p> <p>Represents G01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G02","title":"G02","text":"<p>               Bases: <code>G</code></p> <p>Represents G02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G03","title":"G03","text":"<p>               Bases: <code>G</code></p> <p>Represents G03 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G03\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G03]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G04","title":"G04","text":"<p>               Bases: <code>G</code></p> <p>Represents G04 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G04.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G04\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G04.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G04]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G36","title":"G36","text":"<p>               Bases: <code>G</code></p> <p>Represents G36 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G36.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G36\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G36.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G36]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G37","title":"G37","text":"<p>               Bases: <code>G</code></p> <p>Represents G37 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G37.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G37\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G37.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G37]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G54","title":"G54","text":"<p>               Bases: <code>G</code></p> <p>Represents G54 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G54.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G54\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G54.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G54]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G55","title":"G55","text":"<p>               Bases: <code>G</code></p> <p>Represents G55 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G55.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G55\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G55.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G55]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G70","title":"G70","text":"<p>               Bases: <code>G</code></p> <p>Represents G70 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G70.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G70\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G70.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G70]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G71","title":"G71","text":"<p>               Bases: <code>G</code></p> <p>Represents G71 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G71.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G71\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G71.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G71]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G74","title":"G74","text":"<p>               Bases: <code>G</code></p> <p>Represents G74 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G74.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G74\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G74.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G74]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G75","title":"G75","text":"<p>               Bases: <code>G</code></p> <p>Represents G75 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G75.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G75\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G75.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G75]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G90","title":"G90","text":"<p>               Bases: <code>G</code></p> <p>Represents G90 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G90.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G90\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G90.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G90]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G91","title":"G91","text":"<p>               Bases: <code>G</code></p> <p>Represents G91 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G91.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G91\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.G91.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G91]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Invalid","title":"Invalid","text":"<p>               Bases: <code>Node</code></p> <p>Represents G04 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Invalid.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Invalid\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Invalid.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Invalid]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LM","title":"LM","text":"<p>               Bases: <code>Node</code></p> <p>Represents LM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LM\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LM]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LN","title":"LN","text":"<p>               Bases: <code>Node</code></p> <p>Represents LN Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LP","title":"LP","text":"<p>               Bases: <code>Node</code></p> <p>Represents LP Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LR","title":"LR","text":"<p>               Bases: <code>Node</code></p> <p>Represents LR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LS","title":"LS","text":"<p>               Bases: <code>Node</code></p> <p>Represents LS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.LS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M00","title":"M00","text":"<p>               Bases: <code>Node</code></p> <p>Represents M00 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M00.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M00\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M00.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M00]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M01","title":"M01","text":"<p>               Bases: <code>Node</code></p> <p>Represents M01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M02","title":"M02","text":"<p>               Bases: <code>Node</code></p> <p>Represents M02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.M02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Assignment","title":"Assignment","text":"<p>               Bases: <code>Node</code></p> <p>Represents math expression variable.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Assignment.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Assignment\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Assignment.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Assignment]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Constant","title":"Constant","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression constant.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Constant.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Constant\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Constant.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Constant]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Expression","title":"Expression","text":"<p>               Bases: <code>Node</code></p> <p>Represents math expression expression.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Add","title":"Add","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression addition operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Add.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Add\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Add.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Add]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Div","title":"Div","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression division operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Div.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Div\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Div.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Div]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mul","title":"Mul","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression multiplication operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mul.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Mul\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Mul.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Mul]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Sub","title":"Sub","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression subtraction operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Sub.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Sub\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Sub.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Sub]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Neg","title":"Neg","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression neg.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Neg.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Neg\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Neg.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Neg]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Pos","title":"Pos","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression pos.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Pos.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Pos\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Pos.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Pos]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Parenthesis","title":"Parenthesis","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression expression.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Parenthesis.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Parenthesis\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Parenthesis.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Parenthesis]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Point","title":"Point","text":"<p>               Bases: <code>Node</code></p> <p>Represents math point point.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Point.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Point\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Point.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Point]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Variable","title":"Variable","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression variable.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Variable.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Variable\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Variable.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Variable]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Coordinate","title":"Coordinate","text":"<p>               Bases: <code>Node</code></p> <p>Represents Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateI","title":"CoordinateI","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents I Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateI\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateI]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateJ","title":"CoordinateJ","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents J Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateJ.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateJ\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateJ.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateJ]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateX","title":"CoordinateX","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents X Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateX.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateX\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateX.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateX]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateY","title":"CoordinateY","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents Y Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateY.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateY\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.CoordinateY.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateY]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code0","title":"Code0","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 0 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code0.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code0\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code0.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code0]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code1","title":"Code1","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 1 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code1.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code1\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code1.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code1]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code2","title":"Code2","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 2 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code2.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code2\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code2.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code2]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code4","title":"Code4","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 4 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code4.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code4\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code4.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code4]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code5","title":"Code5","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 5 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code5\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code5]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code6","title":"Code6","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 6 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code6.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code6\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code6.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code6]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code7","title":"Code7","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 7 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code7.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code7\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code7.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code7]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code20","title":"Code20","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 20 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code20.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code20\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code20.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code20]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code21","title":"Code21","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 21 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code21.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code21\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code21.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code21]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code22","title":"Code22","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 22 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code22.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code22\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.Code22.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code22]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AS","title":"AS","text":"<p>               Bases: <code>Node</code></p> <p>Represents AS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.AS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.FS","title":"FS","text":"<p>               Bases: <code>Node</code></p> <p>Represents FS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.FS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; FS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.FS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], FS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IN","title":"IN","text":"<p>               Bases: <code>Node</code></p> <p>Represents IN Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IP","title":"IP","text":"<p>               Bases: <code>Node</code></p> <p>Represents IP Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IR","title":"IR","text":"<p>               Bases: <code>Node</code></p> <p>Represents IR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.IR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MI","title":"MI","text":"<p>               Bases: <code>Node</code></p> <p>Represents MI Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MI\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MI]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MO","title":"MO","text":"<p>               Bases: <code>Node</code></p> <p>Represents MO Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MO\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.MO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MO]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.OF","title":"OF","text":"<p>               Bases: <code>Node</code></p> <p>Represents OF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.OF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; OF\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.OF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], OF]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SF","title":"SF","text":"<p>               Bases: <code>Node</code></p> <p>Represents SF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SF\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.SF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SF]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.ApertureIdStr","title":"ApertureIdStr","text":"<p>               Bases: <code>str</code></p> <p>String subclass representing aperture ID.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/__init__.html#pygerber.gerber.ast.nodes.PackedCoordinateStr","title":"PackedCoordinateStr","text":"<p>               Bases: <code>str</code></p> <p>String subclass representing packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html","title":"base","text":""},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base","title":"base","text":"<p><code>nodes.base</code> contains definition of <code>node</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo","title":"SourceInfo","text":"<p>               Bases: <code>ModelType</code></p> <p>Source information for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo.line","title":"line","text":"<pre><code>line() -&gt; int\n</code></pre> <p>Get the line number of the start location within the string; the first line is line 1, newlines start new rows.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo.column","title":"column","text":"<pre><code>column() -&gt; int\n</code></pre> <p>Get the column number of the start location within the string; the first column is column 1, newlines reset the column number to 1.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo.end_line","title":"end_line","text":"<pre><code>end_line() -&gt; int\n</code></pre> <p>Get the line number of the end location within the string; the first line is line 1, newlines start new rows.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo.end_column","title":"end_column","text":"<pre><code>end_column() -&gt; int\n</code></pre> <p>Get the column number of the end location within the string; the first column is column 1, newlines reset the column number to 1.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.SourceInfo.end_location","title":"end_location","text":"<pre><code>end_location() -&gt; int\n</code></pre> <p>Get the end location of the source.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.Node","title":"Node","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for all nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.Node.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Self\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.Node.get_visitor_callback_function","title":"get_visitor_callback_function  <code>abstractmethod</code>","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Self]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/base.html#pygerber.gerber.ast.nodes.base.Node.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Get the length of token in source code.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html","title":"enums","text":""},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums","title":"enums","text":"<p>The <code>enums</code> module contains definition of enums used in Gerber X3 AST nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Zeros","title":"Zeros","text":"<p>               Bases: <code>Enum</code></p> <p>Zeros enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Zeros.SKIP_LEADING","title":"SKIP_LEADING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_LEADING = 'L'\n</code></pre> <p>Skip leading zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Zeros.SKIP_TRAILING","title":"SKIP_TRAILING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_TRAILING = 'T'\n</code></pre> <p>Skip trailing zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Zeros.SKIP_LEADING_IMPLIED","title":"SKIP_LEADING_IMPLIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP_LEADING_IMPLIED = ''\n</code></pre> <p>Implied skip leading zeros mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.CoordinateNotation","title":"CoordinateNotation","text":"<p>               Bases: <code>Enum</code></p> <p>Coordinate mode enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.CoordinateNotation.ABSOLUTE","title":"ABSOLUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE = 'A'\n</code></pre> <p>Absolute coordinate mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.CoordinateNotation.INCREMENTAL","title":"INCREMENTAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INCREMENTAL = 'I'\n</code></pre> <p>Incremental coordinate mode.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.AperFunction","title":"AperFunction","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing possible AperFunction values.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Part","title":"Part","text":"<p>               Bases: <code>Enum</code></p> <p>Enumerate supported part types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.FileFunction","title":"FileFunction","text":"<p>               Bases: <code>Enum</code></p> <p>Enumerate supported file function types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Mount","title":"Mount","text":"<p>               Bases: <code>Enum</code></p> <p>Mount type enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Mirroring","title":"Mirroring","text":"<p>               Bases: <code>Enum</code></p> <p>Mirroring enum.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Mirroring.kwargs","title":"kwargs  <code>property</code>","text":"<pre><code>kwargs: dict[str, bool]\n</code></pre> <p>Get mirroring kwargs.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Mirroring.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(*, x: bool, y: bool) -&gt; Mirroring\n</code></pre> <p>Create new mirroring.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.Polarity","title":"Polarity","text":"<p>               Bases: <code>Enum</code></p> <p>Polarity enum.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.AxisCorrespondence","title":"AxisCorrespondence","text":"<p>               Bases: <code>Enum</code></p> <p>Represents axis correspondence.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.UnitMode","title":"UnitMode","text":"<p>               Bases: <code>Enum</code></p> <p>Unit mode enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.UnitMode.IMPERIAL","title":"IMPERIAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IMPERIAL = 'IN'\n</code></pre> <p>Imperial unit mode. In this mode inches are used to express lengths.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.UnitMode.METRIC","title":"METRIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>METRIC = 'MM'\n</code></pre> <p>Metric unit mode. In this mode millimeters are used to express lengths.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.ImagePolarity","title":"ImagePolarity","text":"<p>               Bases: <code>Enum</code></p> <p>Image polarity enumeration.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.ImagePolarity.POSITIVE","title":"POSITIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POSITIVE = 'POS'\n</code></pre> <p>Positive image polarity.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/enums.html#pygerber.gerber.ast.nodes.enums.ImagePolarity.NEGATIVE","title":"NEGATIVE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NEGATIVE = 'NEG'\n</code></pre> <p>Negative image polarity.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/file.html","title":"file","text":""},{"location":"reference/pygerber/gerber/ast/nodes/file.html#pygerber.gerber.ast.nodes.file","title":"file","text":"<p><code>nodes.file</code> module contains definition of <code>File</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/file.html#pygerber.gerber.ast.nodes.file.File","title":"File","text":"<p>               Bases: <code>Node</code></p> <p>The <code>File</code> node class represents a root of Gerber AST.</p> <p>It will be invalid for a File node to contain another File node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/file.html#pygerber.gerber.ast.nodes.file.File.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; File\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/file.html#pygerber.gerber.ast.nodes.file.File.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], File]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/invalid.html","title":"invalid","text":""},{"location":"reference/pygerber/gerber/ast/nodes/invalid.html#pygerber.gerber.ast.nodes.invalid","title":"invalid","text":"<p><code>pygerber.nodes.g_codes.G04</code> module contains definition of <code>G04</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/invalid.html#pygerber.gerber.ast.nodes.invalid.Invalid","title":"Invalid","text":"<p>               Bases: <code>Node</code></p> <p>Represents G04 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/invalid.html#pygerber.gerber.ast.nodes.invalid.Invalid.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Invalid\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/invalid.html#pygerber.gerber.ast.nodes.invalid.Invalid.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Invalid]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/model.html","title":"model","text":""},{"location":"reference/pygerber/gerber/ast/nodes/model.html#pygerber.gerber.ast.nodes.model","title":"model","text":"<p><code>model</code> module definition of common base class for all <code>VirtualMachine</code> related model types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/model.html#pygerber.gerber.ast.nodes.model.ModelType","title":"ModelType","text":"<p>               Bases: <code>BaseModel</code></p> <p>Common base class for all VM model types.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/model.html#pygerber.gerber.ast.nodes.model.ModelType.__class_qualname__","title":"__class_qualname__  <code>property</code>","text":"<pre><code>__class_qualname__: str\n</code></pre> <p>Name of class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/types.html","title":"types","text":""},{"location":"reference/pygerber/gerber/ast/nodes/types.html#pygerber.gerber.ast.nodes.types","title":"types","text":"<p>Basic types for AST nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/types.html#pygerber.gerber.ast.nodes.types.ApertureIdStr","title":"ApertureIdStr","text":"<p>               Bases: <code>str</code></p> <p>String subclass representing aperture ID.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/types.html#pygerber.gerber.ast.nodes.types.PackedCoordinateStr","title":"PackedCoordinateStr","text":"<p>               Bases: <code>str</code></p> <p>String subclass representing packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AB.html","title":"AB","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AB.html#pygerber.gerber.ast.nodes.aperture.AB","title":"AB","text":"<p><code>pygerber.nodes.aperture.AB</code> module contains definition of <code>AB</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AB.html#pygerber.gerber.ast.nodes.aperture.AB.AB","title":"AB","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AB.html#pygerber.gerber.ast.nodes.aperture.AB.AB.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AB\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AB.html#pygerber.gerber.ast.nodes.aperture.AB.AB.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AB]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABclose.html","title":"ABclose","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABclose.html#pygerber.gerber.ast.nodes.aperture.ABclose","title":"ABclose","text":"<p><code>pygerber.nodes.aperture.ABclose</code> module contains definition of <code>ABclose</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABclose.html#pygerber.gerber.ast.nodes.aperture.ABclose.ABclose","title":"ABclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABclose.html#pygerber.gerber.ast.nodes.aperture.ABclose.ABclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABclose.html#pygerber.gerber.ast.nodes.aperture.ABclose.ABclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABopen.html","title":"ABopen","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABopen.html#pygerber.gerber.ast.nodes.aperture.ABopen","title":"ABopen","text":"<p><code>pygerber.nodes.aperture.ABopen</code> module contains definition of <code>ABopen</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABopen.html#pygerber.gerber.ast.nodes.aperture.ABopen.ABopen","title":"ABopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents AB Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABopen.html#pygerber.gerber.ast.nodes.aperture.ABopen.ABopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ABopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ABopen.html#pygerber.gerber.ast.nodes.aperture.ABopen.ABopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ABopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AD.html","title":"AD","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AD.html#pygerber.gerber.ast.nodes.aperture.AD","title":"AD","text":"<p><code>pygerber.nodes.aperture.ADC</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AD.html#pygerber.gerber.ast.nodes.aperture.AD.AD","title":"AD","text":"<p>               Bases: <code>Node</code></p> <p>Common base class for all commands adding new apertures.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADC.html","title":"ADC","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADC.html#pygerber.gerber.ast.nodes.aperture.ADC","title":"ADC","text":"<p><code>pygerber.nodes.aperture.ADC</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADC.html#pygerber.gerber.ast.nodes.aperture.ADC.ADC","title":"ADC","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADC.html#pygerber.gerber.ast.nodes.aperture.ADC.ADC.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADC\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADC.html#pygerber.gerber.ast.nodes.aperture.ADC.ADC.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADC]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADO.html","title":"ADO","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADO.html#pygerber.gerber.ast.nodes.aperture.ADO","title":"ADO","text":"<p><code>pygerber.nodes.aperture.ADO</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADO.html#pygerber.gerber.ast.nodes.aperture.ADO.ADO","title":"ADO","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD obround Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADO.html#pygerber.gerber.ast.nodes.aperture.ADO.ADO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADO\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADO.html#pygerber.gerber.ast.nodes.aperture.ADO.ADO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADO]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADP.html","title":"ADP","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADP.html#pygerber.gerber.ast.nodes.aperture.ADP","title":"ADP","text":"<p><code>pygerber.nodes.aperture.ADP</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADP.html#pygerber.gerber.ast.nodes.aperture.ADP.ADP","title":"ADP","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD polygon Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADP.html#pygerber.gerber.ast.nodes.aperture.ADP.ADP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADP.html#pygerber.gerber.ast.nodes.aperture.ADP.ADP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADR.html","title":"ADR","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADR.html#pygerber.gerber.ast.nodes.aperture.ADR","title":"ADR","text":"<p><code>pygerber.nodes.aperture.ADP</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADR.html#pygerber.gerber.ast.nodes.aperture.ADR.ADR","title":"ADR","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD rectangle Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADR.html#pygerber.gerber.ast.nodes.aperture.ADR.ADR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADR.html#pygerber.gerber.ast.nodes.aperture.ADR.ADR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADmacro.html","title":"ADmacro","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADmacro.html#pygerber.gerber.ast.nodes.aperture.ADmacro","title":"ADmacro","text":"<p><code>pygerber.nodes.aperture.ADmacro</code> module contains definition of <code>AD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADmacro.html#pygerber.gerber.ast.nodes.aperture.ADmacro.ADmacro","title":"ADmacro","text":"<p>               Bases: <code>AD</code></p> <p>Represents AD macro Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADmacro.html#pygerber.gerber.ast.nodes.aperture.ADmacro.ADmacro.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; ADmacro\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/ADmacro.html#pygerber.gerber.ast.nodes.aperture.ADmacro.ADmacro.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], ADmacro]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AM.html","title":"AM","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AM.html#pygerber.gerber.ast.nodes.aperture.AM","title":"AM","text":"<p><code>pygerber.nodes.aperture.AM</code> module contains definition of <code>AM</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AM.html#pygerber.gerber.ast.nodes.aperture.AM.AM","title":"AM","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AM.html#pygerber.gerber.ast.nodes.aperture.AM.AM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AM\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AM.html#pygerber.gerber.ast.nodes.aperture.AM.AM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AM]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMclose.html","title":"AMclose","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMclose.html#pygerber.gerber.ast.nodes.aperture.AMclose","title":"AMclose","text":"<p><code>pygerber.nodes.aperture.AMclose</code> module contains definition of <code>AMclose</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMclose.html#pygerber.gerber.ast.nodes.aperture.AMclose.AMclose","title":"AMclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMclose.html#pygerber.gerber.ast.nodes.aperture.AMclose.AMclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMclose.html#pygerber.gerber.ast.nodes.aperture.AMclose.AMclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMopen.html","title":"AMopen","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMopen.html#pygerber.gerber.ast.nodes.aperture.AMopen","title":"AMopen","text":"<p><code>pygerber.nodes.aperture.AMopen</code> module contains definition of <code>AMopen</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMopen.html#pygerber.gerber.ast.nodes.aperture.AMopen.AMopen","title":"AMopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents AM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMopen.html#pygerber.gerber.ast.nodes.aperture.AMopen.AMopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AMopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/AMopen.html#pygerber.gerber.ast.nodes.aperture.AMopen.AMopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AMopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR.html","title":"SR","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR.html#pygerber.gerber.ast.nodes.aperture.SR","title":"SR","text":"<p><code>pygerber.nodes.aperture.SR</code> module contains definition of <code>SR</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR.html#pygerber.gerber.ast.nodes.aperture.SR.SR","title":"SR","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR.html#pygerber.gerber.ast.nodes.aperture.SR.SR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR.html#pygerber.gerber.ast.nodes.aperture.SR.SR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_close.html","title":"SR_close","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_close.html#pygerber.gerber.ast.nodes.aperture.SR_close","title":"SR_close","text":"<p><code>pygerber.nodes.aperture.SR_close</code> module contains definition of <code>SRclose</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_close.html#pygerber.gerber.ast.nodes.aperture.SR_close.SRclose","title":"SRclose","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_close.html#pygerber.gerber.ast.nodes.aperture.SR_close.SRclose.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRclose\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_close.html#pygerber.gerber.ast.nodes.aperture.SR_close.SRclose.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRclose]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html","title":"SR_open","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open","title":"SR_open","text":"<p><code>pygerber.nodes.aperture.SR_open</code> module contains definition of <code>SRopen</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen","title":"SRopen","text":"<p>               Bases: <code>Node</code></p> <p>Represents SR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.x_repeats","title":"x_repeats  <code>property</code>","text":"<pre><code>x_repeats: int\n</code></pre> <p>Get number of repeats in X axis.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.y_repeats","title":"y_repeats  <code>property</code>","text":"<pre><code>y_repeats: int\n</code></pre> <p>Get number of repeats in Y axis.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.x_delta","title":"x_delta  <code>property</code>","text":"<pre><code>x_delta: float\n</code></pre> <p>Get number of X repeats.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.y_delta","title":"y_delta  <code>property</code>","text":"<pre><code>y_delta: float\n</code></pre> <p>Get number of Y repeats.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SRopen\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/SR_open.html#pygerber.gerber.ast.nodes.aperture.SR_open.SRopen.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SRopen]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/aperture/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/aperture/__init__.html#pygerber.gerber.ast.nodes.aperture","title":"aperture","text":"<p><code>nodes.aperture</code> package contains all the aperture definition related nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html","title":"TA","text":""},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA","title":"TA","text":"<p><code>pygerber.nodes.attribute.TA</code> module contains definition of <code>TA</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA","title":"TA","text":"<p>               Bases: <code>Node</code></p> <p>Represents TA Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_UserName","title":"TA_UserName","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_AperFunction","title":"TA_AperFunction","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .AperFunction Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_AperFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_AperFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_AperFunction\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_AperFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_AperFunction]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_DrillTolerance","title":"TA_DrillTolerance","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .DrillTolerance Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_DrillTolerance.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_DrillTolerance.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_DrillTolerance.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_DrillTolerance]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_FlashText","title":"TA_FlashText","text":"<p>               Bases: <code>TA</code></p> <p>Represents TA .FlashText Gerber attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_FlashText.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_FlashText.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TA_FlashText\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TA.html#pygerber.gerber.ast.nodes.attribute.TA.TA_FlashText.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TA_FlashText]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TD.html","title":"TD","text":""},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TD.html#pygerber.gerber.ast.nodes.attribute.TD","title":"TD","text":"<p><code>pygerber.nodes.attribute.TD</code> module contains definition of <code>TD</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TD.html#pygerber.gerber.ast.nodes.attribute.TD.TD","title":"TD","text":"<p>               Bases: <code>Node</code></p> <p>Represents TD Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TD.html#pygerber.gerber.ast.nodes.attribute.TD.TD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TD.html#pygerber.gerber.ast.nodes.attribute.TD.TD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html","title":"TF","text":""},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF","title":"TF","text":"<p><code>pygerber.nodes.attributes.TF</code> module contains definition of <code>TF</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF","title":"TF","text":"<p>               Bases: <code>Node</code></p> <p>Represents TF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_UserName","title":"TF_UserName","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_Part","title":"TF_Part","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with part attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_Part.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_Part.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_Part\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_Part.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_Part]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FileFunction","title":"TF_FileFunction","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file function attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FileFunction.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FileFunction.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FileFunction\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FileFunction.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FileFunction]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FilePolarity","title":"TF_FilePolarity","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with file polarity attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FilePolarity.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FilePolarity.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_FilePolarity\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_FilePolarity.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_FilePolarity]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_SameCoordinates","title":"TF_SameCoordinates","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with same coordinates attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_SameCoordinates.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_SameCoordinates.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_SameCoordinates.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_SameCoordinates]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_CreationDate","title":"TF_CreationDate","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with creation date attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_CreationDate.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_CreationDate.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_CreationDate\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_CreationDate.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_CreationDate]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_GenerationSoftware","title":"TF_GenerationSoftware","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with generation software attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_GenerationSoftware.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_GenerationSoftware.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_GenerationSoftware.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_GenerationSoftware]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_ProjectId","title":"TF_ProjectId","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with project id attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_ProjectId.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_ProjectId.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_ProjectId\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_ProjectId.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_ProjectId]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_MD5","title":"TF_MD5","text":"<p>               Bases: <code>TF</code></p> <p>Represents TF Gerber extended command with MD5 attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_MD5.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_MD5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TF_MD5\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_MD5.check_source_hash","title":"check_source_hash","text":"<pre><code>check_source_hash() -&gt; bool\n</code></pre> <p>Validate MD5 attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TF.html#pygerber.gerber.ast.nodes.attribute.TF.TF_MD5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TF_MD5]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html","title":"TO","text":""},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO","title":"TO","text":"<p><code>pygerber.nodes.d_codes.TO</code> module contains definition of <code>TO</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO","title":"TO","text":"<p>               Bases: <code>Node</code></p> <p>Represents TO Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_UserName","title":"TO_UserName","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with user name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_UserName.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_UserName.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_UserName\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_UserName.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_UserName]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_N","title":"TO_N","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .N attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_N.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_N.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_N\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_N.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_N]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_P","title":"TO_P","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .P attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_P.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_P.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_P\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_P.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_P]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_C","title":"TO_C","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .C attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_C.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_C.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_C\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_C.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_C]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CRot","title":"TO_CRot","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CRot attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CRot.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CRot.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CRot\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CRot.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CRot]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMfr","title":"TO_CMfr","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMfr attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMfr.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMfr.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMfr\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMfr.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMfr]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMNP","title":"TO_CMNP","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMNP attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMNP.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMNP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMNP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMNP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMNP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CVal","title":"TO_CVal","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CVal attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CVal.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CVal.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CVal\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CVal.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CVal]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMnt","title":"TO_CMnt","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CMnt attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMnt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMnt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CMnt\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CMnt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CMnt]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CFtp","title":"TO_CFtp","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CFtp attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CFtp.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CFtp.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CFtp\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CFtp.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CFtp]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgN","title":"TO_CPgN","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgN attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgD","title":"TO_CPgD","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CPgD attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CPgD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CPgD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CPgD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CHgt","title":"TO_CHgt","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CHgt attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CHgt.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CHgt.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CHgt\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CHgt.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CHgt]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbN","title":"TO_CLbN","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbN attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbN.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbD","title":"TO_CLbD","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CLbD attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbD.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbD.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CLbD\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CLbD.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CLbD]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CSup","title":"TO_CSup","text":"<p>               Bases: <code>TO</code></p> <p>Represents TO Gerber extended command with .CSup attribute.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CSup.attribute_name","title":"attribute_name  <code>property</code>","text":"<pre><code>attribute_name: str\n</code></pre> <p>Get attribute name.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CSup.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; TO_CSup\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/TO.html#pygerber.gerber.ast.nodes.attribute.TO.TO_CSup.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], TO_CSup]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/attribute/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/attribute/__init__.html#pygerber.gerber.ast.nodes.attribute","title":"attribute","text":"<p><code>nodes.attribute</code> package contains all the attribute related nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D.html","title":"D","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D.html#pygerber.gerber.ast.nodes.d_codes.D","title":"D","text":"<p><code>pygerber.nodes.d_codes.DNN</code> module contains definition of <code>DNN</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D.html#pygerber.gerber.ast.nodes.d_codes.D.D","title":"D","text":"<p>               Bases: <code>Node</code></p> <p>Base class for all Dxx commands.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D.html#pygerber.gerber.ast.nodes.d_codes.D.D.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it is not prefixed with G code with no asterisk.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the D code was directly prefixed by such redundant G code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D01.html","title":"D01","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D01.html#pygerber.gerber.ast.nodes.d_codes.D01","title":"D01","text":"<p><code>pygerber.nodes.d_codes.D01</code> module contains definition of <code>D01</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D01.html#pygerber.gerber.ast.nodes.d_codes.D01.D01","title":"D01","text":"<p>               Bases: <code>D</code></p> <p>Represents D01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D01.html#pygerber.gerber.ast.nodes.d_codes.D01.D01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D01.html#pygerber.gerber.ast.nodes.d_codes.D01.D01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D02.html","title":"D02","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D02.html#pygerber.gerber.ast.nodes.d_codes.D02","title":"D02","text":"<p><code>pygerber.nodes.d_codes.D02</code> module contains definition of <code>D02</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D02.html#pygerber.gerber.ast.nodes.d_codes.D02.D02","title":"D02","text":"<p>               Bases: <code>D</code></p> <p>Represents D02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D02.html#pygerber.gerber.ast.nodes.d_codes.D02.D02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D02.html#pygerber.gerber.ast.nodes.d_codes.D02.D02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D03.html","title":"D03","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D03.html#pygerber.gerber.ast.nodes.d_codes.D03","title":"D03","text":"<p><code>pygerber.nodes.d_codes.D03</code> module contains definition of <code>D03</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D03.html#pygerber.gerber.ast.nodes.d_codes.D03.D03","title":"D03","text":"<p>               Bases: <code>D</code></p> <p>Represents D03 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D03.html#pygerber.gerber.ast.nodes.d_codes.D03.D03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; D03\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/D03.html#pygerber.gerber.ast.nodes.d_codes.D03.D03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], D03]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/Dnn.html","title":"Dnn","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/Dnn.html#pygerber.gerber.ast.nodes.d_codes.Dnn","title":"Dnn","text":"<p><code>pygerber.nodes.d_codes.DNN</code> module contains definition of <code>DNN</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/Dnn.html#pygerber.gerber.ast.nodes.d_codes.Dnn.Dnn","title":"Dnn","text":"<p>               Bases: <code>D</code></p> <p>Represents DNN Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/Dnn.html#pygerber.gerber.ast.nodes.d_codes.Dnn.Dnn.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Dnn\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/Dnn.html#pygerber.gerber.ast.nodes.d_codes.Dnn.Dnn.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Dnn]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/d_codes/__init__.html#pygerber.gerber.ast.nodes.d_codes","title":"d_codes","text":"<p><code>nodes.d_codes</code> package contains all the D-code nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G.html","title":"G","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G.html#pygerber.gerber.ast.nodes.g_codes.G","title":"G","text":"<p><code>pygerber.nodes.g_codes.G01</code> module contains definition of <code>G01</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G.html#pygerber.gerber.ast.nodes.g_codes.G.G","title":"G","text":"<p>               Bases: <code>Node</code></p> <p>Base class for all Gxx nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G.html#pygerber.gerber.ast.nodes.g_codes.G.G.is_standalone","title":"is_standalone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_standalone: bool = Field(default=True)\n</code></pre> <p>Flag indicating if the node is standalone, ie. it should include * at the end.</p> <p>This is necessary as some legacy Gerber files use redundant G codes to prefix pretty much every D01/D02/D03 command. To make it possible to keep the original layout of the file, we need to know if the G code was directly followed by a D code.</p> <p>Example:</p> <pre><code>G70D02*\nG54D16*\nG01X5440Y5650D03*\nG01X5440Y6900D03*\nG01X6800Y2200D03*\nG01X5550Y2200D03*\nG01X17720Y6860D03*\nG01X17720Y5610D03*\n</code></pre>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G01.html","title":"G01","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G01.html#pygerber.gerber.ast.nodes.g_codes.G01","title":"G01","text":"<p><code>pygerber.nodes.g_codes.G01</code> module contains definition of <code>G01</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G01.html#pygerber.gerber.ast.nodes.g_codes.G01.G01","title":"G01","text":"<p>               Bases: <code>G</code></p> <p>Represents G01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G01.html#pygerber.gerber.ast.nodes.g_codes.G01.G01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G01.html#pygerber.gerber.ast.nodes.g_codes.G01.G01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G02.html","title":"G02","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G02.html#pygerber.gerber.ast.nodes.g_codes.G02","title":"G02","text":"<p><code>pygerber.nodes.g_codes.G02</code> module contains definition of <code>G02</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G02.html#pygerber.gerber.ast.nodes.g_codes.G02.G02","title":"G02","text":"<p>               Bases: <code>G</code></p> <p>Represents G02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G02.html#pygerber.gerber.ast.nodes.g_codes.G02.G02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G02.html#pygerber.gerber.ast.nodes.g_codes.G02.G02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G03.html","title":"G03","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G03.html#pygerber.gerber.ast.nodes.g_codes.G03","title":"G03","text":"<p><code>pygerber.nodes.g_codes.G03</code> module contains definition of <code>G03</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G03.html#pygerber.gerber.ast.nodes.g_codes.G03.G03","title":"G03","text":"<p>               Bases: <code>G</code></p> <p>Represents G03 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G03.html#pygerber.gerber.ast.nodes.g_codes.G03.G03.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G03\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G03.html#pygerber.gerber.ast.nodes.g_codes.G03.G03.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G03]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G04.html","title":"G04","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G04.html#pygerber.gerber.ast.nodes.g_codes.G04","title":"G04","text":"<p><code>pygerber.nodes.g_codes.G04</code> module contains definition of <code>G04</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G04.html#pygerber.gerber.ast.nodes.g_codes.G04.G04","title":"G04","text":"<p>               Bases: <code>G</code></p> <p>Represents G04 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G04.html#pygerber.gerber.ast.nodes.g_codes.G04.G04.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G04\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G04.html#pygerber.gerber.ast.nodes.g_codes.G04.G04.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G04]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G36.html","title":"G36","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G36.html#pygerber.gerber.ast.nodes.g_codes.G36","title":"G36","text":"<p><code>pygerber.nodes.g_codes.G36</code> module contains definition of <code>G36</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G36.html#pygerber.gerber.ast.nodes.g_codes.G36.G36","title":"G36","text":"<p>               Bases: <code>G</code></p> <p>Represents G36 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G36.html#pygerber.gerber.ast.nodes.g_codes.G36.G36.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G36\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G36.html#pygerber.gerber.ast.nodes.g_codes.G36.G36.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G36]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G37.html","title":"G37","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G37.html#pygerber.gerber.ast.nodes.g_codes.G37","title":"G37","text":"<p><code>pygerber.nodes.g_codes.G37</code> module contains definition of <code>G37</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G37.html#pygerber.gerber.ast.nodes.g_codes.G37.G37","title":"G37","text":"<p>               Bases: <code>G</code></p> <p>Represents G37 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G37.html#pygerber.gerber.ast.nodes.g_codes.G37.G37.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G37\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G37.html#pygerber.gerber.ast.nodes.g_codes.G37.G37.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G37]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G54.html","title":"G54","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G54.html#pygerber.gerber.ast.nodes.g_codes.G54","title":"G54","text":"<p><code>pygerber.nodes.g_codes.G54</code> module contains definition of <code>G54</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G54.html#pygerber.gerber.ast.nodes.g_codes.G54.G54","title":"G54","text":"<p>               Bases: <code>G</code></p> <p>Represents G54 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G54.html#pygerber.gerber.ast.nodes.g_codes.G54.G54.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G54\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G54.html#pygerber.gerber.ast.nodes.g_codes.G54.G54.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G54]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G55.html","title":"G55","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G55.html#pygerber.gerber.ast.nodes.g_codes.G55","title":"G55","text":"<p><code>pygerber.nodes.g_codes.G55</code> module contains definition of <code>G55</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G55.html#pygerber.gerber.ast.nodes.g_codes.G55.G55","title":"G55","text":"<p>               Bases: <code>G</code></p> <p>Represents G55 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G55.html#pygerber.gerber.ast.nodes.g_codes.G55.G55.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G55\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G55.html#pygerber.gerber.ast.nodes.g_codes.G55.G55.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G55]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G70.html","title":"G70","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G70.html#pygerber.gerber.ast.nodes.g_codes.G70","title":"G70","text":"<p><code>pygerber.nodes.g_codes.G70</code> module contains definition of <code>G70</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G70.html#pygerber.gerber.ast.nodes.g_codes.G70.G70","title":"G70","text":"<p>               Bases: <code>G</code></p> <p>Represents G70 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G70.html#pygerber.gerber.ast.nodes.g_codes.G70.G70.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G70\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G70.html#pygerber.gerber.ast.nodes.g_codes.G70.G70.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G70]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G71.html","title":"G71","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G71.html#pygerber.gerber.ast.nodes.g_codes.G71","title":"G71","text":"<p><code>pygerber.nodes.g_codes.G71</code> module contains definition of <code>G71</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G71.html#pygerber.gerber.ast.nodes.g_codes.G71.G71","title":"G71","text":"<p>               Bases: <code>G</code></p> <p>Represents G71 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G71.html#pygerber.gerber.ast.nodes.g_codes.G71.G71.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G71\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G71.html#pygerber.gerber.ast.nodes.g_codes.G71.G71.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G71]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G74.html","title":"G74","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G74.html#pygerber.gerber.ast.nodes.g_codes.G74","title":"G74","text":"<p><code>pygerber.nodes.g_codes.G74</code> module contains definition of <code>G74</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G74.html#pygerber.gerber.ast.nodes.g_codes.G74.G74","title":"G74","text":"<p>               Bases: <code>G</code></p> <p>Represents G74 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G74.html#pygerber.gerber.ast.nodes.g_codes.G74.G74.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G74\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G74.html#pygerber.gerber.ast.nodes.g_codes.G74.G74.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G74]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G75.html","title":"G75","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G75.html#pygerber.gerber.ast.nodes.g_codes.G75","title":"G75","text":"<p><code>pygerber.nodes.g_codes.G75</code> module contains definition of <code>G75</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G75.html#pygerber.gerber.ast.nodes.g_codes.G75.G75","title":"G75","text":"<p>               Bases: <code>G</code></p> <p>Represents G75 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G75.html#pygerber.gerber.ast.nodes.g_codes.G75.G75.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G75\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G75.html#pygerber.gerber.ast.nodes.g_codes.G75.G75.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G75]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G90.html","title":"G90","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G90.html#pygerber.gerber.ast.nodes.g_codes.G90","title":"G90","text":"<p><code>pygerber.nodes.g_codes.G90</code> module contains definition of <code>G90</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G90.html#pygerber.gerber.ast.nodes.g_codes.G90.G90","title":"G90","text":"<p>               Bases: <code>G</code></p> <p>Represents G90 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G90.html#pygerber.gerber.ast.nodes.g_codes.G90.G90.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G90\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G90.html#pygerber.gerber.ast.nodes.g_codes.G90.G90.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G90]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G91.html","title":"G91","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G91.html#pygerber.gerber.ast.nodes.g_codes.G91","title":"G91","text":"<p><code>pygerber.nodes.g_codes.G91</code> module contains definition of <code>G91</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G91.html#pygerber.gerber.ast.nodes.g_codes.G91.G91","title":"G91","text":"<p>               Bases: <code>G</code></p> <p>Represents G91 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G91.html#pygerber.gerber.ast.nodes.g_codes.G91.G91.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; G91\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/G91.html#pygerber.gerber.ast.nodes.g_codes.G91.G91.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], G91]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/g_codes/__init__.html#pygerber.gerber.ast.nodes.g_codes","title":"g_codes","text":"<p><code>nodes.g_codes</code> package contains all the G-code nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LM.html","title":"LM","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/LM.html#pygerber.gerber.ast.nodes.load.LM","title":"LM","text":"<p><code>pygerber.nodes.load.LM</code> module contains definition of <code>LM</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LM.html#pygerber.gerber.ast.nodes.load.LM.LM","title":"LM","text":"<p>               Bases: <code>Node</code></p> <p>Represents LM Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LM.html#pygerber.gerber.ast.nodes.load.LM.LM.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LM\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LM.html#pygerber.gerber.ast.nodes.load.LM.LM.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LM]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LN.html","title":"LN","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/LN.html#pygerber.gerber.ast.nodes.load.LN","title":"LN","text":"<p><code>pygerber.nodes.load.LN</code> module contains definition of <code>LN</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LN.html#pygerber.gerber.ast.nodes.load.LN.LN","title":"LN","text":"<p>               Bases: <code>Node</code></p> <p>Represents LN Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LN.html#pygerber.gerber.ast.nodes.load.LN.LN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LN.html#pygerber.gerber.ast.nodes.load.LN.LN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LP.html","title":"LP","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/LP.html#pygerber.gerber.ast.nodes.load.LP","title":"LP","text":"<p><code>pygerber.nodes.load.LP</code> module contains definition of <code>LP</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LP.html#pygerber.gerber.ast.nodes.load.LP.LP","title":"LP","text":"<p>               Bases: <code>Node</code></p> <p>Represents LP Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LP.html#pygerber.gerber.ast.nodes.load.LP.LP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LP.html#pygerber.gerber.ast.nodes.load.LP.LP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LR.html","title":"LR","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/LR.html#pygerber.gerber.ast.nodes.load.LR","title":"LR","text":"<p><code>pygerber.nodes.load.LR</code> module contains definition of <code>LR</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LR.html#pygerber.gerber.ast.nodes.load.LR.LR","title":"LR","text":"<p>               Bases: <code>Node</code></p> <p>Represents LR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LR.html#pygerber.gerber.ast.nodes.load.LR.LR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LR.html#pygerber.gerber.ast.nodes.load.LR.LR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LS.html","title":"LS","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/LS.html#pygerber.gerber.ast.nodes.load.LS","title":"LS","text":"<p><code>pygerber.nodes.load.LS</code> module contains definition of <code>LS</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LS.html#pygerber.gerber.ast.nodes.load.LS.LS","title":"LS","text":"<p>               Bases: <code>Node</code></p> <p>Represents LS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LS.html#pygerber.gerber.ast.nodes.load.LS.LS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; LS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/LS.html#pygerber.gerber.ast.nodes.load.LS.LS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], LS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/load/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/load/__init__.html#pygerber.gerber.ast.nodes.load","title":"load","text":"<p><code>nodes.load</code> package contains all the load_ nodes."},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M00.html","title":"M00","text":""},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M00.html#pygerber.gerber.ast.nodes.m_codes.M00","title":"M00","text":"<p><code>pygerber.nodes.m_codes.M00</code> module contains definition of <code>M00</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M00.html#pygerber.gerber.ast.nodes.m_codes.M00.M00","title":"M00","text":"<p>               Bases: <code>Node</code></p> <p>Represents M00 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M00.html#pygerber.gerber.ast.nodes.m_codes.M00.M00.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M00\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M00.html#pygerber.gerber.ast.nodes.m_codes.M00.M00.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M00]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M01.html","title":"M01","text":""},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M01.html#pygerber.gerber.ast.nodes.m_codes.M01","title":"M01","text":"<p><code>pygerber.nodes.m_codes.M01</code> module contains definition of <code>M01</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M01.html#pygerber.gerber.ast.nodes.m_codes.M01.M01","title":"M01","text":"<p>               Bases: <code>Node</code></p> <p>Represents M01 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M01.html#pygerber.gerber.ast.nodes.m_codes.M01.M01.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M01\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M01.html#pygerber.gerber.ast.nodes.m_codes.M01.M01.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M01]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M02.html","title":"M02","text":""},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M02.html#pygerber.gerber.ast.nodes.m_codes.M02","title":"M02","text":"<p><code>pygerber.nodes.m_codes.M02</code> module contains definition of <code>M02</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M02.html#pygerber.gerber.ast.nodes.m_codes.M02.M02","title":"M02","text":"<p>               Bases: <code>Node</code></p> <p>Represents M02 Gerber command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M02.html#pygerber.gerber.ast.nodes.m_codes.M02.M02.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; M02\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/M02.html#pygerber.gerber.ast.nodes.m_codes.M02.M02.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], M02]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/m_codes/__init__.html#pygerber.gerber.ast.nodes.m_codes","title":"m_codes","text":"<p><code>nodes.m_codes</code> package contains all the M-code nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/__init__.html#pygerber.gerber.ast.nodes.math","title":"math","text":"<p><code>nodes.math</code> package contains all the macro math expression nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/assignment.html","title":"assignment","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/assignment.html#pygerber.gerber.ast.nodes.math.assignment","title":"assignment","text":"<p><code>pygerber.nodes.math.assignment</code> module contains definition of <code>Assignment</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/assignment.html#pygerber.gerber.ast.nodes.math.assignment.Assignment","title":"Assignment","text":"<p>               Bases: <code>Node</code></p> <p>Represents math expression variable.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/assignment.html#pygerber.gerber.ast.nodes.math.assignment.Assignment.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Assignment\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/assignment.html#pygerber.gerber.ast.nodes.math.assignment.Assignment.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Assignment]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/constant.html","title":"constant","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/constant.html#pygerber.gerber.ast.nodes.math.constant","title":"constant","text":"<p><code>pygerber.nodes.math.constant</code> module contains definition of <code>Constant</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/constant.html#pygerber.gerber.ast.nodes.math.constant.Constant","title":"Constant","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression constant.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/constant.html#pygerber.gerber.ast.nodes.math.constant.Constant.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Constant\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/constant.html#pygerber.gerber.ast.nodes.math.constant.Constant.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Constant]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/expression.html","title":"expression","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/expression.html#pygerber.gerber.ast.nodes.math.expression","title":"expression","text":"<p><code>pygerber.nodes.math.expression</code> module contains definition of <code>Expression</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/expression.html#pygerber.gerber.ast.nodes.math.expression.Expression","title":"Expression","text":"<p>               Bases: <code>Node</code></p> <p>Represents math expression expression.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/parenthesis.html","title":"parenthesis","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/parenthesis.html#pygerber.gerber.ast.nodes.math.parenthesis","title":"parenthesis","text":"<p><code>pygerber.nodes.math.parenthesis</code> module contains definition of <code>Parenthesis</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/parenthesis.html#pygerber.gerber.ast.nodes.math.parenthesis.Parenthesis","title":"Parenthesis","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression expression.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/parenthesis.html#pygerber.gerber.ast.nodes.math.parenthesis.Parenthesis.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Parenthesis\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/parenthesis.html#pygerber.gerber.ast.nodes.math.parenthesis.Parenthesis.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Parenthesis]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/point.html","title":"point","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/point.html#pygerber.gerber.ast.nodes.math.point","title":"point","text":"<p><code>pygerber.nodes.math.point</code> module contains definition of <code>Point</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/point.html#pygerber.gerber.ast.nodes.math.point.Point","title":"Point","text":"<p>               Bases: <code>Node</code></p> <p>Represents math point point.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/point.html#pygerber.gerber.ast.nodes.math.point.Point.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Point\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/point.html#pygerber.gerber.ast.nodes.math.point.Point.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Point]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/variable.html","title":"variable","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/variable.html#pygerber.gerber.ast.nodes.math.variable","title":"variable","text":"<p><code>pygerber.nodes.math.variable</code> module contains definition of <code>Variable</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/variable.html#pygerber.gerber.ast.nodes.math.variable.Variable","title":"Variable","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression variable.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/variable.html#pygerber.gerber.ast.nodes.math.variable.Variable.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Variable\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/variable.html#pygerber.gerber.ast.nodes.math.variable.Variable.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Variable]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/__init__.html#pygerber.gerber.ast.nodes.math.operators","title":"operators","text":"<p><code>nodes.math.operators</code> package contains all the macro math expression operators.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/__init__.html#pygerber.gerber.ast.nodes.math.operators.binary","title":"binary","text":"<p><code>nodes.math.operators.binary</code> package contains all the macro math expression binary operators.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/add.html","title":"add","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/add.html#pygerber.gerber.ast.nodes.math.operators.binary.add","title":"add","text":"<p><code>pygerber.nodes.math.operators.binary.Add</code> module contains definition of <code>Add</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/add.html#pygerber.gerber.ast.nodes.math.operators.binary.add.Add","title":"Add","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression addition operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/add.html#pygerber.gerber.ast.nodes.math.operators.binary.add.Add.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Add\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/add.html#pygerber.gerber.ast.nodes.math.operators.binary.add.Add.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Add]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/div.html","title":"div","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/div.html#pygerber.gerber.ast.nodes.math.operators.binary.div","title":"div","text":"<p><code>pygerber.nodes.math.operators.binary.Div</code> module contains definition of <code>Div</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/div.html#pygerber.gerber.ast.nodes.math.operators.binary.div.Div","title":"Div","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression division operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/div.html#pygerber.gerber.ast.nodes.math.operators.binary.div.Div.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Div\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/div.html#pygerber.gerber.ast.nodes.math.operators.binary.div.Div.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Div]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/mul.html","title":"mul","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/mul.html#pygerber.gerber.ast.nodes.math.operators.binary.mul","title":"mul","text":"<p><code>pygerber.nodes.math.operators.binary.Mul</code> module contains definition of <code>Mul</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/mul.html#pygerber.gerber.ast.nodes.math.operators.binary.mul.Mul","title":"Mul","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression multiplication operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/mul.html#pygerber.gerber.ast.nodes.math.operators.binary.mul.Mul.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Mul\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/mul.html#pygerber.gerber.ast.nodes.math.operators.binary.mul.Mul.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Mul]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/sub.html","title":"sub","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/sub.html#pygerber.gerber.ast.nodes.math.operators.binary.sub","title":"sub","text":"<p><code>pygerber.nodes.math.operators.binary.Sub</code> module contains definition of <code>Sub</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/sub.html#pygerber.gerber.ast.nodes.math.operators.binary.sub.Sub","title":"Sub","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression subtraction operator.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/sub.html#pygerber.gerber.ast.nodes.math.operators.binary.sub.Sub.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Sub\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/binary/sub.html#pygerber.gerber.ast.nodes.math.operators.binary.sub.Sub.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Sub]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/__init__.html#pygerber.gerber.ast.nodes.math.operators.unary","title":"unary","text":"<p><code>nodes.math.operators.unary</code> package contains all the macro math expression unary operators.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/neg.html","title":"neg","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/neg.html#pygerber.gerber.ast.nodes.math.operators.unary.neg","title":"neg","text":"<p><code>pygerber.nodes.math.operators.unary.Neg</code> module contains definition of <code>Neg</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/neg.html#pygerber.gerber.ast.nodes.math.operators.unary.neg.Neg","title":"Neg","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression neg.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/neg.html#pygerber.gerber.ast.nodes.math.operators.unary.neg.Neg.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Neg\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/neg.html#pygerber.gerber.ast.nodes.math.operators.unary.neg.Neg.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Neg]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/pos.html","title":"pos","text":""},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/pos.html#pygerber.gerber.ast.nodes.math.operators.unary.pos","title":"pos","text":"<p><code>pygerber.nodes.math.operators.unary.Pos</code> module contains definition of <code>Pos</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/pos.html#pygerber.gerber.ast.nodes.math.operators.unary.pos.Pos","title":"Pos","text":"<p>               Bases: <code>Expression</code></p> <p>Represents math expression pos.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/pos.html#pygerber.gerber.ast.nodes.math.operators.unary.pos.Pos.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Pos\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/math/operators/unary/pos.html#pygerber.gerber.ast.nodes.math.operators.unary.pos.Pos.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Pos]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateI.html","title":"CoordinateI","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateI.html#pygerber.gerber.ast.nodes.other.CoordinateI","title":"CoordinateI","text":"<p><code>pygerber.nodes.other.CoordinateI</code> module contains definition of <code>CoordinateI</code> class which represent Ixx...x packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateI.html#pygerber.gerber.ast.nodes.other.CoordinateI.CoordinateI","title":"CoordinateI","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents I Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateI.html#pygerber.gerber.ast.nodes.other.CoordinateI.CoordinateI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateI\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateI.html#pygerber.gerber.ast.nodes.other.CoordinateI.CoordinateI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateI]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateJ.html","title":"CoordinateJ","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateJ.html#pygerber.gerber.ast.nodes.other.CoordinateJ","title":"CoordinateJ","text":"<p><code>pygerber.nodes.other.CoordinateJ</code> module contains definition of <code>CoordinateJ</code> class which represent Jxx...x packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateJ.html#pygerber.gerber.ast.nodes.other.CoordinateJ.CoordinateJ","title":"CoordinateJ","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents J Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateJ.html#pygerber.gerber.ast.nodes.other.CoordinateJ.CoordinateJ.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateJ\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateJ.html#pygerber.gerber.ast.nodes.other.CoordinateJ.CoordinateJ.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateJ]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateX.html","title":"CoordinateX","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateX.html#pygerber.gerber.ast.nodes.other.CoordinateX","title":"CoordinateX","text":"<p><code>pygerber.nodes.other.CoordinateX</code> module contains definition of <code>CoordinateX</code> class which represent Xxx...x packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateX.html#pygerber.gerber.ast.nodes.other.CoordinateX.CoordinateX","title":"CoordinateX","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents X Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateX.html#pygerber.gerber.ast.nodes.other.CoordinateX.CoordinateX.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateX\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateX.html#pygerber.gerber.ast.nodes.other.CoordinateX.CoordinateX.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateX]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateY.html","title":"CoordinateY","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateY.html#pygerber.gerber.ast.nodes.other.CoordinateY","title":"CoordinateY","text":"<p><code>pygerber.nodes.other.CoordinateY</code> module contains definition of <code>CoordinateY</code> class which represent Yxx...x packed coordinates.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateY.html#pygerber.gerber.ast.nodes.other.CoordinateY.CoordinateY","title":"CoordinateY","text":"<p>               Bases: <code>Coordinate</code></p> <p>Represents Y Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateY.html#pygerber.gerber.ast.nodes.other.CoordinateY.CoordinateY.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; CoordinateY\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/CoordinateY.html#pygerber.gerber.ast.nodes.other.CoordinateY.CoordinateY.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], CoordinateY]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/__init__.html#pygerber.gerber.ast.nodes.other","title":"other","text":"<p><code>nodes.other</code> package contains all the nodes that don't fit in other categories.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/coordinate.html","title":"coordinate","text":""},{"location":"reference/pygerber/gerber/ast/nodes/other/coordinate.html#pygerber.gerber.ast.nodes.other.coordinate","title":"coordinate","text":"<p><code>pygerber.nodes.other.Coordinate</code> module contains definition of <code>Coordinate</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/other/coordinate.html#pygerber.gerber.ast.nodes.other.coordinate.Coordinate","title":"Coordinate","text":"<p>               Bases: <code>Node</code></p> <p>Represents Coordinate node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/__init__.html#pygerber.gerber.ast.nodes.primitives","title":"primitives","text":"<p>The <code>primitives</code> package contains all the macro primitives nodes.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_0.html","title":"code_0","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_0.html#pygerber.gerber.ast.nodes.primitives.code_0","title":"code_0","text":"<p><code>pygerber.nodes.primitives.Code0</code> module contains definition of <code>Code0</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_0.html#pygerber.gerber.ast.nodes.primitives.code_0.Code0","title":"Code0","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 0 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_0.html#pygerber.gerber.ast.nodes.primitives.code_0.Code0.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code0\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_0.html#pygerber.gerber.ast.nodes.primitives.code_0.Code0.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code0]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_1.html","title":"code_1","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_1.html#pygerber.gerber.ast.nodes.primitives.code_1","title":"code_1","text":"<p><code>pygerber.nodes.primitives.Code1</code> module contains definition of <code>Code1</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_1.html#pygerber.gerber.ast.nodes.primitives.code_1.Code1","title":"Code1","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 1 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_1.html#pygerber.gerber.ast.nodes.primitives.code_1.Code1.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code1\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_1.html#pygerber.gerber.ast.nodes.primitives.code_1.Code1.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code1]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_2.html","title":"code_2","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_2.html#pygerber.gerber.ast.nodes.primitives.code_2","title":"code_2","text":"<p><code>pygerber.nodes.primitives.Code2</code> module contains definition of <code>Code2</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_2.html#pygerber.gerber.ast.nodes.primitives.code_2.Code2","title":"Code2","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 2 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_2.html#pygerber.gerber.ast.nodes.primitives.code_2.Code2.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code2\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_2.html#pygerber.gerber.ast.nodes.primitives.code_2.Code2.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code2]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_20.html","title":"code_20","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_20.html#pygerber.gerber.ast.nodes.primitives.code_20","title":"code_20","text":"<p><code>pygerber.nodes.primitives.Code20</code> module contains definition of <code>Code20</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_20.html#pygerber.gerber.ast.nodes.primitives.code_20.Code20","title":"Code20","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 20 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_20.html#pygerber.gerber.ast.nodes.primitives.code_20.Code20.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code20\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_20.html#pygerber.gerber.ast.nodes.primitives.code_20.Code20.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code20]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_21.html","title":"code_21","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_21.html#pygerber.gerber.ast.nodes.primitives.code_21","title":"code_21","text":"<p><code>pygerber.nodes.primitives.Code21</code> module contains definition of <code>Code21</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_21.html#pygerber.gerber.ast.nodes.primitives.code_21.Code21","title":"Code21","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 21 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_21.html#pygerber.gerber.ast.nodes.primitives.code_21.Code21.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code21\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_21.html#pygerber.gerber.ast.nodes.primitives.code_21.Code21.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code21]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_22.html","title":"code_22","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_22.html#pygerber.gerber.ast.nodes.primitives.code_22","title":"code_22","text":"<p><code>pygerber.nodes.primitives.Code22</code> module contains definition of <code>Code22</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_22.html#pygerber.gerber.ast.nodes.primitives.code_22.Code22","title":"Code22","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 22 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_22.html#pygerber.gerber.ast.nodes.primitives.code_22.Code22.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code22\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_22.html#pygerber.gerber.ast.nodes.primitives.code_22.Code22.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code22]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_4.html","title":"code_4","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_4.html#pygerber.gerber.ast.nodes.primitives.code_4","title":"code_4","text":"<p><code>pygerber.nodes.primitives.Code4</code> module contains definition of <code>Code4</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_4.html#pygerber.gerber.ast.nodes.primitives.code_4.Code4","title":"Code4","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 4 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_4.html#pygerber.gerber.ast.nodes.primitives.code_4.Code4.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code4\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_4.html#pygerber.gerber.ast.nodes.primitives.code_4.Code4.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code4]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_5.html","title":"code_5","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_5.html#pygerber.gerber.ast.nodes.primitives.code_5","title":"code_5","text":"<p><code>pygerber.nodes.primitives.Code5</code> module contains definition of <code>Code5</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_5.html#pygerber.gerber.ast.nodes.primitives.code_5.Code5","title":"Code5","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 5 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_5.html#pygerber.gerber.ast.nodes.primitives.code_5.Code5.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code5\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_5.html#pygerber.gerber.ast.nodes.primitives.code_5.Code5.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code5]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_6.html","title":"code_6","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_6.html#pygerber.gerber.ast.nodes.primitives.code_6","title":"code_6","text":"<p><code>pygerber.nodes.primitives.Code6</code> module contains definition of <code>Code6</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_6.html#pygerber.gerber.ast.nodes.primitives.code_6.Code6","title":"Code6","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 6 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_6.html#pygerber.gerber.ast.nodes.primitives.code_6.Code6.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code6\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_6.html#pygerber.gerber.ast.nodes.primitives.code_6.Code6.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code6]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_7.html","title":"code_7","text":""},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_7.html#pygerber.gerber.ast.nodes.primitives.code_7","title":"code_7","text":"<p><code>pygerber.nodes.primitives.Code7</code> module contains definition of <code>Code7</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_7.html#pygerber.gerber.ast.nodes.primitives.code_7.Code7","title":"Code7","text":"<p>               Bases: <code>Node</code></p> <p>Represents code 7 macro primitive.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_7.html#pygerber.gerber.ast.nodes.primitives.code_7.Code7.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; Code7\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/primitives/code_7.html#pygerber.gerber.ast.nodes.primitives.code_7.Code7.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], Code7]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/AS.html","title":"AS","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/AS.html#pygerber.gerber.ast.nodes.properties.AS","title":"AS","text":"<p><code>pygerber.nodes.properties.AS</code> module contains definition of <code>AS</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/AS.html#pygerber.gerber.ast.nodes.properties.AS.AS","title":"AS","text":"<p>               Bases: <code>Node</code></p> <p>Represents AS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/AS.html#pygerber.gerber.ast.nodes.properties.AS.AS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; AS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/AS.html#pygerber.gerber.ast.nodes.properties.AS.AS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], AS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/FS.html","title":"FS","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/FS.html#pygerber.gerber.ast.nodes.properties.FS","title":"FS","text":"<p><code>pygerber.nodes.properties.FS</code> module contains definition of <code>FS</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/FS.html#pygerber.gerber.ast.nodes.properties.FS.FS","title":"FS","text":"<p>               Bases: <code>Node</code></p> <p>Represents FS Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/FS.html#pygerber.gerber.ast.nodes.properties.FS.FS.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; FS\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/FS.html#pygerber.gerber.ast.nodes.properties.FS.FS.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], FS]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IN.html","title":"IN","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/IN.html#pygerber.gerber.ast.nodes.properties.IN","title":"IN","text":"<p><code>pygerber.nodes.properties.IN</code> module contains definition of <code>IN</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IN.html#pygerber.gerber.ast.nodes.properties.IN.IN","title":"IN","text":"<p>               Bases: <code>Node</code></p> <p>Represents IN Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IN.html#pygerber.gerber.ast.nodes.properties.IN.IN.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IN\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IN.html#pygerber.gerber.ast.nodes.properties.IN.IN.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IN]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IP.html","title":"IP","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/IP.html#pygerber.gerber.ast.nodes.properties.IP","title":"IP","text":"<p><code>pygerber.nodes.properties.IP</code> module contains definition of <code>IP</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IP.html#pygerber.gerber.ast.nodes.properties.IP.IP","title":"IP","text":"<p>               Bases: <code>Node</code></p> <p>Represents IP Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IP.html#pygerber.gerber.ast.nodes.properties.IP.IP.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IP\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IP.html#pygerber.gerber.ast.nodes.properties.IP.IP.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IP]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IR.html","title":"IR","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/IR.html#pygerber.gerber.ast.nodes.properties.IR","title":"IR","text":"<p><code>pygerber.nodes.properties.IR</code> module contains definition of <code>IR</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IR.html#pygerber.gerber.ast.nodes.properties.IR.IR","title":"IR","text":"<p>               Bases: <code>Node</code></p> <p>Represents IR Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IR.html#pygerber.gerber.ast.nodes.properties.IR.IR.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; IR\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/IR.html#pygerber.gerber.ast.nodes.properties.IR.IR.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], IR]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MI.html","title":"MI","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/MI.html#pygerber.gerber.ast.nodes.properties.MI","title":"MI","text":"<p><code>pygerber.nodes.properties.MI</code> module contains definition of <code>MI</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MI.html#pygerber.gerber.ast.nodes.properties.MI.MI","title":"MI","text":"<p>               Bases: <code>Node</code></p> <p>Represents MI Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MI.html#pygerber.gerber.ast.nodes.properties.MI.MI.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MI\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MI.html#pygerber.gerber.ast.nodes.properties.MI.MI.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MI]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MO.html","title":"MO","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/MO.html#pygerber.gerber.ast.nodes.properties.MO","title":"MO","text":"<p><code>pygerber.nodes.properties.MO</code> module contains definition of <code>MO</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MO.html#pygerber.gerber.ast.nodes.properties.MO.MO","title":"MO","text":"<p>               Bases: <code>Node</code></p> <p>Represents MO Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MO.html#pygerber.gerber.ast.nodes.properties.MO.MO.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; MO\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/MO.html#pygerber.gerber.ast.nodes.properties.MO.MO.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], MO]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/OF.html","title":"OF","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/OF.html#pygerber.gerber.ast.nodes.properties.OF","title":"OF","text":"<p><code>pygerber.nodes.properties.OF</code> module contains definition of <code>OF</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/OF.html#pygerber.gerber.ast.nodes.properties.OF.OF","title":"OF","text":"<p>               Bases: <code>Node</code></p> <p>Represents OF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/OF.html#pygerber.gerber.ast.nodes.properties.OF.OF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; OF\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/OF.html#pygerber.gerber.ast.nodes.properties.OF.OF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], OF]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/SF.html","title":"SF","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/SF.html#pygerber.gerber.ast.nodes.properties.SF","title":"SF","text":"<p><code>pygerber.nodes.properties.SF</code> module contains definition of <code>SF</code> class.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/SF.html#pygerber.gerber.ast.nodes.properties.SF.SF","title":"SF","text":"<p>               Bases: <code>Node</code></p> <p>Represents SF Gerber extended command.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/SF.html#pygerber.gerber.ast.nodes.properties.SF.SF.visit","title":"visit","text":"<pre><code>visit(visitor: AstVisitor) -&gt; SF\n</code></pre> <p>Handle visitor call.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/SF.html#pygerber.gerber.ast.nodes.properties.SF.SF.get_visitor_callback_function","title":"get_visitor_callback_function","text":"<pre><code>get_visitor_callback_function(\n    visitor: AstVisitor,\n) -&gt; Callable[[Self], SF]\n</code></pre> <p>Get callback function for the node.</p>"},{"location":"reference/pygerber/gerber/ast/nodes/properties/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/ast/nodes/properties/__init__.html#pygerber.gerber.ast.nodes.properties","title":"properties","text":"<p><code>nodes.properties</code> package contains all the nodes that set image properties.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler","title":"compiler","text":"<p>The <code>compiler</code> module contains internals of Gerber X3 to RVMC compiler.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler","title":"Compiler","text":"<p>               Bases: <code>StateTrackingVisitor</code></p> <p>Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM commands (RVMC).</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.Compiler.compile","title":"compile","text":"<pre><code>compile(ast: File) -&gt; RVMC\n</code></pre> <p>Compile Gerber AST to RVMC.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.CompilerError","title":"CompilerError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by Compiler class.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.CyclicBufferDependencyError","title":"CyclicBufferDependencyError","text":"<p>               Bases: <code>CompilerError</code></p> <p>Raised when cyclic dependency between buffers is detected.</p>"},{"location":"reference/pygerber/gerber/compiler/__init__.html#pygerber.gerber.compiler.compile","title":"compile","text":"<pre><code>compile(\n    ast: File, *, ignore_program_stop: bool = False\n) -&gt; RVMC\n</code></pre> <p>Compile Gerber X3 AST to RVMC code.</p> <p>Parameters:</p> <ul> <li> <code>ast</code>               (<code>File</code>)           \u2013            <p>Gerber abstract syntax tree.</p> </li> <li> <code>ignore_program_stop</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Toggle ignoring M00/M02 instructions, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RVMC</code>           \u2013            <p>Generated virtual machine instructions.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/compiler/compiler.html","title":"compiler","text":""},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler","title":"compiler","text":"<p>The <code>compiler</code> module contains implementation of compiler for transforming Gerber abstract syntax tree to PyGerber rendering VM commands (RVMC).</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.CommandBuffer","title":"CommandBuffer","text":"<p>Container for commands and metadata about relations with other containers.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.CommandBuffer.layer_id","title":"layer_id  <code>property</code>","text":"<pre><code>layer_id: LayerID\n</code></pre> <p>Get layer id.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.CommandBuffer.append_shape","title":"append_shape","text":"<pre><code>append_shape(command: Shape) -&gt; None\n</code></pre> <p>Append command to buffer.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.CommandBuffer.append_paste","title":"append_paste","text":"<pre><code>append_paste(command: PasteLayer) -&gt; None\n</code></pre> <p>Append command to buffer.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler","title":"Compiler","text":"<p>               Bases: <code>StateTrackingVisitor</code></p> <p>Compiler for transforming transforming Gerber (AST) to PyGerber rendering VM commands (RVMC).</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_ab","title":"on_ab","text":"<pre><code>on_ab(node: AB) -&gt; AB\n</code></pre> <p>Handle <code>AB</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_sr","title":"on_sr","text":"<pre><code>on_sr(node: SR) -&gt; SR\n</code></pre> <p>Handle <code>SR</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_draw_line","title":"on_draw_line","text":"<pre><code>on_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_draw_cw_arc_mq","title":"on_draw_cw_arc_mq","text":"<pre><code>on_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_draw_ccw_arc_mq","title":"on_draw_ccw_arc_mq","text":"<pre><code>on_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_start_region","title":"on_start_region","text":"<pre><code>on_start_region() -&gt; None\n</code></pre> <p>Handle start of region.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_in_region_draw_line","title":"on_in_region_draw_line","text":"<pre><code>on_in_region_draw_line(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in linear interpolation mode in region.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_in_region_draw_cw_arc_mq","title":"on_in_region_draw_cw_arc_mq","text":"<pre><code>on_in_region_draw_cw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_in_region_draw_ccw_arc_mq","title":"on_in_region_draw_ccw_arc_mq","text":"<pre><code>on_in_region_draw_ccw_arc_mq(node: D01) -&gt; None\n</code></pre> <p>Handle <code>D01</code> node in counter-clockwise circular interpolation multi quadrant mode within region statement.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flush_region","title":"on_flush_region","text":"<pre><code>on_flush_region() -&gt; None\n</code></pre> <p>Handle flush region after D02 command or after G37.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_end_region","title":"on_end_region","text":"<pre><code>on_end_region() -&gt; None\n</code></pre> <p>Handle end of region.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_circle","title":"on_flash_circle","text":"<pre><code>on_flash_circle(node: D03, aperture: ADC) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_rectangle","title":"on_flash_rectangle","text":"<pre><code>on_flash_rectangle(node: D03, aperture: ADR) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADC</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_obround","title":"on_flash_obround","text":"<pre><code>on_flash_obround(node: D03, aperture: ADO) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADO</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_polygon","title":"on_flash_polygon","text":"<pre><code>on_flash_polygon(node: D03, aperture: ADP) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADP</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_macro","title":"on_flash_macro","text":"<pre><code>on_flash_macro(node: D03, aperture: ADmacro) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>ADM</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.on_flash_block","title":"on_flash_block","text":"<pre><code>on_flash_block(node: D03, aperture: AB) -&gt; None\n</code></pre> <p>Handle <code>D03</code> node with <code>AB</code> aperture.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.Compiler.compile","title":"compile","text":"<pre><code>compile(ast: File) -&gt; RVMC\n</code></pre> <p>Compile Gerber AST to RVMC.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor","title":"MacroEvalVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p>Visitor for evaluating macro primitives.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/compiler.html#pygerber.gerber.compiler.compiler.MacroEvalVisitor.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p>"},{"location":"reference/pygerber/gerber/compiler/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerber/compiler/errors.html#pygerber.gerber.compiler.errors","title":"errors","text":"<p><code>errors</code> module contains all error classes exclusively raised by Compiler class.</p>"},{"location":"reference/pygerber/gerber/compiler/errors.html#pygerber.gerber.compiler.errors.CompilerError","title":"CompilerError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by Compiler class.</p>"},{"location":"reference/pygerber/gerber/compiler/errors.html#pygerber.gerber.compiler.errors.CyclicBufferDependencyError","title":"CyclicBufferDependencyError","text":"<p>               Bases: <code>CompilerError</code></p> <p>Raised when cyclic dependency between buffers is detected.</p>"},{"location":"reference/pygerber/gerber/compiler/errors.html#pygerber.gerber.compiler.errors.MacroNotDefinedError","title":"MacroNotDefinedError","text":"<p>               Bases: <code>CompilerError</code></p> <p>Raised when macro is not defined in the macro registry.</p>"},{"location":"reference/pygerber/gerber/compiler/errors.html#pygerber.gerber.compiler.errors.ContourBufferNotSetError","title":"ContourBufferNotSetError","text":"<p>               Bases: <code>CompilerError</code></p> <p>Raised when contour buffer is not set before flushing a contour buffer.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter","title":"formatter","text":"<p>The <code>formatter</code> package contains implementation of Gerber X3 formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.EmptyLineBeforePolaritySwitch","title":"EmptyLineBeforePolaritySwitch","text":"<p>               Bases: <code>Enum</code></p> <p>Empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.EmptyLineBeforePolaritySwitch.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Enable adding empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.EmptyLineBeforePolaritySwitch.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>Disable adding empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.ExplicitParenthesis","title":"ExplicitParenthesis","text":"<p>               Bases: <code>Enum</code></p> <p>Explicit parenthesis.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.ExplicitParenthesis.AddExplicit","title":"AddExplicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AddExplicit = 'AddExplicit'\n</code></pre> <p>Add explicit parenthesis to all mathematical operations.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.ExplicitParenthesis.KeepOriginal","title":"KeepOriginal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>KeepOriginal = 'KeepOriginal'\n</code></pre> <p>Keep original parenthesis in mathematical operations.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.FloatTrimTrailingZeros","title":"FloatTrimTrailingZeros","text":"<p>               Bases: <code>Enum</code></p> <p>Float trim trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.FloatTrimTrailingZeros.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Enable trimming of trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.FloatTrimTrailingZeros.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>Disable trimming of trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.KeepNonStandaloneCodes","title":"KeepNonStandaloneCodes","text":"<p>               Bases: <code>Enum</code></p> <p>Keep non standalone codes.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.KeepNonStandaloneCodes.SeparateCodes","title":"SeparateCodes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SeparateCodes = 'SeparateCodes'\n</code></pre> <p>Separate non standalone codes into standalone equivalents.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.KeepNonStandaloneCodes.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep non standalone codes as they are.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroEndInNewLine","title":"MacroEndInNewLine","text":"<p>               Bases: <code>Enum</code></p> <p>Macro end in new line.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroEndInNewLine.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Move % sign ending macro to new line.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroEndInNewLine.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>keep % sign in same line as last primitive.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroSplitMode","title":"MacroSplitMode","text":"<p>               Bases: <code>Enum</code></p> <p>Macro split mode.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroSplitMode.NoSplit","title":"NoSplit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NoSplit = 'NoSplit'\n</code></pre> <p>Disable macro definition splitting.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroSplitMode.SplitOnPrimitives","title":"SplitOnPrimitives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SplitOnPrimitives = 'SplitOnPrimitives'\n</code></pre> <p>Enable splitting macro definition on primitives.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.MacroSplitMode.SplitOnParameters","title":"SplitOnParameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SplitOnParameters = 'SplitOnParameters'\n</code></pre> <p>Enable splitting macro definition on primitive parameters.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG54","title":"RemoveG54","text":"<p>               Bases: <code>Enum</code></p> <p>Remove G54 command.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG54.Remove","title":"Remove  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Remove = 'Remove'\n</code></pre> <p>Remove G54 command from output.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG54.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep G54 command in output.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG55","title":"RemoveG55","text":"<p>               Bases: <code>Enum</code></p> <p>Remove G55 command.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG55.Remove","title":"Remove  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Remove = 'Remove'\n</code></pre> <p>Remove G55 command from output.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.RemoveG55.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep G55 command in output.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.StripWhitespace","title":"StripWhitespace","text":"<p>               Bases: <code>Enum</code></p> <p>Strip whitespace.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.StripWhitespace.StripAll","title":"StripAll  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StripAll = 'StripAll'\n</code></pre> <p>Strip all whitespace from the output.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.StripWhitespace.Default","title":"Default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Default = 'Default'\n</code></pre> <p>Use implicit whitespace rules and those defined by other options.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter","title":"Formatter","text":"<p>               Bases: <code>AstVisitor</code></p> <p>Gerber X3 compatible formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.output","title":"output  <code>property</code>","text":"<pre><code>output: TextIO\n</code></pre> <p>Get output buffer.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(options: Optional[Options] = None) -&gt; None\n</code></pre> <p>Initialize Formatter instance.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>Options</code>, default:                   <code>None</code> )           \u2013            <p>Formatter options container.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.format","title":"format","text":"<pre><code>format(source: File, output: TextIO) -&gt; None\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.formats","title":"formats","text":"<pre><code>formats(source: File) -&gt; str\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.format_node","title":"format_node","text":"<pre><code>format_node(node: Node, output: StringIO) -&gt; None\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.formats_node","title":"formats_node","text":"<pre><code>formats_node(node: Node) -&gt; str\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Formatter.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options","title":"Options","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>Options</code> class aggregates configuration options for the Gerber formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.indent_character","title":"indent_character  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>indent_character: Literal[' ', '\\t'] = Field(default=' ')\n</code></pre> <p>Character used for indentation, by default \" \" (space).</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.macro_body_indent","title":"macro_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_body_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro body, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0  which results in no indentation.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.macro_param_indent","title":"macro_param_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_param_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro parameters, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0 which results in no indentation.</p> <p><code>macro_param_indent</code> indentation is added on top of macro body indentation.</p> <p><code>macro_param_indent</code> has effect only when <code>macro_split_mode</code> is <code>PARAMETERS</code>.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.macro_split_mode","title":"macro_split_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_split_mode: MacroSplitMode = Field(\n    default=SplitOnPrimitives\n)\n</code></pre> <p>Changes how macro definitions are formatted, by default <code>MacroSplitMode.SplitOnPrimitives</code>.</p> <p>When <code>NoSplit</code> is selected, macro definition will be formatted as a single line.</p> <pre><code>%AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnPrimitives</code> is selected, macro definition will be formatted with each primitive in a new line.</p> <pre><code>%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnParameters</code> is selected, macro definition will be formatted with each primitive on a new line and each parameter of a primitive on a new line.</p> <pre><code>%AMDonut*\n1,\n1,\n$1,\n$2,\n$3*\n$4=$1x0.75*\n1,\n0,\n$4,\n$2,\n$3*%\n</code></pre> <p>Use <code>macro_body_indent</code> and <code>macro_param_indent</code> to control indentation.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.macro_end_in_new_line","title":"macro_end_in_new_line  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_end_in_new_line: MacroEndInNewLine = Field(default=No)\n</code></pre> <p>Toggles placing % sign which marks the end of macro in new line, by default <code>MacroEndInNewLine.No</code></p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.block_aperture_body_indent","title":"block_aperture_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_aperture_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of block aperture definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested block apertures.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.step_and_repeat_body_indent","title":"step_and_repeat_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step_and_repeat_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of step and repeat definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested step and repeat blocks.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.float_decimal_places","title":"float_decimal_places  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_decimal_places: int = Field(default=-1)\n</code></pre> <p>Limit number of decimal places shown for float values, by default -1 which means as many decimal places as needed.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.float_trim_trailing_zeros","title":"float_trim_trailing_zeros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_trim_trailing_zeros: FloatTrimTrailingZeros = Field(\n    default=Yes\n)\n</code></pre> <p>Remove trailing zeros from floats, by default <code>FloatTrimTrailingZeros.Yes</code>.</p> <p>When this is set to <code>FloatTrimTrailingZeros.Yes</code>, after floating point number is formatted with respect to <code>float_decimal_places</code>, trailing zeros are removed. If all zeros after decimal point are removed, decimal point is also removed.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.d01_indent","title":"d01_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d01_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D01 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.d02_indent","title":"d02_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d02_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D02 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.d03_indent","title":"d03_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d03_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D03 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.line_end","title":"line_end  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>line_end: Literal['\\n', '\\r\\n'] = Field(default='\\n')\n</code></pre> <p>Line ending character, Unix or Windows style, by default \" \" (Unix style)     If <code>strip_whitespace</code> is enabled, this setting is ignored and no line endings are     added.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.empty_line_before_polarity_switch","title":"empty_line_before_polarity_switch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>empty_line_before_polarity_switch: (\n    EmptyLineBeforePolaritySwitch\n) = Field(default=No)\n</code></pre> <p>Add empty line before polarity switch, by default <code>EmptyLineBeforePolaritySwitch.Yes</code></p> <p>Inserting empty lines before polarity switches enhances visual separation of sequences of commands with different polarities.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.keep_non_standalone_codes","title":"keep_non_standalone_codes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keep_non_standalone_codes: KeepNonStandaloneCodes = Field(\n    default=Keep\n)\n</code></pre> <p>Keep non-standalone codes in the output, by default <code>KeepNonStandaloneCodes.Keep</code></p> <p>If this option is disabled, legacy merged code forms like <code>G70D02*</code> will be divided into two separate commands, <code>G70*</code> and <code>D02*</code>, otherwise they will be kept as is.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.remove_g54","title":"remove_g54  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g54: RemoveG54 = Field(default=Keep)\n</code></pre> <p>Remove G54 code from output, by default <code>RemoveG54.Keep</code></p> <p>G54 code has no effect on the output, it was used in legacy files to prefix select aperture command.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.remove_g55","title":"remove_g55  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g55: RemoveG55 = Field(default=Keep)\n</code></pre> <p>Remove G55 code from output, by default <code>RemoveG55.Keep</code></p> <p>G55 code has no effect on the output, it was used in legacy files to prefix flash command.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.explicit_parenthesis","title":"explicit_parenthesis  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explicit_parenthesis: ExplicitParenthesis = Field(\n    default=KeepOriginal\n)\n</code></pre> <p>Toggle explicit parenthesis around all mathematical expressions within macro, by default <code>ExplicitParenthesis.KeepOriginal</code></p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.Options.strip_whitespace","title":"strip_whitespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strip_whitespace: StripWhitespace = Field(default=Default)\n</code></pre> <p>Toggle stripping of whitespace from the output, by default <code>StripWhitespace.Default</code> which results in normal whitespace handling.</p>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.format","title":"format","text":"<pre><code>format(\n    source: File,\n    output: TextIO,\n    options: Optional[Options] = None,\n) -&gt; None\n</code></pre> <p>Write formatted Gerber code based on given Abstract Syntax Tree to output IO.</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>File</code>)           \u2013            <p>Gerber Abstract Syntax Tree to format.</p> </li> <li> <code>output</code>               (<code>TextIO</code>)           \u2013            <p>Output IO stream.</p> </li> <li> <code>options</code>               (<code>Optional[Options]</code>, default:                   <code>None</code> )           \u2013            <p>Formatter configuration options, by default None</p> </li> </ul>"},{"location":"reference/pygerber/gerber/formatter/__init__.html#pygerber.gerber.formatter.formats","title":"formats","text":"<pre><code>formats(\n    source: File, options: Optional[Options] = None\n) -&gt; str\n</code></pre> <p>Return formatted Gerber code based on given Abstract Syntax Tree as string.</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>File</code>)           \u2013            <p>Gerber Abstract Syntax Tree to format.</p> </li> <li> <code>options</code>               (<code>Optional[Options]</code>, default:                   <code>None</code> )           \u2013            <p>Formatter configuration options, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted Gerber code</p> </li> </ul>"},{"location":"reference/pygerber/gerber/formatter/enums.html","title":"enums","text":""},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums","title":"enums","text":"<p>The <code>enums</code> module contains enumerations used in the Gerber X3 formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroSplitMode","title":"MacroSplitMode","text":"<p>               Bases: <code>Enum</code></p> <p>Macro split mode.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroSplitMode.NoSplit","title":"NoSplit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NoSplit = 'NoSplit'\n</code></pre> <p>Disable macro definition splitting.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroSplitMode.SplitOnPrimitives","title":"SplitOnPrimitives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SplitOnPrimitives = 'SplitOnPrimitives'\n</code></pre> <p>Enable splitting macro definition on primitives.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroSplitMode.SplitOnParameters","title":"SplitOnParameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SplitOnParameters = 'SplitOnParameters'\n</code></pre> <p>Enable splitting macro definition on primitive parameters.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroEndInNewLine","title":"MacroEndInNewLine","text":"<p>               Bases: <code>Enum</code></p> <p>Macro end in new line.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroEndInNewLine.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Move % sign ending macro to new line.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.MacroEndInNewLine.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>keep % sign in same line as last primitive.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.FloatTrimTrailingZeros","title":"FloatTrimTrailingZeros","text":"<p>               Bases: <code>Enum</code></p> <p>Float trim trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.FloatTrimTrailingZeros.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Enable trimming of trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.FloatTrimTrailingZeros.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>Disable trimming of trailing zeros.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.EmptyLineBeforePolaritySwitch","title":"EmptyLineBeforePolaritySwitch","text":"<p>               Bases: <code>Enum</code></p> <p>Empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.EmptyLineBeforePolaritySwitch.Yes","title":"Yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Yes = 'Yes'\n</code></pre> <p>Enable adding empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.EmptyLineBeforePolaritySwitch.No","title":"No  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>No = 'No'\n</code></pre> <p>Disable adding empty line before polarity switch.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.KeepNonStandaloneCodes","title":"KeepNonStandaloneCodes","text":"<p>               Bases: <code>Enum</code></p> <p>Keep non standalone codes.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.KeepNonStandaloneCodes.SeparateCodes","title":"SeparateCodes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SeparateCodes = 'SeparateCodes'\n</code></pre> <p>Separate non standalone codes into standalone equivalents.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.KeepNonStandaloneCodes.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep non standalone codes as they are.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG54","title":"RemoveG54","text":"<p>               Bases: <code>Enum</code></p> <p>Remove G54 command.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG54.Remove","title":"Remove  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Remove = 'Remove'\n</code></pre> <p>Remove G54 command from output.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG54.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep G54 command in output.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG55","title":"RemoveG55","text":"<p>               Bases: <code>Enum</code></p> <p>Remove G55 command.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG55.Remove","title":"Remove  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Remove = 'Remove'\n</code></pre> <p>Remove G55 command from output.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.RemoveG55.Keep","title":"Keep  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Keep = 'Keep'\n</code></pre> <p>Keep G55 command in output.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.ExplicitParenthesis","title":"ExplicitParenthesis","text":"<p>               Bases: <code>Enum</code></p> <p>Explicit parenthesis.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.ExplicitParenthesis.AddExplicit","title":"AddExplicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AddExplicit = 'AddExplicit'\n</code></pre> <p>Add explicit parenthesis to all mathematical operations.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.ExplicitParenthesis.KeepOriginal","title":"KeepOriginal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>KeepOriginal = 'KeepOriginal'\n</code></pre> <p>Keep original parenthesis in mathematical operations.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.StripWhitespace","title":"StripWhitespace","text":"<p>               Bases: <code>Enum</code></p> <p>Strip whitespace.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.StripWhitespace.StripAll","title":"StripAll  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StripAll = 'StripAll'\n</code></pre> <p>Strip all whitespace from the output.</p>"},{"location":"reference/pygerber/gerber/formatter/enums.html#pygerber.gerber.formatter.enums.StripWhitespace.Default","title":"Default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Default = 'Default'\n</code></pre> <p>Use implicit whitespace rules and those defined by other options.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html","title":"formatter","text":""},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter","title":"formatter","text":"<p>The <code>formatter</code> module contains implementation <code>Formatter</code> class which implements configurable Gerber code formatting.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.FormatterError","title":"FormatterError","text":"<p>               Bases: <code>Exception</code></p> <p>Formatter error.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter","title":"Formatter","text":"<p>               Bases: <code>AstVisitor</code></p> <p>Gerber X3 compatible formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.output","title":"output  <code>property</code>","text":"<pre><code>output: TextIO\n</code></pre> <p>Get output buffer.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(options: Optional[Options] = None) -&gt; None\n</code></pre> <p>Initialize Formatter instance.</p> <p>Parameters:</p> <ul> <li> <code>options</code>               (<code>Options</code>, default:                   <code>None</code> )           \u2013            <p>Formatter options container.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.format","title":"format","text":"<pre><code>format(source: File, output: TextIO) -&gt; None\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.formats","title":"formats","text":"<pre><code>formats(source: File) -&gt; str\n</code></pre> <p>Format Gerber AST according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.format_node","title":"format_node","text":"<pre><code>format_node(node: Node, output: StringIO) -&gt; None\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.formats_node","title":"formats_node","text":"<pre><code>formats_node(node: Node) -&gt; str\n</code></pre> <p>Format single node according to rules specified in Formatter constructor.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ab_close","title":"on_ab_close","text":"<pre><code>on_ab_close(node: ABclose) -&gt; ABclose\n</code></pre> <p>Handle <code>ABclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ab_open","title":"on_ab_open","text":"<pre><code>on_ab_open(node: ABopen) -&gt; ABopen\n</code></pre> <p>Handle <code>ABopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_adc","title":"on_adc","text":"<pre><code>on_adc(node: ADC) -&gt; ADC\n</code></pre> <p>Handle <code>AD</code> circle node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_adr","title":"on_adr","text":"<pre><code>on_adr(node: ADR) -&gt; ADR\n</code></pre> <p>Handle <code>AD</code> rectangle node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ado","title":"on_ado","text":"<pre><code>on_ado(node: ADO) -&gt; ADO\n</code></pre> <p>Handle <code>AD</code> obround node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_adp","title":"on_adp","text":"<pre><code>on_adp(node: ADP) -&gt; ADP\n</code></pre> <p>Handle <code>AD</code> polygon node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ad_macro","title":"on_ad_macro","text":"<pre><code>on_ad_macro(node: ADmacro) -&gt; ADmacro\n</code></pre> <p>Handle <code>AD</code> macro node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_am_close","title":"on_am_close","text":"<pre><code>on_am_close(node: AMclose) -&gt; AMclose\n</code></pre> <p>Handle <code>AMclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_am_open","title":"on_am_open","text":"<pre><code>on_am_open(node: AMopen) -&gt; AMopen\n</code></pre> <p>Handle <code>AMopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_sr_close","title":"on_sr_close","text":"<pre><code>on_sr_close(node: SRclose) -&gt; SRclose\n</code></pre> <p>Handle <code>SRclose</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_sr_open","title":"on_sr_open","text":"<pre><code>on_sr_open(node: SRopen) -&gt; SRopen\n</code></pre> <p>Handle <code>SRopen</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_td","title":"on_td","text":"<pre><code>on_td(node: TD) -&gt; TD\n</code></pre> <p>Handle <code>TD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_user_name","title":"on_tf_user_name","text":"<pre><code>on_tf_user_name(node: TF_UserName) -&gt; TF_UserName\n</code></pre> <p>Handle <code>TF_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_part","title":"on_tf_part","text":"<pre><code>on_tf_part(node: TF_Part) -&gt; TF_Part\n</code></pre> <p>Handle <code>TF_Part</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_file_function","title":"on_tf_file_function","text":"<pre><code>on_tf_file_function(\n    node: TF_FileFunction,\n) -&gt; TF_FileFunction\n</code></pre> <p>Handle <code>TF_FileFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_file_polarity","title":"on_tf_file_polarity","text":"<pre><code>on_tf_file_polarity(\n    node: TF_FilePolarity,\n) -&gt; TF_FilePolarity\n</code></pre> <p>Handle <code>TF_FilePolarity</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_same_coordinates","title":"on_tf_same_coordinates","text":"<pre><code>on_tf_same_coordinates(\n    node: TF_SameCoordinates,\n) -&gt; TF_SameCoordinates\n</code></pre> <p>Handle <code>TF_SameCoordinates</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_creation_date","title":"on_tf_creation_date","text":"<pre><code>on_tf_creation_date(\n    node: TF_CreationDate,\n) -&gt; TF_CreationDate\n</code></pre> <p>Handle <code>TF_CreationDate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_generation_software","title":"on_tf_generation_software","text":"<pre><code>on_tf_generation_software(\n    node: TF_GenerationSoftware,\n) -&gt; TF_GenerationSoftware\n</code></pre> <p>Handle <code>TF_GenerationSoftware</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_project_id","title":"on_tf_project_id","text":"<pre><code>on_tf_project_id(node: TF_ProjectId) -&gt; TF_ProjectId\n</code></pre> <p>Handle <code>TF_ProjectId</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_tf_md5","title":"on_tf_md5","text":"<pre><code>on_tf_md5(node: TF_MD5) -&gt; TF_MD5\n</code></pre> <p>Handle <code>TF_MD5</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_d01","title":"on_d01","text":"<pre><code>on_d01(node: D01) -&gt; D01\n</code></pre> <p>Handle <code>D01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_d02","title":"on_d02","text":"<pre><code>on_d02(node: D02) -&gt; D02\n</code></pre> <p>Handle <code>D02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_d03","title":"on_d03","text":"<pre><code>on_d03(node: D03) -&gt; D03\n</code></pre> <p>Handle <code>D03</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_dnn","title":"on_dnn","text":"<pre><code>on_dnn(node: Dnn) -&gt; Dnn\n</code></pre> <p>Handle <code>Dnn</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g01","title":"on_g01","text":"<pre><code>on_g01(node: G01) -&gt; G01\n</code></pre> <p>Handle <code>G01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g02","title":"on_g02","text":"<pre><code>on_g02(node: G02) -&gt; G02\n</code></pre> <p>Handle <code>G02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g03","title":"on_g03","text":"<pre><code>on_g03(node: G03) -&gt; G03\n</code></pre> <p>Handle <code>G03</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g04","title":"on_g04","text":"<pre><code>on_g04(node: G04) -&gt; G04\n</code></pre> <p>Handle <code>G04</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g36","title":"on_g36","text":"<pre><code>on_g36(node: G36) -&gt; G36\n</code></pre> <p>Handle <code>G36</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g37","title":"on_g37","text":"<pre><code>on_g37(node: G37) -&gt; G37\n</code></pre> <p>Handle <code>G37</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g54","title":"on_g54","text":"<pre><code>on_g54(node: G54) -&gt; G54\n</code></pre> <p>Handle <code>G54</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g55","title":"on_g55","text":"<pre><code>on_g55(node: G55) -&gt; G55\n</code></pre> <p>Handle <code>G55</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g70","title":"on_g70","text":"<pre><code>on_g70(node: G70) -&gt; G70\n</code></pre> <p>Handle <code>G70</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g71","title":"on_g71","text":"<pre><code>on_g71(node: G71) -&gt; G71\n</code></pre> <p>Handle <code>G71</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g74","title":"on_g74","text":"<pre><code>on_g74(node: G74) -&gt; G74\n</code></pre> <p>Handle <code>G74</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g75","title":"on_g75","text":"<pre><code>on_g75(node: G75) -&gt; G75\n</code></pre> <p>Handle <code>G75</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g90","title":"on_g90","text":"<pre><code>on_g90(node: G90) -&gt; G90\n</code></pre> <p>Handle <code>G90</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_g91","title":"on_g91","text":"<pre><code>on_g91(node: G91) -&gt; G91\n</code></pre> <p>Handle <code>G91</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_lm","title":"on_lm","text":"<pre><code>on_lm(node: LM) -&gt; LM\n</code></pre> <p>Handle <code>LM</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ln","title":"on_ln","text":"<pre><code>on_ln(node: LN) -&gt; LN\n</code></pre> <p>Handle <code>LN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_lp","title":"on_lp","text":"<pre><code>on_lp(node: LP) -&gt; LP\n</code></pre> <p>Handle <code>LP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_lr","title":"on_lr","text":"<pre><code>on_lr(node: LR) -&gt; LR\n</code></pre> <p>Handle <code>LR</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ls","title":"on_ls","text":"<pre><code>on_ls(node: LS) -&gt; LS\n</code></pre> <p>Handle <code>LS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_m00","title":"on_m00","text":"<pre><code>on_m00(node: M00) -&gt; M00\n</code></pre> <p>Handle <code>M00</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_m01","title":"on_m01","text":"<pre><code>on_m01(node: M01) -&gt; M01\n</code></pre> <p>Handle <code>M01</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_m02","title":"on_m02","text":"<pre><code>on_m02(node: M02) -&gt; M02\n</code></pre> <p>Handle <code>M02</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_add","title":"on_add","text":"<pre><code>on_add(node: Add) -&gt; Add\n</code></pre> <p>Handle <code>Add</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_div","title":"on_div","text":"<pre><code>on_div(node: Div) -&gt; Div\n</code></pre> <p>Handle <code>Div</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_mul","title":"on_mul","text":"<pre><code>on_mul(node: Mul) -&gt; Mul\n</code></pre> <p>Handle <code>Mul</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_sub","title":"on_sub","text":"<pre><code>on_sub(node: Sub) -&gt; Sub\n</code></pre> <p>Handle <code>Sub</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_neg","title":"on_neg","text":"<pre><code>on_neg(node: Neg) -&gt; Neg\n</code></pre> <p>Handle <code>Neg</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_pos","title":"on_pos","text":"<pre><code>on_pos(node: Pos) -&gt; Pos\n</code></pre> <p>Handle <code>Pos</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_assignment","title":"on_assignment","text":"<pre><code>on_assignment(node: Assignment) -&gt; Assignment\n</code></pre> <p>Handle <code>Assignment</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_constant","title":"on_constant","text":"<pre><code>on_constant(node: Constant) -&gt; Constant\n</code></pre> <p>Handle <code>Constant</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_parenthesis","title":"on_parenthesis","text":"<pre><code>on_parenthesis(node: Parenthesis) -&gt; Parenthesis\n</code></pre> <p>Handle <code>Parenthesis</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_point","title":"on_point","text":"<pre><code>on_point(node: Point) -&gt; Point\n</code></pre> <p>Handle <code>Point</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_variable","title":"on_variable","text":"<pre><code>on_variable(node: Variable) -&gt; Variable\n</code></pre> <p>Handle <code>Variable</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_coordinate_x","title":"on_coordinate_x","text":"<pre><code>on_coordinate_x(node: CoordinateX) -&gt; CoordinateX\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_coordinate_y","title":"on_coordinate_y","text":"<pre><code>on_coordinate_y(node: CoordinateY) -&gt; CoordinateY\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_coordinate_i","title":"on_coordinate_i","text":"<pre><code>on_coordinate_i(node: CoordinateI) -&gt; CoordinateI\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_coordinate_j","title":"on_coordinate_j","text":"<pre><code>on_coordinate_j(node: CoordinateJ) -&gt; CoordinateJ\n</code></pre> <p>Handle <code>Coordinate</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_0","title":"on_code_0","text":"<pre><code>on_code_0(node: Code0) -&gt; Code0\n</code></pre> <p>Handle <code>Code0</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_1","title":"on_code_1","text":"<pre><code>on_code_1(node: Code1) -&gt; Code1\n</code></pre> <p>Handle <code>Code1</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_2","title":"on_code_2","text":"<pre><code>on_code_2(node: Code2) -&gt; Code2\n</code></pre> <p>Handle <code>Code2</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_4","title":"on_code_4","text":"<pre><code>on_code_4(node: Code4) -&gt; Code4\n</code></pre> <p>Handle <code>Code4</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_5","title":"on_code_5","text":"<pre><code>on_code_5(node: Code5) -&gt; Code5\n</code></pre> <p>Handle <code>Code5</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_6","title":"on_code_6","text":"<pre><code>on_code_6(node: Code6) -&gt; Code6\n</code></pre> <p>Handle <code>Code6</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_7","title":"on_code_7","text":"<pre><code>on_code_7(node: Code7) -&gt; Code7\n</code></pre> <p>Handle <code>Code7</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_20","title":"on_code_20","text":"<pre><code>on_code_20(node: Code20) -&gt; Code20\n</code></pre> <p>Handle <code>Code20</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_21","title":"on_code_21","text":"<pre><code>on_code_21(node: Code21) -&gt; Code21\n</code></pre> <p>Handle <code>Code21</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_code_22","title":"on_code_22","text":"<pre><code>on_code_22(node: Code22) -&gt; Code22\n</code></pre> <p>Handle <code>Code22</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_as","title":"on_as","text":"<pre><code>on_as(node: AS) -&gt; AS\n</code></pre> <p>Handle <code>AS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_fs","title":"on_fs","text":"<pre><code>on_fs(node: FS) -&gt; FS\n</code></pre> <p>Handle <code>FS</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_in","title":"on_in","text":"<pre><code>on_in(node: IN) -&gt; IN\n</code></pre> <p>Handle <code>IN</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ip","title":"on_ip","text":"<pre><code>on_ip(node: IP) -&gt; IP\n</code></pre> <p>Handle <code>IP</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_ir","title":"on_ir","text":"<pre><code>on_ir(node: IR) -&gt; IR\n</code></pre> <p>Handle <code>IR</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_mi","title":"on_mi","text":"<pre><code>on_mi(node: MI) -&gt; MI\n</code></pre> <p>Handle <code>MI</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_mo","title":"on_mo","text":"<pre><code>on_mo(node: MO) -&gt; MO\n</code></pre> <p>Handle <code>MO</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_of","title":"on_of","text":"<pre><code>on_of(node: OF) -&gt; OF\n</code></pre> <p>Handle <code>OF</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/formatter.html#pygerber.gerber.formatter.formatter.Formatter.on_sf","title":"on_sf","text":"<pre><code>on_sf(node: SF) -&gt; SF\n</code></pre> <p>Handle <code>SF</code> node.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html","title":"options","text":""},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options","title":"options","text":"<p>The <code>options</code> module contains definition of <code>Options</code> class.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options","title":"Options","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>Options</code> class aggregates configuration options for the Gerber formatter.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.indent_character","title":"indent_character  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>indent_character: Literal[' ', '\\t'] = Field(default=' ')\n</code></pre> <p>Character used for indentation, by default \" \" (space).</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.macro_body_indent","title":"macro_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_body_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro body, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0  which results in no indentation.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.macro_param_indent","title":"macro_param_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_param_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Indentation of macro parameters, could be either a string containing desired whitespaces or integer which will be used to create indent string based on <code>indent_character</code>, by default 0 which results in no indentation.</p> <p><code>macro_param_indent</code> indentation is added on top of macro body indentation.</p> <p><code>macro_param_indent</code> has effect only when <code>macro_split_mode</code> is <code>PARAMETERS</code>.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.macro_split_mode","title":"macro_split_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_split_mode: MacroSplitMode = Field(\n    default=SplitOnPrimitives\n)\n</code></pre> <p>Changes how macro definitions are formatted, by default <code>MacroSplitMode.SplitOnPrimitives</code>.</p> <p>When <code>NoSplit</code> is selected, macro definition will be formatted as a single line.</p> <pre><code>%AMDonut*1,1,$1,$2,$3*$4=$1x0.75*1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnPrimitives</code> is selected, macro definition will be formatted with each primitive in a new line.</p> <pre><code>%AMDonut*\n1,1,$1,$2,$3*\n$4=$1x0.75*\n1,0,$4,$2,$3*%\n</code></pre> <p>When <code>SplitOnParameters</code> is selected, macro definition will be formatted with each primitive on a new line and each parameter of a primitive on a new line.</p> <pre><code>%AMDonut*\n1,\n1,\n$1,\n$2,\n$3*\n$4=$1x0.75*\n1,\n0,\n$4,\n$2,\n$3*%\n</code></pre> <p>Use <code>macro_body_indent</code> and <code>macro_param_indent</code> to control indentation.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.macro_end_in_new_line","title":"macro_end_in_new_line  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>macro_end_in_new_line: MacroEndInNewLine = Field(default=No)\n</code></pre> <p>Toggles placing % sign which marks the end of macro in new line, by default <code>MacroEndInNewLine.No</code></p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.block_aperture_body_indent","title":"block_aperture_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_aperture_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of block aperture definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested block apertures.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.step_and_repeat_body_indent","title":"step_and_repeat_body_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step_and_repeat_body_indent: Union[str, int] = Field(\n    default=0\n)\n</code></pre> <p>Indentation of step and repeat definition body, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0 which results in no indentation.</p> <p>This indentations stacks for nested step and repeat blocks.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.float_decimal_places","title":"float_decimal_places  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_decimal_places: int = Field(default=-1)\n</code></pre> <p>Limit number of decimal places shown for float values, by default -1 which means as many decimal places as needed.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.float_trim_trailing_zeros","title":"float_trim_trailing_zeros  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>float_trim_trailing_zeros: FloatTrimTrailingZeros = Field(\n    default=Yes\n)\n</code></pre> <p>Remove trailing zeros from floats, by default <code>FloatTrimTrailingZeros.Yes</code>.</p> <p>When this is set to <code>FloatTrimTrailingZeros.Yes</code>, after floating point number is formatted with respect to <code>float_decimal_places</code>, trailing zeros are removed. If all zeros after decimal point are removed, decimal point is also removed.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.d01_indent","title":"d01_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d01_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D01 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.d02_indent","title":"d02_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d02_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D02 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.d03_indent","title":"d03_indent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>d03_indent: Union[str, int] = Field(default=0)\n</code></pre> <p>Custom indentation of D03 command, could be either a string containing desired whitespaces or integer which will be used to create indent string based <code>indent_character</code>, by default 0</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.line_end","title":"line_end  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>line_end: Literal['\\n', '\\r\\n'] = Field(default='\\n')\n</code></pre> <p>Line ending character, Unix or Windows style, by default \" \" (Unix style)     If <code>strip_whitespace</code> is enabled, this setting is ignored and no line endings are     added.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.empty_line_before_polarity_switch","title":"empty_line_before_polarity_switch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>empty_line_before_polarity_switch: (\n    EmptyLineBeforePolaritySwitch\n) = Field(default=No)\n</code></pre> <p>Add empty line before polarity switch, by default <code>EmptyLineBeforePolaritySwitch.Yes</code></p> <p>Inserting empty lines before polarity switches enhances visual separation of sequences of commands with different polarities.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.keep_non_standalone_codes","title":"keep_non_standalone_codes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keep_non_standalone_codes: KeepNonStandaloneCodes = Field(\n    default=Keep\n)\n</code></pre> <p>Keep non-standalone codes in the output, by default <code>KeepNonStandaloneCodes.Keep</code></p> <p>If this option is disabled, legacy merged code forms like <code>G70D02*</code> will be divided into two separate commands, <code>G70*</code> and <code>D02*</code>, otherwise they will be kept as is.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.remove_g54","title":"remove_g54  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g54: RemoveG54 = Field(default=Keep)\n</code></pre> <p>Remove G54 code from output, by default <code>RemoveG54.Keep</code></p> <p>G54 code has no effect on the output, it was used in legacy files to prefix select aperture command.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.remove_g55","title":"remove_g55  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>remove_g55: RemoveG55 = Field(default=Keep)\n</code></pre> <p>Remove G55 code from output, by default <code>RemoveG55.Keep</code></p> <p>G55 code has no effect on the output, it was used in legacy files to prefix flash command.</p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.explicit_parenthesis","title":"explicit_parenthesis  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explicit_parenthesis: ExplicitParenthesis = Field(\n    default=KeepOriginal\n)\n</code></pre> <p>Toggle explicit parenthesis around all mathematical expressions within macro, by default <code>ExplicitParenthesis.KeepOriginal</code></p>"},{"location":"reference/pygerber/gerber/formatter/options.html#pygerber.gerber.formatter.options.Options.strip_whitespace","title":"strip_whitespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strip_whitespace: StripWhitespace = Field(default=Default)\n</code></pre> <p>Toggle stripping of whitespace from the output, by default <code>StripWhitespace.Default</code> which results in normal whitespace handling.</p>"},{"location":"reference/pygerber/gerber/formatter/presets.html","title":"presets","text":""},{"location":"reference/pygerber/gerber/formatter/presets.html#pygerber.gerber.formatter.presets","title":"presets","text":"<p>The <code>presets</code> module contains named predefined formatter configurations.</p>"},{"location":"reference/pygerber/gerber/language_server/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/language_server/__init__.html#pygerber.gerber.language_server","title":"language_server","text":"<p>PyGerber's Gerber language server implementation.</p>"},{"location":"reference/pygerber/gerber/language_server/errors.html","title":"errors","text":""},{"location":"reference/pygerber/gerber/language_server/errors.html#pygerber.gerber.language_server.errors","title":"errors","text":"<p>The <code>errors</code> module provides error classes for the language server feature.</p>"},{"location":"reference/pygerber/gerber/language_server/errors.html#pygerber.gerber.language_server.errors.LanguageServerError","title":"LanguageServerError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for language server errors.</p>"},{"location":"reference/pygerber/gerber/language_server/errors.html#pygerber.gerber.language_server.errors.LanguageServerNotAvailableError","title":"LanguageServerNotAvailableError","text":"<p>               Bases: <code>LanguageServerError</code></p> <p>Language server feature requires pygerber[language-server] extras.</p>"},{"location":"reference/pygerber/gerber/language_server/status.html","title":"status","text":""},{"location":"reference/pygerber/gerber/language_server/status.html#pygerber.gerber.language_server.status","title":"status","text":"<p>The <code>is_server_available</code> module provides a boolean flag to check if the language server feature is available.</p>"},{"location":"reference/pygerber/gerber/language_server/status.html#pygerber.gerber.language_server.status.is_language_server_available","title":"is_language_server_available","text":"<pre><code>is_language_server_available() -&gt; bool\n</code></pre> <p>Check if the language server feature is available.</p>"},{"location":"reference/pygerber/gerber/language_server/status.html#pygerber.gerber.language_server.status.throw_if_server_not_available","title":"throw_if_server_not_available","text":"<pre><code>throw_if_server_not_available() -&gt; None\n</code></pre> <p>Raise an error if the language server feature is not available.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/language_server/_server/__init__.html#pygerber.gerber.language_server._server","title":"_server","text":""},{"location":"reference/pygerber/gerber/language_server/_server/document_cache.html","title":"document_cache","text":""},{"location":"reference/pygerber/gerber/language_server/_server/document_cache.html#pygerber.gerber.language_server._server.document_cache","title":"document_cache","text":""},{"location":"reference/pygerber/gerber/language_server/_server/server.html","title":"server","text":""},{"location":"reference/pygerber/gerber/language_server/_server/server.html#pygerber.gerber.language_server._server.server","title":"server","text":""},{"location":"reference/pygerber/gerber/language_server/_server/server.html#pygerber.gerber.language_server._server.server.get_server","title":"get_server","text":"<pre><code>get_server() -&gt; LanguageServer\n</code></pre> <p>Get the language server instance.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/__init__.html#pygerber.gerber.language_server._server.documents","title":"documents","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html","title":"document","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document","title":"document","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document","title":"Document","text":"<p>The <code>Document</code> class represents a single document.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.on_open","title":"on_open  <code>async</code>","text":"<pre><code>on_open(params: DidOpenTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document open event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.on_close","title":"on_close  <code>async</code>","text":"<pre><code>on_close(params: DidCloseTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document close event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.on_change","title":"on_change  <code>async</code>","text":"<pre><code>on_change(params: DidChangeTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document change event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.on_hover","title":"on_hover  <code>async</code>","text":"<pre><code>on_hover(params: HoverParams) -&gt; Hover | None\n</code></pre> <p>Handle the hover event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.on_completion","title":"on_completion  <code>async</code>","text":"<pre><code>on_completion(\n    params: CompletionParams,\n) -&gt; CompletionList | None\n</code></pre> <p>Handle the completion event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/document.html#pygerber.gerber.language_server._server.documents.document.Document.log_info","title":"log_info","text":"<pre><code>log_info(msg: Any) -&gt; None\n</code></pre> <p>Log an informational message to server log.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber","title":"gerber","text":""},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument","title":"GerberDocument","text":"<p>               Bases: <code>Document</code></p> <p>The <code>GerberDocument</code> class represents a single Gerber X3 document.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.load_ast_from_uri","title":"load_ast_from_uri","text":"<pre><code>load_ast_from_uri(uri: str) -&gt; File\n</code></pre> <p>Parse the input.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.load_ast_from_code","title":"load_ast_from_code","text":"<pre><code>load_ast_from_code(code: str) -&gt; File\n</code></pre> <p>Parse the input.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.on_open","title":"on_open  <code>async</code>","text":"<pre><code>on_open(params: DidOpenTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document open event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.on_close","title":"on_close  <code>async</code>","text":"<pre><code>on_close(params: DidCloseTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document close event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.on_change","title":"on_change  <code>async</code>","text":"<pre><code>on_change(params: DidChangeTextDocumentParams) -&gt; None\n</code></pre> <p>Handle the document change event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.on_hover","title":"on_hover  <code>async</code>","text":"<pre><code>on_hover(params: HoverParams) -&gt; Hover | None\n</code></pre> <p>Handle the hover event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.on_completion","title":"on_completion  <code>async</code>","text":"<pre><code>on_completion(\n    params: CompletionParams,\n) -&gt; CompletionList | None\n</code></pre> <p>Handle the completion event.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.get_completion_apertures","title":"get_completion_apertures","text":"<pre><code>get_completion_apertures() -&gt; CompletionList | None\n</code></pre> <p>Get the list of apertures.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.get_gerber_state","title":"get_gerber_state","text":"<pre><code>get_gerber_state() -&gt; Optional[State]\n</code></pre> <p>Get the state of the document.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.get_completion_g_codes","title":"get_completion_g_codes","text":"<pre><code>get_completion_g_codes() -&gt; CompletionList | None\n</code></pre> <p>Get the list of G-codes.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.GerberDocument.get_completion_extended_command","title":"get_completion_extended_command","text":"<pre><code>get_completion_extended_command() -&gt; CompletionList | None\n</code></pre> <p>Get the list of extended commands.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/documents/gerber.html#pygerber.gerber.language_server._server.documents.gerber.sha256","title":"sha256","text":"<pre><code>sha256(s: str) -&gt; str\n</code></pre> <p>Calculate SHA256 hash of the input.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/language_server/_server/hover/__init__.html#pygerber.gerber.language_server._server.hover","title":"hover","text":""},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html","title":"gerber","text":""},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber","title":"gerber","text":""},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.LimitedStateTrackingVisitor","title":"LimitedStateTrackingVisitor","text":"<p>               Bases: <code>StateTrackingVisitor</code></p> <p>The <code>LimitedStateTrackingVisitor</code> class which stops AST walk before particular location in source.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.LimitedStateTrackingVisitor.on_file","title":"on_file","text":"<pre><code>on_file(node: File) -&gt; File\n</code></pre> <p>Handle <code>File</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown","title":"ToMarkdown","text":"<p>               Bases: <code>AstVisitor</code></p> <p>Convert Gerber Node to markdown.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.to_markdown","title":"to_markdown","text":"<pre><code>to_markdown(node: Node) -&gt; str\n</code></pre> <p>Convert Gerber Node to markdown.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_ta_user_name","title":"on_ta_user_name","text":"<pre><code>on_ta_user_name(node: TA_UserName) -&gt; TA_UserName\n</code></pre> <p>Handle <code>TA_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_ta_aper_function","title":"on_ta_aper_function","text":"<pre><code>on_ta_aper_function(\n    node: TA_AperFunction,\n) -&gt; TA_AperFunction\n</code></pre> <p>Handle <code>TA_AperFunction</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_ta_drill_tolerance","title":"on_ta_drill_tolerance","text":"<pre><code>on_ta_drill_tolerance(\n    node: TA_DrillTolerance,\n) -&gt; TA_DrillTolerance\n</code></pre> <p>Handle <code>TA_DrillTolerance</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_ta_flash_text","title":"on_ta_flash_text","text":"<pre><code>on_ta_flash_text(node: TA_FlashText) -&gt; TA_FlashText\n</code></pre> <p>Handle <code>TA_FlashText</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_user_name","title":"on_to_user_name","text":"<pre><code>on_to_user_name(node: TO_UserName) -&gt; TO_UserName\n</code></pre> <p>Handle <code>TO_UserName</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_n","title":"on_to_n","text":"<pre><code>on_to_n(node: TO_N) -&gt; TO_N\n</code></pre> <p>Handle <code>TO_N</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_p","title":"on_to_p","text":"<pre><code>on_to_p(node: TO_P) -&gt; TO_P\n</code></pre> <p>Handle <code>TO_P</code> node`.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_c","title":"on_to_c","text":"<pre><code>on_to_c(node: TO_C) -&gt; TO_C\n</code></pre> <p>Handle <code>TO_C</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_crot","title":"on_to_crot","text":"<pre><code>on_to_crot(node: TO_CRot) -&gt; TO_CRot\n</code></pre> <p>Handle <code>TO_CRot</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cmfr","title":"on_to_cmfr","text":"<pre><code>on_to_cmfr(node: TO_CMfr) -&gt; TO_CMfr\n</code></pre> <p>Handle <code>TO_CMfr</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cmnp","title":"on_to_cmnp","text":"<pre><code>on_to_cmnp(node: TO_CMNP) -&gt; TO_CMNP\n</code></pre> <p>Handle <code>TO_CMNP</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cval","title":"on_to_cval","text":"<pre><code>on_to_cval(node: TO_CVal) -&gt; TO_CVal\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cmnt","title":"on_to_cmnt","text":"<pre><code>on_to_cmnt(node: TO_CMnt) -&gt; TO_CMnt\n</code></pre> <p>Handle <code>TO_CVal</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cftp","title":"on_to_cftp","text":"<pre><code>on_to_cftp(node: TO_CFtp) -&gt; TO_CFtp\n</code></pre> <p>Handle <code>TO_Cftp</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cpgn","title":"on_to_cpgn","text":"<pre><code>on_to_cpgn(node: TO_CPgN) -&gt; TO_CPgN\n</code></pre> <p>Handle <code>TO_CPgN</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_cpgd","title":"on_to_cpgd","text":"<pre><code>on_to_cpgd(node: TO_CPgD) -&gt; TO_CPgD\n</code></pre> <p>Handle <code>TO_CPgD</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_chgt","title":"on_to_chgt","text":"<pre><code>on_to_chgt(node: TO_CHgt) -&gt; TO_CHgt\n</code></pre> <p>Handle <code>TO_CHgt</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_clbn","title":"on_to_clbn","text":"<pre><code>on_to_clbn(node: TO_CLbN) -&gt; TO_CLbN\n</code></pre> <p>Handle <code>TO_CLbN</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_clbd","title":"on_to_clbd","text":"<pre><code>on_to_clbd(node: TO_CLbD) -&gt; TO_CLbD\n</code></pre> <p>Handle <code>TO_CLbD</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.ToMarkdown.on_to_csup","title":"on_to_csup","text":"<pre><code>on_to_csup(node: TO_CSup) -&gt; TO_CSup\n</code></pre> <p>Handle <code>TO_CSup</code> node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.GerberHoverCreator","title":"GerberHoverCreator","text":"<p>               Bases: <code>AstVisitor</code></p> <p>The <code>GerberHoverCreator</code> class generates hover information for Gerber AST node.</p>"},{"location":"reference/pygerber/gerber/language_server/_server/hover/gerber.html#pygerber.gerber.language_server._server.hover.gerber.GerberHoverCreator.create_hover_markdown","title":"create_hover_markdown","text":"<pre><code>create_hover_markdown(node: Node) -&gt; str\n</code></pre> <p>Get hover markdown for the given node.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter","title":"linter","text":"<p>Code diagnostic logic.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.EventAstVisitor","title":"EventAstVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p>EventAstVisitor class is a specialization of AstVisitor which sends a visit event to every listener which subscribed to event of visiting particular node.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.EventAstVisitor.register_listener","title":"register_listener","text":"<pre><code>register_listener(\n    node_type: type[Node], listener: Callable\n) -&gt; None\n</code></pre> <p>Register a listener for a particular node type.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Linter","title":"Linter","text":"<p>Linter class implements high level linting API for Gerber files.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Linter.__init__","title":"__init__","text":"<pre><code>__init__(rules: list[Rule]) -&gt; None\n</code></pre> <p>Initialize the Linter object.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Linter.lint","title":"lint","text":"<pre><code>lint(ast: File) -&gt; Iterable[RuleViolation]\n</code></pre> <p>Lint the AST and return a object containing all violations.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.RuleViolation","title":"RuleViolation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a rule violation detected by the linter.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule","title":"Rule","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for Gerber linter rules.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.get_violation_title","title":"get_violation_title  <code>abstractmethod</code>","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.get_violation_description","title":"get_violation_description  <code>abstractmethod</code>","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.get_trigger_nodes","title":"get_trigger_nodes  <code>abstractmethod</code>","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.bind_rule_to_ast_visitor","title":"bind_rule_to_ast_visitor","text":"<pre><code>bind_rule_to_ast_visitor(visitor: EventAstVisitor) -&gt; None\n</code></pre> <p>Bind the rule to the visitor.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.bind_rule_to_violation_collector","title":"bind_rule_to_violation_collector","text":"<pre><code>bind_rule_to_violation_collector(\n    collector: ViolationCollector,\n) -&gt; None\n</code></pre> <p>Bind the rule to the violation collector.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.reset","title":"reset  <code>abstractmethod</code>","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.report_violation","title":"report_violation","text":"<pre><code>report_violation(source_info: Optional[SourceInfo]) -&gt; None\n</code></pre> <p>Report a violation.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.Rule.node_callback","title":"node_callback  <code>abstractmethod</code>","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule","title":"StaticRule","text":"<p>               Bases: <code>Rule</code></p> <p>StaticRule class is a base class for simple rules requiring no dynamic messages and no logic except boolean triggered/not triggered check.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule.get_violation_title","title":"get_violation_title","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule.get_violation_description","title":"get_violation_description","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule.get_trigger_nodes","title":"get_trigger_nodes","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule.node_callback","title":"node_callback","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.StaticRule.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/__init__.html#pygerber.gerber.linter.lint","title":"lint","text":"<pre><code>lint(\n    ast: File, rules: Optional[list[str]] = None\n) -&gt; Iterable[RuleViolation]\n</code></pre> <p>Lint the AST using the provided rules.</p> <p>Parameters:</p> <ul> <li> <code>ast</code>               (<code>File</code>)           \u2013            <p>Abstract syntax tree to lint.</p> </li> <li> <code>rules</code>               (<code>list[str]</code>, default:                   <code>None</code> )           \u2013            <p>List of rule names to apply, if empty or None, all rules are applied.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[RuleViolation]</code>           \u2013            <p>List containing rule violations found in the AST.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/linter/event_ast_visitor.html","title":"event_ast_visitor","text":""},{"location":"reference/pygerber/gerber/linter/event_ast_visitor.html#pygerber.gerber.linter.event_ast_visitor","title":"event_ast_visitor","text":"<p><code>event_ast_visitor</code> module contains definition of EventAstVisitor class.</p>"},{"location":"reference/pygerber/gerber/linter/event_ast_visitor.html#pygerber.gerber.linter.event_ast_visitor.EventAstVisitor","title":"EventAstVisitor","text":"<p>               Bases: <code>AstVisitor</code></p> <p>EventAstVisitor class is a specialization of AstVisitor which sends a visit event to every listener which subscribed to event of visiting particular node.</p>"},{"location":"reference/pygerber/gerber/linter/event_ast_visitor.html#pygerber.gerber.linter.event_ast_visitor.EventAstVisitor.register_listener","title":"register_listener","text":"<pre><code>register_listener(\n    node_type: type[Node], listener: Callable\n) -&gt; None\n</code></pre> <p>Register a listener for a particular node type.</p>"},{"location":"reference/pygerber/gerber/linter/linter.html","title":"linter","text":""},{"location":"reference/pygerber/gerber/linter/linter.html#pygerber.gerber.linter.linter","title":"linter","text":"<p><code>linter</code> module contains Linter class implementation.</p>"},{"location":"reference/pygerber/gerber/linter/linter.html#pygerber.gerber.linter.linter.Linter","title":"Linter","text":"<p>Linter class implements high level linting API for Gerber files.</p>"},{"location":"reference/pygerber/gerber/linter/linter.html#pygerber.gerber.linter.linter.Linter.__init__","title":"__init__","text":"<pre><code>__init__(rules: list[Rule]) -&gt; None\n</code></pre> <p>Initialize the Linter object.</p>"},{"location":"reference/pygerber/gerber/linter/linter.html#pygerber.gerber.linter.linter.Linter.lint","title":"lint","text":"<pre><code>lint(ast: File) -&gt; Iterable[RuleViolation]\n</code></pre> <p>Lint the AST and return a object containing all violations.</p>"},{"location":"reference/pygerber/gerber/linter/rule_violation.html","title":"rule_violation","text":""},{"location":"reference/pygerber/gerber/linter/rule_violation.html#pygerber.gerber.linter.rule_violation","title":"rule_violation","text":"<p><code>rule_violation</code> contains the RuleViolation class.</p>"},{"location":"reference/pygerber/gerber/linter/rule_violation.html#pygerber.gerber.linter.rule_violation.RuleViolation","title":"RuleViolation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a rule violation detected by the linter.</p>"},{"location":"reference/pygerber/gerber/linter/violation_collector.html","title":"violation_collector","text":""},{"location":"reference/pygerber/gerber/linter/violation_collector.html#pygerber.gerber.linter.violation_collector","title":"violation_collector","text":"<p><code>violation_collector</code> module contains the ViolationCollector class.</p>"},{"location":"reference/pygerber/gerber/linter/violation_collector.html#pygerber.gerber.linter.violation_collector.ViolationCollector","title":"ViolationCollector","text":"<p>ViolationCollector class is a container for RuleViolations.</p>"},{"location":"reference/pygerber/gerber/linter/violation_collector.html#pygerber.gerber.linter.violation_collector.ViolationCollector.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Initialize the ViolationCollector object.</p>"},{"location":"reference/pygerber/gerber/linter/violation_collector.html#pygerber.gerber.linter.violation_collector.ViolationCollector.add_violation","title":"add_violation","text":"<pre><code>add_violation(violation: RuleViolation) -&gt; None\n</code></pre> <p>Add a violation to the collector.</p>"},{"location":"reference/pygerber/gerber/linter/rules/DEP001.html","title":"DEP001","text":""},{"location":"reference/pygerber/gerber/linter/rules/DEP001.html#pygerber.gerber.linter.rules.DEP001","title":"DEP001","text":"<p><code>DEP001</code> module contains linter rule DEP001 implementation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/DEP001.html#pygerber.gerber.linter.rules.DEP001.DEP001","title":"DEP001","text":"<p>               Bases: <code>StaticRule</code></p> <p>Rule DEP001 class implements a specific linting rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/DEP002.html","title":"DEP002","text":""},{"location":"reference/pygerber/gerber/linter/rules/DEP002.html#pygerber.gerber.linter.rules.DEP002","title":"DEP002","text":"<p><code>DEP002</code> module contains linter rule DEP002 implementation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/DEP002.html#pygerber.gerber.linter.rules.DEP002.DEP002","title":"DEP002","text":"<p>               Bases: <code>StaticRule</code></p> <p>Rule DEP002 class implements a specific linting rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html","title":"GRB001","text":""},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001","title":"GRB001","text":"<p><code>GRB001</code> module contains linter rule GRB001 implementation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001","title":"GRB001","text":"<p>               Bases: <code>Rule</code></p> <p>Rule GRB001 class implements a specific linting rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001.get_violation_title","title":"get_violation_title","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001.get_violation_description","title":"get_violation_description","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001.get_trigger_nodes","title":"get_trigger_nodes","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001.node_callback","title":"node_callback","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/rules/GRB001.html#pygerber.gerber.linter.rules.GRB001.GRB001.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules","title":"rules","text":"<p><code>rules</code> package contains all the linting rules for Gerber files.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule","title":"Rule","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for Gerber linter rules.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.get_violation_title","title":"get_violation_title  <code>abstractmethod</code>","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.get_violation_description","title":"get_violation_description  <code>abstractmethod</code>","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.get_trigger_nodes","title":"get_trigger_nodes  <code>abstractmethod</code>","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.bind_rule_to_ast_visitor","title":"bind_rule_to_ast_visitor","text":"<pre><code>bind_rule_to_ast_visitor(visitor: EventAstVisitor) -&gt; None\n</code></pre> <p>Bind the rule to the visitor.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.bind_rule_to_violation_collector","title":"bind_rule_to_violation_collector","text":"<pre><code>bind_rule_to_violation_collector(\n    collector: ViolationCollector,\n) -&gt; None\n</code></pre> <p>Bind the rule to the violation collector.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.reset","title":"reset  <code>abstractmethod</code>","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.report_violation","title":"report_violation","text":"<pre><code>report_violation(source_info: Optional[SourceInfo]) -&gt; None\n</code></pre> <p>Report a violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.Rule.node_callback","title":"node_callback  <code>abstractmethod</code>","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule","title":"StaticRule","text":"<p>               Bases: <code>Rule</code></p> <p>StaticRule class is a base class for simple rules requiring no dynamic messages and no logic except boolean triggered/not triggered check.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule.get_violation_title","title":"get_violation_title","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule.get_violation_description","title":"get_violation_description","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule.get_trigger_nodes","title":"get_trigger_nodes","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule.node_callback","title":"node_callback","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/rules/__init__.html#pygerber.gerber.linter.rules.StaticRule.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html","title":"rule","text":""},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule","title":"rule","text":"<p><code>rule</code> module contains the Rule class.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule","title":"Rule","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for Gerber linter rules.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.get_violation_title","title":"get_violation_title  <code>abstractmethod</code>","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.get_violation_description","title":"get_violation_description  <code>abstractmethod</code>","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.get_trigger_nodes","title":"get_trigger_nodes  <code>abstractmethod</code>","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.bind_rule_to_ast_visitor","title":"bind_rule_to_ast_visitor","text":"<pre><code>bind_rule_to_ast_visitor(visitor: EventAstVisitor) -&gt; None\n</code></pre> <p>Bind the rule to the visitor.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.bind_rule_to_violation_collector","title":"bind_rule_to_violation_collector","text":"<pre><code>bind_rule_to_violation_collector(\n    collector: ViolationCollector,\n) -&gt; None\n</code></pre> <p>Bind the rule to the violation collector.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.reset","title":"reset  <code>abstractmethod</code>","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.report_violation","title":"report_violation","text":"<pre><code>report_violation(source_info: Optional[SourceInfo]) -&gt; None\n</code></pre> <p>Report a violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.Rule.node_callback","title":"node_callback  <code>abstractmethod</code>","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/rules/rule.html#pygerber.gerber.linter.rules.rule.register_rule","title":"register_rule","text":"<pre><code>register_rule(rule: type[T]) -&gt; type[T]\n</code></pre> <p>Register a rule with the linter.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html","title":"static_rule","text":""},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule","title":"static_rule","text":"<p><code>static_rule</code> module contains definition of StaticRule class.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule","title":"StaticRule","text":"<p>               Bases: <code>Rule</code></p> <p>StaticRule class is a base class for simple rules requiring no dynamic messages and no logic except boolean triggered/not triggered check.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule.get_violation_title","title":"get_violation_title","text":"<pre><code>get_violation_title() -&gt; str\n</code></pre> <p>Return a title of message that describes the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule.get_violation_description","title":"get_violation_description","text":"<pre><code>get_violation_description() -&gt; str\n</code></pre> <p>Return a description of the rule violation.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule.get_trigger_nodes","title":"get_trigger_nodes","text":"<pre><code>get_trigger_nodes() -&gt; list[type[Node]]\n</code></pre> <p>Return a list of node names that trigger the rule.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule.node_callback","title":"node_callback","text":"<pre><code>node_callback(node: Node) -&gt; None\n</code></pre> <p>Check the node for violations.</p>"},{"location":"reference/pygerber/gerber/linter/rules/static_rule.html#pygerber.gerber.linter.rules.static_rule.StaticRule.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the rule state.</p>"},{"location":"reference/pygerber/gerber/optimizer/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/optimizer/__init__.html#pygerber.gerber.optimizer","title":"optimizer","text":"<p>Gerber code optimizer.</p>"},{"location":"reference/pygerber/gerber/optimizer/optimizer_pass/__init__.html","title":"optimizer_pass","text":""},{"location":"reference/pygerber/gerber/optimizer/optimizer_pass/__init__.html#pygerber.gerber.optimizer.optimizer_pass","title":"optimizer_pass","text":"<p>Namespace for optimizer passes.</p>"},{"location":"reference/pygerber/gerber/parser/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/parser/__init__.html#pygerber.gerber.parser","title":"parser","text":"<p>The <code>parser</code> package contains existing and future Gerber X3 parser implementations.</p> <p>Additionally, it exposes a high level <code>parse</code> function that allows to parse Gerber source.</p>"},{"location":"reference/pygerber/gerber/parser/__init__.html#pygerber.gerber.parser.ParserProtocol","title":"ParserProtocol","text":"<p>               Bases: <code>Protocol</code></p> <p>Parser protocol.</p>"},{"location":"reference/pygerber/gerber/parser/__init__.html#pygerber.gerber.parser.ParserProtocol.parse","title":"parse","text":"<pre><code>parse(code: str, *, strict: bool = True) -&gt; Any\n</code></pre> <p>Parse the input.</p>"},{"location":"reference/pygerber/gerber/parser/__init__.html#pygerber.gerber.parser.parse","title":"parse","text":"<pre><code>parse(\n    code: str,\n    *,\n    strict: bool = True,\n    parser: Literal[\"pyparsing\"] = \"pyparsing\",\n    resilient: bool = False,\n    ast_node_class_overrides: Optional[\n        dict[str, Type[Node]]\n    ] = None\n) -&gt; File\n</code></pre> <p>Parse Gerber X3 file source code and construct AST from it.</p> <p>Parameters:</p> <ul> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>Gerber source code.</p> </li> <li> <code>strict</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Toggle enforcement of parsing whole code, by default True When set to False, parser will try to parse as much as possible and will stop after it encounters first unrecognized token.</p> </li> <li> <code>parser</code>               (<code>Literal[&amp;quot;pyparsing&amp;quot;]</code>, default:                   <code>'pyparsing'</code> )           \u2013            <p>Parsing backend to use, by default \"pyparsing\"</p> </li> <li> <code>resilient</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Toggle resilient parsing. When set to True, when parser encounters invalid token it will wrap it in <code>InvalidToken</code> node and continue parsing, by default False</p> </li> <li> <code>ast_node_class_overrides</code>               (<code>Optional[dict[str, Type[Node]]]</code>, default:                   <code>None</code> )           \u2013            <p>Override classes representing nodes used by parser to construct abstract syntax tree, by default None When dictionary is provided, parser will check if there is a class override available for given node. Keys in dictionary have to be string corresponding to names of overridden node classes for parser to use them. In most cases it is necessary for replacement node class to inherit from original one.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>File</code>           \u2013            <p>Abstract syntax tree of parsed Gerber file.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>For unrecognized parser backend names.</p> </li> </ul>"},{"location":"reference/pygerber/gerber/parser/native/__init__.html","title":"native","text":""},{"location":"reference/pygerber/gerber/parser/native/__init__.html#pygerber.gerber.parser.native","title":"native","text":"<p>The <code>native</code> package will contain C++/Rust implementation of Gerber X3 parser.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/parser/pyparsing/__init__.html#pygerber.gerber.parser.pyparsing","title":"pyparsing","text":"<p>The <code>pyparsing</code> package contains Gerber X3 parser implementation based on pyparsing library.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html","title":"grammar","text":""},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar","title":"grammar","text":"<p>The <code>grammar</code> module contains the Gerber X3 grammar implemented using the pyparsing library.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Optimization","title":"Optimization","text":"<p>               Bases: <code>IntFlag</code></p> <p>Namespace class holding optimization level constants.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.SyntaxSwitches","title":"SyntaxSwitches","text":"<p>               Bases: <code>BaseModel</code></p> <p>The <code>SyntaxSwitches</code> class contains switches for toggling support for different variants of Gerber derived grammars not compatible with Gerber X3.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.SyntaxSwitches.allow_d01_without_code","title":"allow_d01_without_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_d01_without_code: bool = True\n</code></pre> <p>Allow D01 commands with <code>D01</code> literal omitted.</p> Example: <pre><code>X2331205Y10807331I4J-31018*\n</code></pre>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.SyntaxSwitches.allow_non_standalone_d_codes","title":"allow_non_standalone_d_codes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_non_standalone_d_codes: bool = True\n</code></pre> <p>Allow G codes merged with D codes.</p> Example: <pre><code>G01X2241001Y10806845D02*\n</code></pre>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar","title":"Grammar","text":"<p>Internal representation of the Gerber X3 grammar.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.build","title":"build","text":"<pre><code>build() -&gt; ParserElement\n</code></pre> <p>Build the grammar.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.build_resilient","title":"build_resilient","text":"<pre><code>build_resilient() -&gt; ParserElement\n</code></pre> <p>Build the grammar.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.get_cls","title":"get_cls","text":"<pre><code>get_cls(node_cls: Type[T]) -&gt; Type[T]\n</code></pre> <p>Get the class of the node.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.string","title":"string","text":"<pre><code>string() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing strings.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.comma","title":"comma","text":"<pre><code>comma() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing commas.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.name","title":"name","text":"<pre><code>name() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing names.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.user_name","title":"user_name","text":"<pre><code>user_name() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing user attribute names.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.field","title":"field","text":"<pre><code>field() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing user attribute names.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.double","title":"double","text":"<pre><code>double() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing doubles.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.integer","title":"integer","text":"<pre><code>integer() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing integers.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.boolean","title":"boolean","text":"<pre><code>boolean() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing integers.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.aperture_id","title":"aperture_id","text":"<pre><code>aperture_id() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing aperture identifiers.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.make_unpack_callback","title":"make_unpack_callback","text":"<pre><code>make_unpack_callback(\n    node_type: Type[Node], **kwargs: Any\n) -&gt; Callable[[str, int, ParseResults], Node]\n</code></pre> <p>Create a callback for unpacking the results of the parser.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.aperture","title":"aperture","text":"<pre><code>aperture() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing apertures.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.aperture_block","title":"aperture_block","text":"<pre><code>aperture_block() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing aperture blocks.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ab_open","title":"ab_open","text":"<pre><code>ab_open() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing AB-open.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ab_close","title":"ab_close","text":"<pre><code>ab_close() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing AB-close.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.macro","title":"macro","text":"<pre><code>macro() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing macros.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.am_open","title":"am_open","text":"<pre><code>am_open() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing AM-open.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.am_close","title":"am_close","text":"<pre><code>am_close() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing AM-close.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.step_repeat","title":"step_repeat","text":"<pre><code>step_repeat() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing step repeats.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.sr_open","title":"sr_open","text":"<pre><code>sr_open() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing SR-open.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.sr_close","title":"sr_close","text":"<pre><code>sr_close() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing SR-close.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.add_aperture","title":"add_aperture","text":"<pre><code>add_aperture() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.add_aperture_circle","title":"add_aperture_circle","text":"<pre><code>add_aperture_circle() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-circle commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.add_aperture_rectangle","title":"add_aperture_rectangle","text":"<pre><code>add_aperture_rectangle(\n    symbol: Literal[\"R\", \"O\"], cls: Type[Node]\n) -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-rectangle commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.add_aperture_polygon","title":"add_aperture_polygon","text":"<pre><code>add_aperture_polygon() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-polygon commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.add_aperture_macro","title":"add_aperture_macro","text":"<pre><code>add_aperture_macro() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing add-aperture-polygon commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.attribute","title":"attribute","text":"<pre><code>attribute() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing attributes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ta","title":"ta","text":"<pre><code>ta() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing TA attributes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.td","title":"td","text":"<pre><code>td() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing TD attributes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.tf","title":"tf","text":"<pre><code>tf() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing TF attributes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.to","title":"to","text":"<pre><code>to() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing TO attributes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.d_codes_standalone","title":"d_codes_standalone","text":"<pre><code>d_codes_standalone() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing standalone D-codes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.d_codes_non_standalone","title":"d_codes_non_standalone","text":"<pre><code>d_codes_non_standalone() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing standalone D-codes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.g_codes","title":"g_codes","text":"<pre><code>g_codes() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing G-codes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.load_commands","title":"load_commands","text":"<pre><code>load_commands() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing Load-commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ln","title":"ln","text":"<pre><code>ln() -&gt; ParserElement\n</code></pre> <p>Create a parser for the LN command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.lp","title":"lp","text":"<pre><code>lp() -&gt; ParserElement\n</code></pre> <p>Create a parser for the LP command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.lr","title":"lr","text":"<pre><code>lr() -&gt; ParserElement\n</code></pre> <p>Create a parser for the LR command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ls","title":"ls","text":"<pre><code>ls() -&gt; ParserElement\n</code></pre> <p>Create a parser for the LS command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.lm","title":"lm","text":"<pre><code>lm() -&gt; ParserElement\n</code></pre> <p>Create a parser for the LM command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.m_codes","title":"m_codes","text":"<pre><code>m_codes() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing M-codes.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.m","title":"m","text":"<pre><code>m(value: int, cls: Type[Node]) -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing particular D-code.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.expression","title":"expression","text":"<pre><code>expression() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing expressions.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.constant","title":"constant","text":"<pre><code>constant() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing constants.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.variable","title":"variable","text":"<pre><code>variable() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing variables.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.assignment","title":"assignment","text":"<pre><code>assignment() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing assignments.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.primitives","title":"primitives","text":"<pre><code>primitives() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing macro primitives.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.primitive","title":"primitive","text":"<pre><code>primitive(\n    cls: Type[Node], code: int, fields: ParserElement\n) -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing a primitive.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.properties","title":"properties","text":"<pre><code>properties() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing Properties-commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.fs","title":"fs","text":"<pre><code>fs() -&gt; ParserElement\n</code></pre> <p>Create a parser for the FS command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ip","title":"ip","text":"<pre><code>ip() -&gt; ParserElement\n</code></pre> <p>Create a parser for the IP command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.ir","title":"ir","text":"<pre><code>ir() -&gt; ParserElement\n</code></pre> <p>Create a parser for the IR command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.mo","title":"mo","text":"<pre><code>mo() -&gt; ParserElement\n</code></pre> <p>Create a parser for the MO command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.of","title":"of","text":"<pre><code>of() -&gt; ParserElement\n</code></pre> <p>Create a parser for the MO command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.as_","title":"as_","text":"<pre><code>as_() -&gt; ParserElement\n</code></pre> <p>Create a parser element capable of parsing AS-commands.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.mi","title":"mi","text":"<pre><code>mi() -&gt; ParserElement\n</code></pre> <p>Create a parser for the MI command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.in_","title":"in_","text":"<pre><code>in_() -&gt; ParserElement\n</code></pre> <p>Create a parser for the IN command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.Grammar.sf","title":"sf","text":"<pre><code>sf() -&gt; ParserElement\n</code></pre> <p>Create a parser for the SF command.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/grammar.html#pygerber.gerber.parser.pyparsing.grammar.take_only","title":"take_only","text":"<pre><code>take_only(expr: ParserElement, name: str) -&gt; ParserElement\n</code></pre> <p>Add parse action to extract single named parse result from a parse result.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/parser.html","title":"parser","text":""},{"location":"reference/pygerber/gerber/parser/pyparsing/parser.html#pygerber.gerber.parser.pyparsing.parser","title":"parser","text":"<p>The <code>parser</code> module contains Gerber X3 parser implementation based on pyparsing library.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/parser.html#pygerber.gerber.parser.pyparsing.parser.Parser","title":"Parser","text":"<p>Gerber X3 parser implementation.</p>"},{"location":"reference/pygerber/gerber/parser/pyparsing/parser.html#pygerber.gerber.parser.pyparsing.parser.Parser.parse","title":"parse","text":"<pre><code>parse(code: str, *, strict: bool = True) -&gt; File\n</code></pre> <p>Parse the input.</p>"},{"location":"reference/pygerber/gerber/spec/__init__.html","title":"init","text":""},{"location":"reference/pygerber/gerber/spec/__init__.html#pygerber.gerber.spec","title":"spec","text":"<p>The <code>spec</code> package contains fragments from the Gerber X3 specifications in Markdown prepared to be used by different parts of PyGerber.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html","title":"rev_2024_05","text":""},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05","title":"rev_2024_05","text":"<p>The <code>rev_2024_05</code> module contains selected fragments from The Gerber Layer Format Specification - Revision 2024.05 used to provide information about gerber standard in messages shown to users of PyGerber.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.Page","title":"Page  <code>dataclass</code>","text":"<p>The <code>Page</code> class represents a page in the Gerber specification.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.Page.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre> <p>Get the URL of the page.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.Page.pretty_title","title":"pretty_title  <code>property</code>","text":"<pre><code>pretty_title: str\n</code></pre> <p>Get the pretty title of the page.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.Page.markdown","title":"markdown  <code>property</code>","text":"<pre><code>markdown: str\n</code></pre> <p>Get the markdown of the page.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.Sections","title":"Sections","text":"<p>               Bases: <code>Namespace</code></p> <p>The <code>Sections</code> class contains map of sections of Gerber specification.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.spec_url","title":"spec_url","text":"<pre><code>spec_url() -&gt; str\n</code></pre> <p>Get the URL of the Gerber specification.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.spec_title","title":"spec_title","text":"<pre><code>spec_title() -&gt; str\n</code></pre> <p>Get the title of the Gerber specification.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.d01","title":"d01","text":"<pre><code>d01() -&gt; str\n</code></pre> <p>Get doc about D01 command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.d02","title":"d02","text":"<pre><code>d02() -&gt; str\n</code></pre> <p>Get doc about D02 command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.d03","title":"d03","text":"<pre><code>d03() -&gt; str\n</code></pre> <p>Get doc about D03 command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.to","title":"to","text":"<pre><code>to() -&gt; str\n</code></pre> <p>Get doc about TO command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.ta","title":"ta","text":"<pre><code>ta() -&gt; str\n</code></pre> <p>Get doc about TA command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.tf","title":"tf","text":"<pre><code>tf() -&gt; str\n</code></pre> <p>Get doc about TF command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.td","title":"td","text":"<pre><code>td() -&gt; str\n</code></pre> <p>Get doc about TD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.dnn","title":"dnn","text":"<pre><code>dnn() -&gt; str\n</code></pre> <p>Get doc about Dnn command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.adc","title":"adc","text":"<pre><code>adc() -&gt; str\n</code></pre> <p>Get doc about AD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.adr","title":"adr","text":"<pre><code>adr() -&gt; str\n</code></pre> <p>Get doc about AD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.ado","title":"ado","text":"<pre><code>ado() -&gt; str\n</code></pre> <p>Get doc about AD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.adp","title":"adp","text":"<pre><code>adp() -&gt; str\n</code></pre> <p>Get doc about AD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.ad_macro","title":"ad_macro","text":"<pre><code>ad_macro() -&gt; str\n</code></pre> <p>Get doc about AD command.</p>"},{"location":"reference/pygerber/gerber/spec/rev_2024_05.html#pygerber.gerber.spec.rev_2024_05.code_1","title":"code_1","text":"<pre><code>code_1() -&gt; str\n</code></pre> <p>Get doc about Code 1 primitive.</p>"},{"location":"reference/pygerber/vm/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm","title":"vm","text":"<p><code>vm</code> package contains all logic related to the virtual machines used for rendering images with use of simple generic stateless commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor","title":"CommandVisitor","text":"<p>Interface of a command visitor.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.CommandVisitor.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.RVMC","title":"RVMC","text":"<p>               Bases: <code>BaseModel</code></p> <p>Container class for PyGerber Rendering Virtual Machine Commands (RVMC).</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.RVMC.to_json","title":"to_json","text":"<pre><code>to_json(**kwargs: Any) -&gt; str\n</code></pre> <p>Convert RVMC to JSON.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.DeferredLayer","title":"DeferredLayer","text":"<p>               Bases: <code>Layer</code></p> <p><code>DeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>Commands executed on this layer are deferred until the layer is finished and size of layer can be determined.</p> <p>You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.EagerLayer","title":"EagerLayer","text":"<p>               Bases: <code>Layer</code></p> <p><code>EagerLayer</code> class represents drawing space of known fixed size.</p> <p>Commands executed on this layer are executed immediately.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Layer","title":"Layer","text":"<p><code>Layer</code> class represents drawing space in virtual machine.</p> <p>This class has two direct subclasses: <code>EagerLayer</code> and <code>DeferredLayer</code>. It is necessary to distinguish between them because we need to support creation of layer with known size and creation of layer with size unknown at creation time. <code>EagerLayer</code> is used for the former and <code>DeferredLayer</code> for the latter.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Layer.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: Vector = origin\n</code></pre> <p>Origin of the layer.</p> <p>Origin point represents local coordinates of the layer center.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Result","title":"Result","text":"<p>The <code>Result</code> class is a wrapper around items returned from virtual machine.</p> <p>It is used as a base class for results returned from vms extending <code>VirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.Result.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine","title":"VirtualMachine","text":"<p>               Bases: <code>CommandVisitor</code></p> <p>Virtual machine for executing simple drawing commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_handlers_for_layer","title":"set_handlers_for_layer","text":"<pre><code>set_handlers_for_layer(layer: Layer) -&gt; None\n</code></pre> <p>Set handlers for given layer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_eager_handlers","title":"set_eager_handlers","text":"<pre><code>set_eager_handlers() -&gt; None\n</code></pre> <p>Set handlers for eager mode.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_deferred_handlers","title":"set_deferred_handlers","text":"<pre><code>set_deferred_handlers() -&gt; None\n</code></pre> <p>Set handlers for deferred mode.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_shape_deferred","title":"on_shape_deferred","text":"<pre><code>on_shape_deferred(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a eager layer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_paste_layer_deferred","title":"on_paste_layer_deferred","text":"<pre><code>on_paste_layer_deferred(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a deferred layer.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer_id: LayerID, layer: Layer) -&gt; None\n</code></pre> <p>Assign layer object to particular ID in layer index.</p> <p>Overwriting existing layer is not allowed.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.get_layer","title":"get_layer","text":"<pre><code>get_layer(layer_id: LayerID) -&gt; Layer\n</code></pre> <p>Get layer by ID.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.is_layer_stack_empty","title":"is_layer_stack_empty","text":"<pre><code>is_layer_stack_empty() -&gt; bool\n</code></pre> <p>Check if layer stack is empty.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.push_layer_to_stack","title":"push_layer_to_stack","text":"<pre><code>push_layer_to_stack(layer: Layer) -&gt; None\n</code></pre> <p>Push layer to layer stack.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.pop_layer_from_stack","title":"pop_layer_from_stack","text":"<pre><code>pop_layer_from_stack() -&gt; Layer\n</code></pre> <p>Pop layer from layer stack.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.VirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; Result\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/__init__.html#pygerber.vm.render","title":"render","text":"<pre><code>render(\n    rvmc: RVMC,\n    *,\n    backend: Literal[\"pillow\", \"shapely\"] = \"pillow\",\n    **options: Any\n) -&gt; Result\n</code></pre> <p>Render RVMC code using given builder.</p>"},{"location":"reference/pygerber/vm/command_visitor.html","title":"command_visitor","text":""},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor","title":"command_visitor","text":"<p><code>command_visitor</code> module contains definition of <code>CommandVisitor</code> interface.</p> <p>For more information on the visitor pattern used here, visit: https://refactoring.guru/design-patterns/visitor</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor","title":"CommandVisitor","text":"<p>Interface of a command visitor.</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p>"},{"location":"reference/pygerber/vm/command_visitor.html#pygerber.vm.command_visitor.CommandVisitor.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/rvmc.html","title":"rvmc","text":""},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc","title":"rvmc","text":"<p><code>rvmc</code> module contains definition of RVMC class.</p>"},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc.RVMC","title":"RVMC","text":"<p>               Bases: <code>BaseModel</code></p> <p>Container class for PyGerber Rendering Virtual Machine Commands (RVMC).</p>"},{"location":"reference/pygerber/vm/rvmc.html#pygerber.vm.rvmc.RVMC.to_json","title":"to_json","text":"<pre><code>to_json(**kwargs: Any) -&gt; str\n</code></pre> <p>Convert RVMC to JSON.</p>"},{"location":"reference/pygerber/vm/vm.html","title":"vm","text":""},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm","title":"vm","text":"<p><code>base</code> module contains definition of base <code>VirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Result","title":"Result","text":"<p>The <code>Result</code> class is a wrapper around items returned from virtual machine.</p> <p>It is used as a base class for results returned from vms extending <code>VirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Result.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Layer","title":"Layer","text":"<p><code>Layer</code> class represents drawing space in virtual machine.</p> <p>This class has two direct subclasses: <code>EagerLayer</code> and <code>DeferredLayer</code>. It is necessary to distinguish between them because we need to support creation of layer with known size and creation of layer with size unknown at creation time. <code>EagerLayer</code> is used for the former and <code>DeferredLayer</code> for the latter.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.Layer.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: Vector = origin\n</code></pre> <p>Origin of the layer.</p> <p>Origin point represents local coordinates of the layer center.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.EagerLayer","title":"EagerLayer","text":"<p>               Bases: <code>Layer</code></p> <p><code>EagerLayer</code> class represents drawing space of known fixed size.</p> <p>Commands executed on this layer are executed immediately.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.DeferredLayer","title":"DeferredLayer","text":"<p>               Bases: <code>Layer</code></p> <p><code>DeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>Commands executed on this layer are deferred until the layer is finished and size of layer can be determined.</p> <p>You cannot paste unfinished DeferredLayer into another unfinished DeferredLayer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine","title":"VirtualMachine","text":"<p>               Bases: <code>CommandVisitor</code></p> <p>Virtual machine for executing simple drawing commands.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_handlers_for_layer","title":"set_handlers_for_layer","text":"<pre><code>set_handlers_for_layer(layer: Layer) -&gt; None\n</code></pre> <p>Set handlers for given layer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_eager_handlers","title":"set_eager_handlers","text":"<pre><code>set_eager_handlers() -&gt; None\n</code></pre> <p>Set handlers for eager mode.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_deferred_handlers","title":"set_deferred_handlers","text":"<pre><code>set_deferred_handlers() -&gt; None\n</code></pre> <p>Set handlers for deferred mode.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape","title":"on_shape","text":"<pre><code>on_shape(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_shape_deferred","title":"on_shape_deferred","text":"<pre><code>on_shape_deferred(command: Shape) -&gt; None\n</code></pre> <p>Visit <code>Shape</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer","title":"on_paste_layer","text":"<pre><code>on_paste_layer(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a eager layer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_paste_layer_deferred","title":"on_paste_layer_deferred","text":"<pre><code>on_paste_layer_deferred(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p> <p>This method is used when currently selected layer is a deferred layer.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_start_layer","title":"on_start_layer","text":"<pre><code>on_start_layer(command: StartLayer) -&gt; None\n</code></pre> <p>Visit <code>StartLayer</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer_id: LayerID, layer: Layer) -&gt; None\n</code></pre> <p>Assign layer object to particular ID in layer index.</p> <p>Overwriting existing layer is not allowed.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.get_layer","title":"get_layer","text":"<pre><code>get_layer(layer_id: LayerID) -&gt; Layer\n</code></pre> <p>Get layer by ID.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.is_layer_stack_empty","title":"is_layer_stack_empty","text":"<pre><code>is_layer_stack_empty() -&gt; bool\n</code></pre> <p>Check if layer stack is empty.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.push_layer_to_stack","title":"push_layer_to_stack","text":"<pre><code>push_layer_to_stack(layer: Layer) -&gt; None\n</code></pre> <p>Push layer to layer stack.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.pop_layer_from_stack","title":"pop_layer_from_stack","text":"<pre><code>pop_layer_from_stack() -&gt; Layer\n</code></pre> <p>Pop layer from layer stack.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.on_end_layer","title":"on_end_layer","text":"<pre><code>on_end_layer(command: EndLayer) -&gt; None\n</code></pre> <p>Visit <code>EndLayer</code> command.</p>"},{"location":"reference/pygerber/vm/vm.html#pygerber.vm.vm.VirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; Result\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands","title":"commands","text":"<p><code>commands</code> package contains all the commands that can be executed by the VirtualMachine class and its descendants.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Command","title":"Command","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for drawing commands.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Command.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visitor interface implementation.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.EndLayer","title":"EndLayer","text":"<p>               Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.EndLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit end layer command.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.StartLayer","title":"StartLayer","text":"<p>               Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.StartLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit start layer command.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer","title":"PasteLayer","text":"<p>               Bases: <code>Command</code></p> <p>Paste contents of one layer into other layer.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit paste layer command.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.PasteLayer.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False\n) -&gt; Self\n</code></pre> <p>Create a new start layer command from values.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape","title":"Shape","text":"<p>               Bases: <code>Command</code></p> <p><code>Shape</code> command instructs VM to render a shape described by series of lines and arcs into currently active layer.</p> <p>Last point of first segment (line or arc) is always connected to the first point of first segment, so shapes are implicitly closed. If those points are not overlapping, they are connected by a straight line.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transpose shape by vector.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit polygon command.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_rectangle","title":"new_rectangle  <code>classmethod</code>","text":"<pre><code>new_rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_obround","title":"new_obround  <code>classmethod</code>","text":"<pre><code>new_obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle with shorter side rounded.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_circle","title":"new_circle  <code>classmethod</code>","text":"<pre><code>new_circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of circle.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_polygon","title":"new_polygon  <code>classmethod</code>","text":"<pre><code>new_polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of regular polygon.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_line","title":"new_line  <code>classmethod</code>","text":"<pre><code>new_line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of line with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_cw_arc","title":"new_cw_arc  <code>classmethod</code>","text":"<pre><code>new_cw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of clockwise arc with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_ccw_arc","title":"new_ccw_arc  <code>classmethod</code>","text":"<pre><code>new_ccw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of counterclockwise arc with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_ring","title":"new_ring  <code>classmethod</code>","text":"<pre><code>new_ring(\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; tuple[Self, Self]\n</code></pre> <p>Create polygon in shape of ring.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Shape.new_connected_points","title":"new_connected_points  <code>classmethod</code>","text":"<pre><code>new_connected_points(\n    *points: tuple[float, float],\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon from connected points.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc","title":"Arc","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line","title":"Line","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment","title":"ShapeSegment","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/__init__.html#pygerber.vm.commands.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p>"},{"location":"reference/pygerber/vm/commands/command.html","title":"command","text":""},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command","title":"command","text":"<p><code>command</code> module contains the base class for commands executable on PyGerber VMs.</p>"},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command.Command","title":"Command","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for drawing commands.</p>"},{"location":"reference/pygerber/vm/commands/command.html#pygerber.vm.commands.command.Command.visit","title":"visit  <code>abstractmethod</code>","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visitor interface implementation.</p>"},{"location":"reference/pygerber/vm/commands/layer.html","title":"layer","text":""},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer","title":"layer","text":"<p><code>layer</code> module contains commands for image layer management.</p>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.StartLayer","title":"StartLayer","text":"<p>               Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.StartLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit start layer command.</p>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.EndLayer","title":"EndLayer","text":"<p>               Bases: <code>Command</code></p> <p>Draw a line from the current position to the given position.</p>"},{"location":"reference/pygerber/vm/commands/layer.html#pygerber.vm.commands.layer.EndLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit end layer command.</p>"},{"location":"reference/pygerber/vm/commands/paste.html","title":"paste","text":""},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste","title":"paste","text":"<p><code>layer</code> module contains commands for image layer management.</p>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer","title":"PasteLayer","text":"<p>               Bases: <code>Command</code></p> <p>Paste contents of one layer into other layer.</p>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit paste layer command.</p>"},{"location":"reference/pygerber/vm/commands/paste.html#pygerber.vm.commands.paste.PasteLayer.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(\n    source_layer_id: str,\n    center: tuple[float, float],\n    *,\n    is_negative: bool = False\n) -&gt; Self\n</code></pre> <p>Create a new start layer command from values.</p>"},{"location":"reference/pygerber/vm/commands/shape.html","title":"shape","text":""},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape","title":"shape","text":"<p><code>shape</code> module contains classes for drawing shapes consisting of connected lines and arcs filled with solid color.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape","title":"Shape","text":"<p>               Bases: <code>Command</code></p> <p><code>Shape</code> command instructs VM to render a shape described by series of lines and arcs into currently active layer.</p> <p>Last point of first segment (line or arc) is always connected to the first point of first segment, so shapes are implicitly closed. If those points are not overlapping, they are connected by a straight line.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transpose shape by vector.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.visit","title":"visit","text":"<pre><code>visit(visitor: CommandVisitor) -&gt; None\n</code></pre> <p>Visit polygon command.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_rectangle","title":"new_rectangle  <code>classmethod</code>","text":"<pre><code>new_rectangle(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_obround","title":"new_obround  <code>classmethod</code>","text":"<pre><code>new_obround(\n    center: tuple[float, float],\n    width: float,\n    height: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of rectangle with shorter side rounded.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_circle","title":"new_circle  <code>classmethod</code>","text":"<pre><code>new_circle(\n    center: tuple[float, float],\n    diameter: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of circle.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_polygon","title":"new_polygon  <code>classmethod</code>","text":"<pre><code>new_polygon(\n    center: tuple[float, float],\n    outer_diameter: float,\n    vertices_count: int,\n    base_rotation: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of regular polygon.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_line","title":"new_line  <code>classmethod</code>","text":"<pre><code>new_line(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of line with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_cw_arc","title":"new_cw_arc  <code>classmethod</code>","text":"<pre><code>new_cw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of clockwise arc with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_ccw_arc","title":"new_ccw_arc  <code>classmethod</code>","text":"<pre><code>new_ccw_arc(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    thickness: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon in shape of counterclockwise arc with specified thickness.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_ring","title":"new_ring  <code>classmethod</code>","text":"<pre><code>new_ring(\n    center: tuple[float, float],\n    outer_diameter: float,\n    inner_diameter: float,\n    *,\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; tuple[Self, Self]\n</code></pre> <p>Create polygon in shape of ring.</p>"},{"location":"reference/pygerber/vm/commands/shape.html#pygerber.vm.commands.shape.Shape.new_connected_points","title":"new_connected_points  <code>classmethod</code>","text":"<pre><code>new_connected_points(\n    *points: tuple[float, float],\n    is_negative: bool,\n    metadata: Optional[dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Create polygon from connected points.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments","title":"shape_segments","text":"<p><code>shape_segments</code> module contains classes representing shape segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc","title":"Arc","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line","title":"Line","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment","title":"ShapeSegment","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/__init__.html#pygerber.vm.commands.shape_segments.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html","title":"arc","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc","title":"arc","text":"<p><code>line</code> module contains Line class, descendant of ShapeSegment class.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc","title":"Arc","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Arc segment which can be used to define Shape contents.</p> <p>Arc resolution is determined at rendering time and dynamically adjusted to provide the best image quality. This gives Arc class great advantage over creating arcs with multiple manually defined Line segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float],\n    end: tuple[float, float],\n    center: tuple[float, float],\n    *,\n    clockwise: bool\n) -&gt; Self\n</code></pre> <p>Create a new arc from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_relative_start_point","title":"get_relative_start_point","text":"<pre><code>get_relative_start_point() -&gt; Vector\n</code></pre> <p>Get starting point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_relative_end_point","title":"get_relative_end_point","text":"<pre><code>get_relative_end_point() -&gt; Vector\n</code></pre> <p>Get ending point relative to arc center.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.get_radius","title":"get_radius","text":"<pre><code>get_radius() -&gt; float\n</code></pre> <p>Get radius of circle arc.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.is_valid_arc","title":"is_valid_arc","text":"<pre><code>is_valid_arc() -&gt; bool\n</code></pre> <p>Check if arc is valid.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/arc.html#pygerber.vm.commands.shape_segments.arc.Arc.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html","title":"line","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line","title":"line","text":"<p><code>line</code> module contains Line class, descendant of ShapeSegment class.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line","title":"Line","text":"<p>               Bases: <code>ShapeSegment</code></p> <p>Line segment which can be used to define Shape contents.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.from_tuples","title":"from_tuples  <code>classmethod</code>","text":"<pre><code>from_tuples(\n    start: tuple[float, float], end: tuple[float, float]\n) -&gt; Self\n</code></pre> <p>Create a new line from two tuples.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/line.html#pygerber.vm.commands.shape_segments.line.Line.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform points defining this line.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html","title":"shape_segment","text":""},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment","title":"shape_segment","text":"<p><code>base</code> module contains ShapeSegment class used as base class for all Shape segments.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment","title":"ShapeSegment","text":"<p>               Bases: <code>ModelType</code></p> <p>Base class for shape segment types.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment.outer_box","title":"outer_box","text":"<pre><code>outer_box() -&gt; Box\n</code></pre> <p>Get outer box of shape segment.</p>"},{"location":"reference/pygerber/vm/commands/shape_segments/shape_segment.html#pygerber.vm.commands.shape_segments.shape_segment.ShapeSegment.transform","title":"transform","text":"<pre><code>transform(transform: Matrix3x3) -&gt; Self\n</code></pre> <p>Transform line.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow","title":"pillow","text":"<p><code>pillow</code> package contains concrete implementation of <code>VirtualMachine</code> using Pillow library.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.DPMMTooSmallError","title":"DPMMTooSmallError","text":"<p>               Bases: <code>PillowVirtualMachineError</code></p> <p>Raised when dots per millimeter is too small for the given DPI.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachineError","title":"PillowVirtualMachineError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the PillowVirtualMachine.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowDeferredLayer","title":"PillowDeferredLayer","text":"<p>               Bases: <code>DeferredLayer</code></p> <p><code>PillowDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowEagerLayer","title":"PillowEagerLayer","text":"<p>               Bases: <code>EagerLayer</code></p> <p><code>PillowEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowEagerLayer.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult","title":"PillowResult","text":"<p>               Bases: <code>Result</code></p> <p>The <code>PillowResult</code> class is a wrapper around items returned <code>PillowVirtualMachine</code> class as a result of executing rendering instruction.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.is_success","title":"is_success","text":"<pre><code>is_success() -&gt; bool\n</code></pre> <p>Check if result is successful.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save_bmp","title":"save_bmp","text":"<pre><code>save_bmp(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in BMP format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save_png","title":"save_png","text":"<pre><code>save_png(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in PNG format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save_jpeg","title":"save_jpeg","text":"<pre><code>save_jpeg(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in JPEG format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save_tiff","title":"save_tiff","text":"<pre><code>save_tiff(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in TIFF format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.save_webp","title":"save_webp","text":"<pre><code>save_webp(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in WEBP format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.get_image","title":"get_image","text":"<pre><code>get_image(\n    style: Style = Style.presets.COPPER_ALPHA,\n) -&gt; Image\n</code></pre> <p>Get image with given color scheme.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowResult.get_image_no_style","title":"get_image_no_style","text":"<pre><code>get_image_no_style() -&gt; Image\n</code></pre> <p>Get image without any color scheme.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine","title":"PillowVirtualMachine","text":"<p>               Bases: <code>VirtualMachine</code></p> <p>The <code>PillowVirtualMachine</code> class is a concrete implementation of <code>VirtualMachine</code> which uses Shapely library for rendering commands.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: PillowEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.get_color","title":"get_color","text":"<pre><code>get_color(*, is_negative: bool) -&gt; int\n</code></pre> <p>Get color for positive or negative.</p>"},{"location":"reference/pygerber/vm/pillow/__init__.html#pygerber.vm.pillow.PillowVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; PillowResult\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/pillow/errors.html","title":"errors","text":""},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors","title":"errors","text":"<p><code>errors</code> module aggregates all exceptions related to the PillowVirtualMachine.</p>"},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors.PillowVirtualMachineError","title":"PillowVirtualMachineError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the PillowVirtualMachine.</p>"},{"location":"reference/pygerber/vm/pillow/errors.html#pygerber.vm.pillow.errors.DPMMTooSmallError","title":"DPMMTooSmallError","text":"<p>               Bases: <code>PillowVirtualMachineError</code></p> <p>Raised when dots per millimeter is too small for the given DPI.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html","title":"vm","text":""},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm","title":"vm","text":"<p><code>pillow</code> module contains concrete implementation of <code>VirtualMachine</code> using Pillow library.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult","title":"PillowResult","text":"<p>               Bases: <code>Result</code></p> <p>The <code>PillowResult</code> class is a wrapper around items returned <code>PillowVirtualMachine</code> class as a result of executing rendering instruction.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.is_success","title":"is_success","text":"<pre><code>is_success() -&gt; bool\n</code></pre> <p>Check if result is successful.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save_bmp","title":"save_bmp","text":"<pre><code>save_bmp(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in BMP format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save_png","title":"save_png","text":"<pre><code>save_png(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in PNG format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save_jpeg","title":"save_jpeg","text":"<pre><code>save_jpeg(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in JPEG format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save_tiff","title":"save_tiff","text":"<pre><code>save_tiff(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in TIFF format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.save_webp","title":"save_webp","text":"<pre><code>save_webp(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in WEBP format.</p> <p>See pillow documentation here.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to <code>PIL.Image.save</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.get_image","title":"get_image","text":"<pre><code>get_image(\n    style: Style = Style.presets.COPPER_ALPHA,\n) -&gt; Image\n</code></pre> <p>Get image with given color scheme.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowResult.get_image_no_style","title":"get_image_no_style","text":"<pre><code>get_image_no_style() -&gt; Image\n</code></pre> <p>Get image without any color scheme.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowEagerLayer","title":"PillowEagerLayer","text":"<p>               Bases: <code>EagerLayer</code></p> <p><code>PillowEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowEagerLayer.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowDeferredLayer","title":"PillowDeferredLayer","text":"<p>               Bases: <code>DeferredLayer</code></p> <p><code>PillowDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>PillowVirtualMachine</code> class.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine","title":"PillowVirtualMachine","text":"<p>               Bases: <code>VirtualMachine</code></p> <p>The <code>PillowVirtualMachine</code> class is a concrete implementation of <code>VirtualMachine</code> which uses Shapely library for rendering commands.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: PillowEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.to_pixel","title":"to_pixel","text":"<pre><code>to_pixel(value: float) -&gt; int\n</code></pre> <p>Convert value in mm to pixels.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.get_color","title":"get_color","text":"<pre><code>get_color(*, is_negative: bool) -&gt; int\n</code></pre> <p>Get color for positive or negative.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.PillowVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; PillowResult\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.replace_color","title":"replace_color","text":"<pre><code>replace_color(\n    input_image: Image,\n    original: tuple[int, ...] | int,\n    replacement: tuple[int, ...] | int,\n    *,\n    output_image_mode: str = \"RGBA\"\n) -&gt; Image\n</code></pre> <p>Replace <code>original</code> color from input image with <code>replacement</code> color.</p>"},{"location":"reference/pygerber/vm/pillow/vm.html#pygerber.vm.pillow.vm.replace_color_in_place","title":"replace_color_in_place","text":"<pre><code>replace_color_in_place(\n    image: Image,\n    original: tuple[int, ...] | int,\n    replacement: tuple[int, ...] | int,\n) -&gt; Image\n</code></pre> <p>Replace <code>original</code> color from input image with <code>replacement</code> color.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely","title":"shapely","text":"<p>The <code>shapely</code> package contains concrete implementation of <code>VirtualMachine</code> using Shapely library.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyNotInstalledError","title":"ShapelyNotInstalledError","text":"<p>               Bases: <code>ShapelyVirtualMachineError</code></p> <p>Raised when shapely package or other dependencies of <code>ShapelyVirtualMachine</code> are not installed.</p> <p>To install all dependencies of <code>ShapelyVirtualMachine</code>, run:</p> <pre><code>pip install pygerber[shapely]\n</code></pre>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachineError","title":"ShapelyVirtualMachineError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the <code>ShapelyVirtualMachine</code>.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyDeferredLayer","title":"ShapelyDeferredLayer","text":"<p>               Bases: <code>DeferredLayer</code></p> <p><code>ShapelyDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>ShapelyDeferredLayer</code> class.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyEagerLayer","title":"ShapelyEagerLayer","text":"<p>               Bases: <code>EagerLayer</code></p> <p><code>ShapelyEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>ShapelyEagerLayer</code> class.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyResult","title":"ShapelyResult","text":"<p>               Bases: <code>Result</code></p> <p>The <code>ShapelyResult</code> class is a wrapper around items returned <code>ShapelyVirtualMachine</code> class as a result of executing rendering instruction.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyResult.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyResult.save_svg","title":"save_svg","text":"<pre><code>save_svg(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in SVG format.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, StringIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to implementation. In particular, <code>encoding</code> can be used to specify encoding of the data, default is <code>utf-8</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine","title":"ShapelyVirtualMachine","text":"<p>               Bases: <code>VirtualMachine</code></p> <p>The <code>ShapelyVirtualMachine</code> class is a concrete implementation of <code>VirtualMachine</code> which uses Shapely library for rendering commands.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: ShapelyEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/shapely/__init__.html#pygerber.vm.shapely.ShapelyVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; ShapelyResult\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/shapely/errors.html","title":"errors","text":""},{"location":"reference/pygerber/vm/shapely/errors.html#pygerber.vm.shapely.errors","title":"errors","text":"<p><code>errors</code> module aggregates all exceptions related to the <code>ShapelyVirtualMachine</code>.</p>"},{"location":"reference/pygerber/vm/shapely/errors.html#pygerber.vm.shapely.errors.ShapelyVirtualMachineError","title":"ShapelyVirtualMachineError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Base class for all exceptions in the <code>ShapelyVirtualMachine</code>.</p>"},{"location":"reference/pygerber/vm/shapely/errors.html#pygerber.vm.shapely.errors.ShapelyNotInstalledError","title":"ShapelyNotInstalledError","text":"<p>               Bases: <code>ShapelyVirtualMachineError</code></p> <p>Raised when shapely package or other dependencies of <code>ShapelyVirtualMachine</code> are not installed.</p> <p>To install all dependencies of <code>ShapelyVirtualMachine</code>, run:</p> <pre><code>pip install pygerber[shapely]\n</code></pre>"},{"location":"reference/pygerber/vm/shapely/vm.html","title":"vm","text":""},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm","title":"vm","text":"<p>The <code>vm</code> module contains concrete implementation of <code>VirtualMachine</code> using Shapely library.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyResult","title":"ShapelyResult","text":"<p>               Bases: <code>Result</code></p> <p>The <code>ShapelyResult</code> class is a wrapper around items returned <code>ShapelyVirtualMachine</code> class as a result of executing rendering instruction.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyResult.save","title":"save","text":"<pre><code>save(\n    destination: str | Path | BinaryIO,\n    file_format: str,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in <code>file_format</code>.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, BytesIO) objects are written to directly.</p> </li> <li> <code>file_format</code>               (<code>str</code>)           \u2013            <p>Format to save the image in. Supported formats vary depending on the VirtualMachine used. You can expect though that vector images will support SVG and raster images will support PNG and JPEG formats. Other formats are possible, please check the documentation of the VirtualMachine you are using.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to save implementation.</p> </li> </ul>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyResult.save_svg","title":"save_svg","text":"<pre><code>save_svg(\n    destination: str | Path | BinaryIO,\n    color: Style = Style.presets.COPPER_ALPHA,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Save result to a file or buffer in SVG format.</p> <p>Parameters:</p> <ul> <li> <code>destination</code>               (<code>str | Path | BinaryIO</code>)           \u2013            <p><code>str</code> and <code>Path</code> objects are interpreted as file paths and opened with truncation. <code>BinaryIO</code>-like (files, StringIO) objects are written to directly.</p> </li> <li> <code>color</code>               (<code>Style</code>, default:                   <code>COPPER_ALPHA</code> )           \u2013            <p>Color to use for SVG, background is ignored as it is always rendered as empty space, so only foreground applies, by default Style.presets.COPPER_ALPHA</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to implementation. In particular, <code>encoding</code> can be used to specify encoding of the data, default is <code>utf-8</code>.</p> </li> </ul>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyEagerLayer","title":"ShapelyEagerLayer","text":"<p>               Bases: <code>EagerLayer</code></p> <p><code>ShapelyEagerLayer</code> class represents drawing space of known fixed size.</p> <p>It is specifically used by <code>ShapelyEagerLayer</code> class.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyDeferredLayer","title":"ShapelyDeferredLayer","text":"<p>               Bases: <code>DeferredLayer</code></p> <p><code>ShapelyDeferredLayer</code> class represents drawing space of size unknown at time of creation of layer.</p> <p>It is specifically used by <code>ShapelyDeferredLayer</code> class.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine","title":"ShapelyVirtualMachine","text":"<p>               Bases: <code>VirtualMachine</code></p> <p>The <code>ShapelyVirtualMachine</code> class is a concrete implementation of <code>VirtualMachine</code> which uses Shapely library for rendering commands.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.layer","title":"layer  <code>property</code>","text":"<pre><code>layer: ShapelyEagerLayer\n</code></pre> <p>Get current layer.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.create_eager_layer","title":"create_eager_layer","text":"<pre><code>create_eager_layer(\n    layer_id: LayerID, origin: Vector, box: Box\n) -&gt; Layer\n</code></pre> <p>Create new eager layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.create_deferred_layer","title":"create_deferred_layer","text":"<pre><code>create_deferred_layer(\n    layer_id: LayerID, origin: Vector\n) -&gt; Layer\n</code></pre> <p>Create new deferred layer instances (factory method).</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.on_shape_eager","title":"on_shape_eager","text":"<pre><code>on_shape_eager(command: Shape) -&gt; None\n</code></pre> <p>Visit shape command.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.on_paste_layer_eager","title":"on_paste_layer_eager","text":"<pre><code>on_paste_layer_eager(command: PasteLayer) -&gt; None\n</code></pre> <p>Visit <code>PasteLayer</code> command.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.ShapelyVirtualMachine.run","title":"run","text":"<pre><code>run(rvmc: RVMC) -&gt; ShapelyResult\n</code></pre> <p>Execute all commands.</p>"},{"location":"reference/pygerber/vm/shapely/vm.html#pygerber.vm.shapely.vm.is_shapely_available","title":"is_shapely_available","text":"<pre><code>is_shapely_available() -&gt; bool\n</code></pre> <p>Check if the language server feature is available.</p>"},{"location":"reference/pygerber/vm/types/__init__.html","title":"init","text":""},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types","title":"types","text":"<p><code>types</code> package contains all utility types used in the <code>VirtualMachine</code> ecosystem.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box","title":"Box","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents a box in 2D space.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.from_vectors","title":"from_vectors  <code>classmethod</code>","text":"<pre><code>from_vectors(*vectors: Vector) -&gt; Self\n</code></pre> <p>Create a box from vectors.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.from_center_width_height","title":"from_center_width_height  <code>classmethod</code>","text":"<pre><code>from_center_width_height(\n    center: tuple[float, float], width: float, height: float\n) -&gt; Self\n</code></pre> <p>Create a box from center, width and height.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.width","title":"width","text":"<pre><code>width() -&gt; float\n</code></pre> <p>Get width of the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.height","title":"height","text":"<pre><code>height() -&gt; float\n</code></pre> <p>Get height of the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.center","title":"center","text":"<pre><code>center() -&gt; Vector\n</code></pre> <p>Get mean center of the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__iadd__","title":"__iadd__","text":"<pre><code>__iadd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__radd__","title":"__radd__","text":"<pre><code>__radd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__isub__","title":"__isub__","text":"<pre><code>__isub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Box.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color","title":"Color","text":"<p>               Bases: <code>ModelType</code></p> <p>Color class represents a RGBA color.</p> <p>Channels are represented as integers in range 0 to 255.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.red","title":"red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>red: ChannelType = ChannelField\n</code></pre> <p>Red channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.green","title":"green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>green: ChannelType = ChannelField\n</code></pre> <p>Green channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.blue","title":"blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blue: ChannelType = ChannelField\n</code></pre> <p>Blue channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.alpha","title":"alpha  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alpha: ChannelType = ChannelField\n</code></pre> <p>Alpha channel value.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RGBA</code>           \u2013            <p>Color built from hexadecimal values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(\n    red: int, green: int, blue: int, alpha: int = 255\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>)           \u2013            <p>Red chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>green</code>               (<code>int</code>)           \u2013            <p>Green chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>blue</code>               (<code>int</code>)           \u2013            <p>Blue chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from r, g, b, a values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Hue of color, integer in range 0 to 360 inclusive.</p> </li> <li> <code>saturation</code>               (<code>float</code>)           \u2013            <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha of color, int in range 0 to 255 inclusive.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from h, s, v, a values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Color.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.EmptyAutoSizedLayerNotAllowedError","title":"EmptyAutoSizedLayerNotAllowedError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when an empty AutoSizedLayer is attempted to be created.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerAlreadyExistsError","title":"LayerAlreadyExistsError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID already exists during create operation.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerNotFoundError","title":"LayerNotFoundError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID was not found during paste operation.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.NoLayerSetError","title":"NoLayerSetError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when no layer was set prior to drawing shapes.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.NoMainLayerError","title":"NoMainLayerError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when no main layer was created by executing RVMC.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.PasteDeferredLayerNotAllowedError","title":"PasteDeferredLayerNotAllowedError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when deferred layer is attempted to be pasted into other layer.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.VirtualMachineError","title":"VirtualMachineError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions in the VirtualMachine infrastructure.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.LayerID","title":"LayerID","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents the ID of a layer.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3","title":"Matrix3x3","text":"<p>3x3 Matrix used to apply 2D transformations to Vectors.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Return tag representing this matrix transform.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_translate","title":"new_translate  <code>classmethod</code>","text":"<pre><code>new_translate(x: Double, y: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new translation matrix.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_rotate","title":"new_rotate  <code>classmethod</code>","text":"<pre><code>new_rotate(angle: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new rotation matrix.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>Double</code>)           \u2013            <p>Rotation angle in degrees.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Matrix3x3</code>           \u2013            <p>New matrix instance.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_reflect","title":"new_reflect  <code>classmethod</code>","text":"<pre><code>new_reflect(*, x: bool, y: bool) -&gt; Matrix3x3\n</code></pre> <p>Create new reflection matrix.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Matrix3x3.new_scale","title":"new_scale  <code>classmethod</code>","text":"<pre><code>new_scale(x: Double, y: Double) -&gt; Self\n</code></pre> <p>Create new scaling matrix.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style","title":"Style","text":"<p>               Bases: <code>ModelType</code></p> <p>Style class represents colors which should be used for coloring rendered image layer.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets","title":"presets","text":"<p>               Bases: <code>Namespace</code></p> <p><code>Style.presets</code> contains predefined styles for convenience.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: Style\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: Style\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: Style\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: Style\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: Style\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: Style\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: Style\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: Style\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: Style\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: Style\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: Style\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.BLACK_WHITE","title":"BLACK_WHITE  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE: Style\n</code></pre> <p>Black and white color scheme.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.BLACK_WHITE_ALPHA","title":"BLACK_WHITE_ALPHA  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE_ALPHA: Style\n</code></pre> <p>Black and white color scheme with alpha channel.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Style.presets.get_styles","title":"get_styles  <code>classmethod</code>","text":"<pre><code>get_styles() -&gt; dict[str, Style]\n</code></pre> <p>Get list of all available styles.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector","title":"Vector","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents a point in cartesian coordinate space.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.xy","title":"xy  <code>property</code>","text":"<pre><code>xy: tuple[float, float]\n</code></pre> <p>Return point as tuple of Units.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.unit","title":"unit","text":"<p>               Bases: <code>Namespace</code></p> <p>Namespace containing unit vectors.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.from_tuple","title":"from_tuple  <code>classmethod</code>","text":"<pre><code>from_tuple(data: tuple[float, float]) -&gt; Self\n</code></pre> <p>Create a new point from a tuple.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Vector\n</code></pre> <p>Add two points.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Vector\n</code></pre> <p>Subtract two points.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__mul__","title":"__mul__","text":"<pre><code>__mul__(other: object) -&gt; Vector\n</code></pre> <p>Multiply two points.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(other: object) -&gt; Vector\n</code></pre> <p>Divide two points.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check if two points are equal.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than other point.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than other point.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than or equal to other point.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than or equal to other point.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.__neg__","title":"__neg__","text":"<pre><code>__neg__() -&gt; Vector\n</code></pre> <p>Negate vector values.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.angle_between","title":"angle_between","text":"<pre><code>angle_between(other: Vector) -&gt; float\n</code></pre> <p>Calculate clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> <p>self is the starting vector, other is the ending vector.</p> <p>from math import * s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1) e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1) s.angle_between(e) 90.0 e.angle_between(s) 270.0</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.angle_between_cc","title":"angle_between_cc","text":"<pre><code>angle_between_cc(other: Vector) -&gt; float\n</code></pre> <p>Calculate counter clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.normalized","title":"normalized","text":"<pre><code>normalized() -&gt; Vector\n</code></pre> <p>Return normalized (unit length) vector.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.length","title":"length","text":"<pre><code>length() -&gt; float\n</code></pre> <p>Return length of vector.</p>"},{"location":"reference/pygerber/vm/types/__init__.html#pygerber.vm.types.Vector.transform","title":"transform","text":"<pre><code>transform(matrix: Matrix3x3) -&gt; Vector\n</code></pre> <p>Transform vector by matrix.</p>"},{"location":"reference/pygerber/vm/types/box.html","title":"box","text":""},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box","title":"box","text":"<p><code>box</code> module contains definition of <code>Box</code> class used to represent 2D boxes.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box","title":"Box","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents a box in 2D space.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.from_vectors","title":"from_vectors  <code>classmethod</code>","text":"<pre><code>from_vectors(*vectors: Vector) -&gt; Self\n</code></pre> <p>Create a box from vectors.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.from_center_width_height","title":"from_center_width_height  <code>classmethod</code>","text":"<pre><code>from_center_width_height(\n    center: tuple[float, float], width: float, height: float\n) -&gt; Self\n</code></pre> <p>Create a box from center, width and height.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.width","title":"width","text":"<pre><code>width() -&gt; float\n</code></pre> <p>Get width of the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.height","title":"height","text":"<pre><code>height() -&gt; float\n</code></pre> <p>Get height of the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.center","title":"center","text":"<pre><code>center() -&gt; Vector\n</code></pre> <p>Get mean center of the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__iadd__","title":"__iadd__","text":"<pre><code>__iadd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__radd__","title":"__radd__","text":"<pre><code>__radd__(other: object) -&gt; Self\n</code></pre> <p>Add a vector to the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__isub__","title":"__isub__","text":"<pre><code>__isub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/box.html#pygerber.vm.types.box.Box.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other: object) -&gt; Self\n</code></pre> <p>Subtract a vector from the box.</p>"},{"location":"reference/pygerber/vm/types/color.html","title":"color","text":""},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color","title":"color","text":"<p>RGBA colors are used for declaring visuals of rendering output.</p> <p>This module contains RGBA class which can be used to provide such color.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.InvalidHexColorLiteralError","title":"InvalidHexColorLiteralError","text":"<p>               Bases: <code>ValueError</code></p> <p>Raised when invalid hexadecimal color literal is provided.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color","title":"Color","text":"<p>               Bases: <code>ModelType</code></p> <p>Color class represents a RGBA color.</p> <p>Channels are represented as integers in range 0 to 255.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.red","title":"red  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>red: ChannelType = ChannelField\n</code></pre> <p>Red channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.green","title":"green  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>green: ChannelType = ChannelField\n</code></pre> <p>Green channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.blue","title":"blue  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>blue: ChannelType = ChannelField\n</code></pre> <p>Blue channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.alpha","title":"alpha  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alpha: ChannelType = ChannelField\n</code></pre> <p>Alpha channel value.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(string: str) -&gt; Self\n</code></pre> <p>Build RGBA color object from hexadecimal string.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>String containing color value. Accepted formats are <code>RRGGBBAA</code> and <code>RRGGBB</code>. For latter, alpha value is assumed to be 0xFF. Formats are case insensitive. <code>#</code> symbol prefix for hex string is accepted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RGBA</code>           \u2013            <p>Color built from hexadecimal values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_rgba","title":"from_rgba  <code>classmethod</code>","text":"<pre><code>from_rgba(\n    red: int, green: int, blue: int, alpha: int = 255\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from reg, green, blue and alpha integer values.</p> <p>Parameters:</p> <ul> <li> <code>red</code>               (<code>int</code>)           \u2013            <p>Red chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>green</code>               (<code>int</code>)           \u2013            <p>Green chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>blue</code>               (<code>int</code>)           \u2013            <p>Blue chanel value as integer from 0 to 255, inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha chanel value as integer from 0 to 255, inclusive., by default 0xFF</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from r, g, b, a values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    hue: int,\n    saturation: float,\n    value: float,\n    alpha: int = 255,\n) -&gt; Self\n</code></pre> <p>Build RGBA color object from hue, saturation, value and alpha.</p> <p>For extended information refer to Wikipedia: https://en.wikipedia.org/wiki/HSL_and_HSV</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Hue of color, integer in range 0 to 360 inclusive.</p> </li> <li> <code>saturation</code>               (<code>float</code>)           \u2013            <p>Saturation of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Value of color, float in range 0.0 to 100.0 inclusive.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>255</code> )           \u2013            <p>Alpha of color, int in range 0 to 255 inclusive.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Color built from h, s, v, a values.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgba_int","title":"as_rgba_int","text":"<pre><code>as_rgba_int() -&gt; tuple[int, int, int, int]\n</code></pre> <p>Return RGBA color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgb_int","title":"as_rgb_int","text":"<pre><code>as_rgb_int() -&gt; tuple[int, int, int]\n</code></pre> <p>Return RGB color as tuple of integers in range 0 to 255 inclusive.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.as_rgba_float","title":"as_rgba_float","text":"<pre><code>as_rgba_float() -&gt; tuple[float, float, float, float]\n</code></pre> <p>Return RGBA color as tuple of floats in range 0.0 to 1.0 inclusive.</p>"},{"location":"reference/pygerber/vm/types/color.html#pygerber.vm.types.color.Color.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Return color as hexadecimal string.</p> <p>Eg. <code>#FF0000FF</code> for red color.</p>"},{"location":"reference/pygerber/vm/types/errors.html","title":"errors","text":""},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors","title":"errors","text":"<p><code>errors</code> module aggregates all generic exceptions related to the VirtualMachine infrastructure.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.VirtualMachineError","title":"VirtualMachineError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions in the VirtualMachine infrastructure.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.NoMainLayerError","title":"NoMainLayerError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when no main layer was created by executing RVMC.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.EmptyAutoSizedLayerNotAllowedError","title":"EmptyAutoSizedLayerNotAllowedError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when an empty AutoSizedLayer is attempted to be created.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.NoLayerSetError","title":"NoLayerSetError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when no layer was set prior to drawing shapes.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.LayerNotFoundError","title":"LayerNotFoundError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID was not found during paste operation.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.LayerAlreadyExistsError","title":"LayerAlreadyExistsError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when layer with given ID already exists during create operation.</p>"},{"location":"reference/pygerber/vm/types/errors.html#pygerber.vm.types.errors.PasteDeferredLayerNotAllowedError","title":"PasteDeferredLayerNotAllowedError","text":"<p>               Bases: <code>VirtualMachineError</code></p> <p>Raised when deferred layer is attempted to be pasted into other layer.</p>"},{"location":"reference/pygerber/vm/types/layer_id.html","title":"layer_id","text":""},{"location":"reference/pygerber/vm/types/layer_id.html#pygerber.vm.types.layer_id","title":"layer_id","text":"<p><code>layer_id</code> module contains definition of <code>LayerID</code> class used to identify image layers in <code>VirtualMachine</code> classes.</p>"},{"location":"reference/pygerber/vm/types/layer_id.html#pygerber.vm.types.layer_id.LayerID","title":"LayerID","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents the ID of a layer.</p>"},{"location":"reference/pygerber/vm/types/matrix.html","title":"matrix","text":""},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix","title":"matrix","text":"<p><code>matrix</code> module contains specialized implementation of 3x3 Matrix used to apply 2D transformations to Vectors.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3","title":"Matrix3x3","text":"<p>3x3 Matrix used to apply 2D transformations to Vectors.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>Return tag representing this matrix transform.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_translate","title":"new_translate  <code>classmethod</code>","text":"<pre><code>new_translate(x: Double, y: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new translation matrix.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_rotate","title":"new_rotate  <code>classmethod</code>","text":"<pre><code>new_rotate(angle: Double) -&gt; Matrix3x3\n</code></pre> <p>Create new rotation matrix.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>Double</code>)           \u2013            <p>Rotation angle in degrees.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Matrix3x3</code>           \u2013            <p>New matrix instance.</p> </li> </ul>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_reflect","title":"new_reflect  <code>classmethod</code>","text":"<pre><code>new_reflect(*, x: bool, y: bool) -&gt; Matrix3x3\n</code></pre> <p>Create new reflection matrix.</p>"},{"location":"reference/pygerber/vm/types/matrix.html#pygerber.vm.types.matrix.Matrix3x3.new_scale","title":"new_scale  <code>classmethod</code>","text":"<pre><code>new_scale(x: Double, y: Double) -&gt; Self\n</code></pre> <p>Create new scaling matrix.</p>"},{"location":"reference/pygerber/vm/types/model.html","title":"model","text":""},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model","title":"model","text":"<p><code>model</code> module definition of common base class for all <code>VirtualMachine</code> related model types.</p>"},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model.ModelType","title":"ModelType","text":"<p>               Bases: <code>BaseModel</code></p> <p>Common base class for all VM model types.</p>"},{"location":"reference/pygerber/vm/types/model.html#pygerber.vm.types.model.ModelType.__class_qualname__","title":"__class_qualname__  <code>property</code>","text":"<pre><code>__class_qualname__: str\n</code></pre> <p>Name of class.</p>"},{"location":"reference/pygerber/vm/types/style.html","title":"style","text":""},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style","title":"style","text":"<p><code>style</code> module contains <code>Style</code> class which represents colors of rendered image.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style","title":"Style","text":"<p>               Bases: <code>ModelType</code></p> <p>Style class represents colors which should be used for coloring rendered image layer.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets","title":"presets","text":"<p>               Bases: <code>Namespace</code></p> <p><code>Style.presets</code> contains predefined styles for convenience.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SILK","title":"SILK  <code>class-attribute</code>","text":"<pre><code>SILK: Style\n</code></pre> <p>Default color of silk layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SILK_ALPHA","title":"SILK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SILK_ALPHA: Style\n</code></pre> <p>Default color of silk layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.COPPER","title":"COPPER  <code>class-attribute</code>","text":"<pre><code>COPPER: Style\n</code></pre> <p>Default color of copper layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.COPPER_ALPHA","title":"COPPER_ALPHA  <code>class-attribute</code>","text":"<pre><code>COPPER_ALPHA: Style\n</code></pre> <p>Default color of copper layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.PASTE_MASK","title":"PASTE_MASK  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK: Style\n</code></pre> <p>Default color of paste mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.PASTE_MASK_ALPHA","title":"PASTE_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>PASTE_MASK_ALPHA: Style\n</code></pre> <p>Default color of paste mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SOLDER_MASK","title":"SOLDER_MASK  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK: Style\n</code></pre> <p>Default color of solder mask layer.</p> <p>This schema provided non-transparent background, which results in images which can not be used for stacking on top of other layers, as they would completely obscure them.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.SOLDER_MASK_ALPHA","title":"SOLDER_MASK_ALPHA  <code>class-attribute</code>","text":"<pre><code>SOLDER_MASK_ALPHA: Style\n</code></pre> <p>Default color of solder mask layer with alpha channel.</p> <p>This schema provides transparent background. Images using this schema can be stacked on top of each other without obscuring layers below.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEFAULT_GRAYSCALE","title":"DEFAULT_GRAYSCALE  <code>class-attribute</code>","text":"<pre><code>DEFAULT_GRAYSCALE: Style\n</code></pre> <p>Default color scheme for files which were not assigned other color scheme.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEBUG_1","title":"DEBUG_1  <code>class-attribute</code>","text":"<pre><code>DEBUG_1: Style\n</code></pre> <p>Debug color scheme.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.DEBUG_1_ALPHA","title":"DEBUG_1_ALPHA  <code>class-attribute</code>","text":"<pre><code>DEBUG_1_ALPHA: Style\n</code></pre> <p>Debug color scheme with alpha channel.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.BLACK_WHITE","title":"BLACK_WHITE  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE: Style\n</code></pre> <p>Black and white color scheme.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.BLACK_WHITE_ALPHA","title":"BLACK_WHITE_ALPHA  <code>class-attribute</code>","text":"<pre><code>BLACK_WHITE_ALPHA: Style\n</code></pre> <p>Black and white color scheme with alpha channel.</p>"},{"location":"reference/pygerber/vm/types/style.html#pygerber.vm.types.style.Style.presets.get_styles","title":"get_styles  <code>classmethod</code>","text":"<pre><code>get_styles() -&gt; dict[str, Style]\n</code></pre> <p>Get list of all available styles.</p>"},{"location":"reference/pygerber/vm/types/vector.html","title":"vector","text":""},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector","title":"vector","text":"<p><code>vector</code> module contains <code>Vector</code> class used to represent 2D coordinates.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector","title":"Vector","text":"<p>               Bases: <code>ModelType</code></p> <p>Represents a point in cartesian coordinate space.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.xy","title":"xy  <code>property</code>","text":"<pre><code>xy: tuple[float, float]\n</code></pre> <p>Return point as tuple of Units.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.unit","title":"unit","text":"<p>               Bases: <code>Namespace</code></p> <p>Namespace containing unit vectors.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.from_tuple","title":"from_tuple  <code>classmethod</code>","text":"<pre><code>from_tuple(data: tuple[float, float]) -&gt; Self\n</code></pre> <p>Create a new point from a tuple.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__add__","title":"__add__","text":"<pre><code>__add__(other: object) -&gt; Vector\n</code></pre> <p>Add two points.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: object) -&gt; Vector\n</code></pre> <p>Subtract two points.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__mul__","title":"__mul__","text":"<pre><code>__mul__(other: object) -&gt; Vector\n</code></pre> <p>Multiply two points.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(other: object) -&gt; Vector\n</code></pre> <p>Divide two points.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Check if two points are equal.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than other point.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than other point.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre> <p>Check if point is greater than or equal to other point.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre> <p>Check if point is less than or equal to other point.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.__neg__","title":"__neg__","text":"<pre><code>__neg__() -&gt; Vector\n</code></pre> <p>Negate vector values.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.angle_between","title":"angle_between","text":"<pre><code>angle_between(other: Vector) -&gt; float\n</code></pre> <p>Calculate clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p> <p>self is the starting vector, other is the ending vector.</p> <p>from math import * s = Vector(x=sin(pi / 4) * 1, y=-sin(pi / 4) * 1) e = Vector(x=-sin(pi / 4) * 1, y=-sin(pi / 4) * 1) s.angle_between(e) 90.0 e.angle_between(s) 270.0</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.angle_between_cc","title":"angle_between_cc","text":"<pre><code>angle_between_cc(other: Vector) -&gt; float\n</code></pre> <p>Calculate counter clockwise angle between two vectors in degrees.</p> <p>Value returned is always between 0 and 360 (can be 0, never 360).</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.normalized","title":"normalized","text":"<pre><code>normalized() -&gt; Vector\n</code></pre> <p>Return normalized (unit length) vector.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.length","title":"length","text":"<pre><code>length() -&gt; float\n</code></pre> <p>Return length of vector.</p>"},{"location":"reference/pygerber/vm/types/vector.html#pygerber.vm.types.vector.Vector.transform","title":"transform","text":"<pre><code>transform(matrix: Matrix3x3) -&gt; Vector\n</code></pre> <p>Transform vector by matrix.</p>"}]}